(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[]]);!function(n){function e(e){for(var r,o,s=e[0],c=e[1],l=e[2],u=0,p=[];u<s.length;u++)o=s[u],Object.prototype.hasOwnProperty.call(a,o)&&a[o]&&p.push(a[o][0]),a[o]=0;for(r in c)Object.prototype.hasOwnProperty.call(c,r)&&(n[r]=c[r]);for(d&&d(e);p.length;)p.shift()();return i.push.apply(i,l||[]),t()}function t(){for(var n,e=0;e<i.length;e++){for(var t=i[e],r=!0,s=1;s<t.length;s++){var c=t[s];0!==a[c]&&(r=!1)}r&&(i.splice(e--,1),n=o(o.s=t[0]))}return n}var r={},a={2:0},i=[];function o(e){if(r[e])return r[e].exports;var t=r[e]={i:e,l:!1,exports:{}};return n[e].call(t.exports,t,t.exports,o),t.l=!0,t.exports}o.e=function(n){var e=[],t=a[n];if(0!==t)if(t)e.push(t[2]);else{var r=new Promise((function(e,r){t=a[n]=[e,r]}));e.push(t[2]=r);var i,s=document.createElement("script");s.charset="utf-8",s.timeout=120,o.nc&&s.setAttribute("nonce",o.nc),s.src=function(n){return o.p+"assets/js/"+({3:"vendors~aplayer",4:"vendors~artplayer",5:"vendors~dash",6:"vendors~dplayer",7:"vendors~hls",8:"vendors~mpegts",9:"vendors~shaka-player",10:"vendors~webtorrent"}[n]||n)+"."+{1:"2068c1db",3:"ef69e8c8",4:"9f457d6b",5:"c779a1b8",6:"008e957a",7:"18d1f653",8:"02ab45df",9:"f723bd71",10:"271bb3b6",11:"8f8d8c94",12:"a86359d8",13:"f9165900",14:"5bcc0334",15:"daa60dcc",16:"2ef6dce7",17:"8c318acc",18:"7f4f6ced",19:"7a274e56",20:"cc7484e4",21:"8f4f04c1",22:"8e03dbef",23:"ae5d7b1a",24:"a07e377d",25:"ae45a243",26:"292813ba",27:"b5422518",28:"5b569d05",29:"e406c2e9",30:"0eba634f",31:"4f67e3d8",32:"9e0293ef",33:"7c756595",34:"335b4f17",35:"01786aab",36:"f2070bed",37:"7c70043c",38:"303adcdf",39:"39b0a121",40:"27cf0425",41:"60cc5ac0",42:"48c15345",43:"836eadb6",44:"f83a74c1",45:"1325bd73",46:"26125c7a",47:"d8603164",48:"6a5f1eab",49:"2d88e192",50:"e1d6d683",51:"5204c164",52:"890170b0",53:"7d5218da",54:"081d6d8a",55:"9193e648",56:"c283c363",57:"36ca963e",58:"ca50e853",59:"1dfc405f",60:"a6aafe70",61:"35b09da6",62:"d9905bc4",63:"f502a4a5",64:"63cb0948",65:"15922937",66:"0f2a61bf",67:"b9bb6554",68:"c993ab07",69:"16e4d5cd",70:"453a604a",71:"57070527",72:"7edf97b7",73:"cb826c97",74:"f40761ed",75:"a8fde850",76:"71255e54",77:"de20ce37",78:"91afa182",79:"5ec162b8",80:"81ba4a79",81:"dd9dad97",82:"5d12f510",83:"14bee419",84:"f01335e5"}[n]+".js"}(n);var c=new Error;i=function(e){s.onerror=s.onload=null,clearTimeout(l);var t=a[n];if(0!==t){if(t){var r=e&&("load"===e.type?"missing":e.type),i=e&&e.target&&e.target.src;c.message="Loading chunk "+n+" failed.\n("+r+": "+i+")",c.name="ChunkLoadError",c.type=r,c.request=i,t[1](c)}a[n]=void 0}};var l=setTimeout((function(){i({type:"timeout",target:s})}),12e4);s.onerror=s.onload=i,document.head.appendChild(s)}return Promise.all(e)},o.m=n,o.c=r,o.d=function(n,e,t){o.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},o.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},o.t=function(n,e){if(1&e&&(n=o(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var r in n)o.d(t,r,function(e){return n[e]}.bind(null,r));return t},o.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return o.d(e,"a",e),e},o.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},o.p="/",o.oe=function(n){throw console.error(n),n};var s=window.webpackJsonp=window.webpackJsonp||[],c=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var d=c;i.push([267,0]),t()}([function(n,e,t){"use strict";t.r(e),function(n){
/*!
 * Vue.js v2.6.14
 * (c) 2014-2021 Evan You
 * Released under the MIT License.
 */
var t=Object.freeze({});function r(n){return null==n}function a(n){return null!=n}function i(n){return!0===n}function o(n){return"string"==typeof n||"number"==typeof n||"symbol"==typeof n||"boolean"==typeof n}function s(n){return null!==n&&"object"==typeof n}var c=Object.prototype.toString;function l(n){return"[object Object]"===c.call(n)}function d(n){return"[object RegExp]"===c.call(n)}function u(n){var e=parseFloat(String(n));return e>=0&&Math.floor(e)===e&&isFinite(n)}function p(n){return a(n)&&"function"==typeof n.then&&"function"==typeof n.catch}function f(n){return null==n?"":Array.isArray(n)||l(n)&&n.toString===c?JSON.stringify(n,null,2):String(n)}function m(n){var e=parseFloat(n);return isNaN(e)?n:e}function h(n,e){for(var t=Object.create(null),r=n.split(","),a=0;a<r.length;a++)t[r[a]]=!0;return e?function(n){return t[n.toLowerCase()]}:function(n){return t[n]}}h("slot,component",!0);var v=h("key,ref,slot,slot-scope,is");function g(n,e){if(n.length){var t=n.indexOf(e);if(t>-1)return n.splice(t,1)}}var b=Object.prototype.hasOwnProperty;function T(n,e){return b.call(n,e)}function y(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var C=/-(\w)/g,w=y((function(n){return n.replace(C,(function(n,e){return e?e.toUpperCase():""}))})),S=y((function(n){return n.charAt(0).toUpperCase()+n.slice(1)})),A=/\B([A-Z])/g,R=y((function(n){return n.replace(A,"-$1").toLowerCase()}));var P=Function.prototype.bind?function(n,e){return n.bind(e)}:function(n,e){function t(t){var r=arguments.length;return r?r>1?n.apply(e,arguments):n.call(e,t):n.call(e)}return t._length=n.length,t};function x(n,e){e=e||0;for(var t=n.length-e,r=new Array(t);t--;)r[t]=n[t+e];return r}function I(n,e){for(var t in e)n[t]=e[t];return n}function k(n){for(var e={},t=0;t<n.length;t++)n[t]&&I(e,n[t]);return e}function N(n,e,t){}var _=function(n,e,t){return!1},E=function(n){return n};function D(n,e){if(n===e)return!0;var t=s(n),r=s(e);if(!t||!r)return!t&&!r&&String(n)===String(e);try{var a=Array.isArray(n),i=Array.isArray(e);if(a&&i)return n.length===e.length&&n.every((function(n,t){return D(n,e[t])}));if(n instanceof Date&&e instanceof Date)return n.getTime()===e.getTime();if(a||i)return!1;var o=Object.keys(n),c=Object.keys(e);return o.length===c.length&&o.every((function(t){return D(n[t],e[t])}))}catch(n){return!1}}function O(n,e){for(var t=0;t<n.length;t++)if(D(n[t],e))return t;return-1}function U(n){var e=!1;return function(){e||(e=!0,n.apply(this,arguments))}}var j=["component","directive","filter"],M=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],B={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!1,devtools:!1,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:_,isReservedAttr:_,isUnknownElement:_,getTagNamespace:N,parsePlatformTagName:E,mustUseProp:_,async:!0,_lifecycleHooks:M},L=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function z(n,e,t,r){Object.defineProperty(n,e,{value:t,enumerable:!!r,writable:!0,configurable:!0})}var F=new RegExp("[^"+L.source+".$_\\d]");var W,q="__proto__"in{},$="undefined"!=typeof window,G="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,V=G&&WXEnvironment.platform.toLowerCase(),H=$&&window.navigator.userAgent.toLowerCase(),Y=H&&/msie|trident/.test(H),X=H&&H.indexOf("msie 9.0")>0,Z=H&&H.indexOf("edge/")>0,J=(H&&H.indexOf("android"),H&&/iphone|ipad|ipod|ios/.test(H)||"ios"===V),K=(H&&/chrome\/\d+/.test(H),H&&/phantomjs/.test(H),H&&H.match(/firefox\/(\d+)/)),Q={}.watch,nn=!1;if($)try{var en={};Object.defineProperty(en,"passive",{get:function(){nn=!0}}),window.addEventListener("test-passive",null,en)}catch(n){}var tn=function(){return void 0===W&&(W=!$&&!G&&void 0!==n&&(n.process&&"server"===n.process.env.VUE_ENV)),W},rn=$&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function an(n){return"function"==typeof n&&/native code/.test(n.toString())}var on,sn="undefined"!=typeof Symbol&&an(Symbol)&&"undefined"!=typeof Reflect&&an(Reflect.ownKeys);on="undefined"!=typeof Set&&an(Set)?Set:function(){function n(){this.set=Object.create(null)}return n.prototype.has=function(n){return!0===this.set[n]},n.prototype.add=function(n){this.set[n]=!0},n.prototype.clear=function(){this.set=Object.create(null)},n}();var cn=N,ln=0,dn=function(){this.id=ln++,this.subs=[]};dn.prototype.addSub=function(n){this.subs.push(n)},dn.prototype.removeSub=function(n){g(this.subs,n)},dn.prototype.depend=function(){dn.target&&dn.target.addDep(this)},dn.prototype.notify=function(){var n=this.subs.slice();for(var e=0,t=n.length;e<t;e++)n[e].update()},dn.target=null;var un=[];function pn(n){un.push(n),dn.target=n}function fn(){un.pop(),dn.target=un[un.length-1]}var mn=function(n,e,t,r,a,i,o,s){this.tag=n,this.data=e,this.children=t,this.text=r,this.elm=a,this.ns=void 0,this.context=i,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},hn={child:{configurable:!0}};hn.child.get=function(){return this.componentInstance},Object.defineProperties(mn.prototype,hn);var vn=function(n){void 0===n&&(n="");var e=new mn;return e.text=n,e.isComment=!0,e};function gn(n){return new mn(void 0,void 0,void 0,String(n))}function bn(n){var e=new mn(n.tag,n.data,n.children&&n.children.slice(),n.text,n.elm,n.context,n.componentOptions,n.asyncFactory);return e.ns=n.ns,e.isStatic=n.isStatic,e.key=n.key,e.isComment=n.isComment,e.fnContext=n.fnContext,e.fnOptions=n.fnOptions,e.fnScopeId=n.fnScopeId,e.asyncMeta=n.asyncMeta,e.isCloned=!0,e}var Tn=Array.prototype,yn=Object.create(Tn);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(n){var e=Tn[n];z(yn,n,(function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];var a,i=e.apply(this,t),o=this.__ob__;switch(n){case"push":case"unshift":a=t;break;case"splice":a=t.slice(2)}return a&&o.observeArray(a),o.dep.notify(),i}))}));var Cn=Object.getOwnPropertyNames(yn),wn=!0;function Sn(n){wn=n}var An=function(n){this.value=n,this.dep=new dn,this.vmCount=0,z(n,"__ob__",this),Array.isArray(n)?(q?function(n,e){n.__proto__=e}(n,yn):function(n,e,t){for(var r=0,a=t.length;r<a;r++){var i=t[r];z(n,i,e[i])}}(n,yn,Cn),this.observeArray(n)):this.walk(n)};function Rn(n,e){var t;if(s(n)&&!(n instanceof mn))return T(n,"__ob__")&&n.__ob__ instanceof An?t=n.__ob__:wn&&!tn()&&(Array.isArray(n)||l(n))&&Object.isExtensible(n)&&!n._isVue&&(t=new An(n)),e&&t&&t.vmCount++,t}function Pn(n,e,t,r,a){var i=new dn,o=Object.getOwnPropertyDescriptor(n,e);if(!o||!1!==o.configurable){var s=o&&o.get,c=o&&o.set;s&&!c||2!==arguments.length||(t=n[e]);var l=!a&&Rn(t);Object.defineProperty(n,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(n):t;return dn.target&&(i.depend(),l&&(l.dep.depend(),Array.isArray(e)&&kn(e))),e},set:function(e){var r=s?s.call(n):t;e===r||e!=e&&r!=r||s&&!c||(c?c.call(n,e):t=e,l=!a&&Rn(e),i.notify())}})}}function xn(n,e,t){if(Array.isArray(n)&&u(e))return n.length=Math.max(n.length,e),n.splice(e,1,t),t;if(e in n&&!(e in Object.prototype))return n[e]=t,t;var r=n.__ob__;return n._isVue||r&&r.vmCount?t:r?(Pn(r.value,e,t),r.dep.notify(),t):(n[e]=t,t)}function In(n,e){if(Array.isArray(n)&&u(e))n.splice(e,1);else{var t=n.__ob__;n._isVue||t&&t.vmCount||T(n,e)&&(delete n[e],t&&t.dep.notify())}}function kn(n){for(var e=void 0,t=0,r=n.length;t<r;t++)(e=n[t])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&kn(e)}An.prototype.walk=function(n){for(var e=Object.keys(n),t=0;t<e.length;t++)Pn(n,e[t])},An.prototype.observeArray=function(n){for(var e=0,t=n.length;e<t;e++)Rn(n[e])};var Nn=B.optionMergeStrategies;function _n(n,e){if(!e)return n;for(var t,r,a,i=sn?Reflect.ownKeys(e):Object.keys(e),o=0;o<i.length;o++)"__ob__"!==(t=i[o])&&(r=n[t],a=e[t],T(n,t)?r!==a&&l(r)&&l(a)&&_n(r,a):xn(n,t,a));return n}function En(n,e,t){return t?function(){var r="function"==typeof e?e.call(t,t):e,a="function"==typeof n?n.call(t,t):n;return r?_n(r,a):a}:e?n?function(){return _n("function"==typeof e?e.call(this,this):e,"function"==typeof n?n.call(this,this):n)}:e:n}function Dn(n,e){var t=e?n?n.concat(e):Array.isArray(e)?e:[e]:n;return t?function(n){for(var e=[],t=0;t<n.length;t++)-1===e.indexOf(n[t])&&e.push(n[t]);return e}(t):t}function On(n,e,t,r){var a=Object.create(n||null);return e?I(a,e):a}Nn.data=function(n,e,t){return t?En(n,e,t):e&&"function"!=typeof e?n:En(n,e)},M.forEach((function(n){Nn[n]=Dn})),j.forEach((function(n){Nn[n+"s"]=On})),Nn.watch=function(n,e,t,r){if(n===Q&&(n=void 0),e===Q&&(e=void 0),!e)return Object.create(n||null);if(!n)return e;var a={};for(var i in I(a,n),e){var o=a[i],s=e[i];o&&!Array.isArray(o)&&(o=[o]),a[i]=o?o.concat(s):Array.isArray(s)?s:[s]}return a},Nn.props=Nn.methods=Nn.inject=Nn.computed=function(n,e,t,r){if(!n)return e;var a=Object.create(null);return I(a,n),e&&I(a,e),a},Nn.provide=En;var Un=function(n,e){return void 0===e?n:e};function jn(n,e,t){if("function"==typeof e&&(e=e.options),function(n,e){var t=n.props;if(t){var r,a,i={};if(Array.isArray(t))for(r=t.length;r--;)"string"==typeof(a=t[r])&&(i[w(a)]={type:null});else if(l(t))for(var o in t)a=t[o],i[w(o)]=l(a)?a:{type:a};else 0;n.props=i}}(e),function(n,e){var t=n.inject;if(t){var r=n.inject={};if(Array.isArray(t))for(var a=0;a<t.length;a++)r[t[a]]={from:t[a]};else if(l(t))for(var i in t){var o=t[i];r[i]=l(o)?I({from:i},o):{from:o}}else 0}}(e),function(n){var e=n.directives;if(e)for(var t in e){var r=e[t];"function"==typeof r&&(e[t]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(n=jn(n,e.extends,t)),e.mixins))for(var r=0,a=e.mixins.length;r<a;r++)n=jn(n,e.mixins[r],t);var i,o={};for(i in n)s(i);for(i in e)T(n,i)||s(i);function s(r){var a=Nn[r]||Un;o[r]=a(n[r],e[r],t,r)}return o}function Mn(n,e,t,r){if("string"==typeof t){var a=n[e];if(T(a,t))return a[t];var i=w(t);if(T(a,i))return a[i];var o=S(i);return T(a,o)?a[o]:a[t]||a[i]||a[o]}}function Bn(n,e,t,r){var a=e[n],i=!T(t,n),o=t[n],s=Wn(Boolean,a.type);if(s>-1)if(i&&!T(a,"default"))o=!1;else if(""===o||o===R(n)){var c=Wn(String,a.type);(c<0||s<c)&&(o=!0)}if(void 0===o){o=function(n,e,t){if(!T(e,"default"))return;var r=e.default;0;if(n&&n.$options.propsData&&void 0===n.$options.propsData[t]&&void 0!==n._props[t])return n._props[t];return"function"==typeof r&&"Function"!==zn(e.type)?r.call(n):r}(r,a,n);var l=wn;Sn(!0),Rn(o),Sn(l)}return o}var Ln=/^\s*function (\w+)/;function zn(n){var e=n&&n.toString().match(Ln);return e?e[1]:""}function Fn(n,e){return zn(n)===zn(e)}function Wn(n,e){if(!Array.isArray(e))return Fn(e,n)?0:-1;for(var t=0,r=e.length;t<r;t++)if(Fn(e[t],n))return t;return-1}function qn(n,e,t){pn();try{if(e)for(var r=e;r=r.$parent;){var a=r.$options.errorCaptured;if(a)for(var i=0;i<a.length;i++)try{if(!1===a[i].call(r,n,e,t))return}catch(n){Gn(n,r,"errorCaptured hook")}}Gn(n,e,t)}finally{fn()}}function $n(n,e,t,r,a){var i;try{(i=t?n.apply(e,t):n.call(e))&&!i._isVue&&p(i)&&!i._handled&&(i.catch((function(n){return qn(n,r,a+" (Promise/async)")})),i._handled=!0)}catch(n){qn(n,r,a)}return i}function Gn(n,e,t){if(B.errorHandler)try{return B.errorHandler.call(null,n,e,t)}catch(e){e!==n&&Vn(e,null,"config.errorHandler")}Vn(n,e,t)}function Vn(n,e,t){if(!$&&!G||"undefined"==typeof console)throw n;console.error(n)}var Hn,Yn=!1,Xn=[],Zn=!1;function Jn(){Zn=!1;var n=Xn.slice(0);Xn.length=0;for(var e=0;e<n.length;e++)n[e]()}if("undefined"!=typeof Promise&&an(Promise)){var Kn=Promise.resolve();Hn=function(){Kn.then(Jn),J&&setTimeout(N)},Yn=!0}else if(Y||"undefined"==typeof MutationObserver||!an(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Hn="undefined"!=typeof setImmediate&&an(setImmediate)?function(){setImmediate(Jn)}:function(){setTimeout(Jn,0)};else{var Qn=1,ne=new MutationObserver(Jn),ee=document.createTextNode(String(Qn));ne.observe(ee,{characterData:!0}),Hn=function(){Qn=(Qn+1)%2,ee.data=String(Qn)},Yn=!0}function te(n,e){var t;if(Xn.push((function(){if(n)try{n.call(e)}catch(n){qn(n,e,"nextTick")}else t&&t(e)})),Zn||(Zn=!0,Hn()),!n&&"undefined"!=typeof Promise)return new Promise((function(n){t=n}))}var re=new on;function ae(n){!function n(e,t){var r,a,i=Array.isArray(e);if(!i&&!s(e)||Object.isFrozen(e)||e instanceof mn)return;if(e.__ob__){var o=e.__ob__.dep.id;if(t.has(o))return;t.add(o)}if(i)for(r=e.length;r--;)n(e[r],t);else for(a=Object.keys(e),r=a.length;r--;)n(e[a[r]],t)}(n,re),re.clear()}var ie=y((function(n){var e="&"===n.charAt(0),t="~"===(n=e?n.slice(1):n).charAt(0),r="!"===(n=t?n.slice(1):n).charAt(0);return{name:n=r?n.slice(1):n,once:t,capture:r,passive:e}}));function oe(n,e){function t(){var n=arguments,r=t.fns;if(!Array.isArray(r))return $n(r,null,arguments,e,"v-on handler");for(var a=r.slice(),i=0;i<a.length;i++)$n(a[i],null,n,e,"v-on handler")}return t.fns=n,t}function se(n,e,t,a,o,s){var c,l,d,u;for(c in n)l=n[c],d=e[c],u=ie(c),r(l)||(r(d)?(r(l.fns)&&(l=n[c]=oe(l,s)),i(u.once)&&(l=n[c]=o(u.name,l,u.capture)),t(u.name,l,u.capture,u.passive,u.params)):l!==d&&(d.fns=l,n[c]=d));for(c in e)r(n[c])&&a((u=ie(c)).name,e[c],u.capture)}function ce(n,e,t){var o;n instanceof mn&&(n=n.data.hook||(n.data.hook={}));var s=n[e];function c(){t.apply(this,arguments),g(o.fns,c)}r(s)?o=oe([c]):a(s.fns)&&i(s.merged)?(o=s).fns.push(c):o=oe([s,c]),o.merged=!0,n[e]=o}function le(n,e,t,r,i){if(a(e)){if(T(e,t))return n[t]=e[t],i||delete e[t],!0;if(T(e,r))return n[t]=e[r],i||delete e[r],!0}return!1}function de(n){return o(n)?[gn(n)]:Array.isArray(n)?function n(e,t){var s,c,l,d,u=[];for(s=0;s<e.length;s++)r(c=e[s])||"boolean"==typeof c||(l=u.length-1,d=u[l],Array.isArray(c)?c.length>0&&(ue((c=n(c,(t||"")+"_"+s))[0])&&ue(d)&&(u[l]=gn(d.text+c[0].text),c.shift()),u.push.apply(u,c)):o(c)?ue(d)?u[l]=gn(d.text+c):""!==c&&u.push(gn(c)):ue(c)&&ue(d)?u[l]=gn(d.text+c.text):(i(e._isVList)&&a(c.tag)&&r(c.key)&&a(t)&&(c.key="__vlist"+t+"_"+s+"__"),u.push(c)));return u}(n):void 0}function ue(n){return a(n)&&a(n.text)&&!1===n.isComment}function pe(n,e){if(n){for(var t=Object.create(null),r=sn?Reflect.ownKeys(n):Object.keys(n),a=0;a<r.length;a++){var i=r[a];if("__ob__"!==i){for(var o=n[i].from,s=e;s;){if(s._provided&&T(s._provided,o)){t[i]=s._provided[o];break}s=s.$parent}if(!s)if("default"in n[i]){var c=n[i].default;t[i]="function"==typeof c?c.call(e):c}else 0}}return t}}function fe(n,e){if(!n||!n.length)return{};for(var t={},r=0,a=n.length;r<a;r++){var i=n[r],o=i.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,i.context!==e&&i.fnContext!==e||!o||null==o.slot)(t.default||(t.default=[])).push(i);else{var s=o.slot,c=t[s]||(t[s]=[]);"template"===i.tag?c.push.apply(c,i.children||[]):c.push(i)}}for(var l in t)t[l].every(me)&&delete t[l];return t}function me(n){return n.isComment&&!n.asyncFactory||" "===n.text}function he(n){return n.isComment&&n.asyncFactory}function ve(n,e,r){var a,i=Object.keys(e).length>0,o=n?!!n.$stable:!i,s=n&&n.$key;if(n){if(n._normalized)return n._normalized;if(o&&r&&r!==t&&s===r.$key&&!i&&!r.$hasNormal)return r;for(var c in a={},n)n[c]&&"$"!==c[0]&&(a[c]=ge(e,c,n[c]))}else a={};for(var l in e)l in a||(a[l]=be(e,l));return n&&Object.isExtensible(n)&&(n._normalized=a),z(a,"$stable",o),z(a,"$key",s),z(a,"$hasNormal",i),a}function ge(n,e,t){var r=function(){var n=arguments.length?t.apply(null,arguments):t({}),e=(n=n&&"object"==typeof n&&!Array.isArray(n)?[n]:de(n))&&n[0];return n&&(!e||1===n.length&&e.isComment&&!he(e))?void 0:n};return t.proxy&&Object.defineProperty(n,e,{get:r,enumerable:!0,configurable:!0}),r}function be(n,e){return function(){return n[e]}}function Te(n,e){var t,r,i,o,c;if(Array.isArray(n)||"string"==typeof n)for(t=new Array(n.length),r=0,i=n.length;r<i;r++)t[r]=e(n[r],r);else if("number"==typeof n)for(t=new Array(n),r=0;r<n;r++)t[r]=e(r+1,r);else if(s(n))if(sn&&n[Symbol.iterator]){t=[];for(var l=n[Symbol.iterator](),d=l.next();!d.done;)t.push(e(d.value,t.length)),d=l.next()}else for(o=Object.keys(n),t=new Array(o.length),r=0,i=o.length;r<i;r++)c=o[r],t[r]=e(n[c],c,r);return a(t)||(t=[]),t._isVList=!0,t}function ye(n,e,t,r){var a,i=this.$scopedSlots[n];i?(t=t||{},r&&(t=I(I({},r),t)),a=i(t)||("function"==typeof e?e():e)):a=this.$slots[n]||("function"==typeof e?e():e);var o=t&&t.slot;return o?this.$createElement("template",{slot:o},a):a}function Ce(n){return Mn(this.$options,"filters",n)||E}function we(n,e){return Array.isArray(n)?-1===n.indexOf(e):n!==e}function Se(n,e,t,r,a){var i=B.keyCodes[e]||t;return a&&r&&!B.keyCodes[e]?we(a,r):i?we(i,n):r?R(r)!==e:void 0===n}function Ae(n,e,t,r,a){if(t)if(s(t)){var i;Array.isArray(t)&&(t=k(t));var o=function(o){if("class"===o||"style"===o||v(o))i=n;else{var s=n.attrs&&n.attrs.type;i=r||B.mustUseProp(e,s,o)?n.domProps||(n.domProps={}):n.attrs||(n.attrs={})}var c=w(o),l=R(o);c in i||l in i||(i[o]=t[o],a&&((n.on||(n.on={}))["update:"+o]=function(n){t[o]=n}))};for(var c in t)o(c)}else;return n}function Re(n,e){var t=this._staticTrees||(this._staticTrees=[]),r=t[n];return r&&!e||xe(r=t[n]=this.$options.staticRenderFns[n].call(this._renderProxy,null,this),"__static__"+n,!1),r}function Pe(n,e,t){return xe(n,"__once__"+e+(t?"_"+t:""),!0),n}function xe(n,e,t){if(Array.isArray(n))for(var r=0;r<n.length;r++)n[r]&&"string"!=typeof n[r]&&Ie(n[r],e+"_"+r,t);else Ie(n,e,t)}function Ie(n,e,t){n.isStatic=!0,n.key=e,n.isOnce=t}function ke(n,e){if(e)if(l(e)){var t=n.on=n.on?I({},n.on):{};for(var r in e){var a=t[r],i=e[r];t[r]=a?[].concat(a,i):i}}else;return n}function Ne(n,e,t,r){e=e||{$stable:!t};for(var a=0;a<n.length;a++){var i=n[a];Array.isArray(i)?Ne(i,e,t):i&&(i.proxy&&(i.fn.proxy=!0),e[i.key]=i.fn)}return r&&(e.$key=r),e}function _e(n,e){for(var t=0;t<e.length;t+=2){var r=e[t];"string"==typeof r&&r&&(n[e[t]]=e[t+1])}return n}function Ee(n,e){return"string"==typeof n?e+n:n}function De(n){n._o=Pe,n._n=m,n._s=f,n._l=Te,n._t=ye,n._q=D,n._i=O,n._m=Re,n._f=Ce,n._k=Se,n._b=Ae,n._v=gn,n._e=vn,n._u=Ne,n._g=ke,n._d=_e,n._p=Ee}function Oe(n,e,r,a,o){var s,c=this,l=o.options;T(a,"_uid")?(s=Object.create(a))._original=a:(s=a,a=a._original);var d=i(l._compiled),u=!d;this.data=n,this.props=e,this.children=r,this.parent=a,this.listeners=n.on||t,this.injections=pe(l.inject,a),this.slots=function(){return c.$slots||ve(n.scopedSlots,c.$slots=fe(r,a)),c.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return ve(n.scopedSlots,this.slots())}}),d&&(this.$options=l,this.$slots=this.slots(),this.$scopedSlots=ve(n.scopedSlots,this.$slots)),l._scopeId?this._c=function(n,e,t,r){var i=Fe(s,n,e,t,r,u);return i&&!Array.isArray(i)&&(i.fnScopeId=l._scopeId,i.fnContext=a),i}:this._c=function(n,e,t,r){return Fe(s,n,e,t,r,u)}}function Ue(n,e,t,r,a){var i=bn(n);return i.fnContext=t,i.fnOptions=r,e.slot&&((i.data||(i.data={})).slot=e.slot),i}function je(n,e){for(var t in e)n[w(t)]=e[t]}De(Oe.prototype);var Me={init:function(n,e){if(n.componentInstance&&!n.componentInstance._isDestroyed&&n.data.keepAlive){var t=n;Me.prepatch(t,t)}else{(n.componentInstance=function(n,e){var t={_isComponent:!0,_parentVnode:n,parent:e},r=n.data.inlineTemplate;a(r)&&(t.render=r.render,t.staticRenderFns=r.staticRenderFns);return new n.componentOptions.Ctor(t)}(n,Ze)).$mount(e?n.elm:void 0,e)}},prepatch:function(n,e){var r=e.componentOptions;!function(n,e,r,a,i){0;var o=a.data.scopedSlots,s=n.$scopedSlots,c=!!(o&&!o.$stable||s!==t&&!s.$stable||o&&n.$scopedSlots.$key!==o.$key||!o&&n.$scopedSlots.$key),l=!!(i||n.$options._renderChildren||c);n.$options._parentVnode=a,n.$vnode=a,n._vnode&&(n._vnode.parent=a);if(n.$options._renderChildren=i,n.$attrs=a.data.attrs||t,n.$listeners=r||t,e&&n.$options.props){Sn(!1);for(var d=n._props,u=n.$options._propKeys||[],p=0;p<u.length;p++){var f=u[p],m=n.$options.props;d[f]=Bn(f,m,e,n)}Sn(!0),n.$options.propsData=e}r=r||t;var h=n.$options._parentListeners;n.$options._parentListeners=r,Xe(n,r,h),l&&(n.$slots=fe(i,a.context),n.$forceUpdate());0}(e.componentInstance=n.componentInstance,r.propsData,r.listeners,e,r.children)},insert:function(n){var e,t=n.context,r=n.componentInstance;r._isMounted||(r._isMounted=!0,nt(r,"mounted")),n.data.keepAlive&&(t._isMounted?((e=r)._inactive=!1,tt.push(e)):Qe(r,!0))},destroy:function(n){var e=n.componentInstance;e._isDestroyed||(n.data.keepAlive?function n(e,t){if(t&&(e._directInactive=!0,Ke(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)n(e.$children[r]);nt(e,"deactivated")}}(e,!0):e.$destroy())}},Be=Object.keys(Me);function Le(n,e,o,c,l){if(!r(n)){var d=o.$options._base;if(s(n)&&(n=d.extend(n)),"function"==typeof n){var u;if(r(n.cid)&&void 0===(n=function(n,e){if(i(n.error)&&a(n.errorComp))return n.errorComp;if(a(n.resolved))return n.resolved;var t=qe;t&&a(n.owners)&&-1===n.owners.indexOf(t)&&n.owners.push(t);if(i(n.loading)&&a(n.loadingComp))return n.loadingComp;if(t&&!a(n.owners)){var o=n.owners=[t],c=!0,l=null,d=null;t.$on("hook:destroyed",(function(){return g(o,t)}));var u=function(n){for(var e=0,t=o.length;e<t;e++)o[e].$forceUpdate();n&&(o.length=0,null!==l&&(clearTimeout(l),l=null),null!==d&&(clearTimeout(d),d=null))},f=U((function(t){n.resolved=$e(t,e),c?o.length=0:u(!0)})),m=U((function(e){a(n.errorComp)&&(n.error=!0,u(!0))})),h=n(f,m);return s(h)&&(p(h)?r(n.resolved)&&h.then(f,m):p(h.component)&&(h.component.then(f,m),a(h.error)&&(n.errorComp=$e(h.error,e)),a(h.loading)&&(n.loadingComp=$e(h.loading,e),0===h.delay?n.loading=!0:l=setTimeout((function(){l=null,r(n.resolved)&&r(n.error)&&(n.loading=!0,u(!1))}),h.delay||200)),a(h.timeout)&&(d=setTimeout((function(){d=null,r(n.resolved)&&m(null)}),h.timeout)))),c=!1,n.loading?n.loadingComp:n.resolved}}(u=n,d)))return function(n,e,t,r,a){var i=vn();return i.asyncFactory=n,i.asyncMeta={data:e,context:t,children:r,tag:a},i}(u,e,o,c,l);e=e||{},wt(n),a(e.model)&&function(n,e){var t=n.model&&n.model.prop||"value",r=n.model&&n.model.event||"input";(e.attrs||(e.attrs={}))[t]=e.model.value;var i=e.on||(e.on={}),o=i[r],s=e.model.callback;a(o)?(Array.isArray(o)?-1===o.indexOf(s):o!==s)&&(i[r]=[s].concat(o)):i[r]=s}(n.options,e);var f=function(n,e,t){var i=e.options.props;if(!r(i)){var o={},s=n.attrs,c=n.props;if(a(s)||a(c))for(var l in i){var d=R(l);le(o,c,l,d,!0)||le(o,s,l,d,!1)}return o}}(e,n);if(i(n.options.functional))return function(n,e,r,i,o){var s=n.options,c={},l=s.props;if(a(l))for(var d in l)c[d]=Bn(d,l,e||t);else a(r.attrs)&&je(c,r.attrs),a(r.props)&&je(c,r.props);var u=new Oe(r,c,o,i,n),p=s.render.call(null,u._c,u);if(p instanceof mn)return Ue(p,r,u.parent,s,u);if(Array.isArray(p)){for(var f=de(p)||[],m=new Array(f.length),h=0;h<f.length;h++)m[h]=Ue(f[h],r,u.parent,s,u);return m}}(n,f,e,o,c);var m=e.on;if(e.on=e.nativeOn,i(n.options.abstract)){var h=e.slot;e={},h&&(e.slot=h)}!function(n){for(var e=n.hook||(n.hook={}),t=0;t<Be.length;t++){var r=Be[t],a=e[r],i=Me[r];a===i||a&&a._merged||(e[r]=a?ze(i,a):i)}}(e);var v=n.options.name||l;return new mn("vue-component-"+n.cid+(v?"-"+v:""),e,void 0,void 0,void 0,o,{Ctor:n,propsData:f,listeners:m,tag:l,children:c},u)}}}function ze(n,e){var t=function(t,r){n(t,r),e(t,r)};return t._merged=!0,t}function Fe(n,e,t,c,l,d){return(Array.isArray(t)||o(t))&&(l=c,c=t,t=void 0),i(d)&&(l=2),function(n,e,t,o,c){if(a(t)&&a(t.__ob__))return vn();a(t)&&a(t.is)&&(e=t.is);if(!e)return vn();0;Array.isArray(o)&&"function"==typeof o[0]&&((t=t||{}).scopedSlots={default:o[0]},o.length=0);2===c?o=de(o):1===c&&(o=function(n){for(var e=0;e<n.length;e++)if(Array.isArray(n[e]))return Array.prototype.concat.apply([],n);return n}(o));var l,d;if("string"==typeof e){var u;d=n.$vnode&&n.$vnode.ns||B.getTagNamespace(e),l=B.isReservedTag(e)?new mn(B.parsePlatformTagName(e),t,o,void 0,void 0,n):t&&t.pre||!a(u=Mn(n.$options,"components",e))?new mn(e,t,o,void 0,void 0,n):Le(u,t,n,o,e)}else l=Le(e,t,n,o);return Array.isArray(l)?l:a(l)?(a(d)&&function n(e,t,o){e.ns=t,"foreignObject"===e.tag&&(t=void 0,o=!0);if(a(e.children))for(var s=0,c=e.children.length;s<c;s++){var l=e.children[s];a(l.tag)&&(r(l.ns)||i(o)&&"svg"!==l.tag)&&n(l,t,o)}}(l,d),a(t)&&function(n){s(n.style)&&ae(n.style);s(n.class)&&ae(n.class)}(t),l):vn()}(n,e,t,c,l)}var We,qe=null;function $e(n,e){return(n.__esModule||sn&&"Module"===n[Symbol.toStringTag])&&(n=n.default),s(n)?e.extend(n):n}function Ge(n){if(Array.isArray(n))for(var e=0;e<n.length;e++){var t=n[e];if(a(t)&&(a(t.componentOptions)||he(t)))return t}}function Ve(n,e){We.$on(n,e)}function He(n,e){We.$off(n,e)}function Ye(n,e){var t=We;return function r(){var a=e.apply(null,arguments);null!==a&&t.$off(n,r)}}function Xe(n,e,t){We=n,se(e,t||{},Ve,He,Ye,n),We=void 0}var Ze=null;function Je(n){var e=Ze;return Ze=n,function(){Ze=e}}function Ke(n){for(;n&&(n=n.$parent);)if(n._inactive)return!0;return!1}function Qe(n,e){if(e){if(n._directInactive=!1,Ke(n))return}else if(n._directInactive)return;if(n._inactive||null===n._inactive){n._inactive=!1;for(var t=0;t<n.$children.length;t++)Qe(n.$children[t]);nt(n,"activated")}}function nt(n,e){pn();var t=n.$options[e],r=e+" hook";if(t)for(var a=0,i=t.length;a<i;a++)$n(t[a],n,null,n,r);n._hasHookEvent&&n.$emit("hook:"+e),fn()}var et=[],tt=[],rt={},at=!1,it=!1,ot=0;var st=0,ct=Date.now;if($&&!Y){var lt=window.performance;lt&&"function"==typeof lt.now&&ct()>document.createEvent("Event").timeStamp&&(ct=function(){return lt.now()})}function dt(){var n,e;for(st=ct(),it=!0,et.sort((function(n,e){return n.id-e.id})),ot=0;ot<et.length;ot++)(n=et[ot]).before&&n.before(),e=n.id,rt[e]=null,n.run();var t=tt.slice(),r=et.slice();ot=et.length=tt.length=0,rt={},at=it=!1,function(n){for(var e=0;e<n.length;e++)n[e]._inactive=!0,Qe(n[e],!0)}(t),function(n){var e=n.length;for(;e--;){var t=n[e],r=t.vm;r._watcher===t&&r._isMounted&&!r._isDestroyed&&nt(r,"updated")}}(r),rn&&B.devtools&&rn.emit("flush")}var ut=0,pt=function(n,e,t,r,a){this.vm=n,a&&(n._watcher=this),n._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=t,this.id=++ut,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new on,this.newDepIds=new on,this.expression="","function"==typeof e?this.getter=e:(this.getter=function(n){if(!F.test(n)){var e=n.split(".");return function(n){for(var t=0;t<e.length;t++){if(!n)return;n=n[e[t]]}return n}}}(e),this.getter||(this.getter=N)),this.value=this.lazy?void 0:this.get()};pt.prototype.get=function(){var n;pn(this);var e=this.vm;try{n=this.getter.call(e,e)}catch(n){if(!this.user)throw n;qn(n,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&ae(n),fn(),this.cleanupDeps()}return n},pt.prototype.addDep=function(n){var e=n.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(n),this.depIds.has(e)||n.addSub(this))},pt.prototype.cleanupDeps=function(){for(var n=this.deps.length;n--;){var e=this.deps[n];this.newDepIds.has(e.id)||e.removeSub(this)}var t=this.depIds;this.depIds=this.newDepIds,this.newDepIds=t,this.newDepIds.clear(),t=this.deps,this.deps=this.newDeps,this.newDeps=t,this.newDeps.length=0},pt.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(n){var e=n.id;if(null==rt[e]){if(rt[e]=!0,it){for(var t=et.length-1;t>ot&&et[t].id>n.id;)t--;et.splice(t+1,0,n)}else et.push(n);at||(at=!0,te(dt))}}(this)},pt.prototype.run=function(){if(this.active){var n=this.get();if(n!==this.value||s(n)||this.deep){var e=this.value;if(this.value=n,this.user){var t='callback for watcher "'+this.expression+'"';$n(this.cb,this.vm,[n,e],this.vm,t)}else this.cb.call(this.vm,n,e)}}},pt.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},pt.prototype.depend=function(){for(var n=this.deps.length;n--;)this.deps[n].depend()},pt.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||g(this.vm._watchers,this);for(var n=this.deps.length;n--;)this.deps[n].removeSub(this);this.active=!1}};var ft={enumerable:!0,configurable:!0,get:N,set:N};function mt(n,e,t){ft.get=function(){return this[e][t]},ft.set=function(n){this[e][t]=n},Object.defineProperty(n,t,ft)}function ht(n){n._watchers=[];var e=n.$options;e.props&&function(n,e){var t=n.$options.propsData||{},r=n._props={},a=n.$options._propKeys=[];n.$parent&&Sn(!1);var i=function(i){a.push(i);var o=Bn(i,e,t,n);Pn(r,i,o),i in n||mt(n,"_props",i)};for(var o in e)i(o);Sn(!0)}(n,e.props),e.methods&&function(n,e){n.$options.props;for(var t in e)n[t]="function"!=typeof e[t]?N:P(e[t],n)}(n,e.methods),e.data?function(n){var e=n.$options.data;l(e=n._data="function"==typeof e?function(n,e){pn();try{return n.call(e,e)}catch(n){return qn(n,e,"data()"),{}}finally{fn()}}(e,n):e||{})||(e={});var t=Object.keys(e),r=n.$options.props,a=(n.$options.methods,t.length);for(;a--;){var i=t[a];0,r&&T(r,i)||(o=void 0,36!==(o=(i+"").charCodeAt(0))&&95!==o&&mt(n,"_data",i))}var o;Rn(e,!0)}(n):Rn(n._data={},!0),e.computed&&function(n,e){var t=n._computedWatchers=Object.create(null),r=tn();for(var a in e){var i=e[a],o="function"==typeof i?i:i.get;0,r||(t[a]=new pt(n,o||N,N,vt)),a in n||gt(n,a,i)}}(n,e.computed),e.watch&&e.watch!==Q&&function(n,e){for(var t in e){var r=e[t];if(Array.isArray(r))for(var a=0;a<r.length;a++)yt(n,t,r[a]);else yt(n,t,r)}}(n,e.watch)}var vt={lazy:!0};function gt(n,e,t){var r=!tn();"function"==typeof t?(ft.get=r?bt(e):Tt(t),ft.set=N):(ft.get=t.get?r&&!1!==t.cache?bt(e):Tt(t.get):N,ft.set=t.set||N),Object.defineProperty(n,e,ft)}function bt(n){return function(){var e=this._computedWatchers&&this._computedWatchers[n];if(e)return e.dirty&&e.evaluate(),dn.target&&e.depend(),e.value}}function Tt(n){return function(){return n.call(this,this)}}function yt(n,e,t,r){return l(t)&&(r=t,t=t.handler),"string"==typeof t&&(t=n[t]),n.$watch(e,t,r)}var Ct=0;function wt(n){var e=n.options;if(n.super){var t=wt(n.super);if(t!==n.superOptions){n.superOptions=t;var r=function(n){var e,t=n.options,r=n.sealedOptions;for(var a in t)t[a]!==r[a]&&(e||(e={}),e[a]=t[a]);return e}(n);r&&I(n.extendOptions,r),(e=n.options=jn(t,n.extendOptions)).name&&(e.components[e.name]=n)}}return e}function St(n){this._init(n)}function At(n){n.cid=0;var e=1;n.extend=function(n){n=n||{};var t=this,r=t.cid,a=n._Ctor||(n._Ctor={});if(a[r])return a[r];var i=n.name||t.options.name;var o=function(n){this._init(n)};return(o.prototype=Object.create(t.prototype)).constructor=o,o.cid=e++,o.options=jn(t.options,n),o.super=t,o.options.props&&function(n){var e=n.options.props;for(var t in e)mt(n.prototype,"_props",t)}(o),o.options.computed&&function(n){var e=n.options.computed;for(var t in e)gt(n.prototype,t,e[t])}(o),o.extend=t.extend,o.mixin=t.mixin,o.use=t.use,j.forEach((function(n){o[n]=t[n]})),i&&(o.options.components[i]=o),o.superOptions=t.options,o.extendOptions=n,o.sealedOptions=I({},o.options),a[r]=o,o}}function Rt(n){return n&&(n.Ctor.options.name||n.tag)}function Pt(n,e){return Array.isArray(n)?n.indexOf(e)>-1:"string"==typeof n?n.split(",").indexOf(e)>-1:!!d(n)&&n.test(e)}function xt(n,e){var t=n.cache,r=n.keys,a=n._vnode;for(var i in t){var o=t[i];if(o){var s=o.name;s&&!e(s)&&It(t,i,r,a)}}}function It(n,e,t,r){var a=n[e];!a||r&&a.tag===r.tag||a.componentInstance.$destroy(),n[e]=null,g(t,e)}!function(n){n.prototype._init=function(n){var e=this;e._uid=Ct++,e._isVue=!0,n&&n._isComponent?function(n,e){var t=n.$options=Object.create(n.constructor.options),r=e._parentVnode;t.parent=e.parent,t._parentVnode=r;var a=r.componentOptions;t.propsData=a.propsData,t._parentListeners=a.listeners,t._renderChildren=a.children,t._componentTag=a.tag,e.render&&(t.render=e.render,t.staticRenderFns=e.staticRenderFns)}(e,n):e.$options=jn(wt(e.constructor),n||{},e),e._renderProxy=e,e._self=e,function(n){var e=n.$options,t=e.parent;if(t&&!e.abstract){for(;t.$options.abstract&&t.$parent;)t=t.$parent;t.$children.push(n)}n.$parent=t,n.$root=t?t.$root:n,n.$children=[],n.$refs={},n._watcher=null,n._inactive=null,n._directInactive=!1,n._isMounted=!1,n._isDestroyed=!1,n._isBeingDestroyed=!1}(e),function(n){n._events=Object.create(null),n._hasHookEvent=!1;var e=n.$options._parentListeners;e&&Xe(n,e)}(e),function(n){n._vnode=null,n._staticTrees=null;var e=n.$options,r=n.$vnode=e._parentVnode,a=r&&r.context;n.$slots=fe(e._renderChildren,a),n.$scopedSlots=t,n._c=function(e,t,r,a){return Fe(n,e,t,r,a,!1)},n.$createElement=function(e,t,r,a){return Fe(n,e,t,r,a,!0)};var i=r&&r.data;Pn(n,"$attrs",i&&i.attrs||t,null,!0),Pn(n,"$listeners",e._parentListeners||t,null,!0)}(e),nt(e,"beforeCreate"),function(n){var e=pe(n.$options.inject,n);e&&(Sn(!1),Object.keys(e).forEach((function(t){Pn(n,t,e[t])})),Sn(!0))}(e),ht(e),function(n){var e=n.$options.provide;e&&(n._provided="function"==typeof e?e.call(n):e)}(e),nt(e,"created"),e.$options.el&&e.$mount(e.$options.el)}}(St),function(n){var e={get:function(){return this._data}},t={get:function(){return this._props}};Object.defineProperty(n.prototype,"$data",e),Object.defineProperty(n.prototype,"$props",t),n.prototype.$set=xn,n.prototype.$delete=In,n.prototype.$watch=function(n,e,t){if(l(e))return yt(this,n,e,t);(t=t||{}).user=!0;var r=new pt(this,n,e,t);if(t.immediate){var a='callback for immediate watcher "'+r.expression+'"';pn(),$n(e,this,[r.value],this,a),fn()}return function(){r.teardown()}}}(St),function(n){var e=/^hook:/;n.prototype.$on=function(n,t){var r=this;if(Array.isArray(n))for(var a=0,i=n.length;a<i;a++)r.$on(n[a],t);else(r._events[n]||(r._events[n]=[])).push(t),e.test(n)&&(r._hasHookEvent=!0);return r},n.prototype.$once=function(n,e){var t=this;function r(){t.$off(n,r),e.apply(t,arguments)}return r.fn=e,t.$on(n,r),t},n.prototype.$off=function(n,e){var t=this;if(!arguments.length)return t._events=Object.create(null),t;if(Array.isArray(n)){for(var r=0,a=n.length;r<a;r++)t.$off(n[r],e);return t}var i,o=t._events[n];if(!o)return t;if(!e)return t._events[n]=null,t;for(var s=o.length;s--;)if((i=o[s])===e||i.fn===e){o.splice(s,1);break}return t},n.prototype.$emit=function(n){var e=this,t=e._events[n];if(t){t=t.length>1?x(t):t;for(var r=x(arguments,1),a='event handler for "'+n+'"',i=0,o=t.length;i<o;i++)$n(t[i],e,r,e,a)}return e}}(St),function(n){n.prototype._update=function(n,e){var t=this,r=t.$el,a=t._vnode,i=Je(t);t._vnode=n,t.$el=a?t.__patch__(a,n):t.__patch__(t.$el,n,e,!1),i(),r&&(r.__vue__=null),t.$el&&(t.$el.__vue__=t),t.$vnode&&t.$parent&&t.$vnode===t.$parent._vnode&&(t.$parent.$el=t.$el)},n.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},n.prototype.$destroy=function(){var n=this;if(!n._isBeingDestroyed){nt(n,"beforeDestroy"),n._isBeingDestroyed=!0;var e=n.$parent;!e||e._isBeingDestroyed||n.$options.abstract||g(e.$children,n),n._watcher&&n._watcher.teardown();for(var t=n._watchers.length;t--;)n._watchers[t].teardown();n._data.__ob__&&n._data.__ob__.vmCount--,n._isDestroyed=!0,n.__patch__(n._vnode,null),nt(n,"destroyed"),n.$off(),n.$el&&(n.$el.__vue__=null),n.$vnode&&(n.$vnode.parent=null)}}}(St),function(n){De(n.prototype),n.prototype.$nextTick=function(n){return te(n,this)},n.prototype._render=function(){var n,e=this,t=e.$options,r=t.render,a=t._parentVnode;a&&(e.$scopedSlots=ve(a.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=a;try{qe=e,n=r.call(e._renderProxy,e.$createElement)}catch(t){qn(t,e,"render"),n=e._vnode}finally{qe=null}return Array.isArray(n)&&1===n.length&&(n=n[0]),n instanceof mn||(n=vn()),n.parent=a,n}}(St);var kt=[String,RegExp,Array],Nt={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:kt,exclude:kt,max:[String,Number]},methods:{cacheVNode:function(){var n=this.cache,e=this.keys,t=this.vnodeToCache,r=this.keyToCache;if(t){var a=t.tag,i=t.componentInstance,o=t.componentOptions;n[r]={name:Rt(o),tag:a,componentInstance:i},e.push(r),this.max&&e.length>parseInt(this.max)&&It(n,e[0],e,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var n in this.cache)It(this.cache,n,this.keys)},mounted:function(){var n=this;this.cacheVNode(),this.$watch("include",(function(e){xt(n,(function(n){return Pt(e,n)}))})),this.$watch("exclude",(function(e){xt(n,(function(n){return!Pt(e,n)}))}))},updated:function(){this.cacheVNode()},render:function(){var n=this.$slots.default,e=Ge(n),t=e&&e.componentOptions;if(t){var r=Rt(t),a=this.include,i=this.exclude;if(a&&(!r||!Pt(a,r))||i&&r&&Pt(i,r))return e;var o=this.cache,s=this.keys,c=null==e.key?t.Ctor.cid+(t.tag?"::"+t.tag:""):e.key;o[c]?(e.componentInstance=o[c].componentInstance,g(s,c),s.push(c)):(this.vnodeToCache=e,this.keyToCache=c),e.data.keepAlive=!0}return e||n&&n[0]}}};!function(n){var e={get:function(){return B}};Object.defineProperty(n,"config",e),n.util={warn:cn,extend:I,mergeOptions:jn,defineReactive:Pn},n.set=xn,n.delete=In,n.nextTick=te,n.observable=function(n){return Rn(n),n},n.options=Object.create(null),j.forEach((function(e){n.options[e+"s"]=Object.create(null)})),n.options._base=n,I(n.options.components,Nt),function(n){n.use=function(n){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(n)>-1)return this;var t=x(arguments,1);return t.unshift(this),"function"==typeof n.install?n.install.apply(n,t):"function"==typeof n&&n.apply(null,t),e.push(n),this}}(n),function(n){n.mixin=function(n){return this.options=jn(this.options,n),this}}(n),At(n),function(n){j.forEach((function(e){n[e]=function(n,t){return t?("component"===e&&l(t)&&(t.name=t.name||n,t=this.options._base.extend(t)),"directive"===e&&"function"==typeof t&&(t={bind:t,update:t}),this.options[e+"s"][n]=t,t):this.options[e+"s"][n]}}))}(n)}(St),Object.defineProperty(St.prototype,"$isServer",{get:tn}),Object.defineProperty(St.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(St,"FunctionalRenderContext",{value:Oe}),St.version="2.6.14";var _t=h("style,class"),Et=h("input,textarea,option,select,progress"),Dt=h("contenteditable,draggable,spellcheck"),Ot=h("events,caret,typing,plaintext-only"),Ut=h("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),jt="http://www.w3.org/1999/xlink",Mt=function(n){return":"===n.charAt(5)&&"xlink"===n.slice(0,5)},Bt=function(n){return Mt(n)?n.slice(6,n.length):""},Lt=function(n){return null==n||!1===n};function zt(n){for(var e=n.data,t=n,r=n;a(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ft(r.data,e));for(;a(t=t.parent);)t&&t.data&&(e=Ft(e,t.data));return function(n,e){if(a(n)||a(e))return Wt(n,qt(e));return""}(e.staticClass,e.class)}function Ft(n,e){return{staticClass:Wt(n.staticClass,e.staticClass),class:a(n.class)?[n.class,e.class]:e.class}}function Wt(n,e){return n?e?n+" "+e:n:e||""}function qt(n){return Array.isArray(n)?function(n){for(var e,t="",r=0,i=n.length;r<i;r++)a(e=qt(n[r]))&&""!==e&&(t&&(t+=" "),t+=e);return t}(n):s(n)?function(n){var e="";for(var t in n)n[t]&&(e&&(e+=" "),e+=t);return e}(n):"string"==typeof n?n:""}var $t={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Gt=h("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Vt=h("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ht=function(n){return Gt(n)||Vt(n)};var Yt=Object.create(null);var Xt=h("text,number,password,search,email,tel,url");var Zt=Object.freeze({createElement:function(n,e){var t=document.createElement(n);return"select"!==n||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&t.setAttribute("multiple","multiple"),t},createElementNS:function(n,e){return document.createElementNS($t[n],e)},createTextNode:function(n){return document.createTextNode(n)},createComment:function(n){return document.createComment(n)},insertBefore:function(n,e,t){n.insertBefore(e,t)},removeChild:function(n,e){n.removeChild(e)},appendChild:function(n,e){n.appendChild(e)},parentNode:function(n){return n.parentNode},nextSibling:function(n){return n.nextSibling},tagName:function(n){return n.tagName},setTextContent:function(n,e){n.textContent=e},setStyleScope:function(n,e){n.setAttribute(e,"")}}),Jt={create:function(n,e){Kt(e)},update:function(n,e){n.data.ref!==e.data.ref&&(Kt(n,!0),Kt(e))},destroy:function(n){Kt(n,!0)}};function Kt(n,e){var t=n.data.ref;if(a(t)){var r=n.context,i=n.componentInstance||n.elm,o=r.$refs;e?Array.isArray(o[t])?g(o[t],i):o[t]===i&&(o[t]=void 0):n.data.refInFor?Array.isArray(o[t])?o[t].indexOf(i)<0&&o[t].push(i):o[t]=[i]:o[t]=i}}var Qt=new mn("",{},[]),nr=["create","activate","update","remove","destroy"];function er(n,e){return n.key===e.key&&n.asyncFactory===e.asyncFactory&&(n.tag===e.tag&&n.isComment===e.isComment&&a(n.data)===a(e.data)&&function(n,e){if("input"!==n.tag)return!0;var t,r=a(t=n.data)&&a(t=t.attrs)&&t.type,i=a(t=e.data)&&a(t=t.attrs)&&t.type;return r===i||Xt(r)&&Xt(i)}(n,e)||i(n.isAsyncPlaceholder)&&r(e.asyncFactory.error))}function tr(n,e,t){var r,i,o={};for(r=e;r<=t;++r)a(i=n[r].key)&&(o[i]=r);return o}var rr={create:ar,update:ar,destroy:function(n){ar(n,Qt)}};function ar(n,e){(n.data.directives||e.data.directives)&&function(n,e){var t,r,a,i=n===Qt,o=e===Qt,s=or(n.data.directives,n.context),c=or(e.data.directives,e.context),l=[],d=[];for(t in c)r=s[t],a=c[t],r?(a.oldValue=r.value,a.oldArg=r.arg,cr(a,"update",e,n),a.def&&a.def.componentUpdated&&d.push(a)):(cr(a,"bind",e,n),a.def&&a.def.inserted&&l.push(a));if(l.length){var u=function(){for(var t=0;t<l.length;t++)cr(l[t],"inserted",e,n)};i?ce(e,"insert",u):u()}d.length&&ce(e,"postpatch",(function(){for(var t=0;t<d.length;t++)cr(d[t],"componentUpdated",e,n)}));if(!i)for(t in s)c[t]||cr(s[t],"unbind",n,n,o)}(n,e)}var ir=Object.create(null);function or(n,e){var t,r,a=Object.create(null);if(!n)return a;for(t=0;t<n.length;t++)(r=n[t]).modifiers||(r.modifiers=ir),a[sr(r)]=r,r.def=Mn(e.$options,"directives",r.name);return a}function sr(n){return n.rawName||n.name+"."+Object.keys(n.modifiers||{}).join(".")}function cr(n,e,t,r,a){var i=n.def&&n.def[e];if(i)try{i(t.elm,n,t,r,a)}catch(r){qn(r,t.context,"directive "+n.name+" "+e+" hook")}}var lr=[Jt,rr];function dr(n,e){var t=e.componentOptions;if(!(a(t)&&!1===t.Ctor.options.inheritAttrs||r(n.data.attrs)&&r(e.data.attrs))){var i,o,s=e.elm,c=n.data.attrs||{},l=e.data.attrs||{};for(i in a(l.__ob__)&&(l=e.data.attrs=I({},l)),l)o=l[i],c[i]!==o&&ur(s,i,o,e.data.pre);for(i in(Y||Z)&&l.value!==c.value&&ur(s,"value",l.value),c)r(l[i])&&(Mt(i)?s.removeAttributeNS(jt,Bt(i)):Dt(i)||s.removeAttribute(i))}}function ur(n,e,t,r){r||n.tagName.indexOf("-")>-1?pr(n,e,t):Ut(e)?Lt(t)?n.removeAttribute(e):(t="allowfullscreen"===e&&"EMBED"===n.tagName?"true":e,n.setAttribute(e,t)):Dt(e)?n.setAttribute(e,function(n,e){return Lt(e)||"false"===e?"false":"contenteditable"===n&&Ot(e)?e:"true"}(e,t)):Mt(e)?Lt(t)?n.removeAttributeNS(jt,Bt(e)):n.setAttributeNS(jt,e,t):pr(n,e,t)}function pr(n,e,t){if(Lt(t))n.removeAttribute(e);else{if(Y&&!X&&"TEXTAREA"===n.tagName&&"placeholder"===e&&""!==t&&!n.__ieph){var r=function(e){e.stopImmediatePropagation(),n.removeEventListener("input",r)};n.addEventListener("input",r),n.__ieph=!0}n.setAttribute(e,t)}}var fr={create:dr,update:dr};function mr(n,e){var t=e.elm,i=e.data,o=n.data;if(!(r(i.staticClass)&&r(i.class)&&(r(o)||r(o.staticClass)&&r(o.class)))){var s=zt(e),c=t._transitionClasses;a(c)&&(s=Wt(s,qt(c))),s!==t._prevClass&&(t.setAttribute("class",s),t._prevClass=s)}}var hr,vr={create:mr,update:mr};function gr(n,e,t){var r=hr;return function a(){var i=e.apply(null,arguments);null!==i&&yr(n,a,t,r)}}var br=Yn&&!(K&&Number(K[1])<=53);function Tr(n,e,t,r){if(br){var a=st,i=e;e=i._wrapper=function(n){if(n.target===n.currentTarget||n.timeStamp>=a||n.timeStamp<=0||n.target.ownerDocument!==document)return i.apply(this,arguments)}}hr.addEventListener(n,e,nn?{capture:t,passive:r}:t)}function yr(n,e,t,r){(r||hr).removeEventListener(n,e._wrapper||e,t)}function Cr(n,e){if(!r(n.data.on)||!r(e.data.on)){var t=e.data.on||{},i=n.data.on||{};hr=e.elm,function(n){if(a(n.__r)){var e=Y?"change":"input";n[e]=[].concat(n.__r,n[e]||[]),delete n.__r}a(n.__c)&&(n.change=[].concat(n.__c,n.change||[]),delete n.__c)}(t),se(t,i,Tr,yr,gr,e.context),hr=void 0}}var wr,Sr={create:Cr,update:Cr};function Ar(n,e){if(!r(n.data.domProps)||!r(e.data.domProps)){var t,i,o=e.elm,s=n.data.domProps||{},c=e.data.domProps||{};for(t in a(c.__ob__)&&(c=e.data.domProps=I({},c)),s)t in c||(o[t]="");for(t in c){if(i=c[t],"textContent"===t||"innerHTML"===t){if(e.children&&(e.children.length=0),i===s[t])continue;1===o.childNodes.length&&o.removeChild(o.childNodes[0])}if("value"===t&&"PROGRESS"!==o.tagName){o._value=i;var l=r(i)?"":String(i);Rr(o,l)&&(o.value=l)}else if("innerHTML"===t&&Vt(o.tagName)&&r(o.innerHTML)){(wr=wr||document.createElement("div")).innerHTML="<svg>"+i+"</svg>";for(var d=wr.firstChild;o.firstChild;)o.removeChild(o.firstChild);for(;d.firstChild;)o.appendChild(d.firstChild)}else if(i!==s[t])try{o[t]=i}catch(n){}}}}function Rr(n,e){return!n.composing&&("OPTION"===n.tagName||function(n,e){var t=!0;try{t=document.activeElement!==n}catch(n){}return t&&n.value!==e}(n,e)||function(n,e){var t=n.value,r=n._vModifiers;if(a(r)){if(r.number)return m(t)!==m(e);if(r.trim)return t.trim()!==e.trim()}return t!==e}(n,e))}var Pr={create:Ar,update:Ar},xr=y((function(n){var e={},t=/:(.+)/;return n.split(/;(?![^(]*\))/g).forEach((function(n){if(n){var r=n.split(t);r.length>1&&(e[r[0].trim()]=r[1].trim())}})),e}));function Ir(n){var e=kr(n.style);return n.staticStyle?I(n.staticStyle,e):e}function kr(n){return Array.isArray(n)?k(n):"string"==typeof n?xr(n):n}var Nr,_r=/^--/,Er=/\s*!important$/,Dr=function(n,e,t){if(_r.test(e))n.style.setProperty(e,t);else if(Er.test(t))n.style.setProperty(R(e),t.replace(Er,""),"important");else{var r=Ur(e);if(Array.isArray(t))for(var a=0,i=t.length;a<i;a++)n.style[r]=t[a];else n.style[r]=t}},Or=["Webkit","Moz","ms"],Ur=y((function(n){if(Nr=Nr||document.createElement("div").style,"filter"!==(n=w(n))&&n in Nr)return n;for(var e=n.charAt(0).toUpperCase()+n.slice(1),t=0;t<Or.length;t++){var r=Or[t]+e;if(r in Nr)return r}}));function jr(n,e){var t=e.data,i=n.data;if(!(r(t.staticStyle)&&r(t.style)&&r(i.staticStyle)&&r(i.style))){var o,s,c=e.elm,l=i.staticStyle,d=i.normalizedStyle||i.style||{},u=l||d,p=kr(e.data.style)||{};e.data.normalizedStyle=a(p.__ob__)?I({},p):p;var f=function(n,e){var t,r={};if(e)for(var a=n;a.componentInstance;)(a=a.componentInstance._vnode)&&a.data&&(t=Ir(a.data))&&I(r,t);(t=Ir(n.data))&&I(r,t);for(var i=n;i=i.parent;)i.data&&(t=Ir(i.data))&&I(r,t);return r}(e,!0);for(s in u)r(f[s])&&Dr(c,s,"");for(s in f)(o=f[s])!==u[s]&&Dr(c,s,null==o?"":o)}}var Mr={create:jr,update:jr},Br=/\s+/;function Lr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Br).forEach((function(e){return n.classList.add(e)})):n.classList.add(e);else{var t=" "+(n.getAttribute("class")||"")+" ";t.indexOf(" "+e+" ")<0&&n.setAttribute("class",(t+e).trim())}}function zr(n,e){if(e&&(e=e.trim()))if(n.classList)e.indexOf(" ")>-1?e.split(Br).forEach((function(e){return n.classList.remove(e)})):n.classList.remove(e),n.classList.length||n.removeAttribute("class");else{for(var t=" "+(n.getAttribute("class")||"")+" ",r=" "+e+" ";t.indexOf(r)>=0;)t=t.replace(r," ");(t=t.trim())?n.setAttribute("class",t):n.removeAttribute("class")}}function Fr(n){if(n){if("object"==typeof n){var e={};return!1!==n.css&&I(e,Wr(n.name||"v")),I(e,n),e}return"string"==typeof n?Wr(n):void 0}}var Wr=y((function(n){return{enterClass:n+"-enter",enterToClass:n+"-enter-to",enterActiveClass:n+"-enter-active",leaveClass:n+"-leave",leaveToClass:n+"-leave-to",leaveActiveClass:n+"-leave-active"}})),qr=$&&!X,$r="transition",Gr="transitionend",Vr="animation",Hr="animationend";qr&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&($r="WebkitTransition",Gr="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Vr="WebkitAnimation",Hr="webkitAnimationEnd"));var Yr=$?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(n){return n()};function Xr(n){Yr((function(){Yr(n)}))}function Zr(n,e){var t=n._transitionClasses||(n._transitionClasses=[]);t.indexOf(e)<0&&(t.push(e),Lr(n,e))}function Jr(n,e){n._transitionClasses&&g(n._transitionClasses,e),zr(n,e)}function Kr(n,e,t){var r=na(n,e),a=r.type,i=r.timeout,o=r.propCount;if(!a)return t();var s="transition"===a?Gr:Hr,c=0,l=function(){n.removeEventListener(s,d),t()},d=function(e){e.target===n&&++c>=o&&l()};setTimeout((function(){c<o&&l()}),i+1),n.addEventListener(s,d)}var Qr=/\b(transform|all)(,|$)/;function na(n,e){var t,r=window.getComputedStyle(n),a=(r[$r+"Delay"]||"").split(", "),i=(r[$r+"Duration"]||"").split(", "),o=ea(a,i),s=(r[Vr+"Delay"]||"").split(", "),c=(r[Vr+"Duration"]||"").split(", "),l=ea(s,c),d=0,u=0;return"transition"===e?o>0&&(t="transition",d=o,u=i.length):"animation"===e?l>0&&(t="animation",d=l,u=c.length):u=(t=(d=Math.max(o,l))>0?o>l?"transition":"animation":null)?"transition"===t?i.length:c.length:0,{type:t,timeout:d,propCount:u,hasTransform:"transition"===t&&Qr.test(r[$r+"Property"])}}function ea(n,e){for(;n.length<e.length;)n=n.concat(n);return Math.max.apply(null,e.map((function(e,t){return ta(e)+ta(n[t])})))}function ta(n){return 1e3*Number(n.slice(0,-1).replace(",","."))}function ra(n,e){var t=n.elm;a(t._leaveCb)&&(t._leaveCb.cancelled=!0,t._leaveCb());var i=Fr(n.data.transition);if(!r(i)&&!a(t._enterCb)&&1===t.nodeType){for(var o=i.css,c=i.type,l=i.enterClass,d=i.enterToClass,u=i.enterActiveClass,p=i.appearClass,f=i.appearToClass,h=i.appearActiveClass,v=i.beforeEnter,g=i.enter,b=i.afterEnter,T=i.enterCancelled,y=i.beforeAppear,C=i.appear,w=i.afterAppear,S=i.appearCancelled,A=i.duration,R=Ze,P=Ze.$vnode;P&&P.parent;)R=P.context,P=P.parent;var x=!R._isMounted||!n.isRootInsert;if(!x||C||""===C){var I=x&&p?p:l,k=x&&h?h:u,N=x&&f?f:d,_=x&&y||v,E=x&&"function"==typeof C?C:g,D=x&&w||b,O=x&&S||T,j=m(s(A)?A.enter:A);0;var M=!1!==o&&!X,B=oa(E),L=t._enterCb=U((function(){M&&(Jr(t,N),Jr(t,k)),L.cancelled?(M&&Jr(t,I),O&&O(t)):D&&D(t),t._enterCb=null}));n.data.show||ce(n,"insert",(function(){var e=t.parentNode,r=e&&e._pending&&e._pending[n.key];r&&r.tag===n.tag&&r.elm._leaveCb&&r.elm._leaveCb(),E&&E(t,L)})),_&&_(t),M&&(Zr(t,I),Zr(t,k),Xr((function(){Jr(t,I),L.cancelled||(Zr(t,N),B||(ia(j)?setTimeout(L,j):Kr(t,c,L)))}))),n.data.show&&(e&&e(),E&&E(t,L)),M||B||L()}}}function aa(n,e){var t=n.elm;a(t._enterCb)&&(t._enterCb.cancelled=!0,t._enterCb());var i=Fr(n.data.transition);if(r(i)||1!==t.nodeType)return e();if(!a(t._leaveCb)){var o=i.css,c=i.type,l=i.leaveClass,d=i.leaveToClass,u=i.leaveActiveClass,p=i.beforeLeave,f=i.leave,h=i.afterLeave,v=i.leaveCancelled,g=i.delayLeave,b=i.duration,T=!1!==o&&!X,y=oa(f),C=m(s(b)?b.leave:b);0;var w=t._leaveCb=U((function(){t.parentNode&&t.parentNode._pending&&(t.parentNode._pending[n.key]=null),T&&(Jr(t,d),Jr(t,u)),w.cancelled?(T&&Jr(t,l),v&&v(t)):(e(),h&&h(t)),t._leaveCb=null}));g?g(S):S()}function S(){w.cancelled||(!n.data.show&&t.parentNode&&((t.parentNode._pending||(t.parentNode._pending={}))[n.key]=n),p&&p(t),T&&(Zr(t,l),Zr(t,u),Xr((function(){Jr(t,l),w.cancelled||(Zr(t,d),y||(ia(C)?setTimeout(w,C):Kr(t,c,w)))}))),f&&f(t,w),T||y||w())}}function ia(n){return"number"==typeof n&&!isNaN(n)}function oa(n){if(r(n))return!1;var e=n.fns;return a(e)?oa(Array.isArray(e)?e[0]:e):(n._length||n.length)>1}function sa(n,e){!0!==e.data.show&&ra(e)}var ca=function(n){var e,t,s={},c=n.modules,l=n.nodeOps;for(e=0;e<nr.length;++e)for(s[nr[e]]=[],t=0;t<c.length;++t)a(c[t][nr[e]])&&s[nr[e]].push(c[t][nr[e]]);function d(n){var e=l.parentNode(n);a(e)&&l.removeChild(e,n)}function u(n,e,t,r,o,c,d){if(a(n.elm)&&a(c)&&(n=c[d]=bn(n)),n.isRootInsert=!o,!function(n,e,t,r){var o=n.data;if(a(o)){var c=a(n.componentInstance)&&o.keepAlive;if(a(o=o.hook)&&a(o=o.init)&&o(n,!1),a(n.componentInstance))return p(n,e),f(t,n.elm,r),i(c)&&function(n,e,t,r){var i,o=n;for(;o.componentInstance;)if(o=o.componentInstance._vnode,a(i=o.data)&&a(i=i.transition)){for(i=0;i<s.activate.length;++i)s.activate[i](Qt,o);e.push(o);break}f(t,n.elm,r)}(n,e,t,r),!0}}(n,e,t,r)){var u=n.data,h=n.children,v=n.tag;a(v)?(n.elm=n.ns?l.createElementNS(n.ns,v):l.createElement(v,n),b(n),m(n,h,e),a(u)&&g(n,e),f(t,n.elm,r)):i(n.isComment)?(n.elm=l.createComment(n.text),f(t,n.elm,r)):(n.elm=l.createTextNode(n.text),f(t,n.elm,r))}}function p(n,e){a(n.data.pendingInsert)&&(e.push.apply(e,n.data.pendingInsert),n.data.pendingInsert=null),n.elm=n.componentInstance.$el,v(n)?(g(n,e),b(n)):(Kt(n),e.push(n))}function f(n,e,t){a(n)&&(a(t)?l.parentNode(t)===n&&l.insertBefore(n,e,t):l.appendChild(n,e))}function m(n,e,t){if(Array.isArray(e)){0;for(var r=0;r<e.length;++r)u(e[r],t,n.elm,null,!0,e,r)}else o(n.text)&&l.appendChild(n.elm,l.createTextNode(String(n.text)))}function v(n){for(;n.componentInstance;)n=n.componentInstance._vnode;return a(n.tag)}function g(n,t){for(var r=0;r<s.create.length;++r)s.create[r](Qt,n);a(e=n.data.hook)&&(a(e.create)&&e.create(Qt,n),a(e.insert)&&t.push(n))}function b(n){var e;if(a(e=n.fnScopeId))l.setStyleScope(n.elm,e);else for(var t=n;t;)a(e=t.context)&&a(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e),t=t.parent;a(e=Ze)&&e!==n.context&&e!==n.fnContext&&a(e=e.$options._scopeId)&&l.setStyleScope(n.elm,e)}function T(n,e,t,r,a,i){for(;r<=a;++r)u(t[r],i,n,e,!1,t,r)}function y(n){var e,t,r=n.data;if(a(r))for(a(e=r.hook)&&a(e=e.destroy)&&e(n),e=0;e<s.destroy.length;++e)s.destroy[e](n);if(a(e=n.children))for(t=0;t<n.children.length;++t)y(n.children[t])}function C(n,e,t){for(;e<=t;++e){var r=n[e];a(r)&&(a(r.tag)?(w(r),y(r)):d(r.elm))}}function w(n,e){if(a(e)||a(n.data)){var t,r=s.remove.length+1;for(a(e)?e.listeners+=r:e=function(n,e){function t(){0==--t.listeners&&d(n)}return t.listeners=e,t}(n.elm,r),a(t=n.componentInstance)&&a(t=t._vnode)&&a(t.data)&&w(t,e),t=0;t<s.remove.length;++t)s.remove[t](n,e);a(t=n.data.hook)&&a(t=t.remove)?t(n,e):e()}else d(n.elm)}function S(n,e,t,r){for(var i=t;i<r;i++){var o=e[i];if(a(o)&&er(n,o))return i}}function A(n,e,t,o,c,d){if(n!==e){a(e.elm)&&a(o)&&(e=o[c]=bn(e));var p=e.elm=n.elm;if(i(n.isAsyncPlaceholder))a(e.asyncFactory.resolved)?x(n.elm,e,t):e.isAsyncPlaceholder=!0;else if(i(e.isStatic)&&i(n.isStatic)&&e.key===n.key&&(i(e.isCloned)||i(e.isOnce)))e.componentInstance=n.componentInstance;else{var f,m=e.data;a(m)&&a(f=m.hook)&&a(f=f.prepatch)&&f(n,e);var h=n.children,g=e.children;if(a(m)&&v(e)){for(f=0;f<s.update.length;++f)s.update[f](n,e);a(f=m.hook)&&a(f=f.update)&&f(n,e)}r(e.text)?a(h)&&a(g)?h!==g&&function(n,e,t,i,o){var s,c,d,p=0,f=0,m=e.length-1,h=e[0],v=e[m],g=t.length-1,b=t[0],y=t[g],w=!o;for(0;p<=m&&f<=g;)r(h)?h=e[++p]:r(v)?v=e[--m]:er(h,b)?(A(h,b,i,t,f),h=e[++p],b=t[++f]):er(v,y)?(A(v,y,i,t,g),v=e[--m],y=t[--g]):er(h,y)?(A(h,y,i,t,g),w&&l.insertBefore(n,h.elm,l.nextSibling(v.elm)),h=e[++p],y=t[--g]):er(v,b)?(A(v,b,i,t,f),w&&l.insertBefore(n,v.elm,h.elm),v=e[--m],b=t[++f]):(r(s)&&(s=tr(e,p,m)),r(c=a(b.key)?s[b.key]:S(b,e,p,m))?u(b,i,n,h.elm,!1,t,f):er(d=e[c],b)?(A(d,b,i,t,f),e[c]=void 0,w&&l.insertBefore(n,d.elm,h.elm)):u(b,i,n,h.elm,!1,t,f),b=t[++f]);p>m?T(n,r(t[g+1])?null:t[g+1].elm,t,f,g,i):f>g&&C(e,p,m)}(p,h,g,t,d):a(g)?(a(n.text)&&l.setTextContent(p,""),T(p,null,g,0,g.length-1,t)):a(h)?C(h,0,h.length-1):a(n.text)&&l.setTextContent(p,""):n.text!==e.text&&l.setTextContent(p,e.text),a(m)&&a(f=m.hook)&&a(f=f.postpatch)&&f(n,e)}}}function R(n,e,t){if(i(t)&&a(n.parent))n.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var P=h("attrs,class,staticClass,staticStyle,key");function x(n,e,t,r){var o,s=e.tag,c=e.data,l=e.children;if(r=r||c&&c.pre,e.elm=n,i(e.isComment)&&a(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(a(c)&&(a(o=c.hook)&&a(o=o.init)&&o(e,!0),a(o=e.componentInstance)))return p(e,t),!0;if(a(s)){if(a(l))if(n.hasChildNodes())if(a(o=c)&&a(o=o.domProps)&&a(o=o.innerHTML)){if(o!==n.innerHTML)return!1}else{for(var d=!0,u=n.firstChild,f=0;f<l.length;f++){if(!u||!x(u,l[f],t,r)){d=!1;break}u=u.nextSibling}if(!d||u)return!1}else m(e,l,t);if(a(c)){var h=!1;for(var v in c)if(!P(v)){h=!0,g(e,t);break}!h&&c.class&&ae(c.class)}}else n.data!==e.text&&(n.data=e.text);return!0}return function(n,e,t,o){if(!r(e)){var c,d=!1,p=[];if(r(n))d=!0,u(e,p);else{var f=a(n.nodeType);if(!f&&er(n,e))A(n,e,p,null,null,o);else{if(f){if(1===n.nodeType&&n.hasAttribute("data-server-rendered")&&(n.removeAttribute("data-server-rendered"),t=!0),i(t)&&x(n,e,p))return R(e,p,!0),n;c=n,n=new mn(l.tagName(c).toLowerCase(),{},[],void 0,c)}var m=n.elm,h=l.parentNode(m);if(u(e,p,m._leaveCb?null:h,l.nextSibling(m)),a(e.parent))for(var g=e.parent,b=v(e);g;){for(var T=0;T<s.destroy.length;++T)s.destroy[T](g);if(g.elm=e.elm,b){for(var w=0;w<s.create.length;++w)s.create[w](Qt,g);var S=g.data.hook.insert;if(S.merged)for(var P=1;P<S.fns.length;P++)S.fns[P]()}else Kt(g);g=g.parent}a(h)?C([n],0,0):a(n.tag)&&y(n)}}return R(e,p,d),e.elm}a(n)&&y(n)}}({nodeOps:Zt,modules:[fr,vr,Sr,Pr,Mr,$?{create:sa,activate:sa,remove:function(n,e){!0!==n.data.show?aa(n,e):e()}}:{}].concat(lr)});X&&document.addEventListener("selectionchange",(function(){var n=document.activeElement;n&&n.vmodel&&va(n,"input")}));var la={inserted:function(n,e,t,r){"select"===t.tag?(r.elm&&!r.elm._vOptions?ce(t,"postpatch",(function(){la.componentUpdated(n,e,t)})):da(n,e,t.context),n._vOptions=[].map.call(n.options,fa)):("textarea"===t.tag||Xt(n.type))&&(n._vModifiers=e.modifiers,e.modifiers.lazy||(n.addEventListener("compositionstart",ma),n.addEventListener("compositionend",ha),n.addEventListener("change",ha),X&&(n.vmodel=!0)))},componentUpdated:function(n,e,t){if("select"===t.tag){da(n,e,t.context);var r=n._vOptions,a=n._vOptions=[].map.call(n.options,fa);if(a.some((function(n,e){return!D(n,r[e])})))(n.multiple?e.value.some((function(n){return pa(n,a)})):e.value!==e.oldValue&&pa(e.value,a))&&va(n,"change")}}};function da(n,e,t){ua(n,e,t),(Y||Z)&&setTimeout((function(){ua(n,e,t)}),0)}function ua(n,e,t){var r=e.value,a=n.multiple;if(!a||Array.isArray(r)){for(var i,o,s=0,c=n.options.length;s<c;s++)if(o=n.options[s],a)i=O(r,fa(o))>-1,o.selected!==i&&(o.selected=i);else if(D(fa(o),r))return void(n.selectedIndex!==s&&(n.selectedIndex=s));a||(n.selectedIndex=-1)}}function pa(n,e){return e.every((function(e){return!D(e,n)}))}function fa(n){return"_value"in n?n._value:n.value}function ma(n){n.target.composing=!0}function ha(n){n.target.composing&&(n.target.composing=!1,va(n.target,"input"))}function va(n,e){var t=document.createEvent("HTMLEvents");t.initEvent(e,!0,!0),n.dispatchEvent(t)}function ga(n){return!n.componentInstance||n.data&&n.data.transition?n:ga(n.componentInstance._vnode)}var ba={model:la,show:{bind:function(n,e,t){var r=e.value,a=(t=ga(t)).data&&t.data.transition,i=n.__vOriginalDisplay="none"===n.style.display?"":n.style.display;r&&a?(t.data.show=!0,ra(t,(function(){n.style.display=i}))):n.style.display=r?i:"none"},update:function(n,e,t){var r=e.value;!r!=!e.oldValue&&((t=ga(t)).data&&t.data.transition?(t.data.show=!0,r?ra(t,(function(){n.style.display=n.__vOriginalDisplay})):aa(t,(function(){n.style.display="none"}))):n.style.display=r?n.__vOriginalDisplay:"none")},unbind:function(n,e,t,r,a){a||(n.style.display=n.__vOriginalDisplay)}}},Ta={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ya(n){var e=n&&n.componentOptions;return e&&e.Ctor.options.abstract?ya(Ge(e.children)):n}function Ca(n){var e={},t=n.$options;for(var r in t.propsData)e[r]=n[r];var a=t._parentListeners;for(var i in a)e[w(i)]=a[i];return e}function wa(n,e){if(/\d-keep-alive$/.test(e.tag))return n("keep-alive",{props:e.componentOptions.propsData})}var Sa=function(n){return n.tag||he(n)},Aa=function(n){return"show"===n.name},Ra={name:"transition",props:Ta,abstract:!0,render:function(n){var e=this,t=this.$slots.default;if(t&&(t=t.filter(Sa)).length){0;var r=this.mode;0;var a=t[0];if(function(n){for(;n=n.parent;)if(n.data.transition)return!0}(this.$vnode))return a;var i=ya(a);if(!i)return a;if(this._leaving)return wa(n,a);var s="__transition-"+this._uid+"-";i.key=null==i.key?i.isComment?s+"comment":s+i.tag:o(i.key)?0===String(i.key).indexOf(s)?i.key:s+i.key:i.key;var c=(i.data||(i.data={})).transition=Ca(this),l=this._vnode,d=ya(l);if(i.data.directives&&i.data.directives.some(Aa)&&(i.data.show=!0),d&&d.data&&!function(n,e){return e.key===n.key&&e.tag===n.tag}(i,d)&&!he(d)&&(!d.componentInstance||!d.componentInstance._vnode.isComment)){var u=d.data.transition=I({},c);if("out-in"===r)return this._leaving=!0,ce(u,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),wa(n,a);if("in-out"===r){if(he(i))return l;var p,f=function(){p()};ce(c,"afterEnter",f),ce(c,"enterCancelled",f),ce(u,"delayLeave",(function(n){p=n}))}}return a}}},Pa=I({tag:String,moveClass:String},Ta);function xa(n){n.elm._moveCb&&n.elm._moveCb(),n.elm._enterCb&&n.elm._enterCb()}function Ia(n){n.data.newPos=n.elm.getBoundingClientRect()}function ka(n){var e=n.data.pos,t=n.data.newPos,r=e.left-t.left,a=e.top-t.top;if(r||a){n.data.moved=!0;var i=n.elm.style;i.transform=i.WebkitTransform="translate("+r+"px,"+a+"px)",i.transitionDuration="0s"}}delete Pa.mode;var Na={Transition:Ra,TransitionGroup:{props:Pa,beforeMount:function(){var n=this,e=this._update;this._update=function(t,r){var a=Je(n);n.__patch__(n._vnode,n.kept,!1,!0),n._vnode=n.kept,a(),e.call(n,t,r)}},render:function(n){for(var e=this.tag||this.$vnode.data.tag||"span",t=Object.create(null),r=this.prevChildren=this.children,a=this.$slots.default||[],i=this.children=[],o=Ca(this),s=0;s<a.length;s++){var c=a[s];if(c.tag)if(null!=c.key&&0!==String(c.key).indexOf("__vlist"))i.push(c),t[c.key]=c,(c.data||(c.data={})).transition=o;else;}if(r){for(var l=[],d=[],u=0;u<r.length;u++){var p=r[u];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),t[p.key]?l.push(p):d.push(p)}this.kept=n(e,null,l),this.removed=d}return n(e,null,i)},updated:function(){var n=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";n.length&&this.hasMove(n[0].elm,e)&&(n.forEach(xa),n.forEach(Ia),n.forEach(ka),this._reflow=document.body.offsetHeight,n.forEach((function(n){if(n.data.moved){var t=n.elm,r=t.style;Zr(t,e),r.transform=r.WebkitTransform=r.transitionDuration="",t.addEventListener(Gr,t._moveCb=function n(r){r&&r.target!==t||r&&!/transform$/.test(r.propertyName)||(t.removeEventListener(Gr,n),t._moveCb=null,Jr(t,e))})}})))},methods:{hasMove:function(n,e){if(!qr)return!1;if(this._hasMove)return this._hasMove;var t=n.cloneNode();n._transitionClasses&&n._transitionClasses.forEach((function(n){zr(t,n)})),Lr(t,e),t.style.display="none",this.$el.appendChild(t);var r=na(t);return this.$el.removeChild(t),this._hasMove=r.hasTransform}}}};St.config.mustUseProp=function(n,e,t){return"value"===t&&Et(n)&&"button"!==e||"selected"===t&&"option"===n||"checked"===t&&"input"===n||"muted"===t&&"video"===n},St.config.isReservedTag=Ht,St.config.isReservedAttr=_t,St.config.getTagNamespace=function(n){return Vt(n)?"svg":"math"===n?"math":void 0},St.config.isUnknownElement=function(n){if(!$)return!0;if(Ht(n))return!1;if(n=n.toLowerCase(),null!=Yt[n])return Yt[n];var e=document.createElement(n);return n.indexOf("-")>-1?Yt[n]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Yt[n]=/HTMLUnknownElement/.test(e.toString())},I(St.options.directives,ba),I(St.options.components,Na),St.prototype.__patch__=$?ca:N,St.prototype.$mount=function(n,e){return function(n,e,t){var r;return n.$el=e,n.$options.render||(n.$options.render=vn),nt(n,"beforeMount"),r=function(){n._update(n._render(),t)},new pt(n,r,N,{before:function(){n._isMounted&&!n._isDestroyed&&nt(n,"beforeUpdate")}},!0),t=!1,null==n.$vnode&&(n._isMounted=!0,nt(n,"mounted")),n}(this,n=n&&$?function(n){if("string"==typeof n){var e=document.querySelector(n);return e||document.createElement("div")}return n}(n):void 0,e)},$&&setTimeout((function(){B.devtools&&rn&&rn.emit("init",St)}),0),e.default=St}.call(this,t(96))},function(n,e,t){(function(e){var t=function(n){return n&&n.Math==Math&&n};n.exports=t("object"==typeof globalThis&&globalThis)||t("object"==typeof window&&window)||t("object"==typeof self&&self)||t("object"==typeof e&&e)||function(){return this}()||Function("return this")()}).call(this,t(96))},function(n,e,t){"use strict";t.d(e,"d",(function(){return C})),t.d(e,"c",(function(){return w})),t.d(e,"b",(function(){return S})),t.d(e,"e",(function(){return A})),t.d(e,"a",(function(){return R})),t.d(e,"f",(function(){return P})),t.d(e,"g",(function(){return x})),t.d(e,"h",(function(){return I}));var r=t(122),a=t(93),i=t(7),o=(t(25),t(214),t(24),t(40),t(56),t(257),t(258),t(6),t(18),t(20),t(50),t(39),t(53),t(31),t(0)),s={NotFound:function(){return Promise.all([t.e(0),t.e(22)]).then(t.bind(null,562))},Layout:function(){return Promise.all([t.e(0),t.e(11)]).then(t.bind(null,560))}},c={"v-def6137a":function(){return t.e(25).then(t.bind(null,572))},"v-31935129":function(){return t.e(26).then(t.bind(null,573))},"v-787191d5":function(){return t.e(27).then(t.bind(null,574))},"v-44e9b923":function(){return t.e(28).then(t.bind(null,575))},"v-75b57b12":function(){return t.e(29).then(t.bind(null,576))},"v-7054a95a":function(){return t.e(30).then(t.bind(null,577))},"v-4911e6f6":function(){return t.e(31).then(t.bind(null,578))},"v-49f15b7d":function(){return t.e(32).then(t.bind(null,579))},"v-6d8ced93":function(){return t.e(33).then(t.bind(null,580))},"v-4fd75e1a":function(){return t.e(34).then(t.bind(null,581))},"v-12491e9e":function(){return t.e(35).then(t.bind(null,582))},"v-73a49df9":function(){return t.e(36).then(t.bind(null,583))},"v-3bcd4756":function(){return t.e(37).then(t.bind(null,584))},"v-363e47ae":function(){return t.e(38).then(t.bind(null,585))},"v-4ae09651":function(){return t.e(39).then(t.bind(null,586))},"v-124c469a":function(){return t.e(40).then(t.bind(null,587))},"v-6f153665":function(){return t.e(41).then(t.bind(null,588))},"v-acfed1b6":function(){return t.e(42).then(t.bind(null,589))},"v-10f94591":function(){return t.e(43).then(t.bind(null,590))},"v-9d8b297e":function(){return t.e(44).then(t.bind(null,591))},"v-a0a44bfa":function(){return t.e(45).then(t.bind(null,592))},"v-05f9fb4f":function(){return t.e(46).then(t.bind(null,593))},"v-31f20e97":function(){return t.e(47).then(t.bind(null,594))},"v-6fd09404":function(){return t.e(48).then(t.bind(null,595))},"v-18401afe":function(){return t.e(49).then(t.bind(null,596))},"v-285dec31":function(){return t.e(50).then(t.bind(null,597))},"v-1387aaf0":function(){return t.e(51).then(t.bind(null,598))},"v-5be1efc9":function(){return t.e(52).then(t.bind(null,599))},"v-847cbade":function(){return t.e(53).then(t.bind(null,600))},"v-1dbd7f22":function(){return t.e(54).then(t.bind(null,601))},"v-4f79ce95":function(){return t.e(55).then(t.bind(null,602))},"v-18ce054f":function(){return t.e(56).then(t.bind(null,603))},"v-74bdca4e":function(){return t.e(57).then(t.bind(null,604))},"v-7f9f06de":function(){return t.e(58).then(t.bind(null,605))},"v-71f1c60e":function(){return t.e(59).then(t.bind(null,606))},"v-2e5c424e":function(){return t.e(60).then(t.bind(null,607))},"v-29cccf0e":function(){return t.e(61).then(t.bind(null,608))},"v-bff1260a":function(){return t.e(62).then(t.bind(null,609))},"v-585d7925":function(){return t.e(63).then(t.bind(null,610))},"v-0cfcb6f6":function(){return t.e(64).then(t.bind(null,611))},"v-10da7ea5":function(){return t.e(65).then(t.bind(null,612))},"v-399216a5":function(){return t.e(66).then(t.bind(null,613))},"v-4753273e":function(){return t.e(67).then(t.bind(null,614))},"v-a0941456":function(){return t.e(68).then(t.bind(null,615))},"v-73804bfb":function(){return t.e(69).then(t.bind(null,616))},"v-0998f6db":function(){return t.e(70).then(t.bind(null,617))},"v-3386f7db":function(){return t.e(71).then(t.bind(null,618))},"v-3b65677e":function(){return t.e(72).then(t.bind(null,619))},"v-a7b61c28":function(){return t.e(73).then(t.bind(null,620))},"v-7a2b45a4":function(){return t.e(74).then(t.bind(null,621))}};function l(n){var e=Object.create(null);return function(t){return e[t]||(e[t]=n(t))}}var d=/-(\w)/g,u=l((function(n){return n.replace(d,(function(n,e){return e?e.toUpperCase():""}))})),p=/\B([A-Z])/g,f=l((function(n){return n.replace(p,"-$1").toLowerCase()})),m=l((function(n){return n.charAt(0).toUpperCase()+n.slice(1)}));function h(n,e){if(e)return n(e)?n(e):e.includes("-")?n(m(u(e))):n(m(e))||n(f(e))}var v=Object.assign({},s,c),g=function(n){return v[n]},b=function(n){return c[n]},T=function(n){return s[n]},y=function(n){return o.default.component(n)};function C(n){return h(b,n)}function w(n){return h(T,n)}function S(n){return h(g,n)}function A(n){return h(y,n)}function R(){for(var n=arguments.length,e=new Array(n),t=0;t<n;t++)e[t]=arguments[t];return Promise.all(e.filter((function(n){return n})).map(function(){var n=Object(i.a)(regeneratorRuntime.mark((function n(e){var t;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(A(e)||!S(e)){n.next=5;break}return n.next=3,S(e)();case 3:t=n.sent,o.default.component(e,t.default);case 5:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()))}function P(n,e,t){var r;switch(e){case"components":n[e]||(n[e]={}),Object.assign(n[e],t);break;case"mixins":n[e]||(n[e]=[]),(r=n[e]).push.apply(r,Object(a.a)(t));break;default:throw new Error("Unknown option name.")}}function x(n,e){var t=n.$localePath;return"object"===Object(r.a)(e)&&e[t]?e[t]:e}function I(n,e){"undefined"!=typeof window&&window.__VUEPRESS__&&(window.__VUEPRESS__[n]=e)}},function(n,e,t){var r=t(1),a=t(46).f,i=t(37),o=t(21),s=t(134),c=t(140),l=t(107);n.exports=function(n,e){var t,d,u,p,f,m=n.target,h=n.global,v=n.stat;if(t=h?r:v?r[m]||s(m,{}):(r[m]||{}).prototype)for(d in e){if(p=e[d],u=n.noTargetGet?(f=a(t,d))&&f.value:t[d],!l(h?d:m+(v?".":"#")+d,n.forced)&&void 0!==u){if(typeof p==typeof u)continue;c(p,u)}(n.sham||u&&u.sham)&&i(p,"sham",!0),o(t,d,p,n)}}},function(n,e){n.exports=function(n){try{return!!n()}catch(n){return!0}}},function(n,e,t){var r=t(79),a=Function.prototype,i=a.bind,o=a.call,s=r&&i.bind(o,o);n.exports=r?function(n){return n&&s(n)}:function(n){return n&&function(){return o.apply(n,arguments)}}},function(n,e,t){var r=t(144),a=t(21),i=t(287);r||a(Object.prototype,"toString",i,{unsafe:!0})},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(6);function r(n,e,t,r,a,i,o){try{var s=n[i](o),c=s.value}catch(n){return void t(n)}s.done?e(c):Promise.resolve(c).then(r,a)}function a(n){return function(){var e=this,t=arguments;return new Promise((function(a,i){var o=n.apply(e,t);function s(n){r(o,a,i,s,c,"next",n)}function c(n){r(o,a,i,s,c,"throw",n)}s(void 0)}))}}},function(n,e){n.exports=function(n){return"function"==typeof n}},function(n,e,t){var r=t(1),a=t(64),i=t(12),o=t(100),s=t(65),c=t(178),l=a("wks"),d=r.Symbol,u=d&&d.for,p=c?d:d&&d.withoutSetter||o;n.exports=function(n){if(!i(l,n)||!s&&"string"!=typeof l[n]){var e="Symbol."+n;s&&i(d,n)?l[n]=d[n]:l[n]=c&&u?u(e):p(e)}return l[n]}},function(n,e,t){var r=t(4);n.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(n,e,t){var r=t(79),a=Function.prototype.call;n.exports=r?a.bind(a):function(){return a.apply(a,arguments)}},function(n,e,t){var r=t(5),a=t(30),i=r({}.hasOwnProperty);n.exports=Object.hasOwn||function(n,e){return i(a(n),e)}},function(n,e,t){var r=t(1),a=t(99),i=r.String;n.exports=function(n){if("Symbol"===a(n))throw TypeError("Cannot convert a Symbol value to a string");return i(n)}},function(n,e,t){var r=t(1),a=t(15),i=r.String,o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not an object")}},function(n,e,t){var r=t(8);n.exports=function(n){return"object"==typeof n?null!==n:r(n)}},function(n,e,t){var r=t(1),a=t(10),i=t(180),o=t(179),s=t(14),c=t(102),l=r.TypeError,d=Object.defineProperty,u=Object.getOwnPropertyDescriptor;e.f=a?o?function(n,e,t){if(s(n),e=c(e),s(t),"function"==typeof n&&"prototype"===e&&"value"in t&&"writable"in t&&!t.writable){var r=u(n,e);r&&r.writable&&(n[e]=t.value,t={configurable:"configurable"in t?t.configurable:r.configurable,enumerable:"enumerable"in t?t.enumerable:r.enumerable,writable:!1})}return d(n,e,t)}:d:function(n,e,t){if(s(n),e=c(e),s(t),i)try{return d(n,e,t)}catch(n){}if("get"in t||"set"in t)throw l("Accessors not supported");return"value"in t&&(n[e]=t.value),n}},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(48),t(90),t(39),t(6),t(421),t(26),t(27),t(201),t(422),t(92);var r=t(23);function a(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,r)}return t}function i(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?a(Object(t),!0).forEach((function(e){Object(r.a)(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}},function(n,e,t){"use strict";var r=t(198).charAt,a=t(13),i=t(41),o=t(184),s=i.set,c=i.getterFor("String Iterator");o(String,"String",(function(n){s(this,{type:"String Iterator",string:a(n),index:0})}),(function(){var n,e=c(this),t=e.string,a=e.index;return a>=t.length?{value:void 0,done:!0}:(n=r(t,a),e.index+=n.length,{value:n,done:!1})}))},function(n,e,t){"use strict";function r(n,e,t,r,a,i,o,s){var c,l="function"==typeof n?n.options:n;if(e&&(l.render=e,l.staticRenderFns=t,l._compiled=!0),r&&(l.functional=!0),i&&(l._scopeId="data-v-"+i),o?(c=function(n){(n=n||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(n=__VUE_SSR_CONTEXT__),a&&a.call(this,n),n&&n._registeredComponents&&n._registeredComponents.add(o)},l._ssrRegister=c):a&&(c=s?function(){a.call(this,(l.functional?this.parent:this).$root.$options.shadowRoot)}:a),c)if(l.functional){l._injectStyles=c;var d=l.render;l.render=function(n,e){return c.call(e),d(n,e)}}else{var u=l.beforeCreate;l.beforeCreate=u?[].concat(u,c):[c]}return{exports:n,options:l}}t.d(e,"a",(function(){return r}))},function(n,e,t){var r=t(1),a=t(199),i=t(200),o=t(171),s=t(37),c=t(9),l=c("iterator"),d=c("toStringTag"),u=o.values,p=function(n,e){if(n){if(n[l]!==u)try{s(n,l,u)}catch(e){n[l]=u}if(n[d]||s(n,d,e),a[e])for(var t in o)if(n[t]!==o[t])try{s(n,t,o[t])}catch(e){n[t]=o[t]}}};for(var f in a)p(r[f]&&r[f].prototype,f);p(i,"DOMTokenList")},function(n,e,t){var r=t(1),a=t(8),i=t(37),o=t(185),s=t(134);n.exports=function(n,e,t,c){var l=!!c&&!!c.unsafe,d=!!c&&!!c.enumerable,u=!!c&&!!c.noTargetGet,p=c&&void 0!==c.name?c.name:e;return a(t)&&o(t,p,c),n===r?(d?n[e]=t:s(e,t),n):(l?!u&&n[e]&&(d=!0):delete n[e],d?n[e]=t:i(n,e,t),n)}},function(n,e,t){var r=t(1),a=t(8),i=function(n){return a(n)?n:void 0};n.exports=function(n,e){return arguments.length<2?i(r[n]):r[n]&&r[n][e]}},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(92);function r(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}},function(n,e,t){"use strict";var r=t(3),a=t(113);r({target:"RegExp",proto:!0,forced:/./.exec!==a},{exec:a})},function(n,e,t){var r=function(n){"use strict";var e=Object.prototype,t=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},a=r.iterator||"@@iterator",i=r.asyncIterator||"@@asyncIterator",o=r.toStringTag||"@@toStringTag";function s(n,e,t){return Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}),n[e]}try{s({},"")}catch(n){s=function(n,e,t){return n[e]=t}}function c(n,e,t,r){var a=e&&e.prototype instanceof u?e:u,i=Object.create(a.prototype),o=new S(r||[]);return i._invoke=function(n,e,t){var r="suspendedStart";return function(a,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===a)throw i;return R()}for(t.method=a,t.arg=i;;){var o=t.delegate;if(o){var s=y(o,t);if(s){if(s===d)continue;return s}}if("next"===t.method)t.sent=t._sent=t.arg;else if("throw"===t.method){if("suspendedStart"===r)throw r="completed",t.arg;t.dispatchException(t.arg)}else"return"===t.method&&t.abrupt("return",t.arg);r="executing";var c=l(n,e,t);if("normal"===c.type){if(r=t.done?"completed":"suspendedYield",c.arg===d)continue;return{value:c.arg,done:t.done}}"throw"===c.type&&(r="completed",t.method="throw",t.arg=c.arg)}}}(n,t,o),i}function l(n,e,t){try{return{type:"normal",arg:n.call(e,t)}}catch(n){return{type:"throw",arg:n}}}n.wrap=c;var d={};function u(){}function p(){}function f(){}var m={};s(m,a,(function(){return this}));var h=Object.getPrototypeOf,v=h&&h(h(A([])));v&&v!==e&&t.call(v,a)&&(m=v);var g=f.prototype=u.prototype=Object.create(m);function b(n){["next","throw","return"].forEach((function(e){s(n,e,(function(n){return this._invoke(e,n)}))}))}function T(n,e){var r;this._invoke=function(a,i){function o(){return new e((function(r,o){!function r(a,i,o,s){var c=l(n[a],n,i);if("throw"!==c.type){var d=c.arg,u=d.value;return u&&"object"==typeof u&&t.call(u,"__await")?e.resolve(u.__await).then((function(n){r("next",n,o,s)}),(function(n){r("throw",n,o,s)})):e.resolve(u).then((function(n){d.value=n,o(d)}),(function(n){return r("throw",n,o,s)}))}s(c.arg)}(a,i,r,o)}))}return r=r?r.then(o,o):o()}}function y(n,e){var t=n.iterator[e.method];if(void 0===t){if(e.delegate=null,"throw"===e.method){if(n.iterator.return&&(e.method="return",e.arg=void 0,y(n,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var r=l(t,n.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,d;var a=r.arg;return a?a.done?(e[n.resultName]=a.value,e.next=n.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,d):a:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function C(n){var e={tryLoc:n[0]};1 in n&&(e.catchLoc=n[1]),2 in n&&(e.finallyLoc=n[2],e.afterLoc=n[3]),this.tryEntries.push(e)}function w(n){var e=n.completion||{};e.type="normal",delete e.arg,n.completion=e}function S(n){this.tryEntries=[{tryLoc:"root"}],n.forEach(C,this),this.reset(!0)}function A(n){if(n){var e=n[a];if(e)return e.call(n);if("function"==typeof n.next)return n;if(!isNaN(n.length)){var r=-1,i=function e(){for(;++r<n.length;)if(t.call(n,r))return e.value=n[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:R}}function R(){return{value:void 0,done:!0}}return p.prototype=f,s(g,"constructor",f),s(f,"constructor",p),p.displayName=s(f,o,"GeneratorFunction"),n.isGeneratorFunction=function(n){var e="function"==typeof n&&n.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},n.mark=function(n){return Object.setPrototypeOf?Object.setPrototypeOf(n,f):(n.__proto__=f,s(n,o,"GeneratorFunction")),n.prototype=Object.create(g),n},n.awrap=function(n){return{__await:n}},b(T.prototype),s(T.prototype,i,(function(){return this})),n.AsyncIterator=T,n.async=function(e,t,r,a,i){void 0===i&&(i=Promise);var o=new T(c(e,t,r,a),i);return n.isGeneratorFunction(t)?o:o.next().then((function(n){return n.done?n.value:o.next()}))},b(g),s(g,o,"Generator"),s(g,a,(function(){return this})),s(g,"toString",(function(){return"[object Generator]"})),n.keys=function(n){var e=[];for(var t in n)e.push(t);return e.reverse(),function t(){for(;e.length;){var r=e.pop();if(r in n)return t.value=r,t.done=!1,t}return t.done=!0,t}},n.values=A,S.prototype={constructor:S,reset:function(n){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!n)for(var e in this)"t"===e.charAt(0)&&t.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var n=this.tryEntries[0].completion;if("throw"===n.type)throw n.arg;return this.rval},dispatchException:function(n){if(this.done)throw n;var e=this;function r(t,r){return o.type="throw",o.arg=n,e.next=t,r&&(e.method="next",e.arg=void 0),!!r}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],o=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var s=t.call(i,"catchLoc"),c=t.call(i,"finallyLoc");if(s&&c){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(n,e){for(var r=this.tryEntries.length-1;r>=0;--r){var a=this.tryEntries[r];if(a.tryLoc<=this.prev&&t.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var i=a;break}}i&&("break"===n||"continue"===n)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var o=i?i.completion:{};return o.type=n,o.arg=e,i?(this.method="next",this.next=i.finallyLoc,d):this.complete(o)},complete:function(n,e){if("throw"===n.type)throw n.arg;return"break"===n.type||"continue"===n.type?this.next=n.arg:"return"===n.type?(this.rval=this.arg=n.arg,this.method="return",this.next="end"):"normal"===n.type&&e&&(this.next=e),d},finish:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.finallyLoc===n)return this.complete(t.completion,t.afterLoc),w(t),d}},catch:function(n){for(var e=this.tryEntries.length-1;e>=0;--e){var t=this.tryEntries[e];if(t.tryLoc===n){var r=t.completion;if("throw"===r.type){var a=r.arg;w(t)}return a}}throw new Error("illegal catch attempt")},delegateYield:function(n,e,t){return this.delegate={iterator:A(n),resultName:e,nextLoc:t},"next"===this.method&&(this.arg=void 0),d}},n}(n.exports);try{regeneratorRuntime=r}catch(n){"object"==typeof globalThis?globalThis.regeneratorRuntime=r:Function("r","regeneratorRuntime = r")(r)}},function(n,e,t){"use strict";var r=t(3),a=t(204);r({target:"Array",proto:!0,forced:[].forEach!=a},{forEach:a})},function(n,e,t){var r=t(1),a=t(199),i=t(200),o=t(204),s=t(37),c=function(n){if(n&&n.forEach!==o)try{s(n,"forEach",o)}catch(e){n.forEach=o}};for(var l in a)a[l]&&c(r[l]&&r[l].prototype);c(i)},function(n,e,t){var r=t(1).TypeError;n.exports=function(n){if(null==n)throw r("Can't call method on "+n);return n}},function(n,e){n.exports=!1},function(n,e,t){var r=t(1),a=t(28),i=r.Object;n.exports=function(n){return i(a(n))}},function(n,e,t){var r=t(21),a=t(307),i=Error.prototype;i.toString!==a&&r(i,"toString",a)},function(n,e,t){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var a in e=arguments[t])Object.prototype.hasOwnProperty.call(e,a)&&(n[a]=e[a]);return n}).apply(this,arguments)},a=this&&this.__read||function(n,e){var t="function"==typeof Symbol&&n[Symbol.iterator];if(!t)return n;var r,a,i=t.call(n),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(n){a={error:n}}finally{try{r&&!r.done&&(t=i.return)&&t.call(i)}finally{if(a)throw a.error}}return o},i=this&&this.__spreadArray||function(n,e,t){if(t||2===arguments.length)for(var r,a=0,i=e.length;a<i;a++)!r&&a in e||(r||(r=Array.prototype.slice.call(e,0,a)),r[a]=e[a]);return n.concat(r||Array.prototype.slice.call(e))};Object.defineProperty(e,"__esModule",{value:!0});var o=function(n){if("object"==typeof n&&null!==n){if("function"==typeof Object.getPrototypeOf){var e=Object.getPrototypeOf(n);return e===Object.prototype||null===e}return"[object Object]"===Object.prototype.toString.call(n)}return!1},s=function(){for(var n=[],e=0;e<arguments.length;e++)n[e]=arguments[e];return n.reduce((function(n,e){return Object.keys(e).forEach((function(t){Array.isArray(n[t])&&Array.isArray(e[t])?n[t]=s.options.mergeArrays?Array.from(new Set(n[t].concat(e[t]))):e[t]:o(n[t])&&o(e[t])?n[t]=s(n[t],e[t]):n[t]=e[t]})),n}),{})},c={mergeArrays:!0};s.options=c,s.withOptions=function(n){for(var e=[],t=1;t<arguments.length;t++)e[t-1]=arguments[t];s.options=r({mergeArrays:!0},n);var o=s.apply(void 0,i([],a(e),!1));return s.options=c,o},e.default=s},function(n,e,t){var r=t(78),a=t(28);n.exports=function(n){return r(a(n))}},function(n,e,t){"use strict";var r=t(3),a=t(1),i=t(4),o=t(76),s=t(15),c=t(30),l=t(38),d=t(89),u=t(174),p=t(110),f=t(9),m=t(66),h=f("isConcatSpreadable"),v=a.TypeError,g=m>=51||!i((function(){var n=[];return n[h]=!1,n.concat()[0]!==n})),b=p("concat"),T=function(n){if(!s(n))return!1;var e=n[h];return void 0!==e?!!e:o(n)};r({target:"Array",proto:!0,arity:1,forced:!g||!b},{concat:function(n){var e,t,r,a,i,o=c(this),s=u(o,0),p=0;for(e=-1,r=arguments.length;e<r;e++)if(T(i=-1===e?o:arguments[e])){if(p+(a=l(i))>9007199254740991)throw v("Maximum allowed index exceeded");for(t=0;t<a;t++,p++)t in i&&d(s,p,i[t])}else{if(p>=9007199254740991)throw v("Maximum allowed index exceeded");d(s,p++,i)}return s.length=p,s}})},function(n,e,t){var r=t(5),a=r({}.toString),i=r("".slice);n.exports=function(n){return i(a(n),8,-1)}},function(n,e,t){var r=t(1),a=t(8),i=t(81),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a function")}},function(n,e,t){var r=t(10),a=t(16),i=t(61);n.exports=r?function(n,e,t){return a.f(n,e,i(1,t))}:function(n,e,t){return n[e]=t,n}},function(n,e,t){var r=t(52);n.exports=function(n){return r(n.length)}},function(n,e,t){"use strict";var r=t(3),a=t(62).filter;r({target:"Array",proto:!0,forced:!t(110)("filter")},{filter:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){"use strict";var r=t(51),a=t(11),i=t(5),o=t(130),s=t(4),c=t(14),l=t(8),d=t(72),u=t(52),p=t(13),f=t(28),m=t(153),h=t(60),v=t(308),g=t(131),b=t(9)("replace"),T=Math.max,y=Math.min,C=i([].concat),w=i([].push),S=i("".indexOf),A=i("".slice),R="$0"==="a".replace(/./,"$0"),P=!!/./[b]&&""===/./[b]("a","$0");o("replace",(function(n,e,t){var i=P?"$":"$0";return[function(n,t){var r=f(this),i=null==n?void 0:h(n,b);return i?a(i,n,r,t):a(e,p(r),n,t)},function(n,a){var o=c(this),s=p(n);if("string"==typeof a&&-1===S(a,i)&&-1===S(a,"$<")){var f=t(e,o,s,a);if(f.done)return f.value}var h=l(a);h||(a=p(a));var b=o.global;if(b){var R=o.unicode;o.lastIndex=0}for(var P=[];;){var x=g(o,s);if(null===x)break;if(w(P,x),!b)break;""===p(x[0])&&(o.lastIndex=m(s,u(o.lastIndex),R))}for(var I,k="",N=0,_=0;_<P.length;_++){for(var E=p((x=P[_])[0]),D=T(y(d(x.index),s.length),0),O=[],U=1;U<x.length;U++)w(O,void 0===(I=x[U])?I:String(I));var j=x.groups;if(h){var M=C([E],O,D,s);void 0!==j&&w(M,j);var B=p(r(a,void 0,M))}else B=v(E,s,D,O,j,a);D>=N&&(k+=A(s,N,D)+B,N=D+E.length)}return k+A(s,N)}]}),!!s((function(){var n=/./;return n.exec=function(){var n=[];return n.groups={a:"7"},n},"7"!=="".replace(n,"$<a>")}))||!R||P)},function(n,e,t){var r,a,i,o=t(269),s=t(1),c=t(5),l=t(15),d=t(37),u=t(12),p=t(133),f=t(104),m=t(82),h=s.TypeError,v=s.WeakMap;if(o||p.state){var g=p.state||(p.state=new v),b=c(g.get),T=c(g.has),y=c(g.set);r=function(n,e){if(T(g,n))throw new h("Object already initialized");return e.facade=n,y(g,n,e),e},a=function(n){return b(g,n)||{}},i=function(n){return T(g,n)}}else{var C=f("state");m[C]=!0,r=function(n,e){if(u(n,C))throw new h("Object already initialized");return e.facade=n,d(n,C,e),e},a=function(n){return u(n,C)?n[C]:{}},i=function(n){return u(n,C)}}n.exports={set:r,get:a,has:i,enforce:function(n){return i(n)?a(n):r(n,{})},getterFor:function(n){return function(e){var t;if(!l(e)||(t=a(e)).type!==n)throw h("Incompatible receiver, "+n+" required");return t}}}},function(n,e,t){var r=t(10),a=t(84).EXISTS,i=t(5),o=t(16).f,s=Function.prototype,c=i(s.toString),l=/function\b(?:\s|\/\*[\S\s]*?\*\/|\/\/[^\n\r]*[\n\r]+)*([^\s(/]*)/,d=i(l.exec);r&&!a&&o(s,"name",{configurable:!0,get:function(){try{return d(l,c(this))[1]}catch(n){return""}}})},function(n,e){var t=Array.isArray;n.exports=t},function(n,e,t){var r=t(22);n.exports=r("navigator","userAgent")||""},function(n,e,t){var r=t(5);n.exports=r({}.isPrototypeOf)},function(n,e,t){var r=t(10),a=t(11),i=t(139),o=t(61),s=t(33),c=t(102),l=t(12),d=t(180),u=Object.getOwnPropertyDescriptor;e.f=r?u:function(n,e){if(n=s(n),e=c(e),d)try{return u(n,e)}catch(n){}if(l(n,e))return o(!a(i.f,n,e),n[e])}},function(n,e,t){var r=t(216),a="object"==typeof self&&self&&self.Object===Object&&self,i=r||a||Function("return this")();n.exports=i},function(n,e,t){var r=t(3),a=t(30),i=t(103);r({target:"Object",stat:!0,forced:t(4)((function(){i(1)}))},{keys:function(n){return i(a(n))}})},function(n,e,t){var r,a=t(14),i=t(135),o=t(138),s=t(82),c=t(183),l=t(101),d=t(104),u=d("IE_PROTO"),p=function(){},f=function(n){return"<script>"+n+"<\/script>"},m=function(n){n.write(f("")),n.close();var e=n.parentWindow.Object;return n=null,e},h=function(){try{r=new ActiveXObject("htmlfile")}catch(n){}var n,e;h="undefined"!=typeof document?document.domain&&r?m(r):((e=l("iframe")).style.display="none",c.appendChild(e),e.src=String("javascript:"),(n=e.contentWindow.document).open(),n.write(f("document.F=Object")),n.close(),n.F):m(r);for(var t=o.length;t--;)delete h.prototype[o[t]];return h()};s[u]=!0,n.exports=Object.create||function(n,e){var t;return null!==n?(p.prototype=a(n),t=new p,p.prototype=null,t[u]=n):t=h(),void 0===e?t:i.f(t,e)}},function(n,e,t){"use strict";var r=t(3),a=t(62).map;r({target:"Array",proto:!0,forced:!t(110)("map")},{map:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(79),a=Function.prototype,i=a.apply,o=a.call;n.exports="object"==typeof Reflect&&Reflect.apply||(r?o.bind(i):function(){return o.apply(i,arguments)})},function(n,e,t){var r=t(72),a=Math.min;n.exports=function(n){return n>0?a(r(n),9007199254740991):0}},function(n,e,t){var r=t(3),a=t(1),i=t(51),o=t(303),s=a.WebAssembly,c=7!==Error("e",{cause:7}).cause,l=function(n,e){var t={};t[n]=o(n,e,c),r({global:!0,arity:1,forced:c},t)},d=function(n,e){if(s&&s[n]){var t={};t[n]=o("WebAssembly."+n,e,c),r({target:"WebAssembly",stat:!0,arity:1,forced:c},t)}};l("Error",(function(n){return function(e){return i(n,this,arguments)}})),l("EvalError",(function(n){return function(e){return i(n,this,arguments)}})),l("RangeError",(function(n){return function(e){return i(n,this,arguments)}})),l("ReferenceError",(function(n){return function(e){return i(n,this,arguments)}})),l("SyntaxError",(function(n){return function(e){return i(n,this,arguments)}})),l("TypeError",(function(n){return function(e){return i(n,this,arguments)}})),l("URIError",(function(n){return function(e){return i(n,this,arguments)}})),d("CompileError",(function(n){return function(e){return i(n,this,arguments)}})),d("LinkError",(function(n){return function(e){return i(n,this,arguments)}})),d("RuntimeError",(function(n){return function(e){return i(n,this,arguments)}}))},function(n,e,t){var r=t(327),a=t(330);n.exports=function(n,e){var t=a(n,e);return r(t)?t:void 0}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(129);t(90),t(112),t(6),t(150),t(18),t(20);var r=t(123);t(53),t(31);function a(n,e){return function(n){if(Array.isArray(n))return n}(n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(n,e)||Object(r.a)(n,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";var r=t(3),a=t(1),i=t(76),o=t(109),s=t(15),c=t(137),l=t(38),d=t(33),u=t(89),p=t(9),f=t(110),m=t(86),h=f("slice"),v=p("species"),g=a.Array,b=Math.max;r({target:"Array",proto:!0,forced:!h},{slice:function(n,e){var t,r,a,p=d(this),f=l(p),h=c(n,f),T=c(void 0===e?f:e,f);if(i(p)&&(t=p.constructor,(o(t)&&(t===g||i(t.prototype))||s(t)&&null===(t=t[v]))&&(t=void 0),t===g||void 0===t))return m(p,h,T);for(r=new(void 0===t?g:t)(b(T-h,0)),a=0;h<T;h++,a++)h in p&&u(r,a,p[h]);return r.length=a,r}})},function(n,e,t){"use strict";t.d(e,"e",(function(){return r})),t.d(e,"b",(function(){return i})),t.d(e,"j",(function(){return o})),t.d(e,"g",(function(){return c})),t.d(e,"h",(function(){return l})),t.d(e,"i",(function(){return d})),t.d(e,"c",(function(){return u})),t.d(e,"f",(function(){return p})),t.d(e,"l",(function(){return f})),t.d(e,"m",(function(){return m})),t.d(e,"d",(function(){return v})),t.d(e,"k",(function(){return g})),t.d(e,"n",(function(){return b})),t.d(e,"a",(function(){return y}));t(24),t(40),t(169),t(126),t(97),t(132),t(50),t(26),t(6),t(27),t(39),t(129),t(95),t(59),t(34),t(240),t(31),t(74);var r=/#.*$/,a=/\.(md|html)$/,i=/\/$/,o=/^[a-z]+:/i;function s(n){return decodeURI(n).replace(r,"").replace(a,"")}function c(n){return o.test(n)}function l(n){return/^mailto:/.test(n)}function d(n){return/^tel:/.test(n)}function u(n){if(c(n))return n;if(!n)return"404";var e=n.match(r),t=e?e[0]:"",a=s(n);return i.test(a)?n:a+".html"+t}function p(n,e){var t=n.hash,a=function(n){var e=n&&n.match(r);if(e)return e[0]}(e);return(!a||t===a)&&s(n.path)===s(e)}function f(n,e,t){if(c(e))return{type:"external",path:e};t&&(e=function(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}""!==a[0]&&a.unshift("");return a.join("/")}(e,t));for(var r=s(e),a=0;a<n.length;a++)if(s(n[a].regularPath)===r)return Object.assign({},n[a],{type:"page",path:u(n[a].path)});return console.error('[vuepress] No matching page found for sidebar item "'.concat(e,'"')),{}}function m(n,e,t,r){var a=t.pages,i=t.themeConfig,o=r&&i.locales&&i.locales[r]||i;if("auto"===(n.frontmatter.sidebar||o.sidebar||i.sidebar))return h(n);var s=o.sidebar||i.sidebar;if(s){var c=function(n,e){if(Array.isArray(e))return{base:"/",config:e};for(var t in e)if(0===(r=n,/(\.html|\/)$/.test(r)?r:r+"/").indexOf(encodeURI(t)))return{base:t,config:e[t]};var r;return{}}(e,s),l=c.base,d=c.config;return"auto"===d?h(n):d?d.map((function(n){return function n(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;if("string"==typeof e)return f(t,e,r);if(Array.isArray(e))return Object.assign(f(t,e[0],r),{title:e[1]});a>3&&console.error("[vuepress] detected a too deep nested sidebar group.");var i=e.children||[];return 0===i.length&&e.path?Object.assign(f(t,e.path,r),{title:e.title}):{type:"group",path:e.path,title:e.title,sidebarDepth:e.sidebarDepth,initialOpenGroupIndex:e.initialOpenGroupIndex,children:i.map((function(e){return n(e,t,r,a+1)})),collapsable:!1!==e.collapsable}}(n,a,l)})):[]}return[]}function h(n){var e=v(n.headers||[]);return[{type:"group",collapsable:!1,title:n.title,path:null,children:e.map((function(e){return{type:"auto",title:e.title,basePath:n.path,path:n.path+"#"+e.slug,children:e.children||[]}}))}]}function v(n){var e;return(n=n.map((function(n){return Object.assign({},n)}))).forEach((function(n){2===n.level?e=n:e&&(e.children||(e.children=[])).push(n)})),n.filter((function(n){return 2===n.level}))}function g(n){return Object.assign(n,{type:n.items&&n.items.length?"links":"link"})}function b(n){return Object.prototype.toString.call(n).match(/\[object (.*?)\]/)[1].toLowerCase()}function T(n){var e=n.frontmatter.date||n.lastUpdated||new Date,t=new Date(e);return"Invalid Date"==t&&e&&(t=new Date(e.replace(/-/g,"/"))),t.getTime()}function y(n,e){return T(e)-T(n)}},function(n,e,t){"use strict";var r=t(4);n.exports=function(n,e){var t=[][n];return!!t&&r((function(){t.call(null,e||function(){return 1},1)}))}},function(n,e,t){var r=t(5),a=t(21),i=Date.prototype,o=r(i.toString),s=r(i.getTime);"Invalid Date"!=String(new Date(NaN))&&a(i,"toString",(function(){var n=s(this);return n==n?o(this):"Invalid Date"}))},function(n,e,t){var r=t(36);n.exports=function(n,e){var t=n[e];return null==t?void 0:r(t)}},function(n,e){n.exports=function(n,e){return{enumerable:!(1&n),configurable:!(2&n),writable:!(4&n),value:e}}},function(n,e,t){var r=t(73),a=t(5),i=t(78),o=t(30),s=t(38),c=t(174),l=a([].push),d=function(n){var e=1==n,t=2==n,a=3==n,d=4==n,u=6==n,p=7==n,f=5==n||u;return function(m,h,v,g){for(var b,T,y=o(m),C=i(y),w=r(h,v),S=s(C),A=0,R=g||c,P=e?R(m,S):t||p?R(m,0):void 0;S>A;A++)if((f||A in C)&&(T=w(b=C[A],A,y),n))if(e)P[A]=T;else if(T)switch(n){case 3:return!0;case 5:return b;case 6:return A;case 2:l(P,b)}else switch(n){case 4:return!1;case 7:l(P,b)}return u?-1:a||d?d:P}};n.exports={forEach:d(0),map:d(1),filter:d(2),some:d(3),every:d(4),find:d(5),findIndex:d(6),filterReject:d(7)}},function(n,e){n.exports=function(n){return null!=n&&"object"==typeof n}},function(n,e,t){var r=t(29),a=t(133);(n.exports=function(n,e){return a[n]||(a[n]=void 0!==e?e:{})})("versions",[]).push({version:"3.22.4",mode:r?"pure":"global",copyright:"© 2014-2022 Denis Pushkarev (zloirock.ru)",license:"https://github.com/zloirock/core-js/blob/v3.22.4/LICENSE",source:"https://github.com/zloirock/core-js"})},function(n,e,t){var r=t(66),a=t(4);n.exports=!!Object.getOwnPropertySymbols&&!a((function(){var n=Symbol();return!String(n)||!(Object(n)instanceof Symbol)||!Symbol.sham&&r&&r<41}))},function(n,e,t){var r,a,i=t(1),o=t(44),s=i.process,c=i.Deno,l=s&&s.versions||c&&c.version,d=l&&l.v8;d&&(a=(r=d.split("."))[0]>0&&r[0]<4?1:+(r[0]+r[1])),!a&&o&&(!(r=o.match(/Edge\/(\d+)/))||r[1]>=74)&&(r=o.match(/Chrome\/(\d+)/))&&(a=+r[1]),n.exports=a},function(n,e,t){var r=t(182),a=t(138).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(n){return r(n,a)}},function(n,e,t){var r=t(1);n.exports=r.Promise},function(n,e,t){"use strict";var r=t(0);e.a=new r.default},function(n,e,t){"use strict";var r=t(10),a=t(1),i=t(5),o=t(107),s=t(21),c=t(12),l=t(152),d=t(45),u=t(80),p=t(181),f=t(4),m=t(67).f,h=t(46).f,v=t(16).f,g=t(407),b=t(167).trim,T=a.Number,y=T.prototype,C=a.TypeError,w=i("".slice),S=i("".charCodeAt),A=function(n){var e=p(n,"number");return"bigint"==typeof e?e:R(e)},R=function(n){var e,t,r,a,i,o,s,c,l=p(n,"number");if(u(l))throw C("Cannot convert a Symbol value to a number");if("string"==typeof l&&l.length>2)if(l=b(l),43===(e=S(l,0))||45===e){if(88===(t=S(l,2))||120===t)return NaN}else if(48===e){switch(S(l,1)){case 66:case 98:r=2,a=49;break;case 79:case 111:r=8,a=55;break;default:return+l}for(o=(i=w(l,2)).length,s=0;s<o;s++)if((c=S(i,s))<48||c>a)return NaN;return parseInt(i,r)}return+l};if(o("Number",!T(" 0o1")||!T("0b1")||T("+0x1"))){for(var P,x=function(n){var e=arguments.length<1?0:T(A(n)),t=this;return d(y,t)&&f((function(){g(t)}))?l(Object(e),t,x):e},I=r?m(T):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,fromString,range".split(","),k=0;I.length>k;k++)c(T,P=I[k])&&!c(x,P)&&v(x,P,h(T,P));x.prototype=y,y.constructor=x,s(a,"Number",x)}},function(n,e,t){t(404),t(405)},function(n,e){var t=Math.ceil,r=Math.floor;n.exports=function(n){var e=+n;return e!=e||0===e?0:(e>0?r:t)(e)}},function(n,e,t){var r=t(5),a=t(36),i=t(79),o=r(r.bind);n.exports=function(n,e){return a(n),void 0===e?n:i?o(n,e):function(){return n.apply(e,arguments)}}},function(n,e,t){"use strict";var r=t(84).PROPER,a=t(21),i=t(14),o=t(13),s=t(4),c=t(238),l=RegExp.prototype.toString,d=s((function(){return"/a/b"!=l.call({source:"a",flags:"b"})})),u=r&&"toString"!=l.name;(d||u)&&a(RegExp.prototype,"toString",(function(){var n=i(this);return"/"+o(n.source)+"/"+o(c(n))}),{unsafe:!0})},function(n,e,t){var r=t(16).f,a=t(12),i=t(9)("toStringTag");n.exports=function(n,e,t){n&&!t&&(n=n.prototype),n&&!a(n,i)&&r(n,i,{configurable:!0,value:e})}},function(n,e,t){var r=t(35);n.exports=Array.isArray||function(n){return"Array"==r(n)}},function(n,e,t){var r=t(91),a=t(312),i=t(313),o=r?r.toStringTag:void 0;n.exports=function(n){return null==n?void 0===n?"[object Undefined]":"[object Null]":o&&o in Object(n)?a(n):i(n)}},function(n,e,t){var r=t(1),a=t(5),i=t(4),o=t(35),s=r.Object,c=a("".split);n.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(n){return"String"==o(n)?c(n,""):s(n)}:s},function(n,e,t){var r=t(4);n.exports=!r((function(){var n=function(){}.bind();return"function"!=typeof n||n.hasOwnProperty("prototype")}))},function(n,e,t){var r=t(1),a=t(22),i=t(8),o=t(45),s=t(178),c=r.Object;n.exports=s?function(n){return"symbol"==typeof n}:function(n){var e=a("Symbol");return i(e)&&o(e.prototype,c(n))}},function(n,e,t){var r=t(1).String;n.exports=function(n){try{return r(n)}catch(n){return"Object"}}},function(n,e){n.exports={}},function(n,e){n.exports={}},function(n,e,t){var r=t(10),a=t(12),i=Function.prototype,o=r&&Object.getOwnPropertyDescriptor,s=a(i,"name"),c=s&&"something"===function(){}.name,l=s&&(!r||r&&o(i,"name").configurable);n.exports={EXISTS:s,PROPER:c,CONFIGURABLE:l}},function(n,e,t){var r=t(5),a=t(14),i=t(270);n.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var n,e=!1,t={};try{(n=r(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(t,[]),e=t instanceof Array}catch(n){}return function(t,r){return a(t),i(r),e?n(t,r):t.__proto__=r,t}}():void 0)},function(n,e,t){var r=t(5);n.exports=r([].slice)},function(n,e,t){var r=t(1),a=t(68),i=t(8),o=t(107),s=t(105),c=t(9),l=t(278),d=t(29),u=t(66),p=a&&a.prototype,f=c("species"),m=!1,h=i(r.PromiseRejectionEvent),v=o("Promise",(function(){var n=s(a),e=n!==String(a);if(!e&&66===u)return!0;if(d&&(!p.catch||!p.finally))return!0;if(u>=51&&/native code/.test(n))return!1;var t=new a((function(n){n(1)})),r=function(n){n((function(){}),(function(){}))};return(t.constructor={})[f]=r,!(m=t.then((function(){}))instanceof r)||!e&&l&&!h}));n.exports={CONSTRUCTOR:v,REJECTION_EVENT:h,SUBCLASSING:m}},function(n,e,t){"use strict";var r=t(36),a=function(n){var e,t;this.promise=new n((function(n,r){if(void 0!==e||void 0!==t)throw TypeError("Bad Promise constructor");e=n,t=r})),this.resolve=r(e),this.reject=r(t)};n.exports.f=function(n){return new a(n)}},function(n,e,t){"use strict";var r=t(102),a=t(16),i=t(61);n.exports=function(n,e,t){var o=r(e);o in n?a.f(n,o,i(0,t)):n[o]=t}},function(n,e,t){t(295),t(298),t(299),t(111),t(300)},function(n,e,t){var r=t(47).Symbol;n.exports=r},function(n,e,t){var r=t(3),a=t(10),i=t(16).f;r({target:"Object",stat:!0,forced:Object.defineProperty!==i,sham:!a},{defineProperty:i})},function(n,e,t){"use strict";t.d(e,"a",(function(){return i}));t(129);var r=t(94);t(90),t(112),t(6),t(150),t(18),t(20),t(175);var a=t(123);t(53),t(31);function i(n){return function(n){if(Array.isArray(n))return Object(r.a)(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||Object(a.a)(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}},function(n,e,t){"use strict";function r(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}t.d(e,"a",(function(){return r}))},function(n,e,t){"use strict";var r=t(3),a=t(5),i=t(136).indexOf,o=t(58),s=a([].indexOf),c=!!s&&1/s([1],1,-0)<0,l=o("indexOf");r({target:"Array",proto:!0,forced:c||!l},{indexOf:function(n){var e=arguments.length>1?arguments[1]:void 0;return c?s(this,n,e)||0:i(this,n,e)}})},function(n,e){var t;t=function(){return this}();try{t=t||new Function("return this")()}catch(n){"object"==typeof window&&(t=window)}n.exports=t},function(n,e,t){"use strict";var r=t(51),a=t(11),i=t(5),o=t(130),s=t(147),c=t(14),l=t(28),d=t(143),u=t(153),p=t(52),f=t(13),m=t(60),h=t(149),v=t(131),g=t(113),b=t(114),T=t(4),y=b.UNSUPPORTED_Y,C=Math.min,w=[].push,S=i(/./.exec),A=i(w),R=i("".slice);o("split",(function(n,e,t){var i;return i="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(n,t){var i=f(l(this)),o=void 0===t?4294967295:t>>>0;if(0===o)return[];if(void 0===n)return[i];if(!s(n))return a(e,i,n,o);for(var c,d,u,p=[],m=(n.ignoreCase?"i":"")+(n.multiline?"m":"")+(n.unicode?"u":"")+(n.sticky?"y":""),v=0,b=new RegExp(n.source,m+"g");(c=a(g,b,i))&&!((d=b.lastIndex)>v&&(A(p,R(i,v,c.index)),c.length>1&&c.index<i.length&&r(w,p,h(c,1)),u=c[0].length,v=d,p.length>=o));)b.lastIndex===c.index&&b.lastIndex++;return v===i.length?!u&&S(b,"")||A(p,""):A(p,R(i,v)),p.length>o?h(p,0,o):p}:"0".split(void 0,0).length?function(n,t){return void 0===n&&0===t?[]:a(e,this,n,t)}:e,[function(e,t){var r=l(this),o=null==e?void 0:m(e,n);return o?a(o,e,r,t):a(i,f(r),e,t)},function(n,r){var a=c(this),o=f(n),s=t(i,a,o,r,i!==e);if(s.done)return s.value;var l=d(a,RegExp),m=a.unicode,h=(a.ignoreCase?"i":"")+(a.multiline?"m":"")+(a.unicode?"u":"")+(y?"g":"y"),g=new l(y?"^(?:"+a.source+")":a,h),b=void 0===r?4294967295:r>>>0;if(0===b)return[];if(0===o.length)return null===v(g,o)?[o]:[];for(var T=0,w=0,S=[];w<o.length;){g.lastIndex=y?0:w;var P,x=v(g,y?R(o,w):o);if(null===x||(P=C(p(g.lastIndex+(y?w:0)),o.length))===T)w=u(o,w,m);else{if(A(S,R(o,T,w)),S.length===b)return S;for(var I=1;I<=x.length-1;I++)if(A(S,x[I]),S.length===b)return S;w=T=P}}return A(S,R(o,T)),S}]}),!!T((function(){var n=/(?:)/,e=n.exec;n.exec=function(){return e.apply(this,arguments)};var t="ab".split(n);return 2!==t.length||"a"!==t[0]||"b"!==t[1]})),y)},function(n,e,t){"use strict";var r=t(3),a=t(62).find,i=t(127),o=!0;"find"in[]&&Array(1).find((function(){o=!1})),r({target:"Array",proto:!0,forced:o},{find:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),i("find")},function(n,e,t){var r=t(1),a=t(144),i=t(8),o=t(35),s=t(9)("toStringTag"),c=r.Object,l="Arguments"==o(function(){return arguments}());n.exports=a?o:function(n){var e,t,r;return void 0===n?"Undefined":null===n?"Null":"string"==typeof(t=function(n,e){try{return n[e]}catch(n){}}(e=c(n),s))?t:l?o(e):"Object"==(r=o(e))&&i(e.callee)?"Arguments":r}},function(n,e,t){var r=t(5),a=0,i=Math.random(),o=r(1..toString);n.exports=function(n){return"Symbol("+(void 0===n?"":n)+")_"+o(++a+i,36)}},function(n,e,t){var r=t(1),a=t(15),i=r.document,o=a(i)&&a(i.createElement);n.exports=function(n){return o?i.createElement(n):{}}},function(n,e,t){var r=t(181),a=t(80);n.exports=function(n){var e=r(n,"string");return a(e)?e:e+""}},function(n,e,t){var r=t(182),a=t(138);n.exports=Object.keys||function(n){return r(n,a)}},function(n,e,t){var r=t(64),a=t(100),i=r("keys");n.exports=function(n){return i[n]||(i[n]=a(n))}},function(n,e,t){var r=t(5),a=t(8),i=t(133),o=r(Function.toString);a(i.inspectSource)||(i.inspectSource=function(n){return o(n)}),n.exports=i.inspectSource},function(n,e){e.f=Object.getOwnPropertySymbols},function(n,e,t){var r=t(4),a=t(8),i=/#|\.prototype\./,o=function(n,e){var t=c[s(n)];return t==d||t!=l&&(a(e)?r(e):!!e)},s=o.normalize=function(n){return String(n).replace(i,".").toLowerCase()},c=o.data={},l=o.NATIVE="N",d=o.POLYFILL="P";n.exports=o},function(n,e,t){var r=t(35),a=t(1);n.exports="process"==r(a.process)},function(n,e,t){var r=t(5),a=t(4),i=t(8),o=t(99),s=t(22),c=t(105),l=function(){},d=[],u=s("Reflect","construct"),p=/^\s*(?:class|function)\b/,f=r(p.exec),m=!p.exec(l),h=function(n){if(!i(n))return!1;try{return u(l,d,n),!0}catch(n){return!1}},v=function(n){if(!i(n))return!1;switch(o(n)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}try{return m||!!f(p,c(n))}catch(n){return!0}};v.sham=!0,n.exports=!u||a((function(){var n;return h(h.call)||!h(Object)||!h((function(){n=!0}))||n}))?v:h},function(n,e,t){var r=t(4),a=t(9),i=t(66),o=a("species");n.exports=function(n){return i>=51||!r((function(){var e=[];return(e.constructor={})[o]=function(){return{foo:1}},1!==e[n](Boolean).foo}))}},function(n,e,t){var r=t(3),a=t(22),i=t(51),o=t(11),s=t(5),c=t(4),l=t(76),d=t(8),u=t(15),p=t(80),f=t(86),m=t(65),h=a("JSON","stringify"),v=s(/./.exec),g=s("".charAt),b=s("".charCodeAt),T=s("".replace),y=s(1..toString),C=/[\uD800-\uDFFF]/g,w=/^[\uD800-\uDBFF]$/,S=/^[\uDC00-\uDFFF]$/,A=!m||c((function(){var n=a("Symbol")();return"[null]"!=h([n])||"{}"!=h({a:n})||"{}"!=h(Object(n))})),R=c((function(){return'"\\udf06\\ud834"'!==h("\udf06\ud834")||'"\\udead"'!==h("\udead")})),P=function(n,e){var t=f(arguments),r=e;if((u(e)||void 0!==n)&&!p(n))return l(e)||(e=function(n,e){if(d(r)&&(e=o(r,this,n,e)),!p(e))return e}),t[1]=e,i(h,null,t)},x=function(n,e,t){var r=g(t,e-1),a=g(t,e+1);return v(w,n)&&!v(S,a)||v(S,n)&&!v(w,r)?"\\u"+y(b(n,0),16):n};h&&r({target:"JSON",stat:!0,arity:3,forced:A||R},{stringify:function(n,e,t){var r=f(arguments),a=i(A?P:h,null,r);return R&&"string"==typeof a?T(a,C,x):a}})},function(n,e,t){"use strict";var r=t(3),a=t(10),i=t(1),o=t(5),s=t(12),c=t(8),l=t(45),d=t(13),u=t(16).f,p=t(140),f=i.Symbol,m=f&&f.prototype;if(a&&c(f)&&(!("description"in m)||void 0!==f().description)){var h={},v=function(){var n=arguments.length<1||void 0===arguments[0]?void 0:d(arguments[0]),e=l(m,this)?new f(n):void 0===n?f():f(n);return""===n&&(h[e]=!0),e};p(v,f),v.prototype=m,m.constructor=v;var g="Symbol(test)"==String(f("test")),b=o(m.toString),T=o(m.valueOf),y=/^Symbol\((.*)\)[^)]+$/,C=o("".replace),w=o("".slice);u(m,"description",{configurable:!0,get:function(){var n=T(this),e=b(n);if(s(h,n))return"";var t=g?w(e,7,-1):C(e,y,"$1");return""===t?void 0:t}}),r({global:!0,forced:!0},{Symbol:v})}},function(n,e,t){"use strict";var r,a,i=t(11),o=t(5),s=t(13),c=t(210),l=t(114),d=t(64),u=t(49),p=t(41).get,f=t(151),m=t(211),h=d("native-string-replace",String.prototype.replace),v=RegExp.prototype.exec,g=v,b=o("".charAt),T=o("".indexOf),y=o("".replace),C=o("".slice),w=(a=/b*/g,i(v,r=/a/,"a"),i(v,a,"a"),0!==r.lastIndex||0!==a.lastIndex),S=l.BROKEN_CARET,A=void 0!==/()??/.exec("")[1];(w||A||S||f||m)&&(g=function(n){var e,t,r,a,o,l,d,f=this,m=p(f),R=s(n),P=m.raw;if(P)return P.lastIndex=f.lastIndex,e=i(g,P,R),f.lastIndex=P.lastIndex,e;var x=m.groups,I=S&&f.sticky,k=i(c,f),N=f.source,_=0,E=R;if(I&&(k=y(k,"y",""),-1===T(k,"g")&&(k+="g"),E=C(R,f.lastIndex),f.lastIndex>0&&(!f.multiline||f.multiline&&"\n"!==b(R,f.lastIndex-1))&&(N="(?: "+N+")",E=" "+E,_++),t=new RegExp("^(?:"+N+")",k)),A&&(t=new RegExp("^"+N+"$(?!\\s)",k)),w&&(r=f.lastIndex),a=i(v,I?t:f,E),I?a?(a.input=C(a.input,_),a[0]=C(a[0],_),a.index=f.lastIndex,f.lastIndex+=a[0].length):f.lastIndex=0:w&&a&&(f.lastIndex=f.global?a.index+a[0].length:r),A&&a&&a.length>1&&i(h,a[0],t,(function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(a[o]=void 0)})),a&&x)for(a.groups=l=u(null),o=0;o<x.length;o++)l[(d=x[o])[0]]=a[d[1]];return a}),n.exports=g},function(n,e,t){var r=t(4),a=t(1).RegExp,i=r((function(){var n=a("a","y");return n.lastIndex=2,null!=n.exec("abcd")})),o=i||r((function(){return!a("a","y").sticky})),s=i||r((function(){var n=a("^r","gy");return n.lastIndex=2,null!=n.exec("str")}));n.exports={BROKEN_CARET:s,MISSED_STICKY:o,UNSUPPORTED_Y:i}},function(n,e,t){var r=t(317),a=t(318),i=t(319),o=t(320),s=t(321);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=o,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(218);n.exports=function(n,e){for(var t=n.length;t--;)if(r(n[t][0],e))return t;return-1}},function(n,e,t){var r=t(54)(Object,"create");n.exports=r},function(n,e,t){var r=t(339);n.exports=function(n,e){var t=n.__data__;return r(e)?t["string"==typeof e?"string":"hash"]:t.map}},function(n,e,t){var r=t(161);n.exports=function(n){if("string"==typeof n||r(n))return n;var e=n+"";return"0"==e&&1/n==-1/0?"-0":e}},function(n,e,t){"use strict";var r,a=t(3),i=t(5),o=t(46).f,s=t(52),c=t(13),l=t(146),d=t(28),u=t(148),p=t(29),f=i("".endsWith),m=i("".slice),h=Math.min,v=u("endsWith");a({target:"String",proto:!0,forced:!!(p||v||(r=o(String.prototype,"endsWith"),!r||r.writable))&&!v},{endsWith:function(n){var e=c(d(this));l(n);var t=arguments.length>1?arguments[1]:void 0,r=e.length,a=void 0===t?r:h(s(t),r),i=c(n);return f?f(e,i,a):m(e,a-i.length,a)===i}})},function(n,e,t){"use strict";var r=t(3),a=t(263);r({target:"String",proto:!0,forced:t(264)("fixed")},{fixed:function(){return a(this,"tt","","")}})},function(n,e,t){"use strict";t.d(e,"a",(function(){return r}));t(90),t(112),t(6),t(150),t(18),t(20);function r(n){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n})(n)}},function(n,e,t){"use strict";t.d(e,"a",(function(){return a}));t(56),t(6),t(42),t(175),t(18),t(24),t(126);var r=t(94);function a(n,e){if(n){if("string"==typeof n)return Object(r.a)(n,e);var t=Object.prototype.toString.call(n).slice(8,-1);return"Object"===t&&n.constructor&&(t=n.constructor.name),"Map"===t||"Set"===t?Array.from(n):"Arguments"===t||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t)?Object(r.a)(n,e):void 0}}},function(n,e,t){var r,a;
/* NProgress, (c) 2013, 2014 Rico Sta. Cruz - http://ricostacruz.com/nprogress
 * @license MIT */void 0===(a="function"==typeof(r=function(){var n,e,t={version:"0.2.0"},r=t.settings={minimum:.08,easing:"ease",positionUsing:"",speed:200,trickle:!0,trickleRate:.02,trickleSpeed:800,showSpinner:!0,barSelector:'[role="bar"]',spinnerSelector:'[role="spinner"]',parent:"body",template:'<div class="bar" role="bar"><div class="peg"></div></div><div class="spinner" role="spinner"><div class="spinner-icon"></div></div>'};function a(n,e,t){return n<e?e:n>t?t:n}function i(n){return 100*(-1+n)}t.configure=function(n){var e,t;for(e in n)void 0!==(t=n[e])&&n.hasOwnProperty(e)&&(r[e]=t);return this},t.status=null,t.set=function(n){var e=t.isStarted();n=a(n,r.minimum,1),t.status=1===n?null:n;var c=t.render(!e),l=c.querySelector(r.barSelector),d=r.speed,u=r.easing;return c.offsetWidth,o((function(e){""===r.positionUsing&&(r.positionUsing=t.getPositioningCSS()),s(l,function(n,e,t){var a;return(a="translate3d"===r.positionUsing?{transform:"translate3d("+i(n)+"%,0,0)"}:"translate"===r.positionUsing?{transform:"translate("+i(n)+"%,0)"}:{"margin-left":i(n)+"%"}).transition="all "+e+"ms "+t,a}(n,d,u)),1===n?(s(c,{transition:"none",opacity:1}),c.offsetWidth,setTimeout((function(){s(c,{transition:"all "+d+"ms linear",opacity:0}),setTimeout((function(){t.remove(),e()}),d)}),d)):setTimeout(e,d)})),this},t.isStarted=function(){return"number"==typeof t.status},t.start=function(){t.status||t.set(0);var n=function(){setTimeout((function(){t.status&&(t.trickle(),n())}),r.trickleSpeed)};return r.trickle&&n(),this},t.done=function(n){return n||t.status?t.inc(.3+.5*Math.random()).set(1):this},t.inc=function(n){var e=t.status;return e?("number"!=typeof n&&(n=(1-e)*a(Math.random()*e,.1,.95)),e=a(e+n,0,.994),t.set(e)):t.start()},t.trickle=function(){return t.inc(Math.random()*r.trickleRate)},n=0,e=0,t.promise=function(r){return r&&"resolved"!==r.state()?(0===e&&t.start(),n++,e++,r.always((function(){0==--e?(n=0,t.done()):t.set((n-e)/n)})),this):this},t.render=function(n){if(t.isRendered())return document.getElementById("nprogress");l(document.documentElement,"nprogress-busy");var e=document.createElement("div");e.id="nprogress",e.innerHTML=r.template;var a,o=e.querySelector(r.barSelector),c=n?"-100":i(t.status||0),d=document.querySelector(r.parent);return s(o,{transition:"all 0 linear",transform:"translate3d("+c+"%,0,0)"}),r.showSpinner||(a=e.querySelector(r.spinnerSelector))&&p(a),d!=document.body&&l(d,"nprogress-custom-parent"),d.appendChild(e),e},t.remove=function(){d(document.documentElement,"nprogress-busy"),d(document.querySelector(r.parent),"nprogress-custom-parent");var n=document.getElementById("nprogress");n&&p(n)},t.isRendered=function(){return!!document.getElementById("nprogress")},t.getPositioningCSS=function(){var n=document.body.style,e="WebkitTransform"in n?"Webkit":"MozTransform"in n?"Moz":"msTransform"in n?"ms":"OTransform"in n?"O":"";return e+"Perspective"in n?"translate3d":e+"Transform"in n?"translate":"margin"};var o=function(){var n=[];function e(){var t=n.shift();t&&t(e)}return function(t){n.push(t),1==n.length&&e()}}(),s=function(){var n=["Webkit","O","Moz","ms"],e={};function t(t){return t=t.replace(/^-ms-/,"ms-").replace(/-([\da-z])/gi,(function(n,e){return e.toUpperCase()})),e[t]||(e[t]=function(e){var t=document.body.style;if(e in t)return e;for(var r,a=n.length,i=e.charAt(0).toUpperCase()+e.slice(1);a--;)if((r=n[a]+i)in t)return r;return e}(t))}function r(n,e,r){e=t(e),n.style[e]=r}return function(n,e){var t,a,i=arguments;if(2==i.length)for(t in e)void 0!==(a=e[t])&&e.hasOwnProperty(t)&&r(n,t,a);else r(n,i[1],i[2])}}();function c(n,e){return("string"==typeof n?n:u(n)).indexOf(" "+e+" ")>=0}function l(n,e){var t=u(n),r=t+e;c(t,e)||(n.className=r.substring(1))}function d(n,e){var t,r=u(n);c(n,e)&&(t=r.replace(" "+e+" "," "),n.className=t.substring(1,t.length-1))}function u(n){return(" "+(n.className||"")+" ").replace(/\s+/gi," ")}function p(n){n&&n.parentNode&&n.parentNode.removeChild(n)}return t})?r.call(e,t,e,n):r)||(n.exports=a)},function(n){n.exports=JSON.parse('{"name":"vuepress-plugin-comment","version":"0.7.3","description":"Comment plugin in vuepress, such as Gitalk, Valine...","main":"index.js","scripts":{"test":"echo \\"Error: no test specified\\" && exit 1"},"repository":{"type":"git","url":"git+ssh://git@github.com/dongyuanxin/vuepress-plugin-comment.git"},"keywords":["vuepress","comment","plugin","vue","gitalk","valine"],"author":"dongyuanxin","license":"MIT","bugs":{"url":"https://github.com/dongyuanxin/vuepress-plugin-comment/issues"},"homepage":"https://github.com/dongyuanxin/vuepress-plugin-comment#readme","dependencies":{"ejs":"^2.6.1","gitalk":"^1.5.0","gitalk-fix":"^1.5.2","i":"^0.3.6","npm":"^6.9.0","valine":"^1.3.9"}}')},function(n,e,t){"use strict";t(24);var r,a,i=t(3),o=t(1),s=t(11),c=t(5),l=t(8),d=t(15),u=(r=!1,(a=/[ac]/).exec=function(){return r=!0,/./.exec.apply(this,arguments)},!0===a.test("abc")&&r),p=o.Error,f=c(/./.test);i({target:"RegExp",proto:!0,forced:!u},{test:function(n){var e=this.exec;if(!l(e))return f(this,n);var t=s(e,this,n);if(null!==t&&!d(t))throw new p("RegExp exec method returned something other than an Object or null");return!!t}})},function(n,e,t){var r=t(9),a=t(49),i=t(16),o=r("unscopables"),s=Array.prototype;null==s[o]&&i.f(s,o,{configurable:!0,value:a(null)}),n.exports=function(n){s[o][n]=!0}},function(n,e,t){var r=t(99),a=t(60),i=t(83),o=t(9)("iterator");n.exports=function(n){if(null!=n)return a(n,o)||a(n,"@@iterator")||i[r(n)]}},function(n,e,t){t(3)({target:"Array",stat:!0},{isArray:t(76)})},function(n,e,t){"use strict";t(24);var r=t(5),a=t(21),i=t(113),o=t(4),s=t(9),c=t(37),l=s("species"),d=RegExp.prototype;n.exports=function(n,e,t,u){var p=s(n),f=!o((function(){var e={};return e[p]=function(){return 7},7!=""[n](e)})),m=f&&!o((function(){var e=!1,t=/a/;return"split"===n&&((t={}).constructor={},t.constructor[l]=function(){return t},t.flags="",t[p]=/./[p]),t.exec=function(){return e=!0,null},t[p](""),!e}));if(!f||!m||t){var h=r(/./[p]),v=e(p,""[n],(function(n,e,t,a,o){var s=r(n),c=e.exec;return c===i||c===d.exec?f&&!o?{done:!0,value:h(e,t,a)}:{done:!0,value:s(t,e,a)}:{done:!1}}));a(String.prototype,n,v[0]),a(d,p,v[1])}u&&c(d[p],"sham",!0)}},function(n,e,t){var r=t(1),a=t(11),i=t(14),o=t(8),s=t(35),c=t(113),l=r.TypeError;n.exports=function(n,e){var t=n.exec;if(o(t)){var r=a(t,n,e);return null!==r&&i(r),r}if("RegExp"===s(n))return a(c,n,e);throw l("RegExp#exec called on incompatible receiver")}},function(n,e,t){"use strict";var r=t(3),a=t(5),i=t(78),o=t(33),s=t(58),c=a([].join),l=i!=Object,d=s("join",",");r({target:"Array",proto:!0,forced:l||!d},{join:function(n){return c(o(this),void 0===n?",":n)}})},function(n,e,t){var r=t(1),a=t(134),i=r["__core-js_shared__"]||a("__core-js_shared__",{});n.exports=i},function(n,e,t){var r=t(1),a=Object.defineProperty;n.exports=function(n,e){try{a(r,n,{value:e,configurable:!0,writable:!0})}catch(t){r[n]=e}return e}},function(n,e,t){var r=t(10),a=t(179),i=t(16),o=t(14),s=t(33),c=t(103);e.f=r&&!a?Object.defineProperties:function(n,e){o(n);for(var t,r=s(e),a=c(e),l=a.length,d=0;l>d;)i.f(n,t=a[d++],r[t]);return n}},function(n,e,t){var r=t(33),a=t(137),i=t(38),o=function(n){return function(e,t,o){var s,c=r(e),l=i(c),d=a(o,l);if(n&&t!=t){for(;l>d;)if((s=c[d++])!=s)return!0}else for(;l>d;d++)if((n||d in c)&&c[d]===t)return n||d||0;return!n&&-1}};n.exports={includes:o(!0),indexOf:o(!1)}},function(n,e,t){var r=t(72),a=Math.max,i=Math.min;n.exports=function(n,e){var t=r(n);return t<0?a(t+e,0):i(t,e)}},function(n,e){n.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(n,e,t){"use strict";var r={}.propertyIsEnumerable,a=Object.getOwnPropertyDescriptor,i=a&&!r.call({1:2},1);e.f=i?function(n){var e=a(this,n);return!!e&&e.enumerable}:r},function(n,e,t){var r=t(12),a=t(141),i=t(46),o=t(16);n.exports=function(n,e,t){for(var s=a(e),c=o.f,l=i.f,d=0;d<s.length;d++){var u=s[d];r(n,u)||t&&r(t,u)||c(n,u,l(e,u))}}},function(n,e,t){var r=t(22),a=t(5),i=t(67),o=t(106),s=t(14),c=a([].concat);n.exports=r("Reflect","ownKeys")||function(n){var e=i.f(s(n)),t=o.f;return t?c(e,t(n)):e}},function(n,e,t){var r=t(1),a=t(12),i=t(8),o=t(30),s=t(104),c=t(187),l=s("IE_PROTO"),d=r.Object,u=d.prototype;n.exports=c?d.getPrototypeOf:function(n){var e=o(n);if(a(e,l))return e[l];var t=e.constructor;return i(t)&&e instanceof t?t.prototype:e instanceof d?u:null}},function(n,e,t){var r=t(14),a=t(189),i=t(9)("species");n.exports=function(n,e){var t,o=r(n).constructor;return void 0===o||null==(t=r(o)[i])?e:a(t)}},function(n,e,t){var r={};r[t(9)("toStringTag")]="z",n.exports="[object z]"===String(r)},function(n,e){n.exports=function(n){try{return{error:!1,value:n()}}catch(n){return{error:!0,value:n}}}},function(n,e,t){var r=t(1),a=t(147),i=r.TypeError;n.exports=function(n){if(a(n))throw i("The method doesn't accept regular expressions");return n}},function(n,e,t){var r=t(15),a=t(35),i=t(9)("match");n.exports=function(n){var e;return r(n)&&(void 0!==(e=n[i])?!!e:"RegExp"==a(n))}},function(n,e,t){var r=t(9)("match");n.exports=function(n){var e=/./;try{"/./"[n](e)}catch(t){try{return e[r]=!1,"/./"[n](e)}catch(n){}}return!1}},function(n,e,t){var r=t(1),a=t(137),i=t(38),o=t(89),s=r.Array,c=Math.max;n.exports=function(n,e,t){for(var r=i(n),l=a(e,r),d=a(void 0===t?r:t,r),u=s(c(d-l,0)),p=0;l<d;l++,p++)o(u,p,n[l]);return u.length=p,u}},function(n,e,t){t(208)("iterator")},function(n,e,t){var r=t(4),a=t(1).RegExp;n.exports=r((function(){var n=a(".","s");return!(n.dotAll&&n.exec("\n")&&"s"===n.flags)}))},function(n,e,t){var r=t(8),a=t(15),i=t(85);n.exports=function(n,e,t){var o,s;return i&&r(o=e.constructor)&&o!==t&&a(s=o.prototype)&&s!==t.prototype&&i(n,s),n}},function(n,e,t){"use strict";var r=t(198).charAt;n.exports=function(n,e,t){return e+(t?r(n,e).length:1)}},function(n,e,t){var r=t(311),a=t(63),i=Object.prototype,o=i.hasOwnProperty,s=i.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(n){return a(n)&&o.call(n,"callee")&&!s.call(n,"callee")};n.exports=c},function(n,e,t){var r=t(54)(t(47),"Map");n.exports=r},function(n,e){n.exports=function(n){var e=typeof n;return null!=n&&("object"==e||"function"==e)}},function(n,e,t){var r=t(331),a=t(338),i=t(340),o=t(341),s=t(342);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=o,c.prototype.set=s,n.exports=c},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n){t[++e]=n})),t}},function(n,e){n.exports=function(n){return"number"==typeof n&&n>-1&&n%1==0&&n<=9007199254740991}},function(n,e,t){var r=t(43),a=t(161),i=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,o=/^\w*$/;n.exports=function(n,e){if(r(n))return!1;var t=typeof n;return!("number"!=t&&"symbol"!=t&&"boolean"!=t&&null!=n&&!a(n))||(o.test(n)||!i.test(n)||null!=e&&n in Object(e))}},function(n,e,t){var r=t(77),a=t(63);n.exports=function(n){return"symbol"==typeof n||a(n)&&"[object Symbol]"==r(n)}},function(n,e){n.exports=function(n){return n}},function(n,e,t){var r=t(3),a=t(1),i=t(75);r({global:!0},{Reflect:{}}),i(a.Reflect,"Reflect",!0)},function(n,e,t){"use strict";t.r(e),t.d(e,"copyrightEnable",(function(){return r}));var r=void 0;e.default={created:function(){},watch:{},updated:function(){r=this.$frontmatter.copyright},beforeDestory:function(){}}},function(n,e,t){"use strict";t.r(e);t(24),t(97),t(71),t(40);var r={name:"LastReadingPopup",data:function(){return{lastReading:null,show:!1}},computed:{popupConfig:function(){var n={"/":{message:"检测到您上一次阅读的位置，是否移至该位置？",sureButtonText:"确定",cancelButtonText:"取消"},"/zh/":{message:"检测到您上一次阅读的位置，是否移至该位置？",sureButtonText:"前往",cancelButtonText:"取消"}},e=this.$lang.split("-")[0];return n["/".concat(e,"/")]||n[this.$localePath]||n},message:function(){var n=this.popupConfig;return n&&n.message||n["/"].message},sureButtonText:function(){var n=this.popupConfig;return n&&n.sureButtonText||n["/"].sureButtonText},cancelButtonText:function(){var n=this.popupConfig;return n&&n.cancelButtonText||n["/"].cancelButtonText}},mounted:function(){var n=this;window.ActiveXObject||"ActiveXObject"in window?setTimeout((function(){window.addEventListener("load",n.init())}),1e3):setTimeout((function(){window.addEventListener("load",n.init)}),1e3)},methods:{init:function(){this.lastReading=JSON.parse(localStorage.getItem("lastReading")),this.lastReading&&(this.$route.path===this.lastReading.path?this.goto():(this.show=!0,setTimeout(this.clean,1e4)))},goto:function(){var n=this;this.$route.path!==this.lastReading.path?this.$router.replace(this.lastReading.path).then((function(){document.documentElement.scrollTop=n.lastReading.scrollTop,n.clean()})):this.$nextTick((function(){document.documentElement.scrollTop=n.lastReading.scrollTop}))},dontgoto:function(){this.clean()},clean:function(){this.show=!1,localStorage.removeItem("lastReading")}}},a=(t(408),t(19)),i=Object(a.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("transition",{attrs:{name:"sw-update-popup"}},[n.show?t("div",{staticClass:"sw-update-popup"},[n._v("\n    "+n._s(n.message)+"\n\n    "),t("br"),n._v(" "),t("button",{on:{click:n.goto}},[n._v("\n      "+n._s(n.sureButtonText)+"\n    ")]),n._v(" "),t("button",{on:{click:n.dontgoto}},[n._v("\n      "+n._s(n.cancelButtonText)+"\n    ")])]):n._e()])}),[],!1,null,"181714f2",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(3),a=t(62).some;r({target:"Array",proto:!0,forced:!t(58)("some")},{some:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(5),a=t(28),i=t(13),o=t(168),s=r("".replace),c="["+o+"]",l=RegExp("^"+c+c+"*"),d=RegExp(c+c+"*$"),u=function(n){return function(e){var t=i(a(e));return 1&n&&(t=s(t,l,"")),2&n&&(t=s(t,d,"")),t}};n.exports={start:u(1),end:u(2),trim:u(3)}},function(n,e){n.exports="\t\n\v\f\r                　\u2028\u2029\ufeff"},function(n,e,t){"use strict";var r=t(11),a=t(130),i=t(14),o=t(52),s=t(13),c=t(28),l=t(60),d=t(153),u=t(131);a("match",(function(n,e,t){return[function(e){var t=c(this),a=null==e?void 0:l(e,n);return a?r(a,e,t):new RegExp(e)[n](s(t))},function(n){var r=i(this),a=s(n),c=t(e,r,a);if(c.done)return c.value;if(!r.global)return u(r,a);var l=r.unicode;r.lastIndex=0;for(var p,f=[],m=0;null!==(p=u(r,a));){var h=s(p[0]);f[m]=h,""===h&&(r.lastIndex=d(a,o(r.lastIndex),l)),m++}return 0===m?null:f}]}))},function(n,e){n.exports=function(n){return n.webpackPolyfill||(n.deprecate=function(){},n.paths=[],n.children||(n.children=[]),Object.defineProperty(n,"loaded",{enumerable:!0,get:function(){return n.l}}),Object.defineProperty(n,"id",{enumerable:!0,get:function(){return n.i}}),n.webpackPolyfill=1),n}},function(n,e,t){"use strict";var r=t(33),a=t(127),i=t(83),o=t(41),s=t(16).f,c=t(184),l=t(29),d=t(10),u=o.set,p=o.getterFor("Array Iterator");n.exports=c(Array,"Array",(function(n,e){u(this,{type:"Array Iterator",target:r(n),index:0,kind:e})}),(function(){var n=p(this),e=n.target,t=n.kind,r=n.index++;return!e||r>=e.length?(n.target=void 0,{value:void 0,done:!0}):"keys"==t?{value:r,done:!1}:"values"==t?{value:e[r],done:!1}:{value:[r,e[r]],done:!1}}),"values");var f=i.Arguments=i.Array;if(a("keys"),a("values"),a("entries"),!l&&d&&"values"!==f.name)try{s(f,"name",{value:"values"})}catch(n){}},function(n,e,t){var r=t(1).TypeError;n.exports=function(n,e){if(n<e)throw r("Not enough arguments");return n}},function(n,e,t){var r=t(1),a=t(11),i=t(36),o=t(14),s=t(81),c=t(128),l=r.TypeError;n.exports=function(n,e){var t=arguments.length<2?c(n):e;if(i(t))return o(a(t,n));throw l(s(n)+" is not iterable")}},function(n,e,t){var r=t(288);n.exports=function(n,e){return new(r(n))(0===e?0:e)}},function(n,e,t){var r=t(3),a=t(301);r({target:"Array",stat:!0,forced:!t(196)((function(n){Array.from(n)}))},{from:a})},function(n,e,t){(function(e){var t=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,i=/^0o[0-7]+$/i,o=parseInt,s="object"==typeof e&&e&&e.Object===Object&&e,c="object"==typeof self&&self&&self.Object===Object&&self,l=s||c||Function("return this")(),d=Object.prototype.toString,u=Math.max,p=Math.min,f=function(){return l.Date.now()};function m(n){var e=typeof n;return!!n&&("object"==e||"function"==e)}function h(n){if("number"==typeof n)return n;if(function(n){return"symbol"==typeof n||function(n){return!!n&&"object"==typeof n}(n)&&"[object Symbol]"==d.call(n)}(n))return NaN;if(m(n)){var e="function"==typeof n.valueOf?n.valueOf():n;n=m(e)?e+"":e}if("string"!=typeof n)return 0===n?n:+n;n=n.replace(t,"");var s=a.test(n);return s||i.test(n)?o(n.slice(2),s?2:8):r.test(n)?NaN:+n}n.exports=function(n,e,t){var r,a,i,o,s,c,l=0,d=!1,v=!1,g=!0;if("function"!=typeof n)throw new TypeError("Expected a function");function b(e){var t=r,i=a;return r=a=void 0,l=e,o=n.apply(i,t)}function T(n){return l=n,s=setTimeout(C,e),d?b(n):o}function y(n){var t=n-c;return void 0===c||t>=e||t<0||v&&n-l>=i}function C(){var n=f();if(y(n))return w(n);s=setTimeout(C,function(n){var t=e-(n-c);return v?p(t,i-(n-l)):t}(n))}function w(n){return s=void 0,g&&r?b(n):(r=a=void 0,o)}function S(){var n=f(),t=y(n);if(r=arguments,a=this,c=n,t){if(void 0===s)return T(c);if(v)return s=setTimeout(C,e),b(c)}return void 0===s&&(s=setTimeout(C,e)),o}return e=h(e)||0,m(t)&&(d=!!t.leading,i=(v="maxWait"in t)?u(h(t.maxWait)||0,e):i,g="trailing"in t?!!t.trailing:g),S.cancel=function(){void 0!==s&&clearTimeout(s),l=0,r=c=a=s=void 0},S.flush=function(){return void 0===s?o:w(f())},S}}).call(this,t(96))},function(n,e,t){var r=t(1),a=t(10),i=t(114).MISSED_STICKY,o=t(35),s=t(243),c=t(41).get,l=RegExp.prototype,d=r.TypeError;a&&i&&s(l,"sticky",{configurable:!0,get:function(){if(this!==l){if("RegExp"===o(this))return!!c(this).sticky;throw d("Incompatible receiver, RegExp required")}}})},function(n,e,t){var r=t(65);n.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(n,e,t){var r=t(10),a=t(4);n.exports=r&&a((function(){return 42!=Object.defineProperty((function(){}),"prototype",{value:42,writable:!1}).prototype}))},function(n,e,t){var r=t(10),a=t(4),i=t(101);n.exports=!r&&!a((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},function(n,e,t){var r=t(1),a=t(11),i=t(15),o=t(80),s=t(60),c=t(268),l=t(9),d=r.TypeError,u=l("toPrimitive");n.exports=function(n,e){if(!i(n)||o(n))return n;var t,r=s(n,u);if(r){if(void 0===e&&(e="default"),t=a(r,n,e),!i(t)||o(t))return t;throw d("Can't convert object to primitive value")}return void 0===e&&(e="number"),c(n,e)}},function(n,e,t){var r=t(5),a=t(12),i=t(33),o=t(136).indexOf,s=t(82),c=r([].push);n.exports=function(n,e){var t,r=i(n),l=0,d=[];for(t in r)!a(s,t)&&a(r,t)&&c(d,t);for(;e.length>l;)a(r,t=e[l++])&&(~o(d,t)||c(d,t));return d}},function(n,e,t){var r=t(22);n.exports=r("document","documentElement")},function(n,e,t){"use strict";var r=t(3),a=t(11),i=t(29),o=t(84),s=t(8),c=t(255),l=t(142),d=t(85),u=t(75),p=t(37),f=t(21),m=t(9),h=t(83),v=t(186),g=o.PROPER,b=o.CONFIGURABLE,T=v.IteratorPrototype,y=v.BUGGY_SAFARI_ITERATORS,C=m("iterator"),w=function(){return this};n.exports=function(n,e,t,o,m,v,S){c(t,e,o);var A,R,P,x=function(n){if(n===m&&E)return E;if(!y&&n in N)return N[n];switch(n){case"keys":case"values":case"entries":return function(){return new t(this,n)}}return function(){return new t(this)}},I=e+" Iterator",k=!1,N=n.prototype,_=N[C]||N["@@iterator"]||m&&N[m],E=!y&&_||x(m),D="Array"==e&&N.entries||_;if(D&&(A=l(D.call(new n)))!==Object.prototype&&A.next&&(i||l(A)===T||(d?d(A,T):s(A[C])||f(A,C,w)),u(A,I,!0,!0),i&&(h[I]=w)),g&&"values"==m&&_&&"values"!==_.name&&(!i&&b?p(N,"name","values"):(k=!0,E=function(){return a(_,this)})),m)if(R={values:x("values"),keys:v?E:x("keys"),entries:x("entries")},S)for(P in R)(y||k||!(P in N))&&f(N,P,R[P]);else r({target:e,proto:!0,forced:y||k},R);return i&&!S||N[C]===E||f(N,C,E,{name:m}),h[e]=E,R}},function(n,e,t){var r=t(4),a=t(8),i=t(12),o=t(16).f,s=t(84).CONFIGURABLE,c=t(105),l=t(41),d=l.enforce,u=l.get,p=!r((function(){return 8!==o((function(){}),"length",{value:8}).length})),f=String(String).split("String"),m=n.exports=function(n,e,t){"Symbol("===String(e).slice(0,7)&&(e="["+String(e).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),t&&t.getter&&(e="get "+e),t&&t.setter&&(e="set "+e),(!i(n,"name")||s&&n.name!==e)&&o(n,"name",{value:e,configurable:!0}),p&&t&&i(t,"arity")&&n.length!==t.arity&&o(n,"length",{value:t.arity});var r=d(n);return i(r,"source")||(r.source=f.join("string"==typeof e?e:"")),n};Function.prototype.toString=m((function(){return a(this)&&u(this).source||c(this)}),"toString")},function(n,e,t){"use strict";var r,a,i,o=t(4),s=t(8),c=t(49),l=t(142),d=t(21),u=t(9),p=t(29),f=u("iterator"),m=!1;[].keys&&("next"in(i=[].keys())?(a=l(l(i)))!==Object.prototype&&(r=a):m=!0),null==r||o((function(){var n={};return r[f].call(n)!==n}))?r={}:p&&(r=c(r)),s(r[f])||d(r,f,(function(){return this})),n.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:m}},function(n,e,t){var r=t(4);n.exports=!r((function(){function n(){}return n.prototype.constructor=null,Object.getPrototypeOf(new n)!==n.prototype}))},function(n,e,t){"use strict";var r=t(22),a=t(16),i=t(9),o=t(10),s=i("species");n.exports=function(n){var e=r(n),t=a.f;o&&e&&!e[s]&&t(e,s,{configurable:!0,get:function(){return this}})}},function(n,e,t){var r=t(1),a=t(109),i=t(81),o=r.TypeError;n.exports=function(n){if(a(n))return n;throw o(i(n)+" is not a constructor")}},function(n,e,t){var r,a,i,o,s=t(1),c=t(51),l=t(73),d=t(8),u=t(12),p=t(4),f=t(183),m=t(86),h=t(101),v=t(172),g=t(191),b=t(108),T=s.setImmediate,y=s.clearImmediate,C=s.process,w=s.Dispatch,S=s.Function,A=s.MessageChannel,R=s.String,P=0,x={};try{r=s.location}catch(n){}var I=function(n){if(u(x,n)){var e=x[n];delete x[n],e()}},k=function(n){return function(){I(n)}},N=function(n){I(n.data)},_=function(n){s.postMessage(R(n),r.protocol+"//"+r.host)};T&&y||(T=function(n){v(arguments.length,1);var e=d(n)?n:S(n),t=m(arguments,1);return x[++P]=function(){c(e,void 0,t)},a(P),P},y=function(n){delete x[n]},b?a=function(n){C.nextTick(k(n))}:w&&w.now?a=function(n){w.now(k(n))}:A&&!g?(o=(i=new A).port2,i.port1.onmessage=N,a=l(o.postMessage,o)):s.addEventListener&&d(s.postMessage)&&!s.importScripts&&r&&"file:"!==r.protocol&&!p(_)?(a=_,s.addEventListener("message",N,!1)):a="onreadystatechange"in h("script")?function(n){f.appendChild(h("script")).onreadystatechange=function(){f.removeChild(this),I(n)}}:function(n){setTimeout(k(n),0)}),n.exports={set:T,clear:y}},function(n,e,t){var r=t(44);n.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(r)},function(n,e,t){var r=t(1),a=t(73),i=t(11),o=t(14),s=t(81),c=t(193),l=t(38),d=t(45),u=t(173),p=t(128),f=t(194),m=r.TypeError,h=function(n,e){this.stopped=n,this.result=e},v=h.prototype;n.exports=function(n,e,t){var r,g,b,T,y,C,w,S=t&&t.that,A=!(!t||!t.AS_ENTRIES),R=!(!t||!t.IS_ITERATOR),P=!(!t||!t.INTERRUPTED),x=a(e,S),I=function(n){return r&&f(r,"normal",n),new h(!0,n)},k=function(n){return A?(o(n),P?x(n[0],n[1],I):x(n[0],n[1])):P?x(n,I):x(n)};if(R)r=n;else{if(!(g=p(n)))throw m(s(n)+" is not iterable");if(c(g)){for(b=0,T=l(n);T>b;b++)if((y=k(n[b]))&&d(v,y))return y;return new h(!1)}r=u(n,g)}for(C=r.next;!(w=i(C,r)).done;){try{y=k(w.value)}catch(n){f(r,"throw",n)}if("object"==typeof y&&y&&d(v,y))return y}return new h(!1)}},function(n,e,t){var r=t(9),a=t(83),i=r("iterator"),o=Array.prototype;n.exports=function(n){return void 0!==n&&(a.Array===n||o[i]===n)}},function(n,e,t){var r=t(11),a=t(14),i=t(60);n.exports=function(n,e,t){var o,s;a(n);try{if(!(o=i(n,"return"))){if("throw"===e)throw t;return t}o=r(o,n)}catch(n){s=!0,o=n}if("throw"===e)throw t;if(s)throw o;return a(o),t}},function(n,e,t){var r=t(68),a=t(196),i=t(87).CONSTRUCTOR;n.exports=i||!a((function(n){r.all(n).then(void 0,(function(){}))}))},function(n,e,t){var r=t(9)("iterator"),a=!1;try{var i=0,o={next:function(){return{done:!!i++}},return:function(){a=!0}};o[r]=function(){return this},Array.from(o,(function(){throw 2}))}catch(n){}n.exports=function(n,e){if(!e&&!a)return!1;var t=!1;try{var i={};i[r]=function(){return{next:function(){return{done:t=!0}}}},n(i)}catch(n){}return t}},function(n,e,t){var r=t(14),a=t(15),i=t(88);n.exports=function(n,e){if(r(n),a(e)&&e.constructor===n)return e;var t=i.f(n);return(0,t.resolve)(e),t.promise}},function(n,e,t){var r=t(5),a=t(72),i=t(13),o=t(28),s=r("".charAt),c=r("".charCodeAt),l=r("".slice),d=function(n){return function(e,t){var r,d,u=i(o(e)),p=a(t),f=u.length;return p<0||p>=f?n?"":void 0:(r=c(u,p))<55296||r>56319||p+1===f||(d=c(u,p+1))<56320||d>57343?n?s(u,p):r:n?l(u,p,p+2):d-56320+(r-55296<<10)+65536}};n.exports={codeAt:d(!1),charAt:d(!0)}},function(n,e){n.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(n,e,t){var r=t(101)("span").classList,a=r&&r.constructor&&r.constructor.prototype;n.exports=a===Object.prototype?void 0:a},function(n,e,t){var r=t(3),a=t(10),i=t(141),o=t(33),s=t(46),c=t(89);r({target:"Object",stat:!0,sham:!a},{getOwnPropertyDescriptors:function(n){for(var e,t,r=o(n),a=s.f,l=i(r),d={},u=0;l.length>u;)void 0!==(t=a(r,e=l[u++]))&&c(d,e,t);return d}})},function(n,e,t){var r=t(3),a=t(4),i=t(30),o=t(142),s=t(187);r({target:"Object",stat:!0,forced:a((function(){o(1)})),sham:!s},{getPrototypeOf:function(n){return o(i(n))}})},function(n,e,t){"use strict";var r,a=t(3),i=t(5),o=t(46).f,s=t(52),c=t(13),l=t(146),d=t(28),u=t(148),p=t(29),f=i("".startsWith),m=i("".slice),h=Math.min,v=u("startsWith");a({target:"String",proto:!0,forced:!!(p||v||(r=o(String.prototype,"startsWith"),!r||r.writable))&&!v},{startsWith:function(n){var e=c(d(this));l(n);var t=s(h(arguments.length>1?arguments[1]:void 0,e.length)),r=c(n);return f?f(e,r,t):m(e,t,t+r.length)===r}})},function(n,e,t){"use strict";var r=t(62).forEach,a=t(58)("forEach");n.exports=a?[].forEach:function(n){return r(this,n,arguments.length>1?arguments[1]:void 0)}},function(n,e,t){var r=t(4);n.exports=!r((function(){return Object.isExtensible(Object.preventExtensions({}))}))},function(n,e,t){var r=t(35),a=t(33),i=t(67).f,o=t(149),s="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];n.exports.f=function(n){return s&&"Window"==r(n)?function(n){try{return i(n)}catch(n){return o(s)}}(n):i(a(n))}},function(n,e,t){var r=t(9);e.f=r},function(n,e,t){var r=t(296),a=t(12),i=t(207),o=t(16).f;n.exports=function(n){var e=r.Symbol||(r.Symbol={});a(e,n)||o(e,n,{value:i.f(n)})}},function(n,e,t){var r=t(65);n.exports=r&&!!Symbol.for&&!!Symbol.keyFor},function(n,e,t){"use strict";var r=t(14);n.exports=function(){var n=r(this),e="";return n.hasIndices&&(e+="d"),n.global&&(e+="g"),n.ignoreCase&&(e+="i"),n.multiline&&(e+="m"),n.dotAll&&(e+="s"),n.unicode&&(e+="u"),n.sticky&&(e+="y"),e}},function(n,e,t){var r=t(4),a=t(1).RegExp;n.exports=r((function(){var n=a("(?<a>b)","g");return"b"!==n.exec("b").groups.a||"bc"!=="b".replace(n,"$<a>c")}))},function(n,e,t){var r=t(16).f;n.exports=function(n,e,t){t in n||r(n,t,{configurable:!0,get:function(){return e[t]},set:function(n){e[t]=n}})}},function(n,e,t){var r=t(13);n.exports=function(n,e){return void 0===n?arguments.length<2?"":e:r(n)}},function(n,e,t){t(3)({target:"Object",stat:!0,sham:!t(10)},{create:t(49)})},function(n,e){n.exports=function(n,e){for(var t=-1,r=e.length,a=n.length;++t<r;)n[a+t]=e[t];return n}},function(n,e,t){(function(e){var t="object"==typeof e&&e&&e.Object===Object&&e;n.exports=t}).call(this,t(96))},function(n,e,t){var r=t(115),a=t(322),i=t(323),o=t(324),s=t(325),c=t(326);function l(n){var e=this.__data__=new r(n);this.size=e.size}l.prototype.clear=a,l.prototype.delete=i,l.prototype.get=o,l.prototype.has=s,l.prototype.set=c,n.exports=l},function(n,e){n.exports=function(n,e){return n===e||n!=n&&e!=e}},function(n,e,t){var r=t(77),a=t(156);n.exports=function(n){if(!a(n))return!1;var e=r(n);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},function(n,e){var t=Function.prototype.toString;n.exports=function(n){if(null!=n){try{return t.call(n)}catch(n){}try{return n+""}catch(n){}}return""}},function(n,e,t){var r=t(343),a=t(63);n.exports=function n(e,t,i,o,s){return e===t||(null==e||null==t||!a(e)&&!a(t)?e!=e&&t!=t:r(e,t,i,o,n,s))}},function(n,e,t){var r=t(223),a=t(346),i=t(224);n.exports=function(n,e,t,o,s,c){var l=1&t,d=n.length,u=e.length;if(d!=u&&!(l&&u>d))return!1;var p=c.get(n),f=c.get(e);if(p&&f)return p==e&&f==n;var m=-1,h=!0,v=2&t?new r:void 0;for(c.set(n,e),c.set(e,n);++m<d;){var g=n[m],b=e[m];if(o)var T=l?o(b,g,m,e,n,c):o(g,b,m,n,e,c);if(void 0!==T){if(T)continue;h=!1;break}if(v){if(!a(e,(function(n,e){if(!i(v,e)&&(g===n||s(g,n,t,o,c)))return v.push(e)}))){h=!1;break}}else if(g!==b&&!s(g,b,t,o,c)){h=!1;break}}return c.delete(n),c.delete(e),h}},function(n,e,t){var r=t(157),a=t(344),i=t(345);function o(n){var e=-1,t=null==n?0:n.length;for(this.__data__=new r;++e<t;)this.add(n[e])}o.prototype.add=o.prototype.push=a,o.prototype.has=i,n.exports=o},function(n,e){n.exports=function(n,e){return n.has(e)}},function(n,e,t){var r=t(356),a=t(362),i=t(229);n.exports=function(n){return i(n)?r(n):a(n)}},function(n,e,t){(function(n){var r=t(47),a=t(358),i=e&&!e.nodeType&&e,o=i&&"object"==typeof n&&n&&!n.nodeType&&n,s=o&&o.exports===i?r.Buffer:void 0,c=(s?s.isBuffer:void 0)||a;n.exports=c}).call(this,t(170)(n))},function(n,e){var t=/^(?:0|[1-9]\d*)$/;n.exports=function(n,e){var r=typeof n;return!!(e=null==e?9007199254740991:e)&&("number"==r||"symbol"!=r&&t.test(n))&&n>-1&&n%1==0&&n<e}},function(n,e,t){var r=t(359),a=t(360),i=t(361),o=i&&i.isTypedArray,s=o?a(o):r;n.exports=s},function(n,e,t){var r=t(219),a=t(159);n.exports=function(n){return null!=n&&a(n.length)&&!r(n)}},function(n,e,t){var r=t(54)(t(47),"Set");n.exports=r},function(n,e,t){var r=t(156);n.exports=function(n){return n==n&&!r(n)}},function(n,e){n.exports=function(n,e){return function(t){return null!=t&&(t[n]===e&&(void 0!==e||n in Object(t)))}}},function(n,e,t){var r=t(234),a=t(119);n.exports=function(n,e){for(var t=0,i=(e=r(e,n)).length;null!=n&&t<i;)n=n[a(e[t++])];return t&&t==i?n:void 0}},function(n,e,t){var r=t(43),a=t(160),i=t(373),o=t(376);n.exports=function(n,e){return r(n)?n:a(n,e)?[n]:i(o(n))}},function(n,e,t){var r=t(1),a=t(51),i=t(8),o=t(44),s=t(86),c=t(172),l=/MSIE .\./.test(o),d=r.Function,u=function(n){return l?function(e,t){var r=c(arguments.length,1)>2,o=i(e)?e:d(e),l=r?s(arguments,2):void 0;return n(r?function(){a(o,this,l)}:o,t)}:n};n.exports={setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)}},function(n,e,t){"use strict";var r=t(1),a=t(5),i=t(36),o=t(15),s=t(12),c=t(86),l=t(79),d=r.Function,u=a([].concat),p=a([].join),f={},m=function(n,e,t){if(!s(f,e)){for(var r=[],a=0;a<e;a++)r[a]="a["+a+"]";f[e]=d("C,a","return new C("+p(r,",")+")")}return f[e](n,t)};n.exports=l?d.bind:function(n){var e=i(this),t=e.prototype,r=c(arguments,1),a=function(){var t=u(r,c(arguments));return this instanceof a?m(e,t.length,t):e.apply(n,t)};return o(t)&&(a.prototype=t),a}},function(n,e,t){},function(n,e,t){var r=t(11),a=t(12),i=t(45),o=t(210),s=RegExp.prototype;n.exports=function(n){var e=n.flags;return void 0!==e||"flags"in s||a(n,"flags")||!i(s,n)?e:r(o,n)}},function(n,e,t){},function(n,e,t){"use strict";var r=t(3),a=t(410).start;r({target:"String",proto:!0,forced:t(412)},{padStart:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}})},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(185),a=t(16);n.exports=function(n,e,t){return t.get&&r(t.get,e,{getter:!0}),t.set&&r(t.set,e,{setter:!0}),a.f(n,e,t)}},function(n,e,t){t(3)({target:"Object",stat:!0},{setPrototypeOf:t(85)})},function(n,e,t){var r=t(3),a=t(22),i=t(51),o=t(236),s=t(189),c=t(14),l=t(15),d=t(49),u=t(4),p=a("Reflect","construct"),f=Object.prototype,m=[].push,h=u((function(){function n(){}return!(p((function(){}),[],n)instanceof n)})),v=!u((function(){p((function(){}))})),g=h||v;r({target:"Reflect",stat:!0,forced:g,sham:g},{construct:function(n,e){s(n),c(e);var t=arguments.length<3?n:s(arguments[2]);if(v&&!h)return p(n,e,t);if(n==t){switch(e.length){case 0:return new n;case 1:return new n(e[0]);case 2:return new n(e[0],e[1]);case 3:return new n(e[0],e[1],e[2]);case 4:return new n(e[0],e[1],e[2],e[3])}var r=[null];return i(m,r,e),new(i(o,n,r))}var a=t.prototype,u=d(l(a)?a:f),g=i(n,u,e);return l(g)?g:u}})},function(n,e,t){},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(309),a=t(314),i=t(385),o=t(393),s=t(402),c=t(259),l=i((function(n){var e=c(n);return s(e)&&(e=void 0),o(r(n,1,s,!0),a(e,2))}));n.exports=l},function(n,e,t){"use strict";
/*!
 * escape-html
 * Copyright(c) 2012-2013 TJ Holowaychuk
 * Copyright(c) 2015 Andreas Lubbe
 * Copyright(c) 2015 Tiancheng "Timothy" Gu
 * MIT Licensed
 */var r=/["'&<>]/;n.exports=function(n){var e,t=""+n,a=r.exec(t);if(!a)return t;var i="",o=0,s=0;for(o=a.index;o<t.length;o++){switch(t.charCodeAt(o)){case 34:e="&quot;";break;case 38:e="&amp;";break;case 39:e="&#39;";break;case 60:e="&lt;";break;case 62:e="&gt;";break;default:continue}s!==o&&(i+=t.substring(s,o)),s=o+1,i+=e}return s!==o?i+t.substring(s,o):i}},function(n,e,t){"use strict";
/**
 * @file Embedded JavaScript templating engine. {@link http://ejs.co}
 * @author Matthew Eernisse <mde@fleegix.org>
 * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
 * @project EJS
 * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
 */var r=t(424),a=t(425),i=t(426),o=!1,s=t(427).version,c=["delimiter","scope","context","debug","compileDebug","client","_with","rmWhitespace","strict","filename","async"],l=c.concat("cache"),d=/^\uFEFF/;function u(n,t){var a,i,o=t.views,s=/^[A-Za-z]+:\\|^\//.exec(n);if(s&&s.length)a=e.resolveInclude(n.replace(/^\/*/,""),t.root||"/",!0);else if(t.filename&&(i=e.resolveInclude(n,t.filename),r.existsSync(i)&&(a=i)),a||Array.isArray(o)&&o.some((function(t){return i=e.resolveInclude(n,t,!0),r.existsSync(i)}))&&(a=i),!a)throw new Error('Could not find the include file "'+t.escapeFunction(n)+'"');return a}function p(n,t){var r,a=n.filename,i=arguments.length>1;if(n.cache){if(!a)throw new Error("cache option requires a filename");if(r=e.cache.get(a))return r;i||(t=m(a).toString().replace(d,""))}else if(!i){if(!a)throw new Error("Internal EJS error: no file name or template provided");t=m(a).toString().replace(d,"")}return r=e.compile(t,n),n.cache&&e.cache.set(a,r),r}function f(n,t,r){var a;if(!r){if("function"==typeof e.promiseImpl)return new e.promiseImpl((function(e,r){try{e(a=p(n)(t))}catch(n){r(n)}}));throw new Error("Please provide a callback function")}try{a=p(n)(t)}catch(n){return r(n)}r(null,a)}function m(n){return e.fileLoader(n)}function h(n,e,t,r,a){var i=e.split("\n"),o=Math.max(r-3,0),s=Math.min(i.length,r+3),c=a(t),l=i.slice(o,s).map((function(n,e){var t=e+o+1;return(t==r?" >> ":"    ")+t+"| "+n})).join("\n");throw n.path=c,n.message=(c||"ejs")+":"+r+"\n"+l+"\n\n"+n.message,n}function v(n){return n.replace(/;(\s*$)/,"$1")}function g(n,t){t=t||{};var r={};this.templateText=n,this.mode=null,this.truncate=!1,this.currentLine=1,this.source="",this.dependencies=[],r.client=t.client||!1,r.escapeFunction=t.escape||t.escapeFunction||i.escapeXML,r.compileDebug=!1!==t.compileDebug,r.debug=!!t.debug,r.filename=t.filename,r.openDelimiter=t.openDelimiter||e.openDelimiter||"<",r.closeDelimiter=t.closeDelimiter||e.closeDelimiter||">",r.delimiter=t.delimiter||e.delimiter||"%",r.strict=t.strict||!1,r.context=t.context,r.cache=t.cache||!1,r.rmWhitespace=t.rmWhitespace,r.root=t.root,r.outputFunctionName=t.outputFunctionName,r.localsName=t.localsName||e.localsName||"locals",r.views=t.views,r.async=t.async,r.destructuredLocals=t.destructuredLocals,r.legacyInclude=void 0===t.legacyInclude||!!t.legacyInclude,r.strict?r._with=!1:r._with=void 0===t._with||t._with,this.opts=r,this.regex=this.createRegex()}e.cache=i.cache,e.fileLoader=r.readFileSync,e.localsName="locals",e.promiseImpl=new Function("return this;")().Promise,e.resolveInclude=function(n,e,t){var r=a.dirname,i=a.extname,o=(0,a.resolve)(t?e:r(e),n);return i(n)||(o+=".ejs"),o},e.compile=function(n,e){return e&&e.scope&&(o||(console.warn("`scope` option is deprecated and will be removed in EJS 3"),o=!0),e.context||(e.context=e.scope),delete e.scope),new g(n,e).compile()},e.render=function(n,e,t){var r=e||{},a=t||{};return 2==arguments.length&&i.shallowCopyFromList(a,r,c),p(a,n)(r)},e.renderFile=function(){var n,e,t,r=Array.prototype.slice.call(arguments),a=r.shift(),o={filename:a};return"function"==typeof arguments[arguments.length-1]&&(n=r.pop()),r.length?(e=r.shift(),r.length?i.shallowCopy(o,r.pop()):(e.settings&&(e.settings.views&&(o.views=e.settings.views),e.settings["view cache"]&&(o.cache=!0),(t=e.settings["view options"])&&i.shallowCopy(o,t)),i.shallowCopyFromList(o,e,l)),o.filename=a):e={},f(o,e,n)},e.Template=g,e.clearCache=function(){e.cache.reset()},g.modes={EVAL:"eval",ESCAPED:"escaped",RAW:"raw",COMMENT:"comment",LITERAL:"literal"},g.prototype={createRegex:function(){var n="(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)",e=i.escapeRegExpChars(this.opts.delimiter),t=i.escapeRegExpChars(this.opts.openDelimiter),r=i.escapeRegExpChars(this.opts.closeDelimiter);return n=n.replace(/%/g,e).replace(/</g,t).replace(/>/g,r),new RegExp(n)},compile:function(){var n,e,t,r=this.opts,o="",s="",c=r.escapeFunction;if(!this.source){if(this.generateSource(),o+='  var __output = "";\n  function __append(s) { if (s !== undefined && s !== null) __output += s }\n',r.outputFunctionName&&(o+="  var "+r.outputFunctionName+" = __append;\n"),r.destructuredLocals&&r.destructuredLocals.length){for(var l="  var __locals = ("+r.localsName+" || {}),\n",d=0;d<r.destructuredLocals.length;d++){var f=r.destructuredLocals[d];d>0&&(l+=",\n  "),l+=f+" = __locals."+f}o+=l+";\n"}!1!==r._with&&(o+="  with ("+r.localsName+" || {}) {\n",s+="  }\n"),s+="  return __output;\n",this.source=o+this.source+s}n=r.compileDebug?"var __line = 1\n  , __lines = "+JSON.stringify(this.templateText)+"\n  , __filename = "+(r.filename?JSON.stringify(r.filename):"undefined")+";\ntry {\n"+this.source+"} catch (e) {\n  rethrow(e, __lines, __filename, __line, escapeFn);\n}\n":this.source,r.client&&(n="escapeFn = escapeFn || "+c.toString()+";\n"+n,r.compileDebug&&(n="rethrow = rethrow || "+h.toString()+";\n"+n)),r.strict&&(n='"use strict";\n'+n),r.debug&&console.log(n),r.compileDebug&&r.filename&&(n=n+"\n//# sourceURL="+r.filename+"\n");try{if(r.async)try{t=new Function("return (async function(){}).constructor;")()}catch(n){throw n instanceof SyntaxError?new Error("This environment does not support async/await"):n}else t=Function;e=new t(r.localsName+", escapeFn, include, rethrow",n)}catch(n){throw n instanceof SyntaxError&&(r.filename&&(n.message+=" in "+r.filename),n.message+=" while compiling ejs\n\n",n.message+="If the above error is not helpful, you may want to try EJS-Lint:\n",n.message+="https://github.com/RyanZim/EJS-Lint",r.async||(n.message+="\n",n.message+="Or, if you meant to create an async function, pass `async: true` as an option.")),n}var m=r.client?e:function(n){return e.apply(r.context,[n||{},c,function(e,t){var a=i.shallowCopy({},n);return t&&(a=i.shallowCopy(a,t)),function(n,e){var t=i.shallowCopy({},e);return t.filename=u(n,t),p(t)}(e,r)(a)},h])};if(m.dependencies=this.dependencies,r.filename&&"function"==typeof Object.defineProperty){var v=r.filename,g=a.basename(v,a.extname(v));try{Object.defineProperty(m,"name",{value:g,writable:!1,enumerable:!1,configurable:!0})}catch(n){}}return m},generateSource:function(){var n=this.opts;n.rmWhitespace&&(this.templateText=this.templateText.replace(/[\r\n]+/g,"\n").replace(/^\s+|\s+$/gm,"")),this.templateText=this.templateText.replace(/[ \t]*<%_/gm,"<%_").replace(/_%>[ \t]*/gm,"_%>");var t=this,r=this.parseTemplateText(),a=this.opts.delimiter,o=this.opts.openDelimiter,s=this.opts.closeDelimiter;r&&r.length&&r.forEach((function(c,l){var p,f,h,v,b,T;if(0===c.indexOf(o+a)&&0!==c.indexOf(o+a+a)&&(f=r[l+2])!=a+s&&f!="-"+a+s&&f!="_"+a+s)throw new Error('Could not find matching close tag for "'+c+'".');if(n.legacyInclude&&(h=c.match(/^\s*include\s+(\S+)/))&&(p=r[l-1])&&(p==o+a||p==o+a+"-"||p==o+a+"_"))return v=i.shallowCopy({},t.opts),b=function(n,e){var t,r,a=i.shallowCopy({},e);r=m(t=u(n,a)).toString().replace(d,""),a.filename=t;var o=new g(r,a);return o.generateSource(),{source:o.source,filename:t,template:r}}(h[1],v),T=t.opts.compileDebug?"    ; (function(){\n      var __line = 1\n      , __lines = "+JSON.stringify(b.template)+"\n      , __filename = "+JSON.stringify(b.filename)+";\n      try {\n"+b.source+"      } catch (e) {\n        rethrow(e, __lines, __filename, __line, escapeFn);\n      }\n    ; }).call(this)\n":"    ; (function(){\n"+b.source+"    ; }).call(this)\n",t.source+=T,void t.dependencies.push(e.resolveInclude(h[1],v.filename));t.scanLine(c)}))},parseTemplateText:function(){for(var n,e=this.templateText,t=this.regex,r=t.exec(e),a=[];r;)0!==(n=r.index)&&(a.push(e.substring(0,n)),e=e.slice(n)),a.push(r[0]),e=e.slice(r[0].length),r=t.exec(e);return e&&a.push(e),a},_addOutput:function(n){if(this.truncate&&(n=n.replace(/^(?:\r\n|\r|\n)/,""),this.truncate=!1),!n)return n;n=(n=(n=(n=n.replace(/\\/g,"\\\\")).replace(/\n/g,"\\n")).replace(/\r/g,"\\r")).replace(/"/g,'\\"'),this.source+='    ; __append("'+n+'")\n'},scanLine:function(n){var e,t=this.opts.delimiter,r=this.opts.openDelimiter,a=this.opts.closeDelimiter;switch(e=n.split("\n").length-1,n){case r+t:case r+t+"_":this.mode=g.modes.EVAL;break;case r+t+"=":this.mode=g.modes.ESCAPED;break;case r+t+"-":this.mode=g.modes.RAW;break;case r+t+"#":this.mode=g.modes.COMMENT;break;case r+t+t:this.mode=g.modes.LITERAL,this.source+='    ; __append("'+n.replace(r+t+t,r+t)+'")\n';break;case t+t+a:this.mode=g.modes.LITERAL,this.source+='    ; __append("'+n.replace(t+t+a,t+a)+'")\n';break;case t+a:case"-"+t+a:case"_"+t+a:this.mode==g.modes.LITERAL&&this._addOutput(n),this.mode=null,this.truncate=0===n.indexOf("-")||0===n.indexOf("_");break;default:if(this.mode){switch(this.mode){case g.modes.EVAL:case g.modes.ESCAPED:case g.modes.RAW:n.lastIndexOf("//")>n.lastIndexOf("\n")&&(n+="\n")}switch(this.mode){case g.modes.EVAL:this.source+="    ; "+n+"\n";break;case g.modes.ESCAPED:this.source+="    ; __append(escapeFn("+v(n)+"))\n";break;case g.modes.RAW:this.source+="    ; __append("+v(n)+")\n";break;case g.modes.COMMENT:break;case g.modes.LITERAL:this._addOutput(n)}}else this._addOutput(n)}this.opts.compileDebug&&e&&(this.currentLine+=e,this.source+="    ; __line = "+this.currentLine+"\n")}},e.escapeXML=i.escapeXML,e.__express=e.renderFile,e.VERSION=s,e.name="ejs","undefined"!=typeof window&&(window.ejs=e)},function(n,e,t){"use strict";t.r(e);t(24),t(40),t(31),t(59),t(6),t(74),t(70),t(95);var r=1,a=2,i=4,o=8;function s(n){this.mode=i,this.data=n}s.prototype={getLength:function(n){return this.data.length},write:function(n){for(var e=0;e<this.data.length;e++)n.put(this.data.charCodeAt(e),8)}};var c=s,l={L:1,M:0,Q:3,H:2};function d(n,e){this.totalCount=n,this.dataCount=e}d.RS_BLOCK_TABLE=[[1,26,19],[1,26,16],[1,26,13],[1,26,9],[1,44,34],[1,44,28],[1,44,22],[1,44,16],[1,70,55],[1,70,44],[2,35,17],[2,35,13],[1,100,80],[2,50,32],[2,50,24],[4,25,9],[1,134,108],[2,67,43],[2,33,15,2,34,16],[2,33,11,2,34,12],[2,86,68],[4,43,27],[4,43,19],[4,43,15],[2,98,78],[4,49,31],[2,32,14,4,33,15],[4,39,13,1,40,14],[2,121,97],[2,60,38,2,61,39],[4,40,18,2,41,19],[4,40,14,2,41,15],[2,146,116],[3,58,36,2,59,37],[4,36,16,4,37,17],[4,36,12,4,37,13],[2,86,68,2,87,69],[4,69,43,1,70,44],[6,43,19,2,44,20],[6,43,15,2,44,16],[4,101,81],[1,80,50,4,81,51],[4,50,22,4,51,23],[3,36,12,8,37,13],[2,116,92,2,117,93],[6,58,36,2,59,37],[4,46,20,6,47,21],[7,42,14,4,43,15],[4,133,107],[8,59,37,1,60,38],[8,44,20,4,45,21],[12,33,11,4,34,12],[3,145,115,1,146,116],[4,64,40,5,65,41],[11,36,16,5,37,17],[11,36,12,5,37,13],[5,109,87,1,110,88],[5,65,41,5,66,42],[5,54,24,7,55,25],[11,36,12],[5,122,98,1,123,99],[7,73,45,3,74,46],[15,43,19,2,44,20],[3,45,15,13,46,16],[1,135,107,5,136,108],[10,74,46,1,75,47],[1,50,22,15,51,23],[2,42,14,17,43,15],[5,150,120,1,151,121],[9,69,43,4,70,44],[17,50,22,1,51,23],[2,42,14,19,43,15],[3,141,113,4,142,114],[3,70,44,11,71,45],[17,47,21,4,48,22],[9,39,13,16,40,14],[3,135,107,5,136,108],[3,67,41,13,68,42],[15,54,24,5,55,25],[15,43,15,10,44,16],[4,144,116,4,145,117],[17,68,42],[17,50,22,6,51,23],[19,46,16,6,47,17],[2,139,111,7,140,112],[17,74,46],[7,54,24,16,55,25],[34,37,13],[4,151,121,5,152,122],[4,75,47,14,76,48],[11,54,24,14,55,25],[16,45,15,14,46,16],[6,147,117,4,148,118],[6,73,45,14,74,46],[11,54,24,16,55,25],[30,46,16,2,47,17],[8,132,106,4,133,107],[8,75,47,13,76,48],[7,54,24,22,55,25],[22,45,15,13,46,16],[10,142,114,2,143,115],[19,74,46,4,75,47],[28,50,22,6,51,23],[33,46,16,4,47,17],[8,152,122,4,153,123],[22,73,45,3,74,46],[8,53,23,26,54,24],[12,45,15,28,46,16],[3,147,117,10,148,118],[3,73,45,23,74,46],[4,54,24,31,55,25],[11,45,15,31,46,16],[7,146,116,7,147,117],[21,73,45,7,74,46],[1,53,23,37,54,24],[19,45,15,26,46,16],[5,145,115,10,146,116],[19,75,47,10,76,48],[15,54,24,25,55,25],[23,45,15,25,46,16],[13,145,115,3,146,116],[2,74,46,29,75,47],[42,54,24,1,55,25],[23,45,15,28,46,16],[17,145,115],[10,74,46,23,75,47],[10,54,24,35,55,25],[19,45,15,35,46,16],[17,145,115,1,146,116],[14,74,46,21,75,47],[29,54,24,19,55,25],[11,45,15,46,46,16],[13,145,115,6,146,116],[14,74,46,23,75,47],[44,54,24,7,55,25],[59,46,16,1,47,17],[12,151,121,7,152,122],[12,75,47,26,76,48],[39,54,24,14,55,25],[22,45,15,41,46,16],[6,151,121,14,152,122],[6,75,47,34,76,48],[46,54,24,10,55,25],[2,45,15,64,46,16],[17,152,122,4,153,123],[29,74,46,14,75,47],[49,54,24,10,55,25],[24,45,15,46,46,16],[4,152,122,18,153,123],[13,74,46,32,75,47],[48,54,24,14,55,25],[42,45,15,32,46,16],[20,147,117,4,148,118],[40,75,47,7,76,48],[43,54,24,22,55,25],[10,45,15,67,46,16],[19,148,118,6,149,119],[18,75,47,31,76,48],[34,54,24,34,55,25],[20,45,15,61,46,16]],d.getRSBlocks=function(n,e){var t=d.getRsBlockTable(n,e);if(null==t)throw new Error("bad rs block @ typeNumber:"+n+"/errorCorrectLevel:"+e);for(var r=t.length/3,a=new Array,i=0;i<r;i++)for(var o=t[3*i+0],s=t[3*i+1],c=t[3*i+2],l=0;l<o;l++)a.push(new d(s,c));return a},d.getRsBlockTable=function(n,e){switch(e){case l.L:return d.RS_BLOCK_TABLE[4*(n-1)+0];case l.M:return d.RS_BLOCK_TABLE[4*(n-1)+1];case l.Q:return d.RS_BLOCK_TABLE[4*(n-1)+2];case l.H:return d.RS_BLOCK_TABLE[4*(n-1)+3];default:return}};var u=d;function p(){this.buffer=new Array,this.length=0}p.prototype={get:function(n){var e=Math.floor(n/8);return 1==(this.buffer[e]>>>7-n%8&1)},put:function(n,e){for(var t=0;t<e;t++)this.putBit(1==(n>>>e-t-1&1))},getLengthInBits:function(){return this.length},putBit:function(n){var e=Math.floor(this.length/8);this.buffer.length<=e&&this.buffer.push(0),n&&(this.buffer[e]|=128>>>this.length%8),this.length++}};for(var f=p,m={glog:function(n){if(n<1)throw new Error("glog("+n+")");return m.LOG_TABLE[n]},gexp:function(n){for(;n<0;)n+=255;for(;n>=256;)n-=255;return m.EXP_TABLE[n]},EXP_TABLE:new Array(256),LOG_TABLE:new Array(256)},h=0;h<8;h++)m.EXP_TABLE[h]=1<<h;for(h=8;h<256;h++)m.EXP_TABLE[h]=m.EXP_TABLE[h-4]^m.EXP_TABLE[h-5]^m.EXP_TABLE[h-6]^m.EXP_TABLE[h-8];for(h=0;h<255;h++)m.LOG_TABLE[m.EXP_TABLE[h]]=h;var v=m;function g(n,e){if(null==n.length)throw new Error(n.length+"/"+e);for(var t=0;t<n.length&&0==n[t];)t++;this.num=new Array(n.length-t+e);for(var r=0;r<n.length-t;r++)this.num[r]=n[r+t]}g.prototype={get:function(n){return this.num[n]},getLength:function(){return this.num.length},multiply:function(n){for(var e=new Array(this.getLength()+n.getLength()-1),t=0;t<this.getLength();t++)for(var r=0;r<n.getLength();r++)e[t+r]^=v.gexp(v.glog(this.get(t))+v.glog(n.get(r)));return new g(e,0)},mod:function(n){if(this.getLength()-n.getLength()<0)return this;for(var e=v.glog(this.get(0))-v.glog(n.get(0)),t=new Array(this.getLength()),r=0;r<this.getLength();r++)t[r]=this.get(r);for(r=0;r<n.getLength();r++)t[r]^=v.gexp(v.glog(n.get(r))+e);return new g(t,0).mod(n)}};var b=g,T=0,y=1,C=2,w=3,S=4,A=5,R=6,P=7,x={PATTERN_POSITION_TABLE:[[],[6,18],[6,22],[6,26],[6,30],[6,34],[6,22,38],[6,24,42],[6,26,46],[6,28,50],[6,30,54],[6,32,58],[6,34,62],[6,26,46,66],[6,26,48,70],[6,26,50,74],[6,30,54,78],[6,30,56,82],[6,30,58,86],[6,34,62,90],[6,28,50,72,94],[6,26,50,74,98],[6,30,54,78,102],[6,28,54,80,106],[6,32,58,84,110],[6,30,58,86,114],[6,34,62,90,118],[6,26,50,74,98,122],[6,30,54,78,102,126],[6,26,52,78,104,130],[6,30,56,82,108,134],[6,34,60,86,112,138],[6,30,58,86,114,142],[6,34,62,90,118,146],[6,30,54,78,102,126,150],[6,24,50,76,102,128,154],[6,28,54,80,106,132,158],[6,32,58,84,110,136,162],[6,26,54,82,110,138,166],[6,30,58,86,114,142,170]],G15:1335,G18:7973,G15_MASK:21522,getBCHTypeInfo:function(n){for(var e=n<<10;x.getBCHDigit(e)-x.getBCHDigit(x.G15)>=0;)e^=x.G15<<x.getBCHDigit(e)-x.getBCHDigit(x.G15);return(n<<10|e)^x.G15_MASK},getBCHTypeNumber:function(n){for(var e=n<<12;x.getBCHDigit(e)-x.getBCHDigit(x.G18)>=0;)e^=x.G18<<x.getBCHDigit(e)-x.getBCHDigit(x.G18);return n<<12|e},getBCHDigit:function(n){for(var e=0;0!=n;)e++,n>>>=1;return e},getPatternPosition:function(n){return x.PATTERN_POSITION_TABLE[n-1]},getMask:function(n,e,t){switch(n){case T:return(e+t)%2==0;case y:return e%2==0;case C:return t%3==0;case w:return(e+t)%3==0;case S:return(Math.floor(e/2)+Math.floor(t/3))%2==0;case A:return e*t%2+e*t%3==0;case R:return(e*t%2+e*t%3)%2==0;case P:return(e*t%3+(e+t)%2)%2==0;default:throw new Error("bad maskPattern:"+n)}},getErrorCorrectPolynomial:function(n){for(var e=new b([1],0),t=0;t<n;t++)e=e.multiply(new b([1,v.gexp(t)],0));return e},getLengthInBits:function(n,e){if(1<=e&&e<10)switch(n){case r:return 10;case a:return 9;case i:case o:return 8;default:throw new Error("mode:"+n)}else if(e<27)switch(n){case r:return 12;case a:return 11;case i:return 16;case o:return 10;default:throw new Error("mode:"+n)}else{if(!(e<41))throw new Error("type:"+e);switch(n){case r:return 14;case a:return 13;case i:return 16;case o:return 12;default:throw new Error("mode:"+n)}}},getLostPoint:function(n){for(var e=n.getModuleCount(),t=0,r=0;r<e;r++)for(var a=0;a<e;a++){for(var i=0,o=n.isDark(r,a),s=-1;s<=1;s++)if(!(r+s<0||e<=r+s))for(var c=-1;c<=1;c++)a+c<0||e<=a+c||0==s&&0==c||o==n.isDark(r+s,a+c)&&i++;i>5&&(t+=3+i-5)}for(r=0;r<e-1;r++)for(a=0;a<e-1;a++){var l=0;n.isDark(r,a)&&l++,n.isDark(r+1,a)&&l++,n.isDark(r,a+1)&&l++,n.isDark(r+1,a+1)&&l++,0!=l&&4!=l||(t+=3)}for(r=0;r<e;r++)for(a=0;a<e-6;a++)n.isDark(r,a)&&!n.isDark(r,a+1)&&n.isDark(r,a+2)&&n.isDark(r,a+3)&&n.isDark(r,a+4)&&!n.isDark(r,a+5)&&n.isDark(r,a+6)&&(t+=40);for(a=0;a<e;a++)for(r=0;r<e-6;r++)n.isDark(r,a)&&!n.isDark(r+1,a)&&n.isDark(r+2,a)&&n.isDark(r+3,a)&&n.isDark(r+4,a)&&!n.isDark(r+5,a)&&n.isDark(r+6,a)&&(t+=40);var d=0;for(a=0;a<e;a++)for(r=0;r<e;r++)n.isDark(r,a)&&d++;return t+=10*(Math.abs(100*d/e/e-50)/5)}},I=x;function k(n,e){this.typeNumber=n,this.errorCorrectLevel=e,this.modules=null,this.moduleCount=0,this.dataCache=null,this.dataList=[]}var N=k.prototype;N.addData=function(n){var e=new c(n);this.dataList.push(e),this.dataCache=null},N.isDark=function(n,e){if(n<0||this.moduleCount<=n||e<0||this.moduleCount<=e)throw new Error(n+","+e);return this.modules[n][e]},N.getModuleCount=function(){return this.moduleCount},N.make=function(){if(this.typeNumber<1){var n=1;for(n=1;n<40;n++){for(var e=u.getRSBlocks(n,this.errorCorrectLevel),t=new f,r=0,a=0;a<e.length;a++)r+=e[a].dataCount;for(a=0;a<this.dataList.length;a++){var i=this.dataList[a];t.put(i.mode,4),t.put(i.getLength(),I.getLengthInBits(i.mode,n)),i.write(t)}if(t.getLengthInBits()<=8*r)break}this.typeNumber=n}this.makeImpl(!1,this.getBestMaskPattern())},N.makeImpl=function(n,e){this.moduleCount=4*this.typeNumber+17,this.modules=new Array(this.moduleCount);for(var t=0;t<this.moduleCount;t++){this.modules[t]=new Array(this.moduleCount);for(var r=0;r<this.moduleCount;r++)this.modules[t][r]=null}this.setupPositionProbePattern(0,0),this.setupPositionProbePattern(this.moduleCount-7,0),this.setupPositionProbePattern(0,this.moduleCount-7),this.setupPositionAdjustPattern(),this.setupTimingPattern(),this.setupTypeInfo(n,e),this.typeNumber>=7&&this.setupTypeNumber(n),null==this.dataCache&&(this.dataCache=k.createData(this.typeNumber,this.errorCorrectLevel,this.dataList)),this.mapData(this.dataCache,e)},N.setupPositionProbePattern=function(n,e){for(var t=-1;t<=7;t++)if(!(n+t<=-1||this.moduleCount<=n+t))for(var r=-1;r<=7;r++)e+r<=-1||this.moduleCount<=e+r||(this.modules[n+t][e+r]=0<=t&&t<=6&&(0==r||6==r)||0<=r&&r<=6&&(0==t||6==t)||2<=t&&t<=4&&2<=r&&r<=4)},N.getBestMaskPattern=function(){for(var n=0,e=0,t=0;t<8;t++){this.makeImpl(!0,t);var r=I.getLostPoint(this);(0==t||n>r)&&(n=r,e=t)}return e},N.createMovieClip=function(n,e,t){var r=n.createEmptyMovieClip(e,t);this.make();for(var a=0;a<this.modules.length;a++)for(var i=1*a,o=0;o<this.modules[a].length;o++){var s=1*o;this.modules[a][o]&&(r.beginFill(0,100),r.moveTo(s,i),r.lineTo(s+1,i),r.lineTo(s+1,i+1),r.lineTo(s,i+1),r.endFill())}return r},N.setupTimingPattern=function(){for(var n=8;n<this.moduleCount-8;n++)null==this.modules[n][6]&&(this.modules[n][6]=n%2==0);for(var e=8;e<this.moduleCount-8;e++)null==this.modules[6][e]&&(this.modules[6][e]=e%2==0)},N.setupPositionAdjustPattern=function(){for(var n=I.getPatternPosition(this.typeNumber),e=0;e<n.length;e++)for(var t=0;t<n.length;t++){var r=n[e],a=n[t];if(null==this.modules[r][a])for(var i=-2;i<=2;i++)for(var o=-2;o<=2;o++)this.modules[r+i][a+o]=-2==i||2==i||-2==o||2==o||0==i&&0==o}},N.setupTypeNumber=function(n){for(var e=I.getBCHTypeNumber(this.typeNumber),t=0;t<18;t++){var r=!n&&1==(e>>t&1);this.modules[Math.floor(t/3)][t%3+this.moduleCount-8-3]=r}for(t=0;t<18;t++){r=!n&&1==(e>>t&1);this.modules[t%3+this.moduleCount-8-3][Math.floor(t/3)]=r}},N.setupTypeInfo=function(n,e){for(var t=this.errorCorrectLevel<<3|e,r=I.getBCHTypeInfo(t),a=0;a<15;a++){var i=!n&&1==(r>>a&1);a<6?this.modules[a][8]=i:a<8?this.modules[a+1][8]=i:this.modules[this.moduleCount-15+a][8]=i}for(a=0;a<15;a++){i=!n&&1==(r>>a&1);a<8?this.modules[8][this.moduleCount-a-1]=i:a<9?this.modules[8][15-a-1+1]=i:this.modules[8][15-a-1]=i}this.modules[this.moduleCount-8][8]=!n},N.mapData=function(n,e){for(var t=-1,r=this.moduleCount-1,a=7,i=0,o=this.moduleCount-1;o>0;o-=2)for(6==o&&o--;;){for(var s=0;s<2;s++)if(null==this.modules[r][o-s]){var c=!1;i<n.length&&(c=1==(n[i]>>>a&1)),I.getMask(e,r,o-s)&&(c=!c),this.modules[r][o-s]=c,-1==--a&&(i++,a=7)}if((r+=t)<0||this.moduleCount<=r){r-=t,t=-t;break}}},k.PAD0=236,k.PAD1=17,k.createData=function(n,e,t){for(var r=u.getRSBlocks(n,e),a=new f,i=0;i<t.length;i++){var o=t[i];a.put(o.mode,4),a.put(o.getLength(),I.getLengthInBits(o.mode,n)),o.write(a)}var s=0;for(i=0;i<r.length;i++)s+=r[i].dataCount;if(a.getLengthInBits()>8*s)throw new Error("code length overflow. ("+a.getLengthInBits()+">"+8*s+")");for(a.getLengthInBits()+4<=8*s&&a.put(0,4);a.getLengthInBits()%8!=0;)a.putBit(!1);for(;!(a.getLengthInBits()>=8*s||(a.put(k.PAD0,8),a.getLengthInBits()>=8*s));)a.put(k.PAD1,8);return k.createBytes(a,r)},k.createBytes=function(n,e){for(var t=0,r=0,a=0,i=new Array(e.length),o=new Array(e.length),s=0;s<e.length;s++){var c=e[s].dataCount,l=e[s].totalCount-c;r=Math.max(r,c),a=Math.max(a,l),i[s]=new Array(c);for(var d=0;d<i[s].length;d++)i[s][d]=255&n.buffer[d+t];t+=c;var u=I.getErrorCorrectPolynomial(l),p=new b(i[s],u.getLength()-1).mod(u);o[s]=new Array(u.getLength()-1);for(d=0;d<o[s].length;d++){var f=d+p.getLength()-o[s].length;o[s][d]=f>=0?p.get(f):0}}var m=0;for(d=0;d<e.length;d++)m+=e[d].totalCount;var h=new Array(m),v=0;for(d=0;d<r;d++)for(s=0;s<e.length;s++)d<i[s].length&&(h[v++]=i[s][d]);for(d=0;d<a;d++)for(s=0;s<e.length;s++)d<o[s].length&&(h[v++]=o[s][d]);return h};var _=k;var E={components:{QrcodeVue:{props:{value:{type:String,required:!0,default:""},className:{type:String,default:""},size:{type:[Number,String],default:100,validator:function(n){return!0!==isNaN(Number(n))}},level:{type:String,default:"L",validator:function(n){return["L","Q","M","H"].indexOf(n)>-1}},background:{type:String,default:"#fff"},foreground:{type:String,default:"#000"},renderAs:{type:String,required:!1,default:"canvas",validator:function(n){return["canvas","svg"].indexOf(n)>-1}}},data:function(){return{numCells:0,fgPath:""}},updated:function(){this.render()},mounted:function(){this.render()},methods:{render:function(){var n=this.value,e=this.size,t=this.level,r=this.background,a=this.foreground,i=this.renderAs,o=e>>>0,s=new _(-1,l[t]);s.addData(function(n){for(var e="",t=0;t<n.length;t++){var r=n.charCodeAt(t);r<128?e+=String.fromCharCode(r):r<2048?(e+=String.fromCharCode(192|r>>6),e+=String.fromCharCode(128|63&r)):r<55296||r>=57344?(e+=String.fromCharCode(224|r>>12),e+=String.fromCharCode(128|r>>6&63),e+=String.fromCharCode(128|63&r)):(t++,r=65536+((1023&r)<<10|1023&n.charCodeAt(t)),e+=String.fromCharCode(240|r>>18),e+=String.fromCharCode(128|r>>12&63),e+=String.fromCharCode(128|r>>6&63),e+=String.fromCharCode(128|63&r))}return e}(n)),s.make();var c=s.modules,d=o/c.length,u=o/c.length,p=window.devicePixelRatio||1;if("svg"===i)this.numCells=c.length,this.fgPath=function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=[];return n.forEach((function(n,r){var a=null;n.forEach((function(i,o){if(!i&&null!==a)return t.push("M".concat(a+e," ").concat(r+e,"h").concat(o-a,"v1H").concat(a+e,"z")),void(a=null);if(o!==n.length-1)i&&null===a&&(a=o);else{if(!i)return;null===a?t.push("M".concat(o+e,",").concat(r+e," h1v1H").concat(o+e,"z")):t.push("M".concat(a+e,",").concat(r+e," h").concat(o+1-a,"v1H").concat(a+e,"z"))}}))})),t.join("")}(c);else{var f=this.$refs["qrcode-vue"],m=f.getContext("2d");f.height=f.width=o*p,m.scale(p,p),c.forEach((function(n,e){n.forEach((function(n,t){m.fillStyle=n?a:r;var i=Math.ceil((t+1)*d)-Math.floor(t*d),o=Math.ceil((e+1)*u)-Math.floor(e*u);m.fillRect(Math.round(t*d),Math.round(e*u),i,o)}))}))}}},render:function(n){var e=this.className,t=this.value,r=this.level,a=this.background,i=this.foreground,o=this.size,s=this.renderAs,c=this.numCells,l=this.fgPath;return n("div",{class:this.class||e,attrs:{value:t,level:r,background:a,foreground:i}},["svg"===s?n("svg",{attrs:{height:o,width:o,shapeRendering:"crispEdges",viewBox:"0 0 ".concat(c," ").concat(c)},style:{width:o+"px",height:o+"px"}},[n("path",{attrs:{fill:a,d:"M0,0 h".concat(c,"v").concat(c,"H0z")}}),n("path",{attrs:{fill:i,d:l}})]):n("canvas",{attrs:{height:o,width:o},style:{width:o+"px",height:o+"px"},ref:"qrcode-vue"},[])])}}},data:function(){return{show:!1,qrcodeText:"",qrSize:100,channelQR:""}},props:{size:{type:[String,Number],default:"small"},channel:{type:Boolean,default:!1}},mounted:function(){var n,e=this,t=this.size,r="";switch(t){case"small":r=100;break;case"medium":r=150;break;case"big":r=200;break;default:if(null==(n=t)||""===n.toString().replace(/\s/g,"")||""==typeof n||isNaN(n))r=100;else{var a=Math.min(window.innerHeight,window.innerWidth);r=(t=~~t)<10?10:t>a?a:t}}this.qrSize=r,this.channel&&(this.channelQR=location.href.indexOf("?")>-1?"&channel=qrcode":"?channel=qrcode"),document.documentElement.addEventListener("mousedown",(function(){e.show=!1}))},methods:{showQrCode:function(){var n=this;this.show=!this.show,this.show&&this.$nextTick((function(){n.qrcodeText=location.href+n.channelQR}))}}},D=(t(409),t(19)),O=Object(D.a)(E,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"qrcodeBtn",attrs:{title:"手机查看"},on:{mousedown:function(e){return e.stopPropagation(),n.showQrCode.apply(null,arguments)}}},[t("svg",{attrs:{t:"1652063987836",viewBox:"0 0 1024 1024",xmlns:"http://www.w3.org/2000/svg","p-id":"2096",width:"16",height:"16"}},[t("path",{attrs:{d:"M891.01653333 648.53333333V530.0224h-180.224v60.07466667h120.14933334V648.53333333z m-59.52853333 59.52853334v-58.9824h-60.6208v60.07466666h60.07466667v120.69546667h-57.89013334V771.41333333h-62.2592V649.6256h-60.07466666v60.07466667H591.18933333v-59.52853334h-60.6208v60.07466667h60.07466667v59.52853333h-60.07466667v120.14933334h60.07466667v-120.14933334h60.07466667v119.6032h60.07466666V831.488h61.71306667v58.43626667h118.51093333V708.06186667z m-180.77013333-58.9824V530.56853333l-120.14933334-0.54613333v60.07466667h60.07466667v58.9824zM132.98346667 133.5296v361.54026667h360.448V133.5296h-360.448z m226.64533333 226.64533333h-92.84266667v-92.84266666h92.84266667v92.84266666z m-226.64533333 169.84746667v359.90186667h360.448V530.0224h-360.448z m226.64533333 226.0992h-92.84266667v-92.84266667h92.84266667v92.84266667z m170.93973333-622.592v360.448h360.448v-360.448h-360.448z m229.92213334 226.64533333h-92.84266667v-92.84266666h92.84266667v92.84266666z",fill:"#2C2C2C","p-id":"2097"}})]),n._v(" "),n.show?t("qrcode-vue",{ref:"qrcodeContainer",attrs:{id:"qrcodeContainer",value:n.qrcodeText,size:n.qrSize,level:"H"}}):n._e()],1)}),[],!1,null,null,null);e.default=O.exports},function(n,e,t){"use strict";t.r(e);var r={name:"CodeBlock",props:{title:{type:String,required:!0},active:{type:Boolean,default:!1}}},a=(t(413),t(19)),i=Object(a.a)(r,(function(){var n=this.$createElement;return(this._self._c||n)("div",{staticClass:"theme-code-block",class:{"theme-code-block__active":this.active}},[this._t("default")],2)}),[],!1,null,"278dfbe3",null);e.default=i.exports},function(n,e,t){"use strict";t.r(e);t(26),t(6),t(27),t(50),t(39);var r={name:"CodeGroup",data:function(){return{codeTabs:[],activeCodeTabIndex:-1}},watch:{activeCodeTabIndex:function(n){this.codeTabs.forEach((function(n){n.elm.classList.remove("theme-code-block__active")})),this.codeTabs[n].elm.classList.add("theme-code-block__active")}},mounted:function(){var n=this;this.codeTabs=(this.$slots.default||[]).filter((function(n){return Boolean(n.componentOptions)})).map((function(e,t){return""===e.componentOptions.propsData.active&&(n.activeCodeTabIndex=t),{title:e.componentOptions.propsData.title,elm:e.elm}})),-1===this.activeCodeTabIndex&&this.codeTabs.length>0&&(this.activeCodeTabIndex=0)},methods:{changeCodeTab:function(n){this.activeCodeTabIndex=n}}},a=(t(414),t(19)),i=Object(a.a)(r,(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("div",{staticClass:"theme-code-group"},[t("div",{staticClass:"theme-code-group__nav"},[t("ul",{staticClass:"theme-code-group__ul"},n._l(n.codeTabs,(function(e,r){return t("li",{key:e.title,staticClass:"theme-code-group__li"},[t("button",{staticClass:"theme-code-group__nav-tab",class:{"theme-code-group__nav-tab-active":r===n.activeCodeTabIndex},on:{click:function(e){return n.changeCodeTab(r)}}},[n._v("\n            "+n._s(e.title)+"\n          ")])])})),0)]),n._v(" "),n._t("default"),n._v(" "),n.codeTabs.length<1?t("pre",{staticClass:"pre-blank"},[n._v("// Make sure to add code blocks to your code group")]):n._e()],2)}),[],!1,null,"571ae3a4",null);e.default=i.exports},function(n,e,t){"use strict";var r=t(186).IteratorPrototype,a=t(49),i=t(61),o=t(75),s=t(83),c=function(){return this};n.exports=function(n,e,t,l){var d=e+" Iterator";return n.prototype=a(r,{next:i(+!l,t)}),o(n,d,!1,!0),s[d]=c,n}},function(n,e,t){var r=t(1),a=t(45),i=r.TypeError;n.exports=function(n,e){if(a(e,n))return n;throw i("Incorrect invocation")}},function(n,e,t){"use strict";var r=t(3),a=t(136).includes,i=t(4),o=t(127);r({target:"Array",proto:!0,forced:i((function(){return!Array(1).includes()}))},{includes:function(n){return a(this,n,arguments.length>1?arguments[1]:void 0)}}),o("includes")},function(n,e,t){"use strict";var r=t(3),a=t(5),i=t(146),o=t(28),s=t(13),c=t(148),l=a("".indexOf);r({target:"String",proto:!0,forced:!c("includes")},{includes:function(n){return!!~l(s(o(this)),s(i(n)),arguments.length>1?arguments[1]:void 0)}})},function(n,e){n.exports=function(n){var e=null==n?0:n.length;return e?n[e-1]:void 0}},function(n,e,t){"use strict";var r=t(3),a=t(167).trim;r({target:"String",proto:!0,forced:t(403)("trim")},{trim:function(){return a(this)}})},function(n,e,t){var r=t(149),a=Math.floor,i=function(n,e){var t=n.length,c=a(t/2);return t<8?o(n,e):s(n,i(r(n,0,c),e),i(r(n,c),e),e)},o=function(n,e){for(var t,r,a=n.length,i=1;i<a;){for(r=i,t=n[i];r&&e(n[r-1],t)>0;)n[r]=n[--r];r!==i++&&(n[r]=t)}return n},s=function(n,e,t,r){for(var a=e.length,i=t.length,o=0,s=0;o<a||s<i;)n[o+s]=o<a&&s<i?r(e[o],t[s])<=0?e[o++]:t[s++]:o<a?e[o++]:t[s++];return n};n.exports=i},function(n,e){var t,r,a=n.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(n){if(t===setTimeout)return setTimeout(n,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(n,0);try{return t(n,0)}catch(e){try{return t.call(null,n,0)}catch(e){return t.call(this,n,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(n){t=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(n){r=o}}();var c,l=[],d=!1,u=-1;function p(){d&&c&&(d=!1,c.length?l=c.concat(l):u=-1,l.length&&f())}function f(){if(!d){var n=s(p);d=!0;for(var e=l.length;e;){for(c=l,l=[];++u<e;)c&&c[u].run();u=-1,e=l.length}c=null,d=!1,function(n){if(r===clearTimeout)return clearTimeout(n);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(n);try{r(n)}catch(e){try{return r.call(null,n)}catch(e){return r.call(this,n)}}}(n)}}function m(n,e){this.fun=n,this.array=e}function h(){}a.nextTick=function(n){var e=new Array(arguments.length-1);if(arguments.length>1)for(var t=1;t<arguments.length;t++)e[t-1]=arguments[t];l.push(new m(n,e)),1!==l.length||d||s(f)},m.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=h,a.addListener=h,a.once=h,a.off=h,a.removeListener=h,a.removeAllListeners=h,a.emit=h,a.prependListener=h,a.prependOnceListener=h,a.listeners=function(n){return[]},a.binding=function(n){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(n){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(n,e,t){var r=t(5),a=t(28),i=t(13),o=/"/g,s=r("".replace);n.exports=function(n,e,t,r){var c=i(a(n)),l="<"+e;return""!==t&&(l+=" "+t+'="'+s(i(r),o,"&quot;")+'"'),l+">"+c+"</"+e+">"}},function(n,e,t){var r=t(4);n.exports=function(n){return r((function(){var e=""[n]('"');return e!==e.toLowerCase()||e.split('"').length>3}))}},function(n,e,t){var r=t(10),a=t(1),i=t(5),o=t(107),s=t(152),c=t(37),l=t(67).f,d=t(45),u=t(147),p=t(13),f=t(238),m=t(114),h=t(212),v=t(21),g=t(4),b=t(12),T=t(41).enforce,y=t(188),C=t(9),w=t(151),S=t(211),A=C("match"),R=a.RegExp,P=R.prototype,x=a.SyntaxError,I=i(P.exec),k=i("".charAt),N=i("".replace),_=i("".indexOf),E=i("".slice),D=/^\?<[^\s\d!#%&*+<=>@^][^\s!#%&*+<=>@^]*>/,O=/a/g,U=/a/g,j=new R(O)!==O,M=m.MISSED_STICKY,B=m.UNSUPPORTED_Y,L=r&&(!j||M||w||S||g((function(){return U[A]=!1,R(O)!=O||R(U)==U||"/a/i"!=R(O,"i")})));if(o("RegExp",L)){for(var z=function(n,e){var t,r,a,i,o,l,m=d(P,this),h=u(n),v=void 0===e,g=[],y=n;if(!m&&h&&v&&n.constructor===z)return n;if((h||d(P,n))&&(n=n.source,v&&(e=f(y))),n=void 0===n?"":p(n),e=void 0===e?"":p(e),y=n,w&&"dotAll"in O&&(r=!!e&&_(e,"s")>-1)&&(e=N(e,/s/g,"")),t=e,M&&"sticky"in O&&(a=!!e&&_(e,"y")>-1)&&B&&(e=N(e,/y/g,"")),S&&(n=(i=function(n){for(var e,t=n.length,r=0,a="",i=[],o={},s=!1,c=!1,l=0,d="";r<=t;r++){if("\\"===(e=k(n,r)))e+=k(n,++r);else if("]"===e)s=!1;else if(!s)switch(!0){case"["===e:s=!0;break;case"("===e:I(D,E(n,r+1))&&(r+=2,c=!0),a+=e,l++;continue;case">"===e&&c:if(""===d||b(o,d))throw new x("Invalid capture group name");o[d]=!0,i[i.length]=[d,l],c=!1,d="";continue}c?d+=e:a+=e}return[a,i]}(n))[0],g=i[1]),o=s(R(n,e),m?this:P,z),(r||a||g.length)&&(l=T(o),r&&(l.dotAll=!0,l.raw=z(function(n){for(var e,t=n.length,r=0,a="",i=!1;r<=t;r++)"\\"!==(e=k(n,r))?i||"."!==e?("["===e?i=!0:"]"===e&&(i=!1),a+=e):a+="[\\s\\S]":a+=e+k(n,++r);return a}(n),t)),a&&(l.sticky=!0),g.length&&(l.groups=g)),n!==y)try{c(o,"source",""===y?"(?:)":y)}catch(n){}return o},F=l(R),W=0;F.length>W;)h(z,R,F[W++]);P.constructor=z,z.prototype=P,v(a,"RegExp",z)}y("RegExp")},function(n,e,t){var r=t(1),a=t(10),i=t(151),o=t(35),s=t(243),c=t(41).get,l=RegExp.prototype,d=r.TypeError;a&&i&&s(l,"dotAll",{configurable:!0,get:function(){if(this!==l){if("RegExp"===o(this))return!!c(this).dotAll;throw d("Incompatible receiver, RegExp required")}}})},function(n,e,t){n.exports=t(433)},function(n,e,t){var r=t(1),a=t(11),i=t(8),o=t(15),s=r.TypeError;n.exports=function(n,e){var t,r;if("string"===e&&i(t=n.toString)&&!o(r=a(t,n)))return r;if(i(t=n.valueOf)&&!o(r=a(t,n)))return r;if("string"!==e&&i(t=n.toString)&&!o(r=a(t,n)))return r;throw s("Can't convert object to primitive value")}},function(n,e,t){var r=t(1),a=t(8),i=t(105),o=r.WeakMap;n.exports=a(o)&&/native code/.test(i(o))},function(n,e,t){var r=t(1),a=t(8),i=r.String,o=r.TypeError;n.exports=function(n){if("object"==typeof n||a(n))return n;throw o("Can't set "+i(n)+" as a prototype")}},function(n,e,t){t(272),t(279),t(280),t(281),t(282),t(283)},function(n,e,t){"use strict";var r,a,i,o=t(3),s=t(29),c=t(108),l=t(1),d=t(11),u=t(21),p=t(85),f=t(75),m=t(188),h=t(36),v=t(8),g=t(15),b=t(256),T=t(143),y=t(190).set,C=t(273),w=t(276),S=t(145),A=t(277),R=t(41),P=t(68),x=t(87),I=t(88),k=x.CONSTRUCTOR,N=x.REJECTION_EVENT,_=x.SUBCLASSING,E=R.getterFor("Promise"),D=R.set,O=P&&P.prototype,U=P,j=O,M=l.TypeError,B=l.document,L=l.process,z=I.f,F=z,W=!!(B&&B.createEvent&&l.dispatchEvent),q=function(n){var e;return!(!g(n)||!v(e=n.then))&&e},$=function(n,e){var t,r,a,i=e.value,o=1==e.state,s=o?n.ok:n.fail,c=n.resolve,l=n.reject,u=n.domain;try{s?(o||(2===e.rejection&&X(e),e.rejection=1),!0===s?t=i:(u&&u.enter(),t=s(i),u&&(u.exit(),a=!0)),t===n.promise?l(M("Promise-chain cycle")):(r=q(t))?d(r,t,c,l):c(t)):l(i)}catch(n){u&&!a&&u.exit(),l(n)}},G=function(n,e){n.notified||(n.notified=!0,C((function(){for(var t,r=n.reactions;t=r.get();)$(t,n);n.notified=!1,e&&!n.rejection&&H(n)})))},V=function(n,e,t){var r,a;W?((r=B.createEvent("Event")).promise=e,r.reason=t,r.initEvent(n,!1,!0),l.dispatchEvent(r)):r={promise:e,reason:t},!N&&(a=l["on"+n])?a(r):"unhandledrejection"===n&&w("Unhandled promise rejection",t)},H=function(n){d(y,l,(function(){var e,t=n.facade,r=n.value;if(Y(n)&&(e=S((function(){c?L.emit("unhandledRejection",r,t):V("unhandledrejection",t,r)})),n.rejection=c||Y(n)?2:1,e.error))throw e.value}))},Y=function(n){return 1!==n.rejection&&!n.parent},X=function(n){d(y,l,(function(){var e=n.facade;c?L.emit("rejectionHandled",e):V("rejectionhandled",e,n.value)}))},Z=function(n,e,t){return function(r){n(e,r,t)}},J=function(n,e,t){n.done||(n.done=!0,t&&(n=t),n.value=e,n.state=2,G(n,!0))},K=function(n,e,t){if(!n.done){n.done=!0,t&&(n=t);try{if(n.facade===e)throw M("Promise can't be resolved itself");var r=q(e);r?C((function(){var t={done:!1};try{d(r,e,Z(K,t,n),Z(J,t,n))}catch(e){J(t,e,n)}})):(n.value=e,n.state=1,G(n,!1))}catch(e){J({done:!1},e,n)}}};if(k&&(j=(U=function(n){b(this,j),h(n),d(r,this);var e=E(this);try{n(Z(K,e),Z(J,e))}catch(n){J(e,n)}}).prototype,(r=function(n){D(this,{type:"Promise",done:!1,notified:!1,parent:!1,reactions:new A,rejection:!1,state:0,value:void 0})}).prototype=u(j,"then",(function(n,e){var t=E(this),r=z(T(this,U));return t.parent=!0,r.ok=!v(n)||n,r.fail=v(e)&&e,r.domain=c?L.domain:void 0,0==t.state?t.reactions.add(r):C((function(){$(r,t)})),r.promise})),a=function(){var n=new r,e=E(n);this.promise=n,this.resolve=Z(K,e),this.reject=Z(J,e)},I.f=z=function(n){return n===U||void 0===n?new a(n):F(n)},!s&&v(P)&&O!==Object.prototype)){i=O.then,_||u(O,"then",(function(n,e){var t=this;return new U((function(n,e){d(i,t,n,e)})).then(n,e)}),{unsafe:!0});try{delete O.constructor}catch(n){}p&&p(O,j)}o({global:!0,wrap:!0,forced:k},{Promise:U}),f(U,"Promise",!1,!0),m("Promise")},function(n,e,t){var r,a,i,o,s,c,l,d,u=t(1),p=t(73),f=t(46).f,m=t(190).set,h=t(191),v=t(274),g=t(275),b=t(108),T=u.MutationObserver||u.WebKitMutationObserver,y=u.document,C=u.process,w=u.Promise,S=f(u,"queueMicrotask"),A=S&&S.value;A||(r=function(){var n,e;for(b&&(n=C.domain)&&n.exit();a;){e=a.fn,a=a.next;try{e()}catch(n){throw a?o():i=void 0,n}}i=void 0,n&&n.enter()},h||b||g||!T||!y?!v&&w&&w.resolve?((l=w.resolve(void 0)).constructor=w,d=p(l.then,l),o=function(){d(r)}):b?o=function(){C.nextTick(r)}:(m=p(m,u),o=function(){m(r)}):(s=!0,c=y.createTextNode(""),new T(r).observe(c,{characterData:!0}),o=function(){c.data=s=!s})),n.exports=A||function(n){var e={fn:n,next:void 0};i&&(i.next=e),a||(a=e,o()),i=e}},function(n,e,t){var r=t(44),a=t(1);n.exports=/ipad|iphone|ipod/i.test(r)&&void 0!==a.Pebble},function(n,e,t){var r=t(44);n.exports=/web0s(?!.*chrome)/i.test(r)},function(n,e,t){var r=t(1);n.exports=function(n,e){var t=r.console;t&&t.error&&(1==arguments.length?t.error(n):t.error(n,e))}},function(n,e){var t=function(){this.head=null,this.tail=null};t.prototype={add:function(n){var e={item:n,next:null};this.head?this.tail.next=e:this.head=e,this.tail=e},get:function(){var n=this.head;if(n)return this.head=n.next,this.tail===n&&(this.tail=null),n.item}},n.exports=t},function(n,e){n.exports="object"==typeof window&&"object"!=typeof Deno},function(n,e,t){"use strict";var r=t(3),a=t(11),i=t(36),o=t(88),s=t(145),c=t(192);r({target:"Promise",stat:!0,forced:t(195)},{all:function(n){var e=this,t=o.f(e),r=t.resolve,l=t.reject,d=s((function(){var t=i(e.resolve),o=[],s=0,d=1;c(n,(function(n){var i=s++,c=!1;d++,a(t,e,n).then((function(n){c||(c=!0,o[i]=n,--d||r(o))}),l)})),--d||r(o)}));return d.error&&l(d.value),t.promise}})},function(n,e,t){"use strict";var r=t(3),a=t(29),i=t(87).CONSTRUCTOR,o=t(68),s=t(22),c=t(8),l=t(21),d=o&&o.prototype;if(r({target:"Promise",proto:!0,forced:i,real:!0},{catch:function(n){return this.then(void 0,n)}}),!a&&c(o)){var u=s("Promise").prototype.catch;d.catch!==u&&l(d,"catch",u,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(3),a=t(11),i=t(36),o=t(88),s=t(145),c=t(192);r({target:"Promise",stat:!0,forced:t(195)},{race:function(n){var e=this,t=o.f(e),r=t.reject,l=s((function(){var o=i(e.resolve);c(n,(function(n){a(o,e,n).then(t.resolve,r)}))}));return l.error&&r(l.value),t.promise}})},function(n,e,t){"use strict";var r=t(3),a=t(11),i=t(88);r({target:"Promise",stat:!0,forced:t(87).CONSTRUCTOR},{reject:function(n){var e=i.f(this);return a(e.reject,void 0,n),e.promise}})},function(n,e,t){"use strict";var r=t(3),a=t(22),i=t(29),o=t(68),s=t(87).CONSTRUCTOR,c=t(197),l=a("Promise"),d=i&&!s;r({target:"Promise",stat:!0,forced:i||s},{resolve:function(n){return c(d&&this===l?o:this,n)}})},function(n,e,t){var r=t(3),a=t(285);r({target:"Object",stat:!0,arity:2,forced:Object.assign!==a},{assign:a})},function(n,e,t){"use strict";var r=t(10),a=t(5),i=t(11),o=t(4),s=t(103),c=t(106),l=t(139),d=t(30),u=t(78),p=Object.assign,f=Object.defineProperty,m=a([].concat);n.exports=!p||o((function(){if(r&&1!==p({b:1},p(f({},"a",{enumerable:!0,get:function(){f(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var n={},e={},t=Symbol();return n[t]=7,"abcdefghijklmnopqrst".split("").forEach((function(n){e[n]=n})),7!=p({},n)[t]||"abcdefghijklmnopqrst"!=s(p({},e)).join("")}))?function(n,e){for(var t=d(n),a=arguments.length,o=1,p=c.f,f=l.f;a>o;)for(var h,v=u(arguments[o++]),g=p?m(s(v),p(v)):s(v),b=g.length,T=0;b>T;)h=g[T++],r&&!i(f,v,h)||(t[h]=v[h]);return t}:p},function(n,e,t){"use strict";var r=t(3),a=t(29),i=t(68),o=t(4),s=t(22),c=t(8),l=t(143),d=t(197),u=t(21),p=i&&i.prototype;if(r({target:"Promise",proto:!0,real:!0,forced:!!i&&o((function(){p.finally.call({then:function(){}},(function(){}))}))},{finally:function(n){var e=l(this,s("Promise")),t=c(n);return this.then(t?function(t){return d(e,n()).then((function(){return t}))}:n,t?function(t){return d(e,n()).then((function(){throw t}))}:n)}}),!a&&c(i)){var f=s("Promise").prototype.finally;p.finally!==f&&u(p,"finally",f,{unsafe:!0})}},function(n,e,t){"use strict";var r=t(144),a=t(99);n.exports=r?{}.toString:function(){return"[object "+a(this)+"]"}},function(n,e,t){var r=t(1),a=t(76),i=t(109),o=t(15),s=t(9)("species"),c=r.Array;n.exports=function(n){var e;return a(n)&&(e=n.constructor,(i(e)&&(e===c||a(e.prototype))||o(e)&&null===(e=e[s]))&&(e=void 0)),void 0===e?c:e}},function(n,e,t){"use strict";var r=t(3),a=t(290).left,i=t(58),o=t(66),s=t(108);r({target:"Array",proto:!0,forced:!i("reduce")||!s&&o>79&&o<83},{reduce:function(n){var e=arguments.length;return a(this,n,e,e>1?arguments[1]:void 0)}})},function(n,e,t){var r=t(1),a=t(36),i=t(30),o=t(78),s=t(38),c=r.TypeError,l=function(n){return function(e,t,r,l){a(t);var d=i(e),u=o(d),p=s(d),f=n?p-1:0,m=n?-1:1;if(r<2)for(;;){if(f in u){l=u[f],f+=m;break}if(f+=m,n?f<0:p<=f)throw c("Reduce of empty array with no initial value")}for(;n?f>=0:p>f;f+=m)f in u&&(l=t(l,u[f],f,d));return l}};n.exports={left:l(!1),right:l(!0)}},function(n,e,t){var r=t(3),a=t(205),i=t(4),o=t(15),s=t(292).onFreeze,c=Object.freeze;r({target:"Object",stat:!0,forced:i((function(){c(1)})),sham:!a},{freeze:function(n){return c&&o(n)?c(s(n)):n}})},function(n,e,t){var r=t(3),a=t(5),i=t(82),o=t(15),s=t(12),c=t(16).f,l=t(67),d=t(206),u=t(293),p=t(100),f=t(205),m=!1,h=p("meta"),v=0,g=function(n){c(n,h,{value:{objectID:"O"+v++,weakData:{}}})},b=n.exports={enable:function(){b.enable=function(){},m=!0;var n=l.f,e=a([].splice),t={};t[h]=1,n(t).length&&(l.f=function(t){for(var r=n(t),a=0,i=r.length;a<i;a++)if(r[a]===h){e(r,a,1);break}return r},r({target:"Object",stat:!0,forced:!0},{getOwnPropertyNames:d.f}))},fastKey:function(n,e){if(!o(n))return"symbol"==typeof n?n:("string"==typeof n?"S":"P")+n;if(!s(n,h)){if(!u(n))return"F";if(!e)return"E";g(n)}return n[h].objectID},getWeakData:function(n,e){if(!s(n,h)){if(!u(n))return!0;if(!e)return!1;g(n)}return n[h].weakData},onFreeze:function(n){return f&&m&&u(n)&&!s(n,h)&&g(n),n}};i[h]=!0},function(n,e,t){var r=t(4),a=t(15),i=t(35),o=t(294),s=Object.isExtensible,c=r((function(){s(1)}));n.exports=c||o?function(n){return!!a(n)&&((!o||"ArrayBuffer"!=i(n))&&(!s||s(n)))}:s},function(n,e,t){var r=t(4);n.exports=r((function(){if("function"==typeof ArrayBuffer){var n=new ArrayBuffer(8);Object.isExtensible(n)&&Object.defineProperty(n,"a",{value:8})}}))},function(n,e,t){"use strict";var r=t(3),a=t(1),i=t(11),o=t(5),s=t(29),c=t(10),l=t(65),d=t(4),u=t(12),p=t(45),f=t(14),m=t(33),h=t(102),v=t(13),g=t(61),b=t(49),T=t(103),y=t(67),C=t(206),w=t(106),S=t(46),A=t(16),R=t(135),P=t(139),x=t(21),I=t(64),k=t(104),N=t(82),_=t(100),E=t(9),D=t(207),O=t(208),U=t(297),j=t(75),M=t(41),B=t(62).forEach,L=k("hidden"),z=M.set,F=M.getterFor("Symbol"),W=Object.prototype,q=a.Symbol,$=q&&q.prototype,G=a.TypeError,V=a.QObject,H=S.f,Y=A.f,X=C.f,Z=P.f,J=o([].push),K=I("symbols"),Q=I("op-symbols"),nn=I("wks"),en=!V||!V.prototype||!V.prototype.findChild,tn=c&&d((function(){return 7!=b(Y({},"a",{get:function(){return Y(this,"a",{value:7}).a}})).a}))?function(n,e,t){var r=H(W,e);r&&delete W[e],Y(n,e,t),r&&n!==W&&Y(W,e,r)}:Y,rn=function(n,e){var t=K[n]=b($);return z(t,{type:"Symbol",tag:n,description:e}),c||(t.description=e),t},an=function(n,e,t){n===W&&an(Q,e,t),f(n);var r=h(e);return f(t),u(K,r)?(t.enumerable?(u(n,L)&&n[L][r]&&(n[L][r]=!1),t=b(t,{enumerable:g(0,!1)})):(u(n,L)||Y(n,L,g(1,{})),n[L][r]=!0),tn(n,r,t)):Y(n,r,t)},on=function(n,e){f(n);var t=m(e),r=T(t).concat(dn(t));return B(r,(function(e){c&&!i(sn,t,e)||an(n,e,t[e])})),n},sn=function(n){var e=h(n),t=i(Z,this,e);return!(this===W&&u(K,e)&&!u(Q,e))&&(!(t||!u(this,e)||!u(K,e)||u(this,L)&&this[L][e])||t)},cn=function(n,e){var t=m(n),r=h(e);if(t!==W||!u(K,r)||u(Q,r)){var a=H(t,r);return!a||!u(K,r)||u(t,L)&&t[L][r]||(a.enumerable=!0),a}},ln=function(n){var e=X(m(n)),t=[];return B(e,(function(n){u(K,n)||u(N,n)||J(t,n)})),t},dn=function(n){var e=n===W,t=X(e?Q:m(n)),r=[];return B(t,(function(n){!u(K,n)||e&&!u(W,n)||J(r,K[n])})),r};l||(x($=(q=function(){if(p($,this))throw G("Symbol is not a constructor");var n=arguments.length&&void 0!==arguments[0]?v(arguments[0]):void 0,e=_(n),t=function(n){this===W&&i(t,Q,n),u(this,L)&&u(this[L],e)&&(this[L][e]=!1),tn(this,e,g(1,n))};return c&&en&&tn(W,e,{configurable:!0,set:t}),rn(e,n)}).prototype,"toString",(function(){return F(this).tag})),x(q,"withoutSetter",(function(n){return rn(_(n),n)})),P.f=sn,A.f=an,R.f=on,S.f=cn,y.f=C.f=ln,w.f=dn,D.f=function(n){return rn(E(n),n)},c&&(Y($,"description",{configurable:!0,get:function(){return F(this).description}}),s||x(W,"propertyIsEnumerable",sn,{unsafe:!0}))),r({global:!0,wrap:!0,forced:!l,sham:!l},{Symbol:q}),B(T(nn),(function(n){O(n)})),r({target:"Symbol",stat:!0,forced:!l},{useSetter:function(){en=!0},useSimple:function(){en=!1}}),r({target:"Object",stat:!0,forced:!l,sham:!c},{create:function(n,e){return void 0===e?b(n):on(b(n),e)},defineProperty:an,defineProperties:on,getOwnPropertyDescriptor:cn}),r({target:"Object",stat:!0,forced:!l},{getOwnPropertyNames:ln}),U(),j(q,"Symbol"),N[L]=!0},function(n,e,t){var r=t(1);n.exports=r},function(n,e,t){var r=t(11),a=t(22),i=t(9),o=t(21);n.exports=function(){var n=a("Symbol"),e=n&&n.prototype,t=e&&e.valueOf,s=i("toPrimitive");e&&!e[s]&&o(e,s,(function(n){return r(t,this)}),{arity:1})}},function(n,e,t){var r=t(3),a=t(22),i=t(12),o=t(13),s=t(64),c=t(209),l=s("string-to-symbol-registry"),d=s("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!c},{for:function(n){var e=o(n);if(i(l,e))return l[e];var t=a("Symbol")(e);return l[e]=t,d[t]=e,t}})},function(n,e,t){var r=t(3),a=t(12),i=t(80),o=t(81),s=t(64),c=t(209),l=s("symbol-to-string-registry");r({target:"Symbol",stat:!0,forced:!c},{keyFor:function(n){if(!i(n))throw TypeError(o(n)+" is not a symbol");if(a(l,n))return l[n]}})},function(n,e,t){var r=t(3),a=t(65),i=t(4),o=t(106),s=t(30);r({target:"Object",stat:!0,forced:!a||i((function(){o.f(1)}))},{getOwnPropertySymbols:function(n){var e=o.f;return e?e(s(n)):[]}})},function(n,e,t){"use strict";var r=t(1),a=t(73),i=t(11),o=t(30),s=t(302),c=t(193),l=t(109),d=t(38),u=t(89),p=t(173),f=t(128),m=r.Array;n.exports=function(n){var e=o(n),t=l(this),r=arguments.length,h=r>1?arguments[1]:void 0,v=void 0!==h;v&&(h=a(h,r>2?arguments[2]:void 0));var g,b,T,y,C,w,S=f(e),A=0;if(!S||this==m&&c(S))for(g=d(e),b=t?new this(g):m(g);g>A;A++)w=v?h(e[A],A):e[A],u(b,A,w);else for(C=(y=p(e,S)).next,b=t?new this:[];!(T=i(C,y)).done;A++)w=v?s(y,h,[T.value,A],!0):T.value,u(b,A,w);return b.length=A,b}},function(n,e,t){var r=t(14),a=t(194);n.exports=function(n,e,t,i){try{return i?e(r(t)[0],t[1]):e(t)}catch(e){a(n,"throw",e)}}},function(n,e,t){"use strict";var r=t(22),a=t(12),i=t(37),o=t(45),s=t(85),c=t(140),l=t(212),d=t(152),u=t(213),p=t(304),f=t(305),m=t(306),h=t(10),v=t(29);n.exports=function(n,e,t,g){var b=g?2:1,T=n.split("."),y=T[T.length-1],C=r.apply(null,T);if(C){var w=C.prototype;if(!v&&a(w,"cause")&&delete w.cause,!t)return C;var S=r("Error"),A=e((function(n,e){var t=u(g?e:n,void 0),r=g?new C(n):new C;return void 0!==t&&i(r,"message",t),m&&i(r,"stack",f(r.stack,2)),this&&o(w,this)&&d(r,this,A),arguments.length>b&&p(r,arguments[b]),r}));if(A.prototype=w,"Error"!==y?s?s(A,S):c(A,S,{name:!0}):h&&"stackTraceLimit"in C&&(l(A,C,"stackTraceLimit"),l(A,C,"prepareStackTrace")),c(A,C),!v)try{w.name!==y&&i(w,"name",y),w.constructor=A}catch(n){}return A}}},function(n,e,t){var r=t(15),a=t(37);n.exports=function(n,e){r(e)&&"cause"in e&&a(n,"cause",e.cause)}},function(n,e,t){var r=t(5),a=Error,i=r("".replace),o=String(a("zxcasd").stack),s=/\n\s*at [^:]*:[^\n]*/,c=s.test(o);n.exports=function(n,e){if(c&&"string"==typeof n&&!a.prepareStackTrace)for(;e--;)n=i(n,s,"");return n}},function(n,e,t){var r=t(4),a=t(61);n.exports=!r((function(){var n=Error("a");return!("stack"in n)||(Object.defineProperty(n,"stack",a(1,7)),7!==n.stack)}))},function(n,e,t){"use strict";var r=t(10),a=t(4),i=t(14),o=t(49),s=t(213),c=Error.prototype.toString,l=a((function(){if(r){var n=o(Object.defineProperty({},"name",{get:function(){return this===n}}));if("true"!==c.call(n))return!0}return"2: 1"!==c.call({message:1,name:2})||"Error"!==c.call({})}));n.exports=l?function(){var n=i(this),e=s(n.name,"Error"),t=s(n.message);return e?t?e+": "+t:e:t}:c},function(n,e,t){var r=t(5),a=t(30),i=Math.floor,o=r("".charAt),s=r("".replace),c=r("".slice),l=/\$([$&'`]|\d{1,2}|<[^>]*>)/g,d=/\$([$&'`]|\d{1,2})/g;n.exports=function(n,e,t,r,u,p){var f=t+n.length,m=r.length,h=d;return void 0!==u&&(u=a(u),h=l),s(p,h,(function(a,s){var l;switch(o(s,0)){case"$":return"$";case"&":return n;case"`":return c(e,0,t);case"'":return c(e,f);case"<":l=u[c(s,1,-1)];break;default:var d=+s;if(0===d)return a;if(d>m){var p=i(d/10);return 0===p?a:p<=m?void 0===r[p-1]?o(s,1):r[p-1]+o(s,1):a}l=r[d-1]}return void 0===l?"":l}))}},function(n,e,t){var r=t(215),a=t(310);n.exports=function n(e,t,i,o,s){var c=-1,l=e.length;for(i||(i=a),s||(s=[]);++c<l;){var d=e[c];t>0&&i(d)?t>1?n(d,t-1,i,o,s):r(s,d):o||(s[s.length]=d)}return s}},function(n,e,t){var r=t(91),a=t(154),i=t(43),o=r?r.isConcatSpreadable:void 0;n.exports=function(n){return i(n)||a(n)||!!(o&&n&&n[o])}},function(n,e,t){var r=t(77),a=t(63);n.exports=function(n){return a(n)&&"[object Arguments]"==r(n)}},function(n,e,t){var r=t(91),a=Object.prototype,i=a.hasOwnProperty,o=a.toString,s=r?r.toStringTag:void 0;n.exports=function(n){var e=i.call(n,s),t=n[s];try{n[s]=void 0;var r=!0}catch(n){}var a=o.call(n);return r&&(e?n[s]=t:delete n[s]),a}},function(n,e){var t=Object.prototype.toString;n.exports=function(n){return t.call(n)}},function(n,e,t){var r=t(315),a=t(371),i=t(162),o=t(43),s=t(382);n.exports=function(n){return"function"==typeof n?n:null==n?i:"object"==typeof n?o(n)?a(n[0],n[1]):r(n):s(n)}},function(n,e,t){var r=t(316),a=t(370),i=t(232);n.exports=function(n){var e=a(n);return 1==e.length&&e[0][2]?i(e[0][0],e[0][1]):function(t){return t===n||r(t,n,e)}}},function(n,e,t){var r=t(217),a=t(221);n.exports=function(n,e,t,i){var o=t.length,s=o,c=!i;if(null==n)return!s;for(n=Object(n);o--;){var l=t[o];if(c&&l[2]?l[1]!==n[l[0]]:!(l[0]in n))return!1}for(;++o<s;){var d=(l=t[o])[0],u=n[d],p=l[1];if(c&&l[2]){if(void 0===u&&!(d in n))return!1}else{var f=new r;if(i)var m=i(u,p,d,n,e,f);if(!(void 0===m?a(p,u,3,i,f):m))return!1}}return!0}},function(n,e){n.exports=function(){this.__data__=[],this.size=0}},function(n,e,t){var r=t(116),a=Array.prototype.splice;n.exports=function(n){var e=this.__data__,t=r(e,n);return!(t<0)&&(t==e.length-1?e.pop():a.call(e,t,1),--this.size,!0)}},function(n,e,t){var r=t(116);n.exports=function(n){var e=this.__data__,t=r(e,n);return t<0?void 0:e[t][1]}},function(n,e,t){var r=t(116);n.exports=function(n){return r(this.__data__,n)>-1}},function(n,e,t){var r=t(116);n.exports=function(n,e){var t=this.__data__,a=r(t,n);return a<0?(++this.size,t.push([n,e])):t[a][1]=e,this}},function(n,e,t){var r=t(115);n.exports=function(){this.__data__=new r,this.size=0}},function(n,e){n.exports=function(n){var e=this.__data__,t=e.delete(n);return this.size=e.size,t}},function(n,e){n.exports=function(n){return this.__data__.get(n)}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e,t){var r=t(115),a=t(155),i=t(157);n.exports=function(n,e){var t=this.__data__;if(t instanceof r){var o=t.__data__;if(!a||o.length<199)return o.push([n,e]),this.size=++t.size,this;t=this.__data__=new i(o)}return t.set(n,e),this.size=t.size,this}},function(n,e,t){var r=t(219),a=t(328),i=t(156),o=t(220),s=/^\[object .+?Constructor\]$/,c=Function.prototype,l=Object.prototype,d=c.toString,u=l.hasOwnProperty,p=RegExp("^"+d.call(u).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");n.exports=function(n){return!(!i(n)||a(n))&&(r(n)?p:s).test(o(n))}},function(n,e,t){var r,a=t(329),i=(r=/[^.]+$/.exec(a&&a.keys&&a.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";n.exports=function(n){return!!i&&i in n}},function(n,e,t){var r=t(47)["__core-js_shared__"];n.exports=r},function(n,e){n.exports=function(n,e){return null==n?void 0:n[e]}},function(n,e,t){var r=t(332),a=t(115),i=t(155);n.exports=function(){this.size=0,this.__data__={hash:new r,map:new(i||a),string:new r}}},function(n,e,t){var r=t(333),a=t(334),i=t(335),o=t(336),s=t(337);function c(n){var e=-1,t=null==n?0:n.length;for(this.clear();++e<t;){var r=n[e];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=a,c.prototype.get=i,c.prototype.has=o,c.prototype.set=s,n.exports=c},function(n,e,t){var r=t(117);n.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(n,e){n.exports=function(n){var e=this.has(n)&&delete this.__data__[n];return this.size-=e?1:0,e}},function(n,e,t){var r=t(117),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;if(r){var t=e[n];return"__lodash_hash_undefined__"===t?void 0:t}return a.call(e,n)?e[n]:void 0}},function(n,e,t){var r=t(117),a=Object.prototype.hasOwnProperty;n.exports=function(n){var e=this.__data__;return r?void 0!==e[n]:a.call(e,n)}},function(n,e,t){var r=t(117);n.exports=function(n,e){var t=this.__data__;return this.size+=this.has(n)?0:1,t[n]=r&&void 0===e?"__lodash_hash_undefined__":e,this}},function(n,e,t){var r=t(118);n.exports=function(n){var e=r(this,n).delete(n);return this.size-=e?1:0,e}},function(n,e){n.exports=function(n){var e=typeof n;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==n:null===n}},function(n,e,t){var r=t(118);n.exports=function(n){return r(this,n).get(n)}},function(n,e,t){var r=t(118);n.exports=function(n){return r(this,n).has(n)}},function(n,e,t){var r=t(118);n.exports=function(n,e){var t=r(this,n),a=t.size;return t.set(n,e),this.size+=t.size==a?0:1,this}},function(n,e,t){var r=t(217),a=t(222),i=t(347),o=t(350),s=t(366),c=t(43),l=t(226),d=t(228),u="[object Object]",p=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,f,m,h){var v=c(n),g=c(e),b=v?"[object Array]":s(n),T=g?"[object Array]":s(e),y=(b="[object Arguments]"==b?u:b)==u,C=(T="[object Arguments]"==T?u:T)==u,w=b==T;if(w&&l(n)){if(!l(e))return!1;v=!0,y=!1}if(w&&!y)return h||(h=new r),v||d(n)?a(n,e,t,f,m,h):i(n,e,b,t,f,m,h);if(!(1&t)){var S=y&&p.call(n,"__wrapped__"),A=C&&p.call(e,"__wrapped__");if(S||A){var R=S?n.value():n,P=A?e.value():e;return h||(h=new r),m(R,P,t,f,h)}}return!!w&&(h||(h=new r),o(n,e,t,f,m,h))}},function(n,e){n.exports=function(n){return this.__data__.set(n,"__lodash_hash_undefined__"),this}},function(n,e){n.exports=function(n){return this.__data__.has(n)}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length;++t<r;)if(e(n[t],t,n))return!0;return!1}},function(n,e,t){var r=t(91),a=t(348),i=t(218),o=t(222),s=t(349),c=t(158),l=r?r.prototype:void 0,d=l?l.valueOf:void 0;n.exports=function(n,e,t,r,l,u,p){switch(t){case"[object DataView]":if(n.byteLength!=e.byteLength||n.byteOffset!=e.byteOffset)return!1;n=n.buffer,e=e.buffer;case"[object ArrayBuffer]":return!(n.byteLength!=e.byteLength||!u(new a(n),new a(e)));case"[object Boolean]":case"[object Date]":case"[object Number]":return i(+n,+e);case"[object Error]":return n.name==e.name&&n.message==e.message;case"[object RegExp]":case"[object String]":return n==e+"";case"[object Map]":var f=s;case"[object Set]":var m=1&r;if(f||(f=c),n.size!=e.size&&!m)return!1;var h=p.get(n);if(h)return h==e;r|=2,p.set(n,e);var v=o(f(n),f(e),r,l,u,p);return p.delete(n),v;case"[object Symbol]":if(d)return d.call(n)==d.call(e)}return!1}},function(n,e,t){var r=t(47).Uint8Array;n.exports=r},function(n,e){n.exports=function(n){var e=-1,t=Array(n.size);return n.forEach((function(n,r){t[++e]=[r,n]})),t}},function(n,e,t){var r=t(351),a=Object.prototype.hasOwnProperty;n.exports=function(n,e,t,i,o,s){var c=1&t,l=r(n),d=l.length;if(d!=r(e).length&&!c)return!1;for(var u=d;u--;){var p=l[u];if(!(c?p in e:a.call(e,p)))return!1}var f=s.get(n),m=s.get(e);if(f&&m)return f==e&&m==n;var h=!0;s.set(n,e),s.set(e,n);for(var v=c;++u<d;){var g=n[p=l[u]],b=e[p];if(i)var T=c?i(b,g,p,e,n,s):i(g,b,p,n,e,s);if(!(void 0===T?g===b||o(g,b,t,i,s):T)){h=!1;break}v||(v="constructor"==p)}if(h&&!v){var y=n.constructor,C=e.constructor;y==C||!("constructor"in n)||!("constructor"in e)||"function"==typeof y&&y instanceof y&&"function"==typeof C&&C instanceof C||(h=!1)}return s.delete(n),s.delete(e),h}},function(n,e,t){var r=t(352),a=t(353),i=t(225);n.exports=function(n){return r(n,i,a)}},function(n,e,t){var r=t(215),a=t(43);n.exports=function(n,e,t){var i=e(n);return a(n)?i:r(i,t(n))}},function(n,e,t){var r=t(354),a=t(355),i=Object.prototype.propertyIsEnumerable,o=Object.getOwnPropertySymbols,s=o?function(n){return null==n?[]:(n=Object(n),r(o(n),(function(e){return i.call(n,e)})))}:a;n.exports=s},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=0,i=[];++t<r;){var o=n[t];e(o,t,n)&&(i[a++]=o)}return i}},function(n,e){n.exports=function(){return[]}},function(n,e,t){var r=t(357),a=t(154),i=t(43),o=t(226),s=t(227),c=t(228),l=Object.prototype.hasOwnProperty;n.exports=function(n,e){var t=i(n),d=!t&&a(n),u=!t&&!d&&o(n),p=!t&&!d&&!u&&c(n),f=t||d||u||p,m=f?r(n.length,String):[],h=m.length;for(var v in n)!e&&!l.call(n,v)||f&&("length"==v||u&&("offset"==v||"parent"==v)||p&&("buffer"==v||"byteLength"==v||"byteOffset"==v)||s(v,h))||m.push(v);return m}},function(n,e){n.exports=function(n,e){for(var t=-1,r=Array(n);++t<n;)r[t]=e(t);return r}},function(n,e){n.exports=function(){return!1}},function(n,e,t){var r=t(77),a=t(159),i=t(63),o={};o["[object Float32Array]"]=o["[object Float64Array]"]=o["[object Int8Array]"]=o["[object Int16Array]"]=o["[object Int32Array]"]=o["[object Uint8Array]"]=o["[object Uint8ClampedArray]"]=o["[object Uint16Array]"]=o["[object Uint32Array]"]=!0,o["[object Arguments]"]=o["[object Array]"]=o["[object ArrayBuffer]"]=o["[object Boolean]"]=o["[object DataView]"]=o["[object Date]"]=o["[object Error]"]=o["[object Function]"]=o["[object Map]"]=o["[object Number]"]=o["[object Object]"]=o["[object RegExp]"]=o["[object Set]"]=o["[object String]"]=o["[object WeakMap]"]=!1,n.exports=function(n){return i(n)&&a(n.length)&&!!o[r(n)]}},function(n,e){n.exports=function(n){return function(e){return n(e)}}},function(n,e,t){(function(n){var r=t(216),a=e&&!e.nodeType&&e,i=a&&"object"==typeof n&&n&&!n.nodeType&&n,o=i&&i.exports===a&&r.process,s=function(){try{var n=i&&i.require&&i.require("util").types;return n||o&&o.binding&&o.binding("util")}catch(n){}}();n.exports=s}).call(this,t(170)(n))},function(n,e,t){var r=t(363),a=t(364),i=Object.prototype.hasOwnProperty;n.exports=function(n){if(!r(n))return a(n);var e=[];for(var t in Object(n))i.call(n,t)&&"constructor"!=t&&e.push(t);return e}},function(n,e){var t=Object.prototype;n.exports=function(n){var e=n&&n.constructor;return n===("function"==typeof e&&e.prototype||t)}},function(n,e,t){var r=t(365)(Object.keys,Object);n.exports=r},function(n,e){n.exports=function(n,e){return function(t){return n(e(t))}}},function(n,e,t){var r=t(367),a=t(155),i=t(368),o=t(230),s=t(369),c=t(77),l=t(220),d=l(r),u=l(a),p=l(i),f=l(o),m=l(s),h=c;(r&&"[object DataView]"!=h(new r(new ArrayBuffer(1)))||a&&"[object Map]"!=h(new a)||i&&"[object Promise]"!=h(i.resolve())||o&&"[object Set]"!=h(new o)||s&&"[object WeakMap]"!=h(new s))&&(h=function(n){var e=c(n),t="[object Object]"==e?n.constructor:void 0,r=t?l(t):"";if(r)switch(r){case d:return"[object DataView]";case u:return"[object Map]";case p:return"[object Promise]";case f:return"[object Set]";case m:return"[object WeakMap]"}return e}),n.exports=h},function(n,e,t){var r=t(54)(t(47),"DataView");n.exports=r},function(n,e,t){var r=t(54)(t(47),"Promise");n.exports=r},function(n,e,t){var r=t(54)(t(47),"WeakMap");n.exports=r},function(n,e,t){var r=t(231),a=t(225);n.exports=function(n){for(var e=a(n),t=e.length;t--;){var i=e[t],o=n[i];e[t]=[i,o,r(o)]}return e}},function(n,e,t){var r=t(221),a=t(372),i=t(379),o=t(160),s=t(231),c=t(232),l=t(119);n.exports=function(n,e){return o(n)&&s(e)?c(l(n),e):function(t){var o=a(t,n);return void 0===o&&o===e?i(t,n):r(e,o,3)}}},function(n,e,t){var r=t(233);n.exports=function(n,e,t){var a=null==n?void 0:r(n,e);return void 0===a?t:a}},function(n,e,t){var r=t(374),a=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,i=/\\(\\)?/g,o=r((function(n){var e=[];return 46===n.charCodeAt(0)&&e.push(""),n.replace(a,(function(n,t,r,a){e.push(r?a.replace(i,"$1"):t||n)})),e}));n.exports=o},function(n,e,t){var r=t(375);n.exports=function(n){var e=r(n,(function(n){return 500===t.size&&t.clear(),n})),t=e.cache;return e}},function(n,e,t){var r=t(157);function a(n,e){if("function"!=typeof n||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var t=function(){var r=arguments,a=e?e.apply(this,r):r[0],i=t.cache;if(i.has(a))return i.get(a);var o=n.apply(this,r);return t.cache=i.set(a,o)||i,o};return t.cache=new(a.Cache||r),t}a.Cache=r,n.exports=a},function(n,e,t){var r=t(377);n.exports=function(n){return null==n?"":r(n)}},function(n,e,t){var r=t(91),a=t(378),i=t(43),o=t(161),s=r?r.prototype:void 0,c=s?s.toString:void 0;n.exports=function n(e){if("string"==typeof e)return e;if(i(e))return a(e,n)+"";if(o(e))return c?c.call(e):"";var t=e+"";return"0"==t&&1/e==-1/0?"-0":t}},function(n,e){n.exports=function(n,e){for(var t=-1,r=null==n?0:n.length,a=Array(r);++t<r;)a[t]=e(n[t],t,n);return a}},function(n,e,t){var r=t(380),a=t(381);n.exports=function(n,e){return null!=n&&a(n,e,r)}},function(n,e){n.exports=function(n,e){return null!=n&&e in Object(n)}},function(n,e,t){var r=t(234),a=t(154),i=t(43),o=t(227),s=t(159),c=t(119);n.exports=function(n,e,t){for(var l=-1,d=(e=r(e,n)).length,u=!1;++l<d;){var p=c(e[l]);if(!(u=null!=n&&t(n,p)))break;n=n[p]}return u||++l!=d?u:!!(d=null==n?0:n.length)&&s(d)&&o(p,d)&&(i(n)||a(n))}},function(n,e,t){var r=t(383),a=t(384),i=t(160),o=t(119);n.exports=function(n){return i(n)?r(o(n)):a(n)}},function(n,e){n.exports=function(n){return function(e){return null==e?void 0:e[n]}}},function(n,e,t){var r=t(233);n.exports=function(n){return function(e){return r(e,n)}}},function(n,e,t){var r=t(162),a=t(386),i=t(388);n.exports=function(n,e){return i(a(n,e,r),n+"")}},function(n,e,t){var r=t(387),a=Math.max;n.exports=function(n,e,t){return e=a(void 0===e?n.length-1:e,0),function(){for(var i=arguments,o=-1,s=a(i.length-e,0),c=Array(s);++o<s;)c[o]=i[e+o];o=-1;for(var l=Array(e+1);++o<e;)l[o]=i[o];return l[e]=t(c),r(n,this,l)}}},function(n,e){n.exports=function(n,e,t){switch(t.length){case 0:return n.call(e);case 1:return n.call(e,t[0]);case 2:return n.call(e,t[0],t[1]);case 3:return n.call(e,t[0],t[1],t[2])}return n.apply(e,t)}},function(n,e,t){var r=t(389),a=t(392)(r);n.exports=a},function(n,e,t){var r=t(390),a=t(391),i=t(162),o=a?function(n,e){return a(n,"toString",{configurable:!0,enumerable:!1,value:r(e),writable:!0})}:i;n.exports=o},function(n,e){n.exports=function(n){return function(){return n}}},function(n,e,t){var r=t(54),a=function(){try{var n=r(Object,"defineProperty");return n({},"",{}),n}catch(n){}}();n.exports=a},function(n,e){var t=Date.now;n.exports=function(n){var e=0,r=0;return function(){var a=t(),i=16-(a-r);if(r=a,i>0){if(++e>=800)return arguments[0]}else e=0;return n.apply(void 0,arguments)}}},function(n,e,t){var r=t(223),a=t(394),i=t(399),o=t(224),s=t(400),c=t(158);n.exports=function(n,e,t){var l=-1,d=a,u=n.length,p=!0,f=[],m=f;if(t)p=!1,d=i;else if(u>=200){var h=e?null:s(n);if(h)return c(h);p=!1,d=o,m=new r}else m=e?[]:f;n:for(;++l<u;){var v=n[l],g=e?e(v):v;if(v=t||0!==v?v:0,p&&g==g){for(var b=m.length;b--;)if(m[b]===g)continue n;e&&m.push(g),f.push(v)}else d(m,g,t)||(m!==f&&m.push(g),f.push(v))}return f}},function(n,e,t){var r=t(395);n.exports=function(n,e){return!!(null==n?0:n.length)&&r(n,e,0)>-1}},function(n,e,t){var r=t(396),a=t(397),i=t(398);n.exports=function(n,e,t){return e==e?i(n,e,t):r(n,a,t)}},function(n,e){n.exports=function(n,e,t,r){for(var a=n.length,i=t+(r?1:-1);r?i--:++i<a;)if(e(n[i],i,n))return i;return-1}},function(n,e){n.exports=function(n){return n!=n}},function(n,e){n.exports=function(n,e,t){for(var r=t-1,a=n.length;++r<a;)if(n[r]===e)return r;return-1}},function(n,e){n.exports=function(n,e,t){for(var r=-1,a=null==n?0:n.length;++r<a;)if(t(e,n[r]))return!0;return!1}},function(n,e,t){var r=t(230),a=t(401),i=t(158),o=r&&1/i(new r([,-0]))[1]==1/0?function(n){return new r(n)}:a;n.exports=o},function(n,e){n.exports=function(){}},function(n,e,t){var r=t(229),a=t(63);n.exports=function(n){return a(n)&&r(n)}},function(n,e,t){var r=t(84).PROPER,a=t(4),i=t(168);n.exports=function(n){return a((function(){return!!i[n]()||"​᠎"!=="​᠎"[n]()||r&&i[n].name!==n}))}},function(n,e,t){var r=t(3),a=t(1),i=t(235).setInterval;r({global:!0,bind:!0,forced:a.setInterval!==i},{setInterval:i})},function(n,e,t){var r=t(3),a=t(1),i=t(235).setTimeout;r({global:!0,bind:!0,forced:a.setTimeout!==i},{setTimeout:i})},function(n,e,t){var r=t(3),a=t(236);r({target:"Function",proto:!0,forced:Function.bind!==a},{bind:a})},function(n,e,t){var r=t(5);n.exports=r(1..valueOf)},function(n,e,t){"use strict";t(237)},function(n,e,t){"use strict";t(239)},function(n,e,t){var r=t(5),a=t(52),i=t(13),o=t(411),s=t(28),c=r(o),l=r("".slice),d=Math.ceil,u=function(n){return function(e,t,r){var o,u,p=i(s(e)),f=a(t),m=p.length,h=void 0===r?" ":i(r);return f<=m||""==h?p:((u=c(h,d((o=f-m)/h.length))).length>o&&(u=l(u,0,o)),n?p+u:u+p)}};n.exports={start:u(!1),end:u(!0)}},function(n,e,t){"use strict";var r=t(1),a=t(72),i=t(13),o=t(28),s=r.RangeError;n.exports=function(n){var e=i(o(this)),t="",r=a(n);if(r<0||r==1/0)throw s("Wrong number of repetitions");for(;r>0;(r>>>=1)&&(e+=e))1&r&&(t+=e);return t}},function(n,e,t){var r=t(44);n.exports=/Version\/10(?:\.\d+){1,2}(?: [\w./]+)?(?: Mobile\/\w+)? Safari\//.test(r)},function(n,e,t){"use strict";t(241)},function(n,e,t){"use strict";t(242)},function(n,e,t){"use strict";var r=t(3),a=t(5),i=t(36),o=t(30),s=t(38),c=t(13),l=t(4),d=t(261),u=t(58),p=t(416),f=t(417),m=t(66),h=t(418),v=[],g=a(v.sort),b=a(v.push),T=l((function(){v.sort(void 0)})),y=l((function(){v.sort(null)})),C=u("sort"),w=!l((function(){if(m)return m<70;if(!(p&&p>3)){if(f)return!0;if(h)return h<603;var n,e,t,r,a="";for(n=65;n<76;n++){switch(e=String.fromCharCode(n),n){case 66:case 69:case 70:case 72:t=3;break;case 68:case 71:t=4;break;default:t=2}for(r=0;r<47;r++)v.push({k:e+r,v:t})}for(v.sort((function(n,e){return e.v-n.v})),r=0;r<v.length;r++)e=v[r].k.charAt(0),a.charAt(a.length-1)!==e&&(a+=e);return"DGBEFHACIJK"!==a}}));r({target:"Array",proto:!0,forced:T||!y||!C||!w},{sort:function(n){void 0!==n&&i(n);var e=o(this);if(w)return void 0===n?g(e):g(e,n);var t,r,a=[],l=s(e);for(r=0;r<l;r++)r in e&&b(a,e[r]);for(d(a,function(n){return function(e,t){return void 0===t?-1:void 0===e?1:void 0!==n?+n(e,t)||0:c(e)>c(t)?1:-1}}(n)),t=a.length,r=0;r<t;)e[r]=a[r++];for(;r<l;)delete e[r++];return e}})},function(n,e,t){var r=t(44).match(/firefox\/(\d+)/i);n.exports=!!r&&+r[1]},function(n,e,t){var r=t(44);n.exports=/MSIE|Trident/.test(r)},function(n,e,t){var r=t(44).match(/AppleWebKit\/(\d+)\./);n.exports=!!r&&+r[1]},function(n,e,t){},function(n,e,t){},function(n,e,t){var r=t(3),a=t(4),i=t(33),o=t(46).f,s=t(10),c=a((function(){o(1)}));r({target:"Object",stat:!0,forced:!s||c,sham:!s},{getOwnPropertyDescriptor:function(n,e){return o(i(n),e)}})},function(n,e,t){var r=t(3),a=t(10),i=t(135).f;r({target:"Object",stat:!0,forced:Object.defineProperties!==i,sham:!a},{defineProperties:i})},function(n,e,t){t(3)({target:"Reflect",stat:!0},{ownKeys:t(141)})},function(n,e){},function(n,e,t){(function(n){function t(n,e){for(var t=0,r=n.length-1;r>=0;r--){var a=n[r];"."===a?n.splice(r,1):".."===a?(n.splice(r,1),t++):t&&(n.splice(r,1),t--)}if(e)for(;t--;t)n.unshift("..");return n}function r(n,e){if(n.filter)return n.filter(e);for(var t=[],r=0;r<n.length;r++)e(n[r],r,n)&&t.push(n[r]);return t}e.resolve=function(){for(var e="",a=!1,i=arguments.length-1;i>=-1&&!a;i--){var o=i>=0?arguments[i]:n.cwd();if("string"!=typeof o)throw new TypeError("Arguments to path.resolve must be strings");o&&(e=o+"/"+e,a="/"===o.charAt(0))}return(a?"/":"")+(e=t(r(e.split("/"),(function(n){return!!n})),!a).join("/"))||"."},e.normalize=function(n){var i=e.isAbsolute(n),o="/"===a(n,-1);return(n=t(r(n.split("/"),(function(n){return!!n})),!i).join("/"))||i||(n="."),n&&o&&(n+="/"),(i?"/":"")+n},e.isAbsolute=function(n){return"/"===n.charAt(0)},e.join=function(){var n=Array.prototype.slice.call(arguments,0);return e.normalize(r(n,(function(n,e){if("string"!=typeof n)throw new TypeError("Arguments to path.join must be strings");return n})).join("/"))},e.relative=function(n,t){function r(n){for(var e=0;e<n.length&&""===n[e];e++);for(var t=n.length-1;t>=0&&""===n[t];t--);return e>t?[]:n.slice(e,t-e+1)}n=e.resolve(n).substr(1),t=e.resolve(t).substr(1);for(var a=r(n.split("/")),i=r(t.split("/")),o=Math.min(a.length,i.length),s=o,c=0;c<o;c++)if(a[c]!==i[c]){s=c;break}var l=[];for(c=s;c<a.length;c++)l.push("..");return(l=l.concat(i.slice(s))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(n){if("string"!=typeof n&&(n+=""),0===n.length)return".";for(var e=n.charCodeAt(0),t=47===e,r=-1,a=!0,i=n.length-1;i>=1;--i)if(47===(e=n.charCodeAt(i))){if(!a){r=i;break}}else a=!1;return-1===r?t?"/":".":t&&1===r?"/":n.slice(0,r)},e.basename=function(n,e){var t=function(n){"string"!=typeof n&&(n+="");var e,t=0,r=-1,a=!0;for(e=n.length-1;e>=0;--e)if(47===n.charCodeAt(e)){if(!a){t=e+1;break}}else-1===r&&(a=!1,r=e+1);return-1===r?"":n.slice(t,r)}(n);return e&&t.substr(-1*e.length)===e&&(t=t.substr(0,t.length-e.length)),t},e.extname=function(n){"string"!=typeof n&&(n+="");for(var e=-1,t=0,r=-1,a=!0,i=0,o=n.length-1;o>=0;--o){var s=n.charCodeAt(o);if(47!==s)-1===r&&(a=!1,r=o+1),46===s?-1===e?e=o:1!==i&&(i=1):-1!==e&&(i=-1);else if(!a){t=o+1;break}}return-1===e||-1===r||0===i||1===i&&e===r-1&&e===t+1?"":n.slice(e,r)};var a="b"==="ab".substr(-1)?function(n,e,t){return n.substr(e,t)}:function(n,e,t){return e<0&&(e=n.length+e),n.substr(e,t)}}).call(this,t(262))},function(n,e,t){"use strict";var r=/[|\\{}()[\]^$+*?.]/g;e.escapeRegExpChars=function(n){return n?String(n).replace(r,"\\$&"):""};var a={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&#34;","'":"&#39;"},i=/[&<>'"]/g;function o(n){return a[n]||n}e.escapeXML=function(n){return null==n?"":String(n).replace(i,o)},e.escapeXML.toString=function(){return Function.prototype.toString.call(this)+';\nvar _ENCODE_HTML_RULES = {\n      "&": "&amp;"\n    , "<": "&lt;"\n    , ">": "&gt;"\n    , \'"\': "&#34;"\n    , "\'": "&#39;"\n    }\n  , _MATCH_HTML = /[&<>\'"]/g;\nfunction encode_char(c) {\n  return _ENCODE_HTML_RULES[c] || c;\n};\n'},e.shallowCopy=function(n,e){for(var t in e=e||{})n[t]=e[t];return n},e.shallowCopyFromList=function(n,e,t){for(var r=0;r<t.length;r++){var a=t[r];void 0!==e[a]&&(n[a]=e[a])}return n},e.cache={_data:{},set:function(n,e){this._data[n]=e},get:function(n){return this._data[n]},remove:function(n){delete this._data[n]},reset:function(){this._data={}}}},function(n){n.exports=JSON.parse('{"name":"ejs","description":"Embedded JavaScript templates","keywords":["template","engine","ejs"],"version":"2.7.4","author":"Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)","license":"Apache-2.0","main":"./lib/ejs.js","repository":{"type":"git","url":"git://github.com/mde/ejs.git"},"bugs":"https://github.com/mde/ejs/issues","homepage":"https://github.com/mde/ejs","dependencies":{},"devDependencies":{"browserify":"^13.1.1","eslint":"^4.14.0","git-directory-deploy":"^1.5.1","jake":"^10.3.1","jsdoc":"^3.4.0","lru-cache":"^4.0.1","mocha":"^5.0.5","uglify-js":"^3.3.16"},"engines":{"node":">=0.10.0"},"scripts":{"test":"mocha","postinstall":"node ./postinstall.js"}}')},function(n,e,t){},function(n,e,t){},function(n,e,t){"use strict";t(246)},function(n,e,t){"use strict";t(247)},function(n,e,t){"use strict";t(248)},function(n,e,t){"use strict";t.r(e);t(171),t(271),t(284),t(286);var r=t(7),a=(t(25),t(56),t(6),t(18),t(20),t(50),t(39),t(0));function i(n,e){for(var t in e)n[t]=e[t];return n}var o=/[!'()*]/g,s=function(n){return"%"+n.charCodeAt(0).toString(16)},c=/%2C/g,l=function(n){return encodeURIComponent(n).replace(o,s).replace(c,",")};function d(n){try{return decodeURIComponent(n)}catch(n){0}return n}var u=function(n){return null==n||"object"==typeof n?n:String(n)};function p(n){var e={};return(n=n.trim().replace(/^(\?|#|&)/,""))?(n.split("&").forEach((function(n){var t=n.replace(/\+/g," ").split("="),r=d(t.shift()),a=t.length>0?d(t.join("=")):null;void 0===e[r]?e[r]=a:Array.isArray(e[r])?e[r].push(a):e[r]=[e[r],a]})),e):e}function f(n){var e=n?Object.keys(n).map((function(e){var t=n[e];if(void 0===t)return"";if(null===t)return l(e);if(Array.isArray(t)){var r=[];return t.forEach((function(n){void 0!==n&&(null===n?r.push(l(e)):r.push(l(e)+"="+l(n)))})),r.join("&")}return l(e)+"="+l(t)})).filter((function(n){return n.length>0})).join("&"):null;return e?"?"+e:""}var m=/\/?$/;function h(n,e,t,r){var a=r&&r.options.stringifyQuery,i=e.query||{};try{i=v(i)}catch(n){}var o={name:e.name||n&&n.name,meta:n&&n.meta||{},path:e.path||"/",hash:e.hash||"",query:i,params:e.params||{},fullPath:T(e,a),matched:n?b(n):[]};return t&&(o.redirectedFrom=T(t,a)),Object.freeze(o)}function v(n){if(Array.isArray(n))return n.map(v);if(n&&"object"==typeof n){var e={};for(var t in n)e[t]=v(n[t]);return e}return n}var g=h(null,{path:"/"});function b(n){for(var e=[];n;)e.unshift(n),n=n.parent;return e}function T(n,e){var t=n.path,r=n.query;void 0===r&&(r={});var a=n.hash;return void 0===a&&(a=""),(t||"/")+(e||f)(r)+a}function y(n,e,t){return e===g?n===e:!!e&&(n.path&&e.path?n.path.replace(m,"")===e.path.replace(m,"")&&(t||n.hash===e.hash&&C(n.query,e.query)):!(!n.name||!e.name)&&(n.name===e.name&&(t||n.hash===e.hash&&C(n.query,e.query)&&C(n.params,e.params))))}function C(n,e){if(void 0===n&&(n={}),void 0===e&&(e={}),!n||!e)return n===e;var t=Object.keys(n).sort(),r=Object.keys(e).sort();return t.length===r.length&&t.every((function(t,a){var i=n[t];if(r[a]!==t)return!1;var o=e[t];return null==i||null==o?i===o:"object"==typeof i&&"object"==typeof o?C(i,o):String(i)===String(o)}))}function w(n){for(var e=0;e<n.matched.length;e++){var t=n.matched[e];for(var r in t.instances){var a=t.instances[r],i=t.enteredCbs[r];if(a&&i){delete t.enteredCbs[r];for(var o=0;o<i.length;o++)a._isBeingDestroyed||i[o](a)}}}}var S={name:"RouterView",functional:!0,props:{name:{type:String,default:"default"}},render:function(n,e){var t=e.props,r=e.children,a=e.parent,o=e.data;o.routerView=!0;for(var s=a.$createElement,c=t.name,l=a.$route,d=a._routerViewCache||(a._routerViewCache={}),u=0,p=!1;a&&a._routerRoot!==a;){var f=a.$vnode?a.$vnode.data:{};f.routerView&&u++,f.keepAlive&&a._directInactive&&a._inactive&&(p=!0),a=a.$parent}if(o.routerViewDepth=u,p){var m=d[c],h=m&&m.component;return h?(m.configProps&&A(h,o,m.route,m.configProps),s(h,o,r)):s()}var v=l.matched[u],g=v&&v.components[c];if(!v||!g)return d[c]=null,s();d[c]={component:g},o.registerRouteInstance=function(n,e){var t=v.instances[c];(e&&t!==n||!e&&t===n)&&(v.instances[c]=e)},(o.hook||(o.hook={})).prepatch=function(n,e){v.instances[c]=e.componentInstance},o.hook.init=function(n){n.data.keepAlive&&n.componentInstance&&n.componentInstance!==v.instances[c]&&(v.instances[c]=n.componentInstance),w(l)};var b=v.props&&v.props[c];return b&&(i(d[c],{route:l,configProps:b}),A(g,o,l,b)),s(g,o,r)}};function A(n,e,t,r){var a=e.props=function(n,e){switch(typeof e){case"undefined":return;case"object":return e;case"function":return e(n);case"boolean":return e?n.params:void 0;default:0}}(t,r);if(a){a=e.props=i({},a);var o=e.attrs=e.attrs||{};for(var s in a)n.props&&s in n.props||(o[s]=a[s],delete a[s])}}function R(n,e,t){var r=n.charAt(0);if("/"===r)return n;if("?"===r||"#"===r)return e+n;var a=e.split("/");t&&a[a.length-1]||a.pop();for(var i=n.replace(/^\//,"").split("/"),o=0;o<i.length;o++){var s=i[o];".."===s?a.pop():"."!==s&&a.push(s)}return""!==a[0]&&a.unshift(""),a.join("/")}function P(n){return n.replace(/\/+/g,"/")}var x=Array.isArray||function(n){return"[object Array]"==Object.prototype.toString.call(n)},I=W,k=O,N=function(n,e){return j(O(n,e),e)},_=j,E=F,D=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function O(n,e){for(var t,r=[],a=0,i=0,o="",s=e&&e.delimiter||"/";null!=(t=D.exec(n));){var c=t[0],l=t[1],d=t.index;if(o+=n.slice(i,d),i=d+c.length,l)o+=l[1];else{var u=n[i],p=t[2],f=t[3],m=t[4],h=t[5],v=t[6],g=t[7];o&&(r.push(o),o="");var b=null!=p&&null!=u&&u!==p,T="+"===v||"*"===v,y="?"===v||"*"===v,C=t[2]||s,w=m||h;r.push({name:f||a++,prefix:p||"",delimiter:C,optional:y,repeat:T,partial:b,asterisk:!!g,pattern:w?B(w):g?".*":"[^"+M(C)+"]+?"})}}return i<n.length&&(o+=n.substr(i)),o&&r.push(o),r}function U(n){return encodeURI(n).replace(/[\/?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()}))}function j(n,e){for(var t=new Array(n.length),r=0;r<n.length;r++)"object"==typeof n[r]&&(t[r]=new RegExp("^(?:"+n[r].pattern+")$",z(e)));return function(e,r){for(var a="",i=e||{},o=(r||{}).pretty?U:encodeURIComponent,s=0;s<n.length;s++){var c=n[s];if("string"!=typeof c){var l,d=i[c.name];if(null==d){if(c.optional){c.partial&&(a+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(x(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var u=0;u<d.length;u++){if(l=o(d[u]),!t[s].test(l))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(l)+"`");a+=(0===u?c.prefix:c.delimiter)+l}}else{if(l=c.asterisk?encodeURI(d).replace(/[?#]/g,(function(n){return"%"+n.charCodeAt(0).toString(16).toUpperCase()})):o(d),!t[s].test(l))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+l+'"');a+=c.prefix+l}}else a+=c}return a}}function M(n){return n.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function B(n){return n.replace(/([=!:$\/()])/g,"\\$1")}function L(n,e){return n.keys=e,n}function z(n){return n&&n.sensitive?"":"i"}function F(n,e,t){x(e)||(t=e||t,e=[]);for(var r=(t=t||{}).strict,a=!1!==t.end,i="",o=0;o<n.length;o++){var s=n[o];if("string"==typeof s)i+=M(s);else{var c=M(s.prefix),l="(?:"+s.pattern+")";e.push(s),s.repeat&&(l+="(?:"+c+l+")*"),i+=l=s.optional?s.partial?c+"("+l+")?":"(?:"+c+"("+l+"))?":c+"("+l+")"}}var d=M(t.delimiter||"/"),u=i.slice(-d.length)===d;return r||(i=(u?i.slice(0,-d.length):i)+"(?:"+d+"(?=$))?"),i+=a?"$":r&&u?"":"(?="+d+"|$)",L(new RegExp("^"+i,z(t)),e)}function W(n,e,t){return x(e)||(t=e||t,e=[]),t=t||{},n instanceof RegExp?function(n,e){var t=n.source.match(/\((?!\?)/g);if(t)for(var r=0;r<t.length;r++)e.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return L(n,e)}(n,e):x(n)?function(n,e,t){for(var r=[],a=0;a<n.length;a++)r.push(W(n[a],e,t).source);return L(new RegExp("(?:"+r.join("|")+")",z(t)),e)}(n,e,t):function(n,e,t){return F(O(n,t),e,t)}(n,e,t)}I.parse=k,I.compile=N,I.tokensToFunction=_,I.tokensToRegExp=E;var q=Object.create(null);function $(n,e,t){e=e||{};try{var r=q[n]||(q[n]=I.compile(n));return"string"==typeof e.pathMatch&&(e[0]=e.pathMatch),r(e,{pretty:!0})}catch(n){return""}finally{delete e[0]}}function G(n,e,t,r){var a="string"==typeof n?{path:n}:n;if(a._normalized)return a;if(a.name){var o=(a=i({},n)).params;return o&&"object"==typeof o&&(a.params=i({},o)),a}if(!a.path&&a.params&&e){(a=i({},a))._normalized=!0;var s=i(i({},e.params),a.params);if(e.name)a.name=e.name,a.params=s;else if(e.matched.length){var c=e.matched[e.matched.length-1].path;a.path=$(c,s,e.path)}else 0;return a}var l=function(n){var e="",t="",r=n.indexOf("#");r>=0&&(e=n.slice(r),n=n.slice(0,r));var a=n.indexOf("?");return a>=0&&(t=n.slice(a+1),n=n.slice(0,a)),{path:n,query:t,hash:e}}(a.path||""),d=e&&e.path||"/",f=l.path?R(l.path,d,t||a.append):d,m=function(n,e,t){void 0===e&&(e={});var r,a=t||p;try{r=a(n||"")}catch(n){r={}}for(var i in e){var o=e[i];r[i]=Array.isArray(o)?o.map(u):u(o)}return r}(l.query,a.query,r&&r.options.parseQuery),h=a.hash||l.hash;return h&&"#"!==h.charAt(0)&&(h="#"+h),{_normalized:!0,path:f,query:m,hash:h}}var V,H=function(){},Y={name:"RouterLink",props:{to:{type:[String,Object],required:!0},tag:{type:String,default:"a"},custom:Boolean,exact:Boolean,exactPath:Boolean,append:Boolean,replace:Boolean,activeClass:String,exactActiveClass:String,ariaCurrentValue:{type:String,default:"page"},event:{type:[String,Array],default:"click"}},render:function(n){var e=this,t=this.$router,r=this.$route,a=t.resolve(this.to,r,this.append),o=a.location,s=a.route,c=a.href,l={},d=t.options.linkActiveClass,u=t.options.linkExactActiveClass,p=null==d?"router-link-active":d,f=null==u?"router-link-exact-active":u,v=null==this.activeClass?p:this.activeClass,g=null==this.exactActiveClass?f:this.exactActiveClass,b=s.redirectedFrom?h(null,G(s.redirectedFrom),null,t):s;l[g]=y(r,b,this.exactPath),l[v]=this.exact||this.exactPath?l[g]:function(n,e){return 0===n.path.replace(m,"/").indexOf(e.path.replace(m,"/"))&&(!e.hash||n.hash===e.hash)&&function(n,e){for(var t in e)if(!(t in n))return!1;return!0}(n.query,e.query)}(r,b);var T=l[g]?this.ariaCurrentValue:null,C=function(n){X(n)&&(e.replace?t.replace(o,H):t.push(o,H))},w={click:X};Array.isArray(this.event)?this.event.forEach((function(n){w[n]=C})):w[this.event]=C;var S={class:l},A=!this.$scopedSlots.$hasNormal&&this.$scopedSlots.default&&this.$scopedSlots.default({href:c,route:s,navigate:C,isActive:l[v],isExactActive:l[g]});if(A){if(1===A.length)return A[0];if(A.length>1||!A.length)return 0===A.length?n():n("span",{},A)}if("a"===this.tag)S.on=w,S.attrs={href:c,"aria-current":T};else{var R=function n(e){var t;if(e)for(var r=0;r<e.length;r++){if("a"===(t=e[r]).tag)return t;if(t.children&&(t=n(t.children)))return t}}(this.$slots.default);if(R){R.isStatic=!1;var P=R.data=i({},R.data);for(var x in P.on=P.on||{},P.on){var I=P.on[x];x in w&&(P.on[x]=Array.isArray(I)?I:[I])}for(var k in w)k in P.on?P.on[k].push(w[k]):P.on[k]=C;var N=R.data.attrs=i({},R.data.attrs);N.href=c,N["aria-current"]=T}else S.on=w}return n(this.tag,S,this.$slots.default)}};function X(n){if(!(n.metaKey||n.altKey||n.ctrlKey||n.shiftKey||n.defaultPrevented||void 0!==n.button&&0!==n.button)){if(n.currentTarget&&n.currentTarget.getAttribute){var e=n.currentTarget.getAttribute("target");if(/\b_blank\b/i.test(e))return}return n.preventDefault&&n.preventDefault(),!0}}var Z="undefined"!=typeof window;function J(n,e,t,r,a){var i=e||[],o=t||Object.create(null),s=r||Object.create(null);n.forEach((function(n){!function n(e,t,r,a,i,o){var s=a.path,c=a.name;0;var l=a.pathToRegexpOptions||{},d=function(n,e,t){t||(n=n.replace(/\/$/,""));if("/"===n[0])return n;if(null==e)return n;return P(e.path+"/"+n)}(s,i,l.strict);"boolean"==typeof a.caseSensitive&&(l.sensitive=a.caseSensitive);var u={path:d,regex:K(d,l),components:a.components||{default:a.component},alias:a.alias?"string"==typeof a.alias?[a.alias]:a.alias:[],instances:{},enteredCbs:{},name:c,parent:i,matchAs:o,redirect:a.redirect,beforeEnter:a.beforeEnter,meta:a.meta||{},props:null==a.props?{}:a.components?a.props:{default:a.props}};a.children&&a.children.forEach((function(a){var i=o?P(o+"/"+a.path):void 0;n(e,t,r,a,u,i)}));t[u.path]||(e.push(u.path),t[u.path]=u);if(void 0!==a.alias)for(var p=Array.isArray(a.alias)?a.alias:[a.alias],f=0;f<p.length;++f){0;var m={path:p[f],children:a.children};n(e,t,r,m,i,u.path||"/")}c&&(r[c]||(r[c]=u))}(i,o,s,n,a)}));for(var c=0,l=i.length;c<l;c++)"*"===i[c]&&(i.push(i.splice(c,1)[0]),l--,c--);return{pathList:i,pathMap:o,nameMap:s}}function K(n,e){return I(n,[],e)}function Q(n,e){var t=J(n),r=t.pathList,a=t.pathMap,i=t.nameMap;function o(n,t,o){var s=G(n,t,!1,e),l=s.name;if(l){var d=i[l];if(!d)return c(null,s);var u=d.regex.keys.filter((function(n){return!n.optional})).map((function(n){return n.name}));if("object"!=typeof s.params&&(s.params={}),t&&"object"==typeof t.params)for(var p in t.params)!(p in s.params)&&u.indexOf(p)>-1&&(s.params[p]=t.params[p]);return s.path=$(d.path,s.params),c(d,s,o)}if(s.path){s.params={};for(var f=0;f<r.length;f++){var m=r[f],h=a[m];if(nn(h.regex,s.path,s.params))return c(h,s,o)}}return c(null,s)}function s(n,t){var r=n.redirect,a="function"==typeof r?r(h(n,t,null,e)):r;if("string"==typeof a&&(a={path:a}),!a||"object"!=typeof a)return c(null,t);var s=a,l=s.name,d=s.path,u=t.query,p=t.hash,f=t.params;if(u=s.hasOwnProperty("query")?s.query:u,p=s.hasOwnProperty("hash")?s.hash:p,f=s.hasOwnProperty("params")?s.params:f,l){i[l];return o({_normalized:!0,name:l,query:u,hash:p,params:f},void 0,t)}if(d){var m=function(n,e){return R(n,e.parent?e.parent.path:"/",!0)}(d,n);return o({_normalized:!0,path:$(m,f),query:u,hash:p},void 0,t)}return c(null,t)}function c(n,t,r){return n&&n.redirect?s(n,r||t):n&&n.matchAs?function(n,e,t){var r=o({_normalized:!0,path:$(t,e.params)});if(r){var a=r.matched,i=a[a.length-1];return e.params=r.params,c(i,e)}return c(null,e)}(0,t,n.matchAs):h(n,t,r,e)}return{match:o,addRoute:function(n,e){var t="object"!=typeof n?i[n]:void 0;J([e||n],r,a,i,t),t&&t.alias.length&&J(t.alias.map((function(n){return{path:n,children:[e]}})),r,a,i,t)},getRoutes:function(){return r.map((function(n){return a[n]}))},addRoutes:function(n){J(n,r,a,i)}}}function nn(n,e,t){var r=e.match(n);if(!r)return!1;if(!t)return!0;for(var a=1,i=r.length;a<i;++a){var o=n.keys[a-1];o&&(t[o.name||"pathMatch"]="string"==typeof r[a]?d(r[a]):r[a])}return!0}var en=Z&&window.performance&&window.performance.now?window.performance:Date;function tn(){return en.now().toFixed(3)}var rn=tn();function an(){return rn}function on(n){return rn=n}var sn=Object.create(null);function cn(){"scrollRestoration"in window.history&&(window.history.scrollRestoration="manual");var n=window.location.protocol+"//"+window.location.host,e=window.location.href.replace(n,""),t=i({},window.history.state);return t.key=an(),window.history.replaceState(t,"",e),window.addEventListener("popstate",un),function(){window.removeEventListener("popstate",un)}}function ln(n,e,t,r){if(n.app){var a=n.options.scrollBehavior;a&&n.app.$nextTick((function(){var i=function(){var n=an();if(n)return sn[n]}(),o=a.call(n,e,t,r?i:null);o&&("function"==typeof o.then?o.then((function(n){vn(n,i)})).catch((function(n){0})):vn(o,i))}))}}function dn(){var n=an();n&&(sn[n]={x:window.pageXOffset,y:window.pageYOffset})}function un(n){dn(),n.state&&n.state.key&&on(n.state.key)}function pn(n){return mn(n.x)||mn(n.y)}function fn(n){return{x:mn(n.x)?n.x:window.pageXOffset,y:mn(n.y)?n.y:window.pageYOffset}}function mn(n){return"number"==typeof n}var hn=/^#\d/;function vn(n,e){var t,r="object"==typeof n;if(r&&"string"==typeof n.selector){var a=hn.test(n.selector)?document.getElementById(n.selector.slice(1)):document.querySelector(n.selector);if(a){var i=n.offset&&"object"==typeof n.offset?n.offset:{};e=function(n,e){var t=document.documentElement.getBoundingClientRect(),r=n.getBoundingClientRect();return{x:r.left-t.left-e.x,y:r.top-t.top-e.y}}(a,i={x:mn((t=i).x)?t.x:0,y:mn(t.y)?t.y:0})}else pn(n)&&(e=fn(n))}else r&&pn(n)&&(e=fn(n));e&&("scrollBehavior"in document.documentElement.style?window.scrollTo({left:e.x,top:e.y,behavior:n.behavior}):window.scrollTo(e.x,e.y))}var gn,bn=Z&&((-1===(gn=window.navigator.userAgent).indexOf("Android 2.")&&-1===gn.indexOf("Android 4.0")||-1===gn.indexOf("Mobile Safari")||-1!==gn.indexOf("Chrome")||-1!==gn.indexOf("Windows Phone"))&&window.history&&"function"==typeof window.history.pushState);function Tn(n,e){dn();var t=window.history;try{if(e){var r=i({},t.state);r.key=an(),t.replaceState(r,"",n)}else t.pushState({key:on(tn())},"",n)}catch(t){window.location[e?"replace":"assign"](n)}}function yn(n){Tn(n,!0)}function Cn(n,e,t){var r=function(a){a>=n.length?t():n[a]?e(n[a],(function(){r(a+1)})):r(a+1)};r(0)}var wn={redirected:2,aborted:4,cancelled:8,duplicated:16};function Sn(n,e){return Rn(n,e,wn.redirected,'Redirected when going from "'+n.fullPath+'" to "'+function(n){if("string"==typeof n)return n;if("path"in n)return n.path;var e={};return Pn.forEach((function(t){t in n&&(e[t]=n[t])})),JSON.stringify(e,null,2)}(e)+'" via a navigation guard.')}function An(n,e){return Rn(n,e,wn.cancelled,'Navigation cancelled from "'+n.fullPath+'" to "'+e.fullPath+'" with a new navigation.')}function Rn(n,e,t,r){var a=new Error(r);return a._isRouter=!0,a.from=n,a.to=e,a.type=t,a}var Pn=["params","query","hash"];function xn(n){return Object.prototype.toString.call(n).indexOf("Error")>-1}function In(n,e){return xn(n)&&n._isRouter&&(null==e||n.type===e)}function kn(n){return function(e,t,r){var a=!1,i=0,o=null;Nn(n,(function(n,e,t,s){if("function"==typeof n&&void 0===n.cid){a=!0,i++;var c,l=Dn((function(e){var a;((a=e).__esModule||En&&"Module"===a[Symbol.toStringTag])&&(e=e.default),n.resolved="function"==typeof e?e:V.extend(e),t.components[s]=e,--i<=0&&r()})),d=Dn((function(n){var e="Failed to resolve async component "+s+": "+n;o||(o=xn(n)?n:new Error(e),r(o))}));try{c=n(l,d)}catch(n){d(n)}if(c)if("function"==typeof c.then)c.then(l,d);else{var u=c.component;u&&"function"==typeof u.then&&u.then(l,d)}}})),a||r()}}function Nn(n,e){return _n(n.map((function(n){return Object.keys(n.components).map((function(t){return e(n.components[t],n.instances[t],n,t)}))})))}function _n(n){return Array.prototype.concat.apply([],n)}var En="function"==typeof Symbol&&"symbol"==typeof Symbol.toStringTag;function Dn(n){var e=!1;return function(){for(var t=[],r=arguments.length;r--;)t[r]=arguments[r];if(!e)return e=!0,n.apply(this,t)}}var On=function(n,e){this.router=n,this.base=function(n){if(!n)if(Z){var e=document.querySelector("base");n=(n=e&&e.getAttribute("href")||"/").replace(/^https?:\/\/[^\/]+/,"")}else n="/";"/"!==n.charAt(0)&&(n="/"+n);return n.replace(/\/$/,"")}(e),this.current=g,this.pending=null,this.ready=!1,this.readyCbs=[],this.readyErrorCbs=[],this.errorCbs=[],this.listeners=[]};function Un(n,e,t,r){var a=Nn(n,(function(n,r,a,i){var o=function(n,e){"function"!=typeof n&&(n=V.extend(n));return n.options[e]}(n,e);if(o)return Array.isArray(o)?o.map((function(n){return t(n,r,a,i)})):t(o,r,a,i)}));return _n(r?a.reverse():a)}function jn(n,e){if(e)return function(){return n.apply(e,arguments)}}On.prototype.listen=function(n){this.cb=n},On.prototype.onReady=function(n,e){this.ready?n():(this.readyCbs.push(n),e&&this.readyErrorCbs.push(e))},On.prototype.onError=function(n){this.errorCbs.push(n)},On.prototype.transitionTo=function(n,e,t){var r,a=this;try{r=this.router.match(n,this.current)}catch(n){throw this.errorCbs.forEach((function(e){e(n)})),n}var i=this.current;this.confirmTransition(r,(function(){a.updateRoute(r),e&&e(r),a.ensureURL(),a.router.afterHooks.forEach((function(n){n&&n(r,i)})),a.ready||(a.ready=!0,a.readyCbs.forEach((function(n){n(r)})))}),(function(n){t&&t(n),n&&!a.ready&&(In(n,wn.redirected)&&i===g||(a.ready=!0,a.readyErrorCbs.forEach((function(e){e(n)}))))}))},On.prototype.confirmTransition=function(n,e,t){var r=this,a=this.current;this.pending=n;var i,o,s=function(n){!In(n)&&xn(n)&&(r.errorCbs.length?r.errorCbs.forEach((function(e){e(n)})):console.error(n)),t&&t(n)},c=n.matched.length-1,l=a.matched.length-1;if(y(n,a)&&c===l&&n.matched[c]===a.matched[l])return this.ensureURL(),n.hash&&ln(this.router,a,n,!1),s(((o=Rn(i=a,n,wn.duplicated,'Avoided redundant navigation to current location: "'+i.fullPath+'".')).name="NavigationDuplicated",o));var d=function(n,e){var t,r=Math.max(n.length,e.length);for(t=0;t<r&&n[t]===e[t];t++);return{updated:e.slice(0,t),activated:e.slice(t),deactivated:n.slice(t)}}(this.current.matched,n.matched),u=d.updated,p=d.deactivated,f=d.activated,m=[].concat(function(n){return Un(n,"beforeRouteLeave",jn,!0)}(p),this.router.beforeHooks,function(n){return Un(n,"beforeRouteUpdate",jn)}(u),f.map((function(n){return n.beforeEnter})),kn(f)),h=function(e,t){if(r.pending!==n)return s(An(a,n));try{e(n,a,(function(e){!1===e?(r.ensureURL(!0),s(function(n,e){return Rn(n,e,wn.aborted,'Navigation aborted from "'+n.fullPath+'" to "'+e.fullPath+'" via a navigation guard.')}(a,n))):xn(e)?(r.ensureURL(!0),s(e)):"string"==typeof e||"object"==typeof e&&("string"==typeof e.path||"string"==typeof e.name)?(s(Sn(a,n)),"object"==typeof e&&e.replace?r.replace(e):r.push(e)):t(e)}))}catch(n){s(n)}};Cn(m,h,(function(){Cn(function(n){return Un(n,"beforeRouteEnter",(function(n,e,t,r){return function(n,e,t){return function(r,a,i){return n(r,a,(function(n){"function"==typeof n&&(e.enteredCbs[t]||(e.enteredCbs[t]=[]),e.enteredCbs[t].push(n)),i(n)}))}}(n,t,r)}))}(f).concat(r.router.resolveHooks),h,(function(){if(r.pending!==n)return s(An(a,n));r.pending=null,e(n),r.router.app&&r.router.app.$nextTick((function(){w(n)}))}))}))},On.prototype.updateRoute=function(n){this.current=n,this.cb&&this.cb(n)},On.prototype.setupListeners=function(){},On.prototype.teardown=function(){this.listeners.forEach((function(n){n()})),this.listeners=[],this.current=g,this.pending=null};var Mn=function(n){function e(e,t){n.call(this,e,t),this._startLocation=Bn(this.base)}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router,t=e.options.scrollBehavior,r=bn&&t;r&&this.listeners.push(cn());var a=function(){var t=n.current,a=Bn(n.base);n.current===g&&a===n._startLocation||n.transitionTo(a,(function(n){r&&ln(e,n,t,!0)}))};window.addEventListener("popstate",a),this.listeners.push((function(){window.removeEventListener("popstate",a)}))}},e.prototype.go=function(n){window.history.go(n)},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){Tn(P(r.base+n.fullPath)),ln(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){yn(P(r.base+n.fullPath)),ln(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.ensureURL=function(n){if(Bn(this.base)!==this.current.fullPath){var e=P(this.base+this.current.fullPath);n?Tn(e):yn(e)}},e.prototype.getCurrentLocation=function(){return Bn(this.base)},e}(On);function Bn(n){var e=window.location.pathname,t=e.toLowerCase(),r=n.toLowerCase();return!n||t!==r&&0!==t.indexOf(P(r+"/"))||(e=e.slice(n.length)),(e||"/")+window.location.search+window.location.hash}var Ln=function(n){function e(e,t,r){n.call(this,e,t),r&&function(n){var e=Bn(n);if(!/^\/#/.test(e))return window.location.replace(P(n+"/#"+e)),!0}(this.base)||zn()}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.setupListeners=function(){var n=this;if(!(this.listeners.length>0)){var e=this.router.options.scrollBehavior,t=bn&&e;t&&this.listeners.push(cn());var r=function(){var e=n.current;zn()&&n.transitionTo(Fn(),(function(r){t&&ln(n.router,r,e,!0),bn||$n(r.fullPath)}))},a=bn?"popstate":"hashchange";window.addEventListener(a,r),this.listeners.push((function(){window.removeEventListener(a,r)}))}},e.prototype.push=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){qn(n.fullPath),ln(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this,a=this.current;this.transitionTo(n,(function(n){$n(n.fullPath),ln(r.router,n,a,!1),e&&e(n)}),t)},e.prototype.go=function(n){window.history.go(n)},e.prototype.ensureURL=function(n){var e=this.current.fullPath;Fn()!==e&&(n?qn(e):$n(e))},e.prototype.getCurrentLocation=function(){return Fn()},e}(On);function zn(){var n=Fn();return"/"===n.charAt(0)||($n("/"+n),!1)}function Fn(){var n=window.location.href,e=n.indexOf("#");return e<0?"":n=n.slice(e+1)}function Wn(n){var e=window.location.href,t=e.indexOf("#");return(t>=0?e.slice(0,t):e)+"#"+n}function qn(n){bn?Tn(Wn(n)):window.location.hash=n}function $n(n){bn?yn(Wn(n)):window.location.replace(Wn(n))}var Gn=function(n){function e(e,t){n.call(this,e,t),this.stack=[],this.index=-1}return n&&(e.__proto__=n),e.prototype=Object.create(n&&n.prototype),e.prototype.constructor=e,e.prototype.push=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index+1).concat(n),r.index++,e&&e(n)}),t)},e.prototype.replace=function(n,e,t){var r=this;this.transitionTo(n,(function(n){r.stack=r.stack.slice(0,r.index).concat(n),e&&e(n)}),t)},e.prototype.go=function(n){var e=this,t=this.index+n;if(!(t<0||t>=this.stack.length)){var r=this.stack[t];this.confirmTransition(r,(function(){var n=e.current;e.index=t,e.updateRoute(r),e.router.afterHooks.forEach((function(e){e&&e(r,n)}))}),(function(n){In(n,wn.duplicated)&&(e.index=t)}))}},e.prototype.getCurrentLocation=function(){var n=this.stack[this.stack.length-1];return n?n.fullPath:"/"},e.prototype.ensureURL=function(){},e}(On),Vn=function(n){void 0===n&&(n={}),this.app=null,this.apps=[],this.options=n,this.beforeHooks=[],this.resolveHooks=[],this.afterHooks=[],this.matcher=Q(n.routes||[],this);var e=n.mode||"hash";switch(this.fallback="history"===e&&!bn&&!1!==n.fallback,this.fallback&&(e="hash"),Z||(e="abstract"),this.mode=e,e){case"history":this.history=new Mn(this,n.base);break;case"hash":this.history=new Ln(this,n.base,this.fallback);break;case"abstract":this.history=new Gn(this,n.base);break;default:0}},Hn={currentRoute:{configurable:!0}};function Yn(n,e){return n.push(e),function(){var t=n.indexOf(e);t>-1&&n.splice(t,1)}}Vn.prototype.match=function(n,e,t){return this.matcher.match(n,e,t)},Hn.currentRoute.get=function(){return this.history&&this.history.current},Vn.prototype.init=function(n){var e=this;if(this.apps.push(n),n.$once("hook:destroyed",(function(){var t=e.apps.indexOf(n);t>-1&&e.apps.splice(t,1),e.app===n&&(e.app=e.apps[0]||null),e.app||e.history.teardown()})),!this.app){this.app=n;var t=this.history;if(t instanceof Mn||t instanceof Ln){var r=function(n){t.setupListeners(),function(n){var r=t.current,a=e.options.scrollBehavior;bn&&a&&"fullPath"in n&&ln(e,n,r,!1)}(n)};t.transitionTo(t.getCurrentLocation(),r,r)}t.listen((function(n){e.apps.forEach((function(e){e._route=n}))}))}},Vn.prototype.beforeEach=function(n){return Yn(this.beforeHooks,n)},Vn.prototype.beforeResolve=function(n){return Yn(this.resolveHooks,n)},Vn.prototype.afterEach=function(n){return Yn(this.afterHooks,n)},Vn.prototype.onReady=function(n,e){this.history.onReady(n,e)},Vn.prototype.onError=function(n){this.history.onError(n)},Vn.prototype.push=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.push(n,e,t)}));this.history.push(n,e,t)},Vn.prototype.replace=function(n,e,t){var r=this;if(!e&&!t&&"undefined"!=typeof Promise)return new Promise((function(e,t){r.history.replace(n,e,t)}));this.history.replace(n,e,t)},Vn.prototype.go=function(n){this.history.go(n)},Vn.prototype.back=function(){this.go(-1)},Vn.prototype.forward=function(){this.go(1)},Vn.prototype.getMatchedComponents=function(n){var e=n?n.matched?n:this.resolve(n).route:this.currentRoute;return e?[].concat.apply([],e.matched.map((function(n){return Object.keys(n.components).map((function(e){return n.components[e]}))}))):[]},Vn.prototype.resolve=function(n,e,t){var r=G(n,e=e||this.history.current,t,this),a=this.match(r,e),i=a.redirectedFrom||a.fullPath;return{location:r,route:a,href:function(n,e,t){var r="hash"===t?"#"+e:e;return n?P(n+"/"+r):r}(this.history.base,i,this.mode),normalizedTo:r,resolved:a}},Vn.prototype.getRoutes=function(){return this.matcher.getRoutes()},Vn.prototype.addRoute=function(n,e){this.matcher.addRoute(n,e),this.history.current!==g&&this.history.transitionTo(this.history.getCurrentLocation())},Vn.prototype.addRoutes=function(n){this.matcher.addRoutes(n),this.history.current!==g&&this.history.transitionTo(this.history.getCurrentLocation())},Object.defineProperties(Vn.prototype,Hn),Vn.install=function n(e){if(!n.installed||V!==e){n.installed=!0,V=e;var t=function(n){return void 0!==n},r=function(n,e){var r=n.$options._parentVnode;t(r)&&t(r=r.data)&&t(r=r.registerRouteInstance)&&r(n,e)};e.mixin({beforeCreate:function(){t(this.$options.router)?(this._routerRoot=this,this._router=this.$options.router,this._router.init(this),e.util.defineReactive(this,"_route",this._router.history.current)):this._routerRoot=this.$parent&&this.$parent._routerRoot||this,r(this,this)},destroyed:function(){r(this)}}),Object.defineProperty(e.prototype,"$router",{get:function(){return this._routerRoot._router}}),Object.defineProperty(e.prototype,"$route",{get:function(){return this._routerRoot._route}}),e.component("RouterView",S),e.component("RouterLink",Y);var a=e.config.optionMergeStrategies;a.beforeRouteEnter=a.beforeRouteLeave=a.beforeRouteUpdate=a.created}},Vn.version="3.5.3",Vn.isNavigationFailure=In,Vn.NavigationFailureType=wn,Vn.START_LOCATION=g,Z&&window.Vue&&window.Vue.use(Vn);var Xn=Vn;t(201),t(202),t(289),t(48),t(203),t(26),t(27),t(291);function Zn(n){n.locales&&Object.keys(n.locales).forEach((function(e){n.locales[e].path=e})),Object.freeze(n)}var Jn=t(2),Kn=t(93),Qn=t(55),ne=(t(111),t(132),t(34),t(249)),ee=t.n(ne),te=t(250),re=t.n(te),ae={created:function(){if(this.siteMeta=this.$site.headTags.filter((function(n){return"meta"===Object(Qn.a)(n,1)[0]})).map((function(n){var e=Object(Qn.a)(n,2);e[0];return e[1]})),this.$ssrContext){var n=this.getMergedMetaTags();this.$ssrContext.title=this.$title,this.$ssrContext.lang=this.$lang,this.$ssrContext.pageMeta=(e=n)?e.map((function(n){var e="<meta";return Object.keys(n).forEach((function(t){e+=" ".concat(t,'="').concat(re()(n[t]),'"')})),e+">"})).join("\n    "):"",this.$ssrContext.canonicalLink=oe(this.$canonicalUrl)}var e},mounted:function(){this.currentMetaTags=Object(Kn.a)(document.querySelectorAll("meta")),this.updateMeta(),this.updateCanonicalLink()},methods:{updateMeta:function(){document.title=this.$title,document.documentElement.lang=this.$lang;var n=this.getMergedMetaTags();this.currentMetaTags=se(n,this.currentMetaTags)},getMergedMetaTags:function(){var n=this.$page.frontmatter.meta||[];return ee()([{name:"description",content:this.$description}],n,this.siteMeta,ce)},updateCanonicalLink:function(){ie(),this.$canonicalUrl&&document.head.insertAdjacentHTML("beforeend",oe(this.$canonicalUrl))}},watch:{$page:function(){this.updateMeta(),this.updateCanonicalLink()}},beforeDestroy:function(){se(null,this.currentMetaTags),ie()}};function ie(){var n=document.querySelector("link[rel='canonical']");n&&n.remove()}function oe(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";return n?'<link href="'.concat(n,'" rel="canonical" />'):""}function se(n,e){if(e&&Object(Kn.a)(e).filter((function(n){return n.parentNode===document.head})).forEach((function(n){return document.head.removeChild(n)})),n)return n.map((function(n){var e=document.createElement("meta");return Object.keys(n).forEach((function(t){e.setAttribute(t,n[t])})),document.head.appendChild(e),e}))}function ce(n){for(var e=0,t=["name","property","itemprop"];e<t.length;e++){var r=t[e];if(n.hasOwnProperty(r))return n[r]+r}return JSON.stringify(n)}t(166),t(24),t(40);var le=t(176),de={mounted:function(){window.addEventListener("scroll",this.onScroll)},methods:{onScroll:t.n(le)()((function(){this.setActiveHash()}),300),setActiveHash:function(){for(var n=this,e=[].slice.call(document.querySelectorAll(".sidebar-link")),t=[].slice.call(document.querySelectorAll(".header-anchor")).filter((function(n){return e.some((function(e){return e.hash===n.hash}))})),r=Math.max(window.pageYOffset,document.documentElement.scrollTop,document.body.scrollTop),a=Math.max(document.documentElement.scrollHeight,document.body.scrollHeight),i=window.innerHeight+r,o=0;o<t.length;o++){var s=t[o],c=t[o+1],l=0===o&&0===r||r>=s.parentElement.offsetTop+10&&(!c||r<c.parentElement.offsetTop-10),d=decodeURIComponent(this.$route.hash);if(l&&d!==decodeURIComponent(s.hash)){var u=s;if(i===a)for(var p=o+1;p<t.length;p++)if(d===decodeURIComponent(t[p].hash))return;return this.$vuepress.$set("disableScrollBehavior",!0),void this.$router.replace(decodeURIComponent(u.hash),(function(){n.$nextTick((function(){n.$vuepress.$set("disableScrollBehavior",!1)}))}))}}}},beforeDestroy:function(){window.removeEventListener("scroll",this.onScroll)}},ue=(t(42),t(124)),pe=t.n(ue),fe={mounted:function(){var n=this;pe.a.configure({showSpinner:!1}),this.$router.beforeEach((function(n,e,t){n.path===e.path||a.default.component(n.name)||pe.a.start(),t()})),this.$router.afterEach((function(){pe.a.done(),n.isSidebarOpen=!1}))}};t(260),t(95),t(97),t(169),t(71),t(406);!function(n,e){void 0===e&&(e={});var t=e.insertAt;if(n&&"undefined"!=typeof document){var r=document.head||document.getElementsByTagName("head")[0],a=document.createElement("style");a.type="text/css","top"===t&&r.firstChild?r.insertBefore(a,r.firstChild):r.appendChild(a),a.styleSheet?a.styleSheet.cssText=n:a.appendChild(document.createTextNode(n))}}("@media (max-width: 1000px) {\n  .vuepress-plugin-demo-block__h_code {\n    display: none;\n  }\n  .vuepress-plugin-demo-block__app {\n    margin-left: auto !important;\n    margin-right: auto !important;\n  }\n}\n.vuepress-plugin-demo-block__wrapper {\n  margin-top: 10px;\n  border: 1px solid #ebebeb;\n  border-radius: 4px;\n  transition: all 0.2s;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display {\n  height: 400px;\n  display: flex;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__app {\n  width: 300px;\n  border: 1px solid #ebebeb;\n  box-shadow: 1px 1px 3px #ebebeb;\n  margin-right: 5px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code {\n  flex: 1;\n  overflow: auto;\n  height: 100%;\n}\n.vuepress-plugin-demo-block__wrapper.vuepress-plugin-demo-block__horizontal .vuepress-plugin-demo-block__display .vuepress-plugin-demo-block__h_code > pre {\n  overflow: visible;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  max-height: 400px;\n  overflow: auto;\n}\n.vuepress-plugin-demo-block__wrapper div {\n  box-sizing: border-box;\n}\n.vuepress-plugin-demo-block__wrapper:hover {\n  box-shadow: 0 0 11px rgba(33, 33, 33, 0.2);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code {\n  overflow: hidden;\n  height: 0;\n  padding: 0 !important;\n  background-color: #282c34;\n  border-radius: 0 !important;\n  transition: height 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__code pre {\n  margin: 0 !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__display {\n  padding: 20px;\n  border-bottom: 1px solid #ebebeb;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer {\n  position: relative;\n  text-align: center;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__codepen {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer.vuepress-plugin-demo-block__show-link .vuepress-plugin-demo-block__expand::before {\n  border-top: none;\n  border-right: 6px solid transparent;\n  border-bottom: 6px solid #ccc;\n  border-left: 6px solid transparent;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__codepen,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand span,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand {\n  opacity: 1;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover .vuepress-plugin-demo-block__expand::before {\n  border-top-color: #3eaf7c !important;\n  border-bottom-color: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer:hover svg {\n  fill: #3eaf7c !important;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand-text {\n  transition: all 0.5s;\n  opacity: 0;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:nth-last-child(2) {\n  right: 50px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer form:last-child {\n  right: 10px;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button {\n  border-color: transparent;\n  background-color: transparent;\n  font-size: 14px;\n  color: #3eaf7c;\n  cursor: pointer;\n  outline: none;\n  margin: 0;\n  width: 46px;\n  position: relative;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::before {\n  content: attr(data-tip);\n  white-space: nowrap;\n  position: absolute;\n  top: -30px;\n  left: 50%;\n  color: #eee;\n  line-height: 1;\n  z-index: 1000;\n  border-radius: 4px;\n  padding: 6px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  background-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button:hover::after {\n  content: '' !important;\n  display: block;\n  position: absolute;\n  left: 50%;\n  top: -5px;\n  -webkit-transform: translateX(-50%);\n          transform: translateX(-50%);\n  border: 5px solid transparent;\n  border-top-color: rgba(0, 0, 0, 0.8);\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__button svg {\n  width: 34px;\n  height: 20px;\n  fill: #ccc;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__jsfiddle,\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__codepen {\n  position: absolute;\n  top: 10px;\n  transition: all 0.5s;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand {\n  position: relative;\n  width: 100px;\n  height: 40px;\n  margin: 0;\n  color: #3eaf7c;\n  font-size: 14px;\n  background-color: transparent;\n  border-color: transparent;\n  outline: none;\n  transition: all 0.5s;\n  cursor: pointer;\n}\n.vuepress-plugin-demo-block__wrapper .vuepress-plugin-demo-block__footer .vuepress-plugin-demo-block__expand::before {\n  content: \"\";\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 0;\n  height: 0;\n  border-top: 6px solid #ccc;\n  border-right: 6px solid transparent;\n  border-left: 6px solid transparent;\n  -webkit-transform: translate(-50%, -50%);\n          transform: translate(-50%, -50%);\n}\n");var me={jsLib:[],cssLib:[],jsfiddle:!0,codepen:!0,codepenLayout:"left",codepenJsProcessor:"babel",codepenEditors:"101",horizontal:!1,vue:"https://cdn.jsdelivr.net/npm/vue/dist/vue.min.js",react:"https://cdn.jsdelivr.net/npm/react/umd/react.production.min.js",reactDOM:"https://cdn.jsdelivr.net/npm/react-dom/umd/react-dom.production.min.js"},he={},ve=function(n){return'<div id="app">\n'.concat(n,"\n</div>")},ge=function(n){return window.$VUEPRESS_DEMO_BLOCK&&void 0!==window.$VUEPRESS_DEMO_BLOCK[n]?window.$VUEPRESS_DEMO_BLOCK[n]:me[n]},be=function n(e,t,r){var a=document.createElement(e);return t&&Object.keys(t).forEach((function(n){if(n.indexOf("data"))a[n]=t[n];else{var e=n.replace("data","");a.dataset[e]=t[n]}})),r&&r.forEach((function(e){var t=e.tag,r=e.attrs,i=e.children;a.appendChild(n(t,r,i))})),a},Te=function(n,e,t){var r,a=(r=n.querySelectorAll(".".concat(e)),Array.prototype.slice.call(r));return 1!==a.length||t?a:a[0]},ye=function(n,e){var t,r,a=n.match(/<style>([\s\S]+)<\/style>/),i=n.match(/<template>([\s\S]+)<\/template>/),o=n.match(/<script>([\s\S]+)<\/script>/),s={css:a&&a[1].replace(/^\n|\n$/g,""),html:i&&i[1].replace(/^\n|\n$/g,""),js:o&&o[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};s.htmlTpl=ve(s.html),s.jsTpl=(t=s.js,r=t.replace(/export\s+default\s*?\{\n*/,"").replace(/\n*\}\s*$/,"").trim(),"new Vue({\n  el: '#app',\n  ".concat(r,"\n})")),s.script=function(n,e){var t=n.split(/export\s+default/),r="(function() {".concat(t[0]," ; return ").concat(t[1],"})()"),a=window.Babel?window.Babel.transform(r,{presets:["es2015"]}).code:r,i=[eval][0](a);return i.template=e,i}(s.js,s.html);var c=ge("vue");return s.jsLib.unshift(c),s},Ce=function(n,e){var t,r=n.match(/<style>([\s\S]+)<\/style>/),a=n.match(/<html>([\s\S]+)<\/html>/),i=n.match(/<script>([\s\S]+)<\/script>/),o={css:r&&r[1].replace(/^\n|\n$/g,""),html:a&&a[1].replace(/^\n|\n$/g,""),js:i&&i[1].replace(/^\n|\n$/g,""),jsLib:e.jsLib||[],cssLib:e.cssLib||[]};return o.htmlTpl=o.html,o.jsTpl=o.js,o.script=(t=o.js,window.Babel?window.Babel.transform(t,{presets:["es2015"]}).code:t),o},we=function(n){return n=n.replace("export default ","").replace(/App\.__style__(\s*)=(\s*)`([\s\S]*)?`/,""),n+='ReactDOM.render(React.createElement(App), document.getElementById("app"))'};function Se(){var n=Te(document,"vuepress-plugin-demo-block__wrapper",!0);n.length?n.forEach((function(n){if("true"!==n.dataset.created){n.style.display="block";var e=Te(n,"vuepress-plugin-demo-block__code"),t=Te(n,"vuepress-plugin-demo-block__display"),r=Te(n,"vuepress-plugin-demo-block__footer"),a=Te(t,"vuepress-plugin-demo-block__app"),i=decodeURIComponent(n.dataset.code),o=decodeURIComponent(n.dataset.config),s=decodeURIComponent(n.dataset.type);o=o?JSON.parse(o):{};var c=e.querySelector("div").clientHeight,l="react"===s?function(n,e){var t=(0,window.Babel.transform)(n,{presets:["es2015","react"]}).code,r="(function(exports){var module={};module.exports=exports;".concat(t,";return module.exports.__esModule?module.exports.default:module.exports;})({})"),a=new Function("return ".concat(r))(),i={js:a,css:a.__style__||"",jsLib:e.jsLib||[],cssLib:e.cssLib||[],jsTpl:we(n),htmlTpl:ve("")},o=ge("react"),s=ge("reactDOM");return i.jsLib.unshift(o,s),i}(i,o):"vanilla"===s?Ce(i,o):ye(i,o),d=be("button",{className:"".concat("vuepress-plugin-demo-block__expand")});if(r.appendChild(d),d.addEventListener("click",Ae.bind(null,d,c,e,r)),ge("jsfiddle")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=a.concat(i).concat(ge("cssLib")).concat(ge("jsLib")).join(",");return be("form",{className:"vuepress-plugin-demo-block__jsfiddle",target:"_blank",action:"https://jsfiddle.net/api/post/library/pure/",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"css",value:e}},{tag:"input",attrs:{type:"hidden",name:"html",value:t}},{tag:"input",attrs:{type:"hidden",name:"js",value:r}},{tag:"input",attrs:{type:"hidden",name:"panel_js",value:3}},{tag:"input",attrs:{type:"hidden",name:"wrap",value:1}},{tag:"input",attrs:{type:"hidden",name:"resources",value:o}},{tag:"button",attrs:{type:"submit",className:"vuepress-plugin-demo-block__button",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088289967" class="icon" style="" viewBox="0 0 1170 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1952" xmlns:xlink="http://www.w3.org/1999/xlink" width="228.515625" height="200"><defs><style type="text/css"></style></defs><path d="M1028.571429 441.142857q63.428571 26.285714 102.571428 83.142857T1170.285714 650.857143q0 93.714286-67.428571 160.285714T940 877.714286q-2.285714 0-6.571429-0.285715t-6-0.285714H232q-97.142857-5.714286-164.571429-71.714286T0 645.142857q0-62.857143 31.428571-116t84-84q-6.857143-22.285714-6.857142-46.857143 0-65.714286 46.857142-112t113.714286-46.285714q54.285714 0 98.285714 33.142857 42.857143-88 127.142858-141.714286t186.571428-53.714285q94.857143 0 174.857143 46T982.571429 248.571429t46.571428 172q0 3.428571-0.285714 10.285714t-0.285714 10.285714zM267.428571 593.142857q0 69.714286 48 110.285714t118.857143 40.571429q78.285714 0 137.142857-56.571429-9.142857-11.428571-27.142857-32.285714T519.428571 626.285714q-38.285714 37.142857-82.285714 37.142857-31.428571 0-53.428571-19.142857T361.714286 594.285714q0-30.285714 22-49.714285t52.285714-19.428572q25.142857 0 48.285714 12t41.714286 31.428572 37.142857 42.857142 39.428572 46.857143 44 42.857143 55.428571 31.428572 69.428571 12q69.142857 0 116.857143-40.857143T936 594.857143q0-69.142857-48-109.714286t-118.285714-40.571428q-81.714286 0-137.714286 55.428571l53.142857 61.714286q37.714286-36.571429 81.142857-36.571429 29.714286 0 52.571429 18.857143t22.857143 48q0 32.571429-21.142857 52.285714t-53.714286 19.714286q-24.571429 0-47.142857-12t-41.142857-31.428571-37.428572-42.857143-39.714286-46.857143-44.285714-42.857143-55.142857-31.428571T434.285714 444.571429q-69.714286 0-118.285714 40.285714T267.428571 593.142857z" p-id="1953"></path></svg>',datatip:"JSFiddle"}}])}(l)),ge("codepen")&&r.appendChild(function(n){var e=n.css,t=n.htmlTpl,r=n.jsTpl,a=n.jsLib,i=n.cssLib,o=JSON.stringify({css:e,html:t,js:r,js_external:a.concat(ge("jsLib")).join(";"),css_external:i.concat(ge("cssLib")).join(";"),layout:ge("codepenLayout"),js_pre_processor:ge("codepenJsProcessor"),editors:ge("codepenEditors")});return be("form",{className:"vuepress-plugin-demo-block__codepen",target:"_blank",action:"https://codepen.io/pen/define",method:"post"},[{tag:"input",attrs:{type:"hidden",name:"data",value:o}},{tag:"button",attrs:{type:"submit",innerHTML:'<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg t="1547088271207" class="icon" style="" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1737" xmlns:xlink="http://www.w3.org/1999/xlink" width="200" height="200"><defs><style type="text/css"></style></defs><path d="M123.428571 668l344.571429 229.714286v-205.142857L277.142857 565.142857z m-35.428571-82.285714l110.285714-73.714286-110.285714-73.714286v147.428572z m468 312l344.571429-229.714286-153.714286-102.857143-190.857143 127.428572v205.142857z m-44-281.714286l155.428571-104-155.428571-104-155.428571 104zM277.142857 458.857143l190.857143-127.428572V126.285714L123.428571 356z m548.571429 53.142857l110.285714 73.714286V438.285714z m-78.857143-53.142857l153.714286-102.857143-344.571429-229.714286v205.142857z m277.142857-102.857143v312q0 23.428571-19.428571 36.571429l-468 312q-12 7.428571-24.571429 7.428571t-24.571429-7.428571L19.428571 704.571429q-19.428571-13.142857-19.428571-36.571429V356q0-23.428571 19.428571-36.571429L487.428571 7.428571q12-7.428571 24.571429-7.428571t24.571429 7.428571l468 312q19.428571 13.142857 19.428571 36.571429z" p-id="1738"></path></svg>',className:"vuepress-plugin-demo-block__button",datatip:"Codepen"}}])}(l)),void 0!==o.horizontal?o.horizontal:ge("horizontal")){n.classList.add("vuepress-plugin-demo-block__horizontal");var u=e.firstChild.cloneNode(!0);u.classList.add("vuepress-plugin-demo-block__h_code"),t.appendChild(u)}if(l.css&&function(n){if(!he[n]){var e=be("style",{innerHTML:n});document.body.appendChild(e),he[n]=!0}}(l.css),"react"===s)ReactDOM.render(React.createElement(l.js),a);else if("vue"===s){var p=(new(Vue.extend(l.script))).$mount();a.appendChild(p.$el)}else"vanilla"===s&&(a.innerHTML=l.html,new Function("return (function(){".concat(l.script,"})()"))());n.dataset.created="true"}})):setTimeout((function(n){Se()}),300)}function Ae(n,e,t,r){var a="1"!==n.dataset.isExpand;t.style.height=a?"".concat(e,"px"):0,a?r.classList.add("vuepress-plugin-demo-block__show-link"):r.classList.remove("vuepress-plugin-demo-block__show-link"),n.dataset.isExpand=a?"1":"0"}var Re={mounted:function(){window.$VUEPRESS_DEMO_BLOCK={jsfiddle:!1,codepen:!0,horizontal:!1},Se()},updated:function(){Se()}};t(53),t(31);function Pe(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}t(92);function xe(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}function Ie(n,e,t){return e&&xe(n.prototype,e),t&&xe(n,t),Object.defineProperty(n,"prototype",{writable:!1}),n}t(70);var ke="auto",Ne="zoom-in",_e="zoom-out",Ee="grab",De="move";function Oe(n,e,t){var r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a={passive:!1};r?n.addEventListener(e,t,a):n.removeEventListener(e,t,a)}function Ue(n,e){if(n){var t=new Image;t.onload=function(){e&&e(t)},t.src=n}}function je(n){return n.dataset.original?n.dataset.original:"A"===n.parentNode.tagName?n.parentNode.getAttribute("href"):null}function Me(n,e,t){!function(n){var e=Be,t=Le;if(n.transition){var r=n.transition;delete n.transition,n[e]=r}if(n.transform){var a=n.transform;delete n.transform,n[t]=a}}(e);var r=n.style,a={};for(var i in e)t&&(a[i]=r[i]||""),r[i]=e[i];return a}var Be="transition",Le="transform",ze="transform",Fe="transitionend";var We=function(){},qe={enableGrab:!0,preloadImage:!1,closeOnWindowResize:!0,transitionDuration:.4,transitionTimingFunction:"cubic-bezier(0.4, 0, 0, 1)",bgColor:"rgb(255, 255, 255)",bgOpacity:1,scaleBase:1,scaleExtra:.5,scrollThreshold:40,zIndex:998,customSize:null,onOpen:We,onClose:We,onGrab:We,onMove:We,onRelease:We,onBeforeOpen:We,onBeforeClose:We,onBeforeGrab:We,onBeforeRelease:We,onImageLoading:We,onImageLoaded:We},$e={init:function(n){var e,t;e=this,t=n,Object.getOwnPropertyNames(Object.getPrototypeOf(e)).forEach((function(n){e[n]=e[n].bind(t)}))},click:function(n){if(n.preventDefault(),Ve(n))return window.open(this.target.srcOriginal||n.currentTarget.src,"_blank");this.shown?this.released?this.close():this.release():this.open(n.currentTarget)},scroll:function(){var n=document.documentElement||document.body.parentNode||document.body,e=window.pageXOffset||n.scrollLeft,t=window.pageYOffset||n.scrollTop;null===this.lastScrollPosition&&(this.lastScrollPosition={x:e,y:t});var r=this.lastScrollPosition.x-e,a=this.lastScrollPosition.y-t,i=this.options.scrollThreshold;(Math.abs(a)>=i||Math.abs(r)>=i)&&(this.lastScrollPosition=null,this.close())},keydown:function(n){(function(n){return"Escape"===(n.key||n.code)||27===n.keyCode})(n)&&(this.released?this.close():this.release(this.close))},mousedown:function(n){if(Ge(n)&&!Ve(n)){n.preventDefault();var e=n.clientX,t=n.clientY;this.pressTimer=setTimeout(function(){this.grab(e,t)}.bind(this),200)}},mousemove:function(n){this.released||this.move(n.clientX,n.clientY)},mouseup:function(n){Ge(n)&&!Ve(n)&&(clearTimeout(this.pressTimer),this.released?this.close():this.release())},touchstart:function(n){n.preventDefault();var e=n.touches[0],t=e.clientX,r=e.clientY;this.pressTimer=setTimeout(function(){this.grab(t,r)}.bind(this),200)},touchmove:function(n){if(!this.released){var e=n.touches[0],t=e.clientX,r=e.clientY;this.move(t,r)}},touchend:function(n){(function(n){n.targetTouches.length})(n)||(clearTimeout(this.pressTimer),this.released?this.close():this.release())},clickOverlay:function(){this.close()},resizeWindow:function(){this.close()}};function Ge(n){return 0===n.button}function Ve(n){return n.metaKey||n.ctrlKey}var He={init:function(n){this.el=document.createElement("div"),this.instance=n,this.parent=document.body,Me(this.el,{position:"fixed",top:0,left:0,right:0,bottom:0,opacity:0}),this.updateStyle(n.options),Oe(this.el,"click",n.handler.clickOverlay.bind(n))},updateStyle:function(n){Me(this.el,{zIndex:n.zIndex,backgroundColor:n.bgColor,transition:"opacity\n        "+n.transitionDuration+"s\n        "+n.transitionTimingFunction})},insert:function(){this.parent.appendChild(this.el)},remove:function(){this.parent.removeChild(this.el)},fadeIn:function(){this.el.offsetWidth,this.el.style.opacity=this.instance.options.bgOpacity},fadeOut:function(){this.el.style.opacity=0}},Ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(n){return typeof n}:function(n){return n&&"function"==typeof Symbol&&n.constructor===Symbol&&n!==Symbol.prototype?"symbol":typeof n},Xe=function(){function n(n,e){for(var t=0;t<e.length;t++){var r=e[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(n,r.key,r)}}return function(e,t,r){return t&&n(e.prototype,t),r&&n(e,r),e}}(),Ze=Object.assign||function(n){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(n[r]=t[r])}return n},Je={init:function(n,e){this.el=n,this.instance=e,this.srcThumbnail=this.el.getAttribute("src"),this.srcset=this.el.getAttribute("srcset"),this.srcOriginal=je(this.el),this.rect=this.el.getBoundingClientRect(),this.translate=null,this.scale=null,this.styleOpen=null,this.styleClose=null},zoomIn:function(){var n=this.instance.options,e=n.zIndex,t=n.enableGrab,r=n.transitionDuration,a=n.transitionTimingFunction;this.translate=this.calculateTranslate(),this.scale=this.calculateScale(),this.styleOpen={position:"relative",zIndex:e+1,cursor:t?Ee:_e,transition:ze+"\n        "+r+"s\n        "+a,transform:"translate3d("+this.translate.x+"px, "+this.translate.y+"px, 0px)\n        scale("+this.scale.x+","+this.scale.y+")",height:this.rect.height+"px",width:this.rect.width+"px"},this.el.offsetWidth,this.styleClose=Me(this.el,this.styleOpen,!0)},zoomOut:function(){this.el.offsetWidth,Me(this.el,{transform:"none"})},grab:function(n,e,t){var r=Ke(),a=r.x-n,i=r.y-e;Me(this.el,{cursor:De,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},move:function(n,e,t){var r=Ke(),a=r.x-n,i=r.y-e;Me(this.el,{transition:ze,transform:"translate3d(\n        "+(this.translate.x+a)+"px, "+(this.translate.y+i)+"px, 0px)\n        scale("+(this.scale.x+t)+","+(this.scale.y+t)+")"})},restoreCloseStyle:function(){Me(this.el,this.styleClose)},restoreOpenStyle:function(){Me(this.el,this.styleOpen)},upgradeSource:function(){if(this.srcOriginal){var n=this.el.parentNode;this.srcset&&this.el.removeAttribute("srcset");var e=this.el.cloneNode(!1);e.setAttribute("src",this.srcOriginal),e.style.position="fixed",e.style.visibility="hidden",n.appendChild(e),setTimeout(function(){this.el.setAttribute("src",this.srcOriginal),n.removeChild(e)}.bind(this),50)}},downgradeSource:function(){this.srcOriginal&&(this.srcset&&this.el.setAttribute("srcset",this.srcset),this.el.setAttribute("src",this.srcThumbnail))},calculateTranslate:function(){var n=Ke(),e=this.rect.left+this.rect.width/2,t=this.rect.top+this.rect.height/2;return{x:n.x-e,y:n.y-t}},calculateScale:function(){var n=this.el.dataset,e=n.zoomingHeight,t=n.zoomingWidth,r=this.instance.options,a=r.customSize,i=r.scaleBase;if(!a&&e&&t)return{x:t/this.rect.width,y:e/this.rect.height};if(a&&"object"===(void 0===a?"undefined":Ye(a)))return{x:a.width/this.rect.width,y:a.height/this.rect.height};var o=this.rect.width/2,s=this.rect.height/2,c=Ke(),l={x:c.x-o,y:c.y-s},d=l.x/o,u=l.y/s,p=i+Math.min(d,u);if(a&&"string"==typeof a){var f=t||this.el.naturalWidth,m=e||this.el.naturalHeight,h=parseFloat(a)*f/(100*this.rect.width),v=parseFloat(a)*m/(100*this.rect.height);if(p>h||p>v)return{x:h,y:v}}return{x:p,y:p}}};function Ke(){var n=document.documentElement;return{x:Math.min(n.clientWidth,window.innerWidth)/2,y:Math.min(n.clientHeight,window.innerHeight)/2}}function Qe(n,e,t){["mousedown","mousemove","mouseup","touchstart","touchmove","touchend"].forEach((function(r){Oe(n,r,e[r],t)}))}var nt=function(){function n(e){!function(n,e){if(!(n instanceof e))throw new TypeError("Cannot call a class as a function")}(this,n),this.target=Object.create(Je),this.overlay=Object.create(He),this.handler=Object.create($e),this.body=document.body,this.shown=!1,this.lock=!1,this.released=!0,this.lastScrollPosition=null,this.pressTimer=null,this.options=Ze({},qe,e),this.overlay.init(this),this.handler.init(this)}return Xe(n,[{key:"listen",value:function(n){if("string"==typeof n)for(var e=document.querySelectorAll(n),t=e.length;t--;)this.listen(e[t]);else"IMG"===n.tagName&&(n.style.cursor=Ne,Oe(n,"click",this.handler.click),this.options.preloadImage&&Ue(je(n)));return this}},{key:"config",value:function(n){return n?(Ze(this.options,n),this.overlay.updateStyle(this.options),this):this.options}},{key:"open",value:function(n){var e=this,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:this.options.onOpen;if(!this.shown&&!this.lock){var r="string"==typeof n?document.querySelector(n):n;if("IMG"===r.tagName){if(this.options.onBeforeOpen(r),this.target.init(r,this),!this.options.preloadImage){var a=this.target.srcOriginal;null!=a&&(this.options.onImageLoading(r),Ue(a,this.options.onImageLoaded))}this.shown=!0,this.lock=!0,this.target.zoomIn(),this.overlay.insert(),this.overlay.fadeIn(),Oe(document,"scroll",this.handler.scroll),Oe(document,"keydown",this.handler.keydown),this.options.closeOnWindowResize&&Oe(window,"resize",this.handler.resizeWindow);var i=function n(){Oe(r,Fe,n,!1),e.lock=!1,e.target.upgradeSource(),e.options.enableGrab&&Qe(document,e.handler,!0),t(r)};return Oe(r,Fe,i),this}}}},{key:"close",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onClose;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeClose(t),this.lock=!0,this.body.style.cursor=ke,this.overlay.fadeOut(),this.target.zoomOut(),Oe(document,"scroll",this.handler.scroll,!1),Oe(document,"keydown",this.handler.keydown,!1),this.options.closeOnWindowResize&&Oe(window,"resize",this.handler.resizeWindow,!1);var r=function r(){Oe(t,Fe,r,!1),n.shown=!1,n.lock=!1,n.target.downgradeSource(),n.options.enableGrab&&Qe(document,n.handler,!1),n.target.restoreCloseStyle(),n.overlay.remove(),e(t)};return Oe(t,Fe,r),this}}},{key:"grab",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onGrab;if(this.shown&&!this.lock){var a=this.target.el;this.options.onBeforeGrab(a),this.released=!1,this.target.grab(n,e,t);var i=function n(){Oe(a,Fe,n,!1),r(a)};return Oe(a,Fe,i),this}}},{key:"move",value:function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:this.options.scaleExtra,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:this.options.onMove;if(this.shown&&!this.lock){this.released=!1,this.body.style.cursor=De,this.target.move(n,e,t);var a=this.target.el,i=function n(){Oe(a,Fe,n,!1),r(a)};return Oe(a,Fe,i),this}}},{key:"release",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.options.onRelease;if(this.shown&&!this.lock){var t=this.target.el;this.options.onBeforeRelease(t),this.lock=!0,this.body.style.cursor=ke,this.target.restoreOpenStyle();var r=function r(){Oe(t,Fe,r,!1),n.lock=!1,n.released=!0,e(t)};return Oe(t,Fe,r),this}}}]),n}(),et=".theme-vdoing-content img:not(.no-zoom)",tt=JSON.parse('{"bgColor":"rgba(0,0,0,0.6)"}'),rt=Number("500"),at=function(){function n(){Pe(this,n),this.instance=new nt(tt)}return Ie(n,[{key:"update",value:function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:et;"undefined"!=typeof window&&this.instance.listen(n)}},{key:"updateDelay",value:function(){var n=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:et,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:rt;setTimeout((function(){return n.update(e)}),t)}}]),n}(),it=[ae,de,fe,Re,{watch:{"$page.path":function(){void 0!==this.$vuepress.zooming&&this.$vuepress.zooming.updateDelay()}},mounted:function(){this.$vuepress.zooming=new at,this.$vuepress.zooming.updateDelay()}},t(164).default],ot={name:"GlobalLayout",computed:{layout:function(){var n=this.getLayout();return Object(Jn.h)("layout",n),a.default.component(n)}},methods:{getLayout:function(){if(this.$page.path){var n=this.$page.frontmatter.layout;return n&&(this.$vuepress.getLayoutAsyncComponent(n)||this.$vuepress.getVueComponent(n))?n:"Layout"}return"NotFound"}}},st=t(19),ct=Object(st.a)(ot,(function(){var n=this.$createElement;return(this._self._c||n)(this.layout,{tag:"component"})}),[],!1,null,null,null).exports;Object(Jn.f)(ct,"mixins",it);var lt=[{name:"v-def6137a",path:"/source/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-def6137a").then(t)}},{path:"/source/index/index.html",redirect:"/source/index/"},{path:"/10.源码/0.index.html",redirect:"/source/index/"},{name:"v-31935129",path:"/source/plan/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-31935129").then(t)}},{path:"/source/plan/index.html",redirect:"/source/plan/"},{path:"/10.源码/1.plan.html",redirect:"/source/plan/"},{name:"v-787191d5",path:"/source/api/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-787191d5").then(t)}},{path:"/source/api/index/index.html",redirect:"/source/api/index/"},{path:"/10.源码/10.API/0.index.html",redirect:"/source/api/index/"},{name:"v-44e9b923",path:"/source/roadmap/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-44e9b923").then(t)}},{path:"/source/roadmap/index.html",redirect:"/source/roadmap/"},{path:"/10.源码/3.roadmap.html",redirect:"/source/roadmap/"},{name:"v-75b57b12",path:"/source/category/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-75b57b12").then(t)}},{path:"/source/category/index.html",redirect:"/source/category/"},{path:"/10.源码/4.目录结构.html",redirect:"/source/category/"},{name:"v-7054a95a",path:"/basic/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-7054a95a").then(t)}},{path:"/basic/index/index.html",redirect:"/basic/index/"},{path:"/20.基础/0.index.html",redirect:"/basic/index/"},{name:"v-4911e6f6",path:"/basic/plan/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-4911e6f6").then(t)}},{path:"/basic/plan/index.html",redirect:"/basic/plan/"},{path:"/20.基础/1.plan.html",redirect:"/basic/plan/"},{name:"v-49f15b7d",path:"/basic/webrtc_api/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-49f15b7d").then(t)}},{path:"/basic/webrtc_api/index/index.html",redirect:"/basic/webrtc_api/index/"},{path:"/20.基础/10.MDN: WebRTC API/0.index.html",redirect:"/basic/webrtc_api/index/"},{name:"v-6d8ced93",path:"/basic/webrtc_api/basic/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-6d8ced93").then(t)}},{path:"/basic/webrtc_api/basic/index.html",redirect:"/basic/webrtc_api/basic/"},{path:"/20.基础/10.MDN: WebRTC API/10.basic.html",redirect:"/basic/webrtc_api/basic/"},{name:"v-4fd75e1a",path:"/basic/webrtc_api/guide/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-4fd75e1a").then(t)}},{path:"/basic/webrtc_api/guide/index.html",redirect:"/basic/webrtc_api/guide/"},{path:"/20.基础/10.MDN: WebRTC API/20.guide.html",redirect:"/basic/webrtc_api/guide/"},{name:"v-12491e9e",path:"/basic/intro/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-12491e9e").then(t)}},{path:"/basic/intro/index/index.html",redirect:"/basic/intro/index/"},{path:"/20.基础/20.概要/0.index.html",redirect:"/basic/intro/index/"},{name:"v-73a49df9",path:"/basic/intro/introduce/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-73a49df9").then(t)}},{path:"/basic/intro/introduce/index.html",redirect:"/basic/intro/introduce/"},{path:"/20.基础/20.概要/10.intro.html",redirect:"/basic/intro/introduce/"},{name:"v-3bcd4756",path:"/basic/intro/stats/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-3bcd4756").then(t)}},{path:"/basic/intro/stats/index.html",redirect:"/basic/intro/stats/"},{path:"/20.基础/20.概要/20.stats.html",redirect:"/basic/intro/stats/"},{name:"v-363e47ae",path:"/basic/intro/session/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-363e47ae").then(t)}},{path:"/basic/intro/session/index.html",redirect:"/basic/intro/session/"},{path:"/20.基础/20.概要/30.session.html",redirect:"/basic/intro/session/"},{name:"v-4ae09651",path:"/basic/intro/dict/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-4ae09651").then(t)}},{path:"/basic/intro/dict/index.html",redirect:"/basic/intro/dict/"},{path:"/20.基础/20.概要/40.Webrtc Statistics Dictionary.html",redirect:"/basic/intro/dict/"},{name:"v-124c469a",path:"/basic/roadmap/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-124c469a").then(t)}},{path:"/basic/roadmap/index.html",redirect:"/basic/roadmap/"},{path:"/20.基础/3.roadmap.html",redirect:"/basic/roadmap/"},{name:"v-6f153665",path:"/basic/app/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-6f153665").then(t)}},{path:"/basic/app/index/index.html",redirect:"/basic/app/index/"},{path:"/20.基础/30.应用/0.index.html",redirect:"/basic/app/index/"},{name:"v-acfed1b6",path:"/basic/app/get-user-media/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-acfed1b6").then(t)}},{path:"/basic/app/get-user-media/index.html",redirect:"/basic/app/get-user-media/"},{path:"/20.基础/30.应用/10.getUserMedia.html",redirect:"/basic/app/get-user-media/"},{name:"v-10f94591",path:"/basic/app/devices/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-10f94591").then(t)}},{path:"/basic/app/devices/index.html",redirect:"/basic/app/devices/"},{path:"/20.基础/30.应用/20.devices.html",redirect:"/basic/app/devices/"},{name:"v-9d8b297e",path:"/basic/app/streamCapture/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-9d8b297e").then(t)}},{path:"/basic/app/streamCapture/index.html",redirect:"/basic/app/streamCapture/"},{path:"/20.基础/30.应用/30.streamCapture.html",redirect:"/basic/app/streamCapture/"},{name:"v-a0a44bfa",path:"/basic/p2p/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-a0a44bfa").then(t)}},{path:"/basic/p2p/index/index.html",redirect:"/basic/p2p/index/"},{path:"/20.基础/35.P2P/0.index.html",redirect:"/basic/p2p/index/"},{name:"v-05f9fb4f",path:"/basic/p2p/nat/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-05f9fb4f").then(t)}},{path:"/basic/p2p/nat/index.html",redirect:"/basic/p2p/nat/"},{path:"/20.基础/35.P2P/10.NAT 类型探测和 NAT 穿越.html",redirect:"/basic/p2p/nat/"},{name:"v-31f20e97",path:"/basic/p2p/nat-advance/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-31f20e97").then(t)}},{path:"/basic/p2p/nat-advance/index.html",redirect:"/basic/p2p/nat-advance/"},{path:"/20.基础/35.P2P/20.NAT穿越方案进阶.html",redirect:"/basic/p2p/nat-advance/"},{name:"v-6fd09404",path:"/basic/p2p/stun-turn-ice/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-6fd09404").then(t)}},{path:"/basic/p2p/stun-turn-ice/index.html",redirect:"/basic/p2p/stun-turn-ice/"},{path:"/20.基础/35.P2P/30.STUN、TURN、ICE详解.html",redirect:"/basic/p2p/stun-turn-ice/"},{name:"v-18401afe",path:"/basic/p2p/stun/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-18401afe").then(t)}},{path:"/basic/p2p/stun/index.html",redirect:"/basic/p2p/stun/"},{path:"/20.基础/35.P2P/34.STUN 详解.html",redirect:"/basic/p2p/stun/"},{name:"v-285dec31",path:"/basic/p2p/ice/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-285dec31").then(t)}},{path:"/basic/p2p/ice/index.html",redirect:"/basic/p2p/ice/"},{path:"/20.基础/35.P2P/40.ICE 详解.html",redirect:"/basic/p2p/ice/"},{name:"v-1387aaf0",path:"/basic/p2p/nat-basic/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-1387aaf0").then(t)}},{path:"/basic/p2p/nat-basic/index.html",redirect:"/basic/p2p/nat-basic/"},{path:"/20.基础/35.P2P/9.NAT基础概念详解.html",redirect:"/basic/p2p/nat-basic/"},{name:"v-5be1efc9",path:"/basic/webrtc-1.0/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-5be1efc9").then(t)}},{path:"/basic/webrtc-1.0/index.html",redirect:"/basic/webrtc-1.0/"},{path:"/20.基础/4.rec-webrtc-chinese.html",redirect:"/basic/webrtc-1.0/"},{name:"v-847cbade",path:"/pages/e76933/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-847cbade").then(t)}},{path:"/pages/e76933/index.html",redirect:"/pages/e76933/"},{path:"/20.基础/70.协议/0.index.html",redirect:"/pages/e76933/"},{name:"v-1dbd7f22",path:"/advance/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-1dbd7f22").then(t)}},{path:"/advance/index/index.html",redirect:"/advance/index/"},{path:"/30.进阶/0.index.html",redirect:"/advance/index/"},{name:"v-4f79ce95",path:"/advance/plan/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-4f79ce95").then(t)}},{path:"/advance/plan/index.html",redirect:"/advance/plan/"},{path:"/30.进阶/1.plan.html",redirect:"/advance/plan/"},{name:"v-18ce054f",path:"/advance/roadmap/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-18ce054f").then(t)}},{path:"/advance/roadmap/index.html",redirect:"/advance/roadmap/"},{path:"/30.进阶/3.roadmap.html",redirect:"/advance/roadmap/"},{name:"v-74bdca4e",path:"/topic/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-74bdca4e").then(t)}},{path:"/topic/index/index.html",redirect:"/topic/index/"},{path:"/40.主题/0.index.html",redirect:"/topic/index/"},{name:"v-7f9f06de",path:"/topic/plan/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-7f9f06de").then(t)}},{path:"/topic/plan/index.html",redirect:"/topic/plan/"},{path:"/40.主题/1.plan.html",redirect:"/topic/plan/"},{name:"v-71f1c60e",path:"/topic/peerjs/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-71f1c60e").then(t)}},{path:"/topic/peerjs/index.html",redirect:"/topic/peerjs/"},{path:"/40.主题/10.simpleWebRTC/0.index.html",redirect:"/topic/peerjs/"},{name:"v-2e5c424e",path:"/topic/simpleWebRTC/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-2e5c424e").then(t)}},{path:"/topic/simpleWebRTC/index.html",redirect:"/topic/simpleWebRTC/"},{path:"/40.主题/20.peerjs/0.index.html",redirect:"/topic/simpleWebRTC/"},{name:"v-29cccf0e",path:"/topic/roadmap/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-29cccf0e").then(t)}},{path:"/topic/roadmap/index.html",redirect:"/topic/roadmap/"},{path:"/40.主题/3.roadmap.html",redirect:"/topic/roadmap/"},{name:"v-bff1260a",path:"/topic/experiment/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-bff1260a").then(t)}},{path:"/topic/experiment/index.html",redirect:"/topic/experiment/"},{path:"/40.主题/30.WebRTC-Experiment/0.index.html",redirect:"/topic/experiment/"},{name:"v-585d7925",path:"/archives/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-585d7925").then(t)}},{path:"/archives/index.html",redirect:"/archives/"},{path:"/@pages/archivesPage.html",redirect:"/archives/"},{name:"v-0cfcb6f6",path:"/categories/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-0cfcb6f6").then(t)}},{path:"/categories/index.html",redirect:"/categories/"},{path:"/@pages/categoriesPage.html",redirect:"/categories/"},{name:"v-10da7ea5",path:"/tags/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-10da7ea5").then(t)}},{path:"/tags/index.html",redirect:"/tags/"},{path:"/@pages/tagsPage.html",redirect:"/tags/"},{name:"v-399216a5",path:"/about/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-399216a5").then(t)}},{path:"/about/index.html",redirect:"/about/"},{path:"/about.html",redirect:"/about/"},{name:"v-4753273e",path:"/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-4753273e").then(t)}},{path:"/index.html",redirect:"/"},{name:"v-a0941456",path:"/resource/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-a0941456").then(t)}},{path:"/resource/index.html",redirect:"/resource/"},{path:"/resource.html",redirect:"/resource/"},{name:"v-73804bfb",path:"/basic/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-73804bfb").then(t)}},{path:"/basic/index.html",redirect:"/basic/"},{path:"/目录/10.basic.html",redirect:"/basic/"},{name:"v-0998f6db",path:"/advance/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-0998f6db").then(t)}},{path:"/advance/index.html",redirect:"/advance/"},{path:"/目录/20.advance.html",redirect:"/advance/"},{name:"v-3386f7db",path:"/topic/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-3386f7db").then(t)}},{path:"/topic/index.html",redirect:"/topic/"},{path:"/目录/30.topic.html",redirect:"/topic/"},{name:"v-3b65677e",path:"/example/index/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-3b65677e").then(t)}},{path:"/example/index/index.html",redirect:"/example/index/"},{path:"/示例/0.index.html",redirect:"/example/index/"},{name:"v-a7b61c28",path:"/example/plan/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-a7b61c28").then(t)}},{path:"/example/plan/index.html",redirect:"/example/plan/"},{path:"/示例/1.plan.html",redirect:"/example/plan/"},{name:"v-7a2b45a4",path:"/example/roadmap/",component:ct,beforeEnter:function(n,e,t){Object(Jn.a)("Layout","v-7a2b45a4").then(t)}},{path:"/example/roadmap/index.html",redirect:"/example/roadmap/"},{path:"/示例/3.roadmap.html",redirect:"/example/roadmap/"},{path:"*",component:ct}],dt={title:"",description:"",base:"/",headTags:[["link",{rel:"icon",href:"/img/favicon.ico"}],["meta",{name:"referrer",content:"no-referrer-when-downgrade"}],["meta",{name:"keywords",content:"webRTC学习,webRTC教程,webRTC入门"}],["link",{rel:"stylesheet",href:"//at.alicdn.com/t/font_3314748_9xij1pv3h4i.css"}],["link",{rel:"icon",href:"/img/favicon.ico",type:"image/x-icon"}],["link",{rel:"manifest",href:"/img/manifest.json"}],["meta",{name:"theme-color",content:"#008ACB"}],["meta",{name:"apple-mobile-web-app-capable",content:"yes"}],["meta",{name:"apple-mobile-web-app-status-bar-style",content:"black"}],["link",{rel:"apple-touch-icon",href:"/img/android-chrome-192x192.png"}],["link",{rel:"mask-icon",href:"/icons/safari-pinned-tab.svg",color:"#3eaf7c"}],["meta",{name:"msapplication-TileImage",content:"/icons/msapplication-icon-144x144.png"}],["meta",{name:"msapplication-TileColor",content:"#000000"}]],pages:[{title:"开始上手",frontmatter:{title:"开始上手",date:"2022-04-16T16:43:23.000Z",permalink:"/source/index/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E6%BA%90%E7%A0%81/0.index.html",relativePath:"10.源码/0.index.md",key:"v-def6137a",path:"/source/index/",headers:[{level:2,title:"WebRTC目录结构",slug:"webrtc目录结构",normalizedTitle:"webrtc目录结构",charIndex:2},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:446}],readingTime:{text:"1 min read",minutes:.175,time:10500,words:35},headersStr:"WebRTC目录结构 参考",content:"# WebRTC目录结构\n\n主目录结构：\n\n\n\n * api目录：如果我们要增加接口或者调整接口，就需要到API目录下去修改相关接口。\n * call目录：当与对端进行连接之后，同一个端的流通过Call进行管理;如果与多个对端进行连接，就会存在多个Call。\n * media目录：内部实现了编解码的逻辑处理（并没有实现编解码内部逻辑，是在Module中实现的），只是对编解码算法进行了调用控制（决定在哪调用）。\n * module目录：有很多子模块。\n * pc目录：代表与对端的连接，可以获取流，获取统计信息（上层的统一接口层）。\n\nModule目录：\n\n\n\n * audio_mixer目录：实现混音操作，比如在多人通话时候，需要对多个音频进行混合处理，这样在传输时比较方便，减少了音频流。\n * audio_processing目录：实现音频的前后处理，比如降噪、回音消除...\n * video_processing目录：实现视频的前后处理，可以添加如人脸识别等操作...\n\n\n# 参考\n\n * egege/webrtc-src: Mirror of WebRTC(https://webrtc.googlesource.com/src)\n * webrtc - Git at Google",normalizedContent:"# webrtc目录结构\n\n主目录结构：\n\n\n\n * api目录：如果我们要增加接口或者调整接口，就需要到api目录下去修改相关接口。\n * call目录：当与对端进行连接之后，同一个端的流通过call进行管理;如果与多个对端进行连接，就会存在多个call。\n * media目录：内部实现了编解码的逻辑处理（并没有实现编解码内部逻辑，是在module中实现的），只是对编解码算法进行了调用控制（决定在哪调用）。\n * module目录：有很多子模块。\n * pc目录：代表与对端的连接，可以获取流，获取统计信息（上层的统一接口层）。\n\nmodule目录：\n\n\n\n * audio_mixer目录：实现混音操作，比如在多人通话时候，需要对多个音频进行混合处理，这样在传输时比较方便，减少了音频流。\n * audio_processing目录：实现音频的前后处理，比如降噪、回音消除...\n * video_processing目录：实现视频的前后处理，可以添加如人脸识别等操作...\n\n\n# 参考\n\n * egege/webrtc-src: mirror of webrtc(https://webrtc.googlesource.com/src)\n * webrtc - git at google",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"Plan 计划",frontmatter:{title:"Plan 计划",date:"2022-04-16T16:44:07.000Z",permalink:"/source/plan/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E6%BA%90%E7%A0%81/1.plan.html",relativePath:"10.源码/1.plan.md",key:"v-31935129",path:"/source/plan/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"本章导读",frontmatter:{title:"本章导读",date:"2022-07-14T10:45:50.000Z",permalink:"/source/api/index/",categories:["源码","API"],tags:[null],readingShow:"top"},regularPath:"/10.%E6%BA%90%E7%A0%81/10.API/0.index.html",relativePath:"10.源码/10.API/0.index.md",key:"v-787191d5",path:"/source/api/index/",headers:[{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:2}],readingTime:{text:"1 min read",minutes:.05,time:3e3,words:10},headersStr:"参考",content:"# 参考\n\n * WebRTC API - Web APIs | MDN",normalizedContent:"# 参考\n\n * webrtc api - web apis | mdn",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"Roadmap 路线",frontmatter:{title:"Roadmap 路线",date:"2022-04-16T16:44:46.000Z",permalink:"/source/roadmap/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/10.%E6%BA%90%E7%A0%81/3.roadmap.html",relativePath:"10.源码/3.roadmap.md",key:"v-44e9b923",path:"/source/roadmap/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"目录结构",frontmatter:{title:"目录结构",date:"2022-07-14T10:20:45.000Z",permalink:"/source/category/",categories:["源码"],tags:[null],readingShow:"top"},regularPath:"/10.%E6%BA%90%E7%A0%81/4.%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84.html",relativePath:"10.源码/4.目录结构.md",key:"v-75b57b12",path:"/source/category/",headers:[{level:2,title:"结构概览",slug:"结构概览",normalizedTitle:"结构概览",charIndex:2},{level:2,title:"根目录",slug:"根目录",normalizedTitle:"根目录",charIndex:4007},{level:2,title:"modules目录",slug:"modules目录",normalizedTitle:"modules目录",charIndex:5495}],readingTime:{text:"4 min read",minutes:3.985,time:239100,words:797},headersStr:"结构概览 根目录 modules目录",content:"# 结构概览\n\n// tree -L 2 -d\n.\n├── api\n│   ├── adaptation\n│   ├── audio\n│   ├── audio_codecs\n│   ├── call\n│   ├── crypto\n│   ├── g3doc\n│   ├── metronome\n│   ├── neteq\n│   ├── numerics\n│   ├── rtc_event_log\n│   ├── stats\n│   ├── task_queue\n│   ├── test\n│   ├── transport\n│   ├── units\n│   ├── video\n│   ├── video_codecs\n│   └── voip\n├── audio\n│   ├── test\n│   ├── utility\n│   └── voip\n├── build_overrides\n├── call\n│   ├── adaptation\n│   └── test\n├── common_audio\n│   ├── include\n│   ├── mocks\n│   ├── resampler\n│   ├── signal_processing\n│   ├── third_party\n│   └── vad\n├── common_video\n│   ├── generic_frame_descriptor\n│   ├── h264\n│   ├── include\n│   ├── libyuv\n│   └── test\n├── data\n│   ├── audio_processing\n│   └── voice_engine\n├── docs\n│   └── native-code\n├── examples\n│   ├── aarproject\n│   ├── androidapp\n│   ├── androidjunit\n│   ├── androidnativeapi\n│   ├── androidtests\n│   ├── androidvoip\n│   ├── objc\n│   ├── objcnativeapi\n│   ├── peerconnection\n│   ├── stunprober\n│   ├── stunserver\n│   ├── turnserver\n│   └── unityplugin\n├── g3doc\n│   └── style-guide\n├── infra\n│   ├── config\n│   └── specs\n├── logging\n│   ├── g3doc\n│   └── rtc_event_log\n├── media\n│   ├── base\n│   ├── engine\n│   └── sctp\n├── modules\n│   ├── async_audio_processing\n│   ├── audio_coding\n│   ├── audio_device\n│   ├── audio_mixer\n│   ├── audio_processing\n│   ├── congestion_controller\n│   ├── desktop_capture\n│   ├── include\n│   ├── pacing\n│   ├── remote_bitrate_estimator\n│   ├── rtp_rtcp\n│   ├── third_party\n│   ├── utility\n│   ├── video_capture\n│   ├── video_coding\n│   └── video_processing\n├── net\n│   └── dcsctp\n├── p2p\n│   ├── base\n│   ├── client\n│   ├── g3doc\n│   └── stunprober\n├── pc\n│   ├── g3doc\n│   ├── scenario_tests\n│   └── test\n├── resources\n│   ├── audio_coding\n│   ├── audio_device\n│   ├── audio_processing\n│   ├── images\n│   ├── media\n│   ├── network_tester\n│   ├── remote_bitrate_estimator\n│   ├── rtp_rtcp\n│   ├── utility\n│   ├── video_coding\n│   ├── video_engine\n│   └── voice_engine\n├── rtc_base\n│   ├── containers\n│   ├── deprecated\n│   ├── experiments\n│   ├── internal\n│   ├── java\n│   ├── memory\n│   ├── network\n│   ├── numerics\n│   ├── strings\n│   ├── synchronization\n│   ├── system\n│   ├── task_utils\n│   ├── third_party\n│   ├── time\n│   ├── units\n│   └── win\n├── rtc_tools\n│   ├── audioproc_f\n│   ├── converter\n│   ├── data_channel_benchmark\n│   ├── frame_analyzer\n│   ├── network_tester\n│   ├── psnr_ssim_analyzer\n│   ├── py_event_log_analyzer\n│   ├── rtc_event_log_visualizer\n│   ├── rtp_generator\n│   ├── testing\n│   └── unpack_aecdump\n├── sdk\n│   ├── android\n│   └── objc\n├── stats\n│   └── test\n├── system_wrappers\n│   ├── include\n│   └── source\n├── test\n│   ├── android\n│   ├── fuzzers\n│   ├── gl\n│   ├── ios\n│   ├── linux\n│   ├── logging\n│   ├── mac\n│   ├── network\n│   ├── pc\n│   ├── peer_scenario\n│   ├── scenario\n│   ├── testsupport\n│   ├── time_controller\n│   └── win\n├── tools_webrtc\n│   ├── android\n│   ├── apple\n│   ├── audio_quality\n│   ├── autoroller\n│   ├── coverage\n│   ├── cpu\n│   ├── ios\n│   ├── iwyu\n│   ├── libs\n│   ├── matlab\n│   ├── mb\n│   ├── msan\n│   ├── network_emulator\n│   ├── perf\n│   ├── presubmit_checks_lib\n│   ├── sanitizers\n│   ├── sslroots\n│   ├── ubsan\n│   ├── version_updater\n│   ├── video_quality_toolchain\n│   └── vim\n└── video\n    ├── adaptation\n    ├── end_to_end_tests\n    ├── g3doc\n    └── test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n\n\n\n# 根目录\n\n目录                功能                                                          备注\napi               WebRTC接口层，浏览器都是通过该接口调用WebRTC,包括 DataChannel, MediaStream,   \n                  SDP相关的接口\ncall              数据流的管理层，Call代表同一个点的所有数据的流入流出,存放的是 WebRTC “呼叫（Call）”         \n                  相关逻辑层的代码。\nvideo             与视频相关的逻辑,视频逻辑层及视频引擎层的相关的代码。视频数据逻辑上的发送，接收等代码。                \ncommon_video      视频算法相关,存放了视频算法相关的常用工具，如libyuv, sps/pps分析器，I420缓冲器等。         \naudio             与音频相关的逻辑,音频数据逻辑上的发送，接收等代码。                                  \ncommon_audio      音频算法相关,存放一些音频的基本算法。包括环形队列，博利叶算法，滤波器等。                       \nmedia             与多媒体相关的逻辑处理，如编解码的逻辑处理                                       \nlogging           日志相关                                                        \nmodules           最重要的目录，子模块                                                  \npc                Peer Connection连接相关的逻辑,存放一些业务逻辑层的代码。如 channel, session等     \np2p               端对端相关代码，stun, turn                                          \nrtc_base          基础代码，如线程，锁相关的统一接口代码                                         \nrtc_tools         音视频分析相关的工具代码                                                \ntools_webrtc      WebRTC测试相关的工具代码，如网络模拟器                                      \nsystem_wrappers   与具体操作系统相关的代码。如CPU特性，原子操作等                                   \nstats             存放各种数据统计相关的类                                                \nsdk               存放Android和IOS层代码。如视频的采集，渲染等                                 \n\n\n# modules目录\n\n目录                         功能               备注\naudio_coding               音频编解码相关代码        audio_coding，是和编解码逻辑相关的，会用编解码，这里的audio_coding它是编解码器，都是放在audio_coding这个目录下。\naudio_device               视频采集与音频播放相关代码    audio_device它是和设备相关的，它做了一个区分，安卓和IOS放在sdk下面了，它相应的一些代码移到sdk里面了，在以前的webrtc版本\n                                            ，所有的设备都是 放在audio_device里面\n                                            ，包括我们的windows和MAC下的以及Linux下的，都是在audio_device这个目录下。\naudio_mixer                混音相关代码           audio_mixer,就是混音相关的，混音就好比开会时多人实时互动，比如四个人同时在说话，就要给它混在一起，这样在传输的时候就比较方便，这个减少了音频流，所以这个混音相关的就放在audio_mixer里面。\naudio_processing           音频前后处理相关代码       audio_processing就是音频的前处理后处理，音频的前处理后处理就好比回音消除、降噪、增益等，都是放在audio_processing里面。这个目录里面又分了很多子目录，在后面你就\n                                            大体的知道这个相关的在这个目录下。以及在这个目录下再找子目录\nbitrate_controller         码率控制相关代码         bitrate_controller,这个是码流控制的，比如说控制这个码流，视频的码流是500k还是1M。这个码流的控制。如果想知道相关的码流他是怎么控制的\n                                            ，那么可以到这里去看。\ncongestion_controller      流控制相关代码          -congestion_controller，就是流量控制，当我能检测到网络流量比较高的时候，我们要做一些流量控制，防止这个网络包将带宽打死，具体怎么控制就是在这里做的相关的逻辑。所以如果我要\n                                            了解流量控制相关的，就到这个目录下面去找。\ndesktop_capture            桌面采集相关代码         --\npacing                     码率探测及平滑处理相关代码    pacing的作用是码率的侦测和平滑处理，我首先要检测到音频视频的码率是怎样的，做到之后我们要做到一个平滑的处理，我们不能让他一下子就发送出去，应该对他做一下平滑，比如有时候是10k有时候是500k,我们让他平均一下。\nremote_bitrate_estimator   远端码率估算相关的代码      emote_bitrate_estimator的作用是远程码率评估，我远端能接收的带宽是多少，一个是我本地的带宽，一个是远端的带宽，不光我能发多少还有对方能收多少，所以要有一个远端的码率的评估，这是放在remote_bitrate_estimator目录下\nrtc_rtcp                   rtp/rtcp协议相关代码   --\nvideo_capture              视频采集相关代码         video_capture我捕获视频的相关的代码，放在video_capture里面\nvideo_coding               视频编解码相关代码        视频的编码，如H264,VP 8,VP 9，等，这个编码器都是放在video_coding里面。\nvideo_processing           视频前后处理相关的代码      video_processing，就是视频的前处理和后处理，如视频帧的增强，检测，如果我们增加人脸识别可以放到video_processing这个目录下。",normalizedContent:"# 结构概览\n\n// tree -l 2 -d\n.\n├── api\n│   ├── adaptation\n│   ├── audio\n│   ├── audio_codecs\n│   ├── call\n│   ├── crypto\n│   ├── g3doc\n│   ├── metronome\n│   ├── neteq\n│   ├── numerics\n│   ├── rtc_event_log\n│   ├── stats\n│   ├── task_queue\n│   ├── test\n│   ├── transport\n│   ├── units\n│   ├── video\n│   ├── video_codecs\n│   └── voip\n├── audio\n│   ├── test\n│   ├── utility\n│   └── voip\n├── build_overrides\n├── call\n│   ├── adaptation\n│   └── test\n├── common_audio\n│   ├── include\n│   ├── mocks\n│   ├── resampler\n│   ├── signal_processing\n│   ├── third_party\n│   └── vad\n├── common_video\n│   ├── generic_frame_descriptor\n│   ├── h264\n│   ├── include\n│   ├── libyuv\n│   └── test\n├── data\n│   ├── audio_processing\n│   └── voice_engine\n├── docs\n│   └── native-code\n├── examples\n│   ├── aarproject\n│   ├── androidapp\n│   ├── androidjunit\n│   ├── androidnativeapi\n│   ├── androidtests\n│   ├── androidvoip\n│   ├── objc\n│   ├── objcnativeapi\n│   ├── peerconnection\n│   ├── stunprober\n│   ├── stunserver\n│   ├── turnserver\n│   └── unityplugin\n├── g3doc\n│   └── style-guide\n├── infra\n│   ├── config\n│   └── specs\n├── logging\n│   ├── g3doc\n│   └── rtc_event_log\n├── media\n│   ├── base\n│   ├── engine\n│   └── sctp\n├── modules\n│   ├── async_audio_processing\n│   ├── audio_coding\n│   ├── audio_device\n│   ├── audio_mixer\n│   ├── audio_processing\n│   ├── congestion_controller\n│   ├── desktop_capture\n│   ├── include\n│   ├── pacing\n│   ├── remote_bitrate_estimator\n│   ├── rtp_rtcp\n│   ├── third_party\n│   ├── utility\n│   ├── video_capture\n│   ├── video_coding\n│   └── video_processing\n├── net\n│   └── dcsctp\n├── p2p\n│   ├── base\n│   ├── client\n│   ├── g3doc\n│   └── stunprober\n├── pc\n│   ├── g3doc\n│   ├── scenario_tests\n│   └── test\n├── resources\n│   ├── audio_coding\n│   ├── audio_device\n│   ├── audio_processing\n│   ├── images\n│   ├── media\n│   ├── network_tester\n│   ├── remote_bitrate_estimator\n│   ├── rtp_rtcp\n│   ├── utility\n│   ├── video_coding\n│   ├── video_engine\n│   └── voice_engine\n├── rtc_base\n│   ├── containers\n│   ├── deprecated\n│   ├── experiments\n│   ├── internal\n│   ├── java\n│   ├── memory\n│   ├── network\n│   ├── numerics\n│   ├── strings\n│   ├── synchronization\n│   ├── system\n│   ├── task_utils\n│   ├── third_party\n│   ├── time\n│   ├── units\n│   └── win\n├── rtc_tools\n│   ├── audioproc_f\n│   ├── converter\n│   ├── data_channel_benchmark\n│   ├── frame_analyzer\n│   ├── network_tester\n│   ├── psnr_ssim_analyzer\n│   ├── py_event_log_analyzer\n│   ├── rtc_event_log_visualizer\n│   ├── rtp_generator\n│   ├── testing\n│   └── unpack_aecdump\n├── sdk\n│   ├── android\n│   └── objc\n├── stats\n│   └── test\n├── system_wrappers\n│   ├── include\n│   └── source\n├── test\n│   ├── android\n│   ├── fuzzers\n│   ├── gl\n│   ├── ios\n│   ├── linux\n│   ├── logging\n│   ├── mac\n│   ├── network\n│   ├── pc\n│   ├── peer_scenario\n│   ├── scenario\n│   ├── testsupport\n│   ├── time_controller\n│   └── win\n├── tools_webrtc\n│   ├── android\n│   ├── apple\n│   ├── audio_quality\n│   ├── autoroller\n│   ├── coverage\n│   ├── cpu\n│   ├── ios\n│   ├── iwyu\n│   ├── libs\n│   ├── matlab\n│   ├── mb\n│   ├── msan\n│   ├── network_emulator\n│   ├── perf\n│   ├── presubmit_checks_lib\n│   ├── sanitizers\n│   ├── sslroots\n│   ├── ubsan\n│   ├── version_updater\n│   ├── video_quality_toolchain\n│   └── vim\n└── video\n    ├── adaptation\n    ├── end_to_end_tests\n    ├── g3doc\n    └── test\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n\n\n\n# 根目录\n\n目录                功能                                                          备注\napi               webrtc接口层，浏览器都是通过该接口调用webrtc,包括 datachannel, mediastream,   \n                  sdp相关的接口\ncall              数据流的管理层，call代表同一个点的所有数据的流入流出,存放的是 webrtc “呼叫（call）”         \n                  相关逻辑层的代码。\nvideo             与视频相关的逻辑,视频逻辑层及视频引擎层的相关的代码。视频数据逻辑上的发送，接收等代码。                \ncommon_video      视频算法相关,存放了视频算法相关的常用工具，如libyuv, sps/pps分析器，i420缓冲器等。         \naudio             与音频相关的逻辑,音频数据逻辑上的发送，接收等代码。                                  \ncommon_audio      音频算法相关,存放一些音频的基本算法。包括环形队列，博利叶算法，滤波器等。                       \nmedia             与多媒体相关的逻辑处理，如编解码的逻辑处理                                       \nlogging           日志相关                                                        \nmodules           最重要的目录，子模块                                                  \npc                peer connection连接相关的逻辑,存放一些业务逻辑层的代码。如 channel, session等     \np2p               端对端相关代码，stun, turn                                          \nrtc_base          基础代码，如线程，锁相关的统一接口代码                                         \nrtc_tools         音视频分析相关的工具代码                                                \ntools_webrtc      webrtc测试相关的工具代码，如网络模拟器                                      \nsystem_wrappers   与具体操作系统相关的代码。如cpu特性，原子操作等                                   \nstats             存放各种数据统计相关的类                                                \nsdk               存放android和ios层代码。如视频的采集，渲染等                                 \n\n\n# modules目录\n\n目录                         功能               备注\naudio_coding               音频编解码相关代码        audio_coding，是和编解码逻辑相关的，会用编解码，这里的audio_coding它是编解码器，都是放在audio_coding这个目录下。\naudio_device               视频采集与音频播放相关代码    audio_device它是和设备相关的，它做了一个区分，安卓和ios放在sdk下面了，它相应的一些代码移到sdk里面了，在以前的webrtc版本\n                                            ，所有的设备都是 放在audio_device里面\n                                            ，包括我们的windows和mac下的以及linux下的，都是在audio_device这个目录下。\naudio_mixer                混音相关代码           audio_mixer,就是混音相关的，混音就好比开会时多人实时互动，比如四个人同时在说话，就要给它混在一起，这样在传输的时候就比较方便，这个减少了音频流，所以这个混音相关的就放在audio_mixer里面。\naudio_processing           音频前后处理相关代码       audio_processing就是音频的前处理后处理，音频的前处理后处理就好比回音消除、降噪、增益等，都是放在audio_processing里面。这个目录里面又分了很多子目录，在后面你就\n                                            大体的知道这个相关的在这个目录下。以及在这个目录下再找子目录\nbitrate_controller         码率控制相关代码         bitrate_controller,这个是码流控制的，比如说控制这个码流，视频的码流是500k还是1m。这个码流的控制。如果想知道相关的码流他是怎么控制的\n                                            ，那么可以到这里去看。\ncongestion_controller      流控制相关代码          -congestion_controller，就是流量控制，当我能检测到网络流量比较高的时候，我们要做一些流量控制，防止这个网络包将带宽打死，具体怎么控制就是在这里做的相关的逻辑。所以如果我要\n                                            了解流量控制相关的，就到这个目录下面去找。\ndesktop_capture            桌面采集相关代码         --\npacing                     码率探测及平滑处理相关代码    pacing的作用是码率的侦测和平滑处理，我首先要检测到音频视频的码率是怎样的，做到之后我们要做到一个平滑的处理，我们不能让他一下子就发送出去，应该对他做一下平滑，比如有时候是10k有时候是500k,我们让他平均一下。\nremote_bitrate_estimator   远端码率估算相关的代码      emote_bitrate_estimator的作用是远程码率评估，我远端能接收的带宽是多少，一个是我本地的带宽，一个是远端的带宽，不光我能发多少还有对方能收多少，所以要有一个远端的码率的评估，这是放在remote_bitrate_estimator目录下\nrtc_rtcp                   rtp/rtcp协议相关代码   --\nvideo_capture              视频采集相关代码         video_capture我捕获视频的相关的代码，放在video_capture里面\nvideo_coding               视频编解码相关代码        视频的编码，如h264,vp 8,vp 9，等，这个编码器都是放在video_coding里面。\nvideo_processing           视频前后处理相关的代码      video_processing，就是视频的前处理和后处理，如视频帧的增强，检测，如果我们增加人脸识别可以放到video_processing这个目录下。",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"开始上手",frontmatter:{title:"开始上手",date:"2022-04-16T16:43:23.000Z",permalink:"/basic/index/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/0.index.html",relativePath:"20.基础/0.index.md",key:"v-7054a95a",path:"/basic/index/",headers:[{level:2,title:"目标",slug:"目标",normalizedTitle:"目标",charIndex:2},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:79}],readingTime:{text:"1 min read",minutes:.265,time:15900,words:53},headersStr:"目标 参考",content:"# 目标\n\n * 本文是在书籍《WebRTC 权威指南》的基础上进行扩展和深入的内容，分为概要、应用、媒体、信令、数据通道、协议、规范、安全等章节。\n\n\n# 参考\n\n * WebRTC 1.0: Real-Time Communication Between Browsers\n * Identifiers for WebRTC's Statistics API\n * w3c/webrtc-pc: WebRTC 1.0 API\n * w3c/webrtc-stats: WebRTC Statistics\n * WebRTC API - Web APIs | MDN\n * webrtc-book-cn | WebRTC 实时通信\n * RFC中文目录\n * WEB端即时通讯开发 - 淘帖 - 即时通讯开发者社区!\n * WebRTC 学习指南",normalizedContent:"# 目标\n\n * 本文是在书籍《webrtc 权威指南》的基础上进行扩展和深入的内容，分为概要、应用、媒体、信令、数据通道、协议、规范、安全等章节。\n\n\n# 参考\n\n * webrtc 1.0: real-time communication between browsers\n * identifiers for webrtc's statistics api\n * w3c/webrtc-pc: webrtc 1.0 api\n * w3c/webrtc-stats: webrtc statistics\n * webrtc api - web apis | mdn\n * webrtc-book-cn | webrtc 实时通信\n * rfc中文目录\n * web端即时通讯开发 - 淘帖 - 即时通讯开发者社区!\n * webrtc 学习指南",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"Plan 计划",frontmatter:{title:"Plan 计划",date:"2022-04-16T16:44:07.000Z",permalink:"/basic/plan/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/1.plan.html",relativePath:"20.基础/1.plan.md",key:"v-4911e6f6",path:"/basic/plan/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"本章导读",frontmatter:{title:"本章导读",date:"2022-06-27T10:35:50.000Z",permalink:"/basic/webrtc_api/index/",categories:["基础","WebRTC API"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/10.MDN:%20WebRTC%20API/0.index.html",relativePath:"20.基础/10.MDN: WebRTC API/0.index.md",key:"v-49f15b7d",path:"/basic/webrtc_api/index/",headers:[{level:2,title:"目标",slug:"目标",normalizedTitle:"目标",charIndex:2},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:207}],readingTime:{text:"1 min read",minutes:.175,time:10500,words:35},headersStr:"目标 参考",content:"# 目标\n\n本章将 MDN 中的 WebRTC API 文档的英文文档 翻译为中文文档。\n\n * 英文基础较好的，建议直接看英文文档。\n * 这部分已经有中文文档，为什么还要再翻译一遍？MDN 上中文文档虽然已经翻译的比较好，但是相对于英文文档，有较多内容丢失或者缺乏翻译，因此另做翻译，已做梗概学习和便捷翻阅之用。\n * 此文档对源文档有所扩展；部分语句有人工润色，可能与源文档意思有所偏差，敬请指正。\n\n\n# 参考\n\n * WebRTC API - Web APIs | MDN\n * WebRTC API - Web API 接口参考 | MDN",normalizedContent:"# 目标\n\n本章将 mdn 中的 webrtc api 文档的英文文档 翻译为中文文档。\n\n * 英文基础较好的，建议直接看英文文档。\n * 这部分已经有中文文档，为什么还要再翻译一遍？mdn 上中文文档虽然已经翻译的比较好，但是相对于英文文档，有较多内容丢失或者缺乏翻译，因此另做翻译，已做梗概学习和便捷翻阅之用。\n * 此文档对源文档有所扩展；部分语句有人工润色，可能与源文档意思有所偏差，敬请指正。\n\n\n# 参考\n\n * webrtc api - web apis | mdn\n * webrtc api - web api 接口参考 | mdn",charsets:{cjk:!0},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"WebRTC API",frontmatter:{title:"WebRTC API",date:"2022-06-27T10:39:23.000Z",permalink:"/basic/webrtc_api/basic/",categories:["基础",{MDN:"WebRTC API"}],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/10.MDN:%20WebRTC%20API/10.basic.html",relativePath:"20.基础/10.MDN: WebRTC API/10.basic.md",key:"v-6d8ced93",path:"/basic/webrtc_api/basic/",headers:[{level:2,title:"互操作性",slug:"互操作性",normalizedTitle:"互操作性",charIndex:227},{level:2,title:"WebRTC 概念和用法",slug:"webrtc-概念和用法",normalizedTitle:"webrtc 概念和用法",charIndex:520},{level:2,title:"WebRTC 参考",slug:"webrtc-参考",normalizedTitle:"webrtc 参考",charIndex:1065},{level:3,title:"连接设置和管理",slug:"连接设置和管理",normalizedTitle:"连接设置和管理",charIndex:1122},{level:4,title:"接口",slug:"接口",normalizedTitle:"接口",charIndex:634},{level:4,title:"字典",slug:"字典",normalizedTitle:"字典",charIndex:1136},{level:4,title:"事件",slug:"事件",normalizedTitle:"事件",charIndex:1406},{level:4,title:"类型",slug:"类型",normalizedTitle:"类型",charIndex:881},{level:3,title:"身份和安全",slug:"身份和安全",normalizedTitle:"身份和安全",charIndex:4986},{level:3,title:"电话",slug:"电话",normalizedTitle:"电话",charIndex:105},{level:4,title:"接口",slug:"接口-2",normalizedTitle:"接口",charIndex:634},{level:4,title:"事件",slug:"事件-2",normalizedTitle:"事件",charIndex:1406},{level:2,title:"指南",slug:"指南",normalizedTitle:"指南",charIndex:5654},{level:2,title:"教程",slug:"教程",normalizedTitle:"教程",charIndex:5968},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:1072}],excerpt:"<p>WebRTC（Web 实时通信）是一种技术，它使 Web 应用程序和站点能够捕获和可选地流式传输音频和/或视频媒体，以及在<strong>浏览器之间交换任意数据而无需中介</strong>。包含 WebRTC 的一组标准使得<strong>共享数据和执行点对点电话会议</strong>成为可能，而无需用户安装插件或任何其他第三方软件。</p>\n<p>WebRTC 由几个相互关联的 <strong>API 和协议组成</strong>，它们协同工作以实现这一目标。您将在此处找到的文档将帮助您了解 WebRTC 的基础知识、如何设置和使用数据和媒体连接等。</p>\n",readingTime:{text:"3 min read",minutes:2.53,time:151799.99999999997,words:506},headersStr:"互操作性 WebRTC 概念和用法 WebRTC 参考 连接设置和管理 接口 字典 事件 类型 身份和安全 电话 接口 事件 指南 教程 参考",content:"WebRTC（Web 实时通信）是一种技术，它使 Web 应用程序和站点能够捕获和可选地流式传输音频和/或视频媒体，以及在浏览器之间交换任意数据而无需中介。包含 WebRTC 的一组标准使得共享数据和执行点对点电话会议成为可能，而无需用户安装插件或任何其他第三方软件。\n\nWebRTC 由几个相互关联的 API 和协议组成，它们协同工作以实现这一目标。您将在此处找到的文档将帮助您了解 WebRTC 的基础知识、如何设置和使用数据和媒体连接等。\n\n\n# 互操作性\n\n由于 WebRTC 的实现仍在不断发展，并且由于每个浏览器对编解码器和 WebRTC 功能的支持程度不同，因此在开始编写代码之前，您应该强烈考虑使用Google 提供的 Adapter.js 库。\n\nAdapter.js 使用 shims 和 polyfill 来消除支持它的环境中 WebRTC 实现之间的差异。Adapter.js 还处理前缀和其他命名差异，以使整个 WebRTC 开发过程更容易，具有更广泛兼容的结果。该库也可作为 NPM 包使用。\n\n要了解有关 Adapter.js 的更多信息，请参阅使用 WebRTC adapter.js 提高兼容性。\n\n\n# WebRTC 概念和用法\n\nWebRTC有多种用途；与 Media Capture 和 Streams API 一起，它们为 Web 提供强大的多媒体功能，包括支持音频和视频会议、文件交换、屏幕共享、身份管理以及与传统电话系统的接口，包括支持发送 DTMF（按键音）拨号）信号。对等点之间的连接可以在不需要任何特殊驱动程序或插件的情况下进行，并且通常可以在没有任何中间服务器的情况下进行。\n\n两个对等点之间的连接由RTCPeerConnection接口表示。一旦建立并打开连接RTCPeerConnection，就可以将媒体流MediaStream和数据通道RTCDataChannel添加到连接中。\n\n媒体流可以由任意数量的媒体信息轨道组成；由基于MediaStreamTrack界面的对象表示的轨道可能包含多种媒体数据类型中的一种，包括音频、视频和文本（例如字幕甚至章节名称）。大多数流至少包含一个音频轨道，也可能包含一个视频轨道，可用于发送和接收实时媒体或存储的媒体信息（例如流媒体电影）。\n\n您还可以使用两个对等方之间的连接来使用RTCDataChannel接口交换任意二进制数据。这可以用于反向通道信息、元数据交换、游戏状态包、文件传输，甚至可以作为数据传输的主要通道。\n\n\n# WebRTC 参考\n\n因为 WebRTC 提供了协同工作来完成各种任务的接口，所以我们按类别划分了参考。\n\n\n# 连接设置和管理\n\n这些接口、字典和类型用于设置、打开和管理 WebRTC 连接。包括表示对等媒体连接的接口、数据通道和在交换有关每个对等方的能力信息时使用的接口，以便为双向媒体连接选择最佳可能配置。\n\n# 接口\n\n * RTCPeerConnection:表示本地计算机和远程对等方之间的 WebRTC 连接。它用于处理两个对等点之间的有效数据流。\n\n * RTCDataChannel:表示连接的两个对等方之间的双向数据通道。\n\n * RTCDataChannelEvent:表示将 RTCDataChannel 附加到 RTCPeerConnection 时发生的事件。使用此接口发送的唯一事件是 datachannel.\n\n * RTCSessionDescription:表示会话的参数。每一个都RTCSessionDescription包含一个描述type，表明它描述 offer/answer 协商过程的哪一部分以及会话的SDP描述符。\n\n * RTCStatsReport：提供连接或连接上单个轨道的详细统计信息；可以通过调用获取报告RTCPeerConnection.getStats()。可以在WebRTC Statistics API中找到有关使用 WebRTC 统计信息的详细信息。\n\n * RTCIceCandidate:表示一个候选 Interactive Connectivity Establishment ( ICE ) 服务器，用于建立一个RTCPeerConnection。\n\n * RTCIceTransport:表示有关ICE传输的信息。\n\n * RTCPeerConnectionIceEvent:表示与目标相关的 ICE 候选人发生的事件，通常是RTCPeerConnection. 只有一个事件属于这种类型：icecandidate。\n\n * RTCRtpSender:管理 RTCPeerConnection 中 MediaStreamTrack 上的数据的编码和传输。\n\n * RTCRtpReceiver:管理 RTCPeerConnection 中 MediaStreamTrack 上数据的接收和解码。\n\n * RTCTrackEvent:track事件的接口，表示将 RTCRtpReceiver对象添加到一个RTCPeerConnection对象，表示新创建的 MediaStreamTrack 对象添加到 RTCPeerConnection。\n\n * RTCSctpTransport:提供描述流控制传输协议 ( SCTP ) 传输的信息，还提供一种访问底层数据报传输层安全性 ( DTLS ) 传输的方法，在该传输 RTCPeerConnection 上发送和接收所有数据通道的 SCTP 数据包。\n\nSCTP 和 DTLS\n\nSCTP（流控制传输协议，Stream Control Transmission Protocol）是一种用于传输协议的IETF标准，它支持可靠、有序的消息传输，同时提供拥塞控制、多宿主和其他功能，以提高连接的可靠性和稳定性。它用于通过 Internet 发送传统电话，但也用于WebRTC数据。\n\nDTLS，数据报传输层安全性协议 (DTLS，Datagram Transport Layer Security) 是一种用于保护基于数据报的通信的协议。它基于以流为中心的传输层安全性协议 (TLS，Transport Layer Security)，提供类似级别的安全性。作为一种数据报协议，DTLS 不保证消息传递的顺序，甚至根本不保证消息将被传递。然而，DTLS 也获得了数据报协议的好处。特别是较低的开销和减少的延迟。这些功能对于 DTLS 发挥作用的最常见领域之一特别有用：WebRTC。所有与 WebRTC 相关的协议都需要使用 DTLS 对其通信进行加密；这包括 SCTP、SRTP 和 STUN。\n\n# 字典\n\n * RTCIceServer:定义如何连接到单个ICE服务器（例如STUN或TURN服务器）。\n\n * RTCRtpContributingSource:包含有关给定贡献源 (CSRC) 的信息，包括该源贡献的数据包的最近播放时间。\n\nCSRC\n\nCSRC: A source of a stream of RTP packets that has contributed to the combined stream produced by an RTP mixer (see below). The mixer inserts a list of the SSRC identifiers of the sources that contributed to the generation of a particular packet into the RTP header of that packet. This list is called the CSRC list.\n\n贡献源(CSRC)标识符(32bits)：每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源。 应用场景：多路混音、混流时使用，多人通信时，将音频进行混音后，其贡献者有多人，每一个的ssrc都放入一个CSRC当中去\n\n# 事件\n\n * bufferedamountlow：数据通道当前缓冲的数据量（如其 bufferedAmount 属性所示）已减少到等于或低于通道的最小缓冲数据大小，如 bufferedAmountLowThreshold 中所指定.\n\n * close：数据通道已完成关闭过程，现在处于closed状态。它的底层数据传输此时完全关闭。您可以通过监视 closing 事件在关闭完成之前收到通知。\n\n * closing:RTCDataChannel已经过渡到 closing 状态，closing表示即将关闭。您可以通过监视 close 事件来检测关闭过程的完成。\n\n * connectionstatechange:可在 connectionState 中访问的连接状态已发生更改。\n\n * datachannel:新的 RTCDataChannel 在远程对等方打开新数据通道后可用。此事件的类型是 RTCDataChannelEvent。\n\n * error:RTCErrorEvent 表示数据通道发生错误。\n\n * error：表示在 RTCDtlsTransport 上发生 RTCErrorEvent 错误。此错误将是 dtls-failure 或 fingerprint-failure。\n\n * gatheringstatechange：RTCIceTransport 的 gathering 状态发生了变化。\n\n * icecandidate：RTCPeerConnectionIceEvent每当本地设备识别出需要通过调用将其添加到本地对等方的新 ICE 候选者时发送setLocalDescription()。\n\n * icecandidateerror：表示收集 ICE 候选项时发生RTCPeerConnectionIceErrorEvent错误。\n\n * iceconnectionstatechange：RTCPeerConnection 当其 ICE 连接的状态（在iceconnectionstate属性中找到）发生更改时发送到。\n\n * icegatheringstatechange：RTCPeerConnection 当它的 ICE 收集状态（在icegatheringstate属性中发现）发生变化时发送。\n\n * message：在数据通道上收到一条消息。该事件的类型为 MessageEvent。\n\n * negotiationneeded：调用 setLocalDescription() 后通知RTCPeerConnection它需要通过调用 createOffer() 来执行会话协商。\n\n * open：RTCDataChannel 的基础数据传输已成功打开或重新打开。\n\n * selectedcandidatepairchange：当前选定的一对 ICE 候选对象已因 RTCIceTransport 发生变化时触发事件。\n\n * track：在成功协商媒体流之后，将新轨道添加到 RTCPeerConnection 时发送 RTCTrackEvent 类型的 track 事件。\n\n * signalingstatechange：当 signalingstate 改变时发送到对等连接。这是调用 setLocalDescription()或 setRemoteDescription() 的结果。\n\n * statechange：RTCDtlsTransport 的状态发生了变化。\n\n * statechange：RTCIceTransport 的状态发生了变化。\n\n * statechange：RTCSctpTransport 的状态发生了变化。\n\n# 类型\n\n * RTCSctpTransport.state：指示 RTCSctpTransport 实例的状态。\n\n\n# 身份和安全\n\n这些 API 用于管理用户身份和安全性，以便对用户进行连接身份验证。\n\n * RTCIdentityProvider：使用户代理能够请求生成或验证身份断言。\n\n * RTCIdentityAssertion：表示当前连接的远程对等方的身份。如果尚未设置和验证对等点，则此接口返回null。一经设置，不可更改。\n\n * RTCIdentityProviderRegistrar：注册身份提供者 (idP， identity provider)。\n\n * RTCCertificate：表示 RTCPeerConnection 用于身份验证的证书。\n\n\n# 电话\n\n这些接口和事件与与公共交换电话网络 (PTSN) 的交互有关。它们主要用于通过网络向远程对等方发送音调拨号声音或代表这些音调的数据包。\n\n# 接口\n\n * RTCDTMFSender：管理 RTCPeerConnection 的双音多频 (DTMF，Dual-Tone Multi-Frequency) 信号的编码和传输。\n\n * RTCDTMFToneChangeEvent：由 tonechange 事件用来指示 DTMF 音已开始或结束。此事件不会冒泡（除非另有说明）且不可取消（除非另有说明）。\n\n# 事件\n\ntonechange：一个新的 DTMF 音已经开始通过连接播放，或者 RTCDTMFSender 中的 toneBuffer 中的最后一个音已经发送并且缓冲区现在是空的。事件的类型是 RTCDTMFToneChangeEvent。\n\n\n# 指南\n\n * WebRTC协议简介：本文介绍了构建 WebRTC API 的协议。\n\n * WebRTC 连接性：WebRTC 连接如何工作以及如何一起使用各种协议和接口来构建强大的通信应用程序的指南。\n\n * WebRTC 会话的生命周期：WebRTC 允许您将任意数据、音频或视频（或其任意组合）的对等通信构建到浏览器应用程序中。在本文中，我们将了解 WebRTC 会话的生命周期，从建立连接一直到在不再需要连接时关闭连接。\n\n * 建立联系：完美的协商模式：完美协商是一种辅导您的信号处理过程遵循的设计模式，它提供了协商的透明度，同时允许双方成为提供者或回答者，而无需大量编码来区分两者。\n\n * 信令和双向视频通话：一个教程和示例，它转换前面的示例创建基于 WebSocket 的聊天系统，并添加参与者之间打开视频通话的支持。聊天服务器的 WebSocket 连接用于 WebRTC 信令。\n\n * WebRTC 使用的编解码器：WebRTC 要求浏览器支持的编解码器以及各种流行浏览器支持的可选编解码器指南。包括一份指南，可帮助您选择最适合您需求的编解码器。\n\n * 使用 WebRTC 数据通道：本指南介绍了如何使用对等连接和关联 RTCDataChannel 在两个对等点之间交换任意数据。\n\n * 将 DTMF 与 WebRTC 结合使用：WebRTC 支持与链接到老式电话系统的网关进行交互，包括支持使用该 RTCDTMFSender 接口发送 DTMF 音调。本指南展示了如何执行此操作。\n\n\n# 教程\n\n * 使用 WebRTC adapter.js 提高兼容性：WebRTC 组织在 GitHub 上提供了 WebRTC 适配器，以解决不同浏览器的 WebRTC 实现中的兼容性问题。适配器是一个 JavaScript shim，它允许将您的代码写入规范，以便它在所有支持 WebRTC 的浏览器中“正常工作”。\n\n * 一个简单的 RTCDataChannel 示例：该RTCDataChannel实例可让您在两个对等方之间打开一个通道，您可以通过该通道发送和接收任意数据。该 API 有意与WebSocket API相似，因此可以为每个 API 使用相同的编程模型。\n\n * 使用 Peer.js 构建连接互联网的电话：本教程是关于如何使用 Peer.js 构建通话的分步指南。\n\n\n# 参考\n\n * WebRTC API - Web APIs | MDN\n * WebRTC API - Web API 接口参考 | MDN",normalizedContent:"webrtc（web 实时通信）是一种技术，它使 web 应用程序和站点能够捕获和可选地流式传输音频和/或视频媒体，以及在浏览器之间交换任意数据而无需中介。包含 webrtc 的一组标准使得共享数据和执行点对点电话会议成为可能，而无需用户安装插件或任何其他第三方软件。\n\nwebrtc 由几个相互关联的 api 和协议组成，它们协同工作以实现这一目标。您将在此处找到的文档将帮助您了解 webrtc 的基础知识、如何设置和使用数据和媒体连接等。\n\n\n# 互操作性\n\n由于 webrtc 的实现仍在不断发展，并且由于每个浏览器对编解码器和 webrtc 功能的支持程度不同，因此在开始编写代码之前，您应该强烈考虑使用google 提供的 adapter.js 库。\n\nadapter.js 使用 shims 和 polyfill 来消除支持它的环境中 webrtc 实现之间的差异。adapter.js 还处理前缀和其他命名差异，以使整个 webrtc 开发过程更容易，具有更广泛兼容的结果。该库也可作为 npm 包使用。\n\n要了解有关 adapter.js 的更多信息，请参阅使用 webrtc adapter.js 提高兼容性。\n\n\n# webrtc 概念和用法\n\nwebrtc有多种用途；与 media capture 和 streams api 一起，它们为 web 提供强大的多媒体功能，包括支持音频和视频会议、文件交换、屏幕共享、身份管理以及与传统电话系统的接口，包括支持发送 dtmf（按键音）拨号）信号。对等点之间的连接可以在不需要任何特殊驱动程序或插件的情况下进行，并且通常可以在没有任何中间服务器的情况下进行。\n\n两个对等点之间的连接由rtcpeerconnection接口表示。一旦建立并打开连接rtcpeerconnection，就可以将媒体流mediastream和数据通道rtcdatachannel添加到连接中。\n\n媒体流可以由任意数量的媒体信息轨道组成；由基于mediastreamtrack界面的对象表示的轨道可能包含多种媒体数据类型中的一种，包括音频、视频和文本（例如字幕甚至章节名称）。大多数流至少包含一个音频轨道，也可能包含一个视频轨道，可用于发送和接收实时媒体或存储的媒体信息（例如流媒体电影）。\n\n您还可以使用两个对等方之间的连接来使用rtcdatachannel接口交换任意二进制数据。这可以用于反向通道信息、元数据交换、游戏状态包、文件传输，甚至可以作为数据传输的主要通道。\n\n\n# webrtc 参考\n\n因为 webrtc 提供了协同工作来完成各种任务的接口，所以我们按类别划分了参考。\n\n\n# 连接设置和管理\n\n这些接口、字典和类型用于设置、打开和管理 webrtc 连接。包括表示对等媒体连接的接口、数据通道和在交换有关每个对等方的能力信息时使用的接口，以便为双向媒体连接选择最佳可能配置。\n\n# 接口\n\n * rtcpeerconnection:表示本地计算机和远程对等方之间的 webrtc 连接。它用于处理两个对等点之间的有效数据流。\n\n * rtcdatachannel:表示连接的两个对等方之间的双向数据通道。\n\n * rtcdatachannelevent:表示将 rtcdatachannel 附加到 rtcpeerconnection 时发生的事件。使用此接口发送的唯一事件是 datachannel.\n\n * rtcsessiondescription:表示会话的参数。每一个都rtcsessiondescription包含一个描述type，表明它描述 offer/answer 协商过程的哪一部分以及会话的sdp描述符。\n\n * rtcstatsreport：提供连接或连接上单个轨道的详细统计信息；可以通过调用获取报告rtcpeerconnection.getstats()。可以在webrtc statistics api中找到有关使用 webrtc 统计信息的详细信息。\n\n * rtcicecandidate:表示一个候选 interactive connectivity establishment ( ice ) 服务器，用于建立一个rtcpeerconnection。\n\n * rtcicetransport:表示有关ice传输的信息。\n\n * rtcpeerconnectioniceevent:表示与目标相关的 ice 候选人发生的事件，通常是rtcpeerconnection. 只有一个事件属于这种类型：icecandidate。\n\n * rtcrtpsender:管理 rtcpeerconnection 中 mediastreamtrack 上的数据的编码和传输。\n\n * rtcrtpreceiver:管理 rtcpeerconnection 中 mediastreamtrack 上数据的接收和解码。\n\n * rtctrackevent:track事件的接口，表示将 rtcrtpreceiver对象添加到一个rtcpeerconnection对象，表示新创建的 mediastreamtrack 对象添加到 rtcpeerconnection。\n\n * rtcsctptransport:提供描述流控制传输协议 ( sctp ) 传输的信息，还提供一种访问底层数据报传输层安全性 ( dtls ) 传输的方法，在该传输 rtcpeerconnection 上发送和接收所有数据通道的 sctp 数据包。\n\nsctp 和 dtls\n\nsctp（流控制传输协议，stream control transmission protocol）是一种用于传输协议的ietf标准，它支持可靠、有序的消息传输，同时提供拥塞控制、多宿主和其他功能，以提高连接的可靠性和稳定性。它用于通过 internet 发送传统电话，但也用于webrtc数据。\n\ndtls，数据报传输层安全性协议 (dtls，datagram transport layer security) 是一种用于保护基于数据报的通信的协议。它基于以流为中心的传输层安全性协议 (tls，transport layer security)，提供类似级别的安全性。作为一种数据报协议，dtls 不保证消息传递的顺序，甚至根本不保证消息将被传递。然而，dtls 也获得了数据报协议的好处。特别是较低的开销和减少的延迟。这些功能对于 dtls 发挥作用的最常见领域之一特别有用：webrtc。所有与 webrtc 相关的协议都需要使用 dtls 对其通信进行加密；这包括 sctp、srtp 和 stun。\n\n# 字典\n\n * rtciceserver:定义如何连接到单个ice服务器（例如stun或turn服务器）。\n\n * rtcrtpcontributingsource:包含有关给定贡献源 (csrc) 的信息，包括该源贡献的数据包的最近播放时间。\n\ncsrc\n\ncsrc: a source of a stream of rtp packets that has contributed to the combined stream produced by an rtp mixer (see below). the mixer inserts a list of the ssrc identifiers of the sources that contributed to the generation of a particular packet into the rtp header of that packet. this list is called the csrc list.\n\n贡献源(csrc)标识符(32bits)：每个csrc标识符占32位，可以有0～15个。每个csrc标识了包含在该rtp报文有效载荷中的所有特约信源。 应用场景：多路混音、混流时使用，多人通信时，将音频进行混音后，其贡献者有多人，每一个的ssrc都放入一个csrc当中去\n\n# 事件\n\n * bufferedamountlow：数据通道当前缓冲的数据量（如其 bufferedamount 属性所示）已减少到等于或低于通道的最小缓冲数据大小，如 bufferedamountlowthreshold 中所指定.\n\n * close：数据通道已完成关闭过程，现在处于closed状态。它的底层数据传输此时完全关闭。您可以通过监视 closing 事件在关闭完成之前收到通知。\n\n * closing:rtcdatachannel已经过渡到 closing 状态，closing表示即将关闭。您可以通过监视 close 事件来检测关闭过程的完成。\n\n * connectionstatechange:可在 connectionstate 中访问的连接状态已发生更改。\n\n * datachannel:新的 rtcdatachannel 在远程对等方打开新数据通道后可用。此事件的类型是 rtcdatachannelevent。\n\n * error:rtcerrorevent 表示数据通道发生错误。\n\n * error：表示在 rtcdtlstransport 上发生 rtcerrorevent 错误。此错误将是 dtls-failure 或 fingerprint-failure。\n\n * gatheringstatechange：rtcicetransport 的 gathering 状态发生了变化。\n\n * icecandidate：rtcpeerconnectioniceevent每当本地设备识别出需要通过调用将其添加到本地对等方的新 ice 候选者时发送setlocaldescription()。\n\n * icecandidateerror：表示收集 ice 候选项时发生rtcpeerconnectioniceerrorevent错误。\n\n * iceconnectionstatechange：rtcpeerconnection 当其 ice 连接的状态（在iceconnectionstate属性中找到）发生更改时发送到。\n\n * icegatheringstatechange：rtcpeerconnection 当它的 ice 收集状态（在icegatheringstate属性中发现）发生变化时发送。\n\n * message：在数据通道上收到一条消息。该事件的类型为 messageevent。\n\n * negotiationneeded：调用 setlocaldescription() 后通知rtcpeerconnection它需要通过调用 createoffer() 来执行会话协商。\n\n * open：rtcdatachannel 的基础数据传输已成功打开或重新打开。\n\n * selectedcandidatepairchange：当前选定的一对 ice 候选对象已因 rtcicetransport 发生变化时触发事件。\n\n * track：在成功协商媒体流之后，将新轨道添加到 rtcpeerconnection 时发送 rtctrackevent 类型的 track 事件。\n\n * signalingstatechange：当 signalingstate 改变时发送到对等连接。这是调用 setlocaldescription()或 setremotedescription() 的结果。\n\n * statechange：rtcdtlstransport 的状态发生了变化。\n\n * statechange：rtcicetransport 的状态发生了变化。\n\n * statechange：rtcsctptransport 的状态发生了变化。\n\n# 类型\n\n * rtcsctptransport.state：指示 rtcsctptransport 实例的状态。\n\n\n# 身份和安全\n\n这些 api 用于管理用户身份和安全性，以便对用户进行连接身份验证。\n\n * rtcidentityprovider：使用户代理能够请求生成或验证身份断言。\n\n * rtcidentityassertion：表示当前连接的远程对等方的身份。如果尚未设置和验证对等点，则此接口返回null。一经设置，不可更改。\n\n * rtcidentityproviderregistrar：注册身份提供者 (idp， identity provider)。\n\n * rtccertificate：表示 rtcpeerconnection 用于身份验证的证书。\n\n\n# 电话\n\n这些接口和事件与与公共交换电话网络 (ptsn) 的交互有关。它们主要用于通过网络向远程对等方发送音调拨号声音或代表这些音调的数据包。\n\n# 接口\n\n * rtcdtmfsender：管理 rtcpeerconnection 的双音多频 (dtmf，dual-tone multi-frequency) 信号的编码和传输。\n\n * rtcdtmftonechangeevent：由 tonechange 事件用来指示 dtmf 音已开始或结束。此事件不会冒泡（除非另有说明）且不可取消（除非另有说明）。\n\n# 事件\n\ntonechange：一个新的 dtmf 音已经开始通过连接播放，或者 rtcdtmfsender 中的 tonebuffer 中的最后一个音已经发送并且缓冲区现在是空的。事件的类型是 rtcdtmftonechangeevent。\n\n\n# 指南\n\n * webrtc协议简介：本文介绍了构建 webrtc api 的协议。\n\n * webrtc 连接性：webrtc 连接如何工作以及如何一起使用各种协议和接口来构建强大的通信应用程序的指南。\n\n * webrtc 会话的生命周期：webrtc 允许您将任意数据、音频或视频（或其任意组合）的对等通信构建到浏览器应用程序中。在本文中，我们将了解 webrtc 会话的生命周期，从建立连接一直到在不再需要连接时关闭连接。\n\n * 建立联系：完美的协商模式：完美协商是一种辅导您的信号处理过程遵循的设计模式，它提供了协商的透明度，同时允许双方成为提供者或回答者，而无需大量编码来区分两者。\n\n * 信令和双向视频通话：一个教程和示例，它转换前面的示例创建基于 websocket 的聊天系统，并添加参与者之间打开视频通话的支持。聊天服务器的 websocket 连接用于 webrtc 信令。\n\n * webrtc 使用的编解码器：webrtc 要求浏览器支持的编解码器以及各种流行浏览器支持的可选编解码器指南。包括一份指南，可帮助您选择最适合您需求的编解码器。\n\n * 使用 webrtc 数据通道：本指南介绍了如何使用对等连接和关联 rtcdatachannel 在两个对等点之间交换任意数据。\n\n * 将 dtmf 与 webrtc 结合使用：webrtc 支持与链接到老式电话系统的网关进行交互，包括支持使用该 rtcdtmfsender 接口发送 dtmf 音调。本指南展示了如何执行此操作。\n\n\n# 教程\n\n * 使用 webrtc adapter.js 提高兼容性：webrtc 组织在 github 上提供了 webrtc 适配器，以解决不同浏览器的 webrtc 实现中的兼容性问题。适配器是一个 javascript shim，它允许将您的代码写入规范，以便它在所有支持 webrtc 的浏览器中“正常工作”。\n\n * 一个简单的 rtcdatachannel 示例：该rtcdatachannel实例可让您在两个对等方之间打开一个通道，您可以通过该通道发送和接收任意数据。该 api 有意与websocket api相似，因此可以为每个 api 使用相同的编程模型。\n\n * 使用 peer.js 构建连接互联网的电话：本教程是关于如何使用 peer.js 构建通话的分步指南。\n\n\n# 参考\n\n * webrtc api - web apis | mdn\n * webrtc api - web api 接口参考 | mdn",charsets:{cjk:!0},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"WebRTC 指南",frontmatter:{title:"WebRTC 指南",date:"2022-06-27T13:20:15.000Z",permalink:"/basic/webrtc_api/guide/",categories:["基础",{MDN:"WebRTC API"}],tags:null,readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/10.MDN:%20WebRTC%20API/20.guide.html",relativePath:"20.基础/10.MDN: WebRTC API/20.guide.md",key:"v-4fd75e1a",path:"/basic/webrtc_api/guide/",headers:[{level:2,title:"WebRTC 协议介绍",slug:"webrtc-协议介绍",normalizedTitle:"webrtc 协议介绍",charIndex:2},{level:2,title:"ICE",slug:"ice",normalizedTitle:"ice",charIndex:45},{level:2,title:"STUN",slug:"stun",normalizedTitle:"stun",charIndex:279},{level:2,title:"NAT",slug:"nat",normalizedTitle:"nat",charIndex:285},{level:2,title:"TURN",slug:"turn",normalizedTitle:"turn",charIndex:781},{level:2,title:"SDP",slug:"sdp",normalizedTitle:"sdp",charIndex:1044},{level:2,title:"信令服务器",slug:"信令服务器",normalizedTitle:"信令服务器",charIndex:1578}],readingTime:{text:"1 min read",minutes:.825,time:49500,words:165},headersStr:"WebRTC 协议介绍 ICE STUN NAT TURN SDP 信令服务器",content:"# WebRTC 协议介绍\n\n本文介绍了基于 WebRTC API 构建的协议。\n\n\n# ICE\n\n交互式连接设施Interactive Connectivity Establishment (ICE) 是一个允许你的浏览器和对端浏览器建立连接的协议框架。在实际的网络当中，有很多原因能导致简单的从 A 端到 B 端直连不能如愿完成。这需要绕过阻止建立连接的防火墙，给你的设备分配一个唯一可见的地址（通常情况下我们的大部分设备没有一个固定的公网地址），如果路由器不允许主机直连，还得通过一台服务器转发数据。ICE 通过使用以下几种技术完成上述工作。\n\n\n# STUN\n\nNAT 的会话穿越功能Session Traversal Utilities for NAT (STUN) (缩略语的最后一个字母是 NAT 的首字母) 是一个允许位于 NAT 后的客户端找出自己的公网地址，判断出路由器阻止直连的限制方法的协议。\n\n客户端通过给公网的 STUN 服务器发送请求获得自己的公网地址信息，以及是否能够被（穿过路由器）访问。\n\n\n\n\n# NAT\n\n网络地址转换协议Network Address Translation (NAT) 用来给你的（私网）设备映射一个公网的 IP 地址的协议。一般情况下，路由器的 WAN 口有一个公网 IP，所有连接这个路由器 LAN 口的设备会分配一个私有网段的 IP 地址（例如 192.168.1.3）。私网设备的 IP 被映射成路由器的公网 IP 和唯一的端口，通过这种方式不需要为每一个私网设备分配不同的公网 IP，但是依然能被外网设备发现。\n\n一些路由器严格地限定了部分私网设备的对外连接。这种情况下，即使 STUN 服务器识别了该私网设备的公网 IP 和端口的映射，依然无法和这个私网设备建立连接。这种情况下就需要转向 TURN 协议。\n\n\n# TURN\n\n一些路由器使用一种“对称型 NAT”的 NAT 模型。这意味着路由器只接受和对端先前建立的连接（就是下一次请求建立新的连接映射）。\n\nNAT 的中继穿越方式Traversal Using Relays around NAT (TURN) 通过 TURN 服务器中继所有数据的方式来绕过“对称型 NAT”。你需要在 TURN 服务器上创建一个连接，然后告诉所有对端设备发包到服务器上，TURN 服务器再把包转发给你。很显然这种方式是开销很大的，所以只有在没得选择的情况下采用。\n\n\n\n\n# SDP\n\n会话描述协议Session Description Protocol (SDP) 是一个描述多媒体连接内容的协议，例如分辨率，格式，编码，加密算法等。所以在数据传输时两端都能够理解彼此的数据。本质上，这些描述内容的元数据并不是媒体流本身。\n\n从技术上讲，SDP 并不是一个真正的协议，而是一种数据格式，用于描述在设备之间共享媒体的连接。\n\nSDP 由一行或多行 UTF-8 文本组成，每行以一个字符的类型开头，后跟等号（“ =”），然后是包含值或描述的结构化文本，其格式取决于类型。以给定字母开头的文本行通常称为“字母行”。例如，提供媒体描述的行的类型为“ m”，因此这些行称为“ m 行”。\n\n\n# 信令与视频通话\n\nWebRTC允许在两个设备之间进行实时的对等媒体交换。通过称为信令的发现和协商过程建立连接。本教程将指导你构建双向视频通话。\n\nWebRTC是一个完全对等技术，用于实时交换音频、视频和数据，同时提供一个中心警告。如其他地方所讨论的，必须进行一种发现和媒体格式协商，以使不同网络上的两个设备相互定位。这个过程被称为 信令 ，并涉及两个设备连接到第三个共同商定的服务器。通过这个第三方服务器，这两台设备可以相互定位，并交换协商消息。\n\n\n# 信令服务器\n\n两个设备之间建立 WebRTC 连接需要一个信令服务器来实现双方通过网络进行连接。信令服务器的作用是作为一个中间人帮助双方在尽可能少的暴露隐私的情况下建立连接。\n\nWebRTC 并没有提供信令传递机制，你可以使用任何你喜欢的方式如WebSocket 或者XMLHttpRequest 等等，来交换彼此的令牌信息。\n\n重要的是信令服务器并不需要理解和解释信令数据内容。通过信令服务器的消息的内容实际上是一个黑盒。重要的是，当ICE子系统指示你将信令数据发送给另一个对等方时，你就这样做，而另一个对等方知道如何接收此信息并将其传递给自己的 ICE 子系统。你所要做的就是来回传递信息。内容对信令服务器一点都不重要。\n\n\n# 信令与视频通话",normalizedContent:"# webrtc 协议介绍\n\n本文介绍了基于 webrtc api 构建的协议。\n\n\n# ice\n\n交互式连接设施interactive connectivity establishment (ice) 是一个允许你的浏览器和对端浏览器建立连接的协议框架。在实际的网络当中，有很多原因能导致简单的从 a 端到 b 端直连不能如愿完成。这需要绕过阻止建立连接的防火墙，给你的设备分配一个唯一可见的地址（通常情况下我们的大部分设备没有一个固定的公网地址），如果路由器不允许主机直连，还得通过一台服务器转发数据。ice 通过使用以下几种技术完成上述工作。\n\n\n# stun\n\nnat 的会话穿越功能session traversal utilities for nat (stun) (缩略语的最后一个字母是 nat 的首字母) 是一个允许位于 nat 后的客户端找出自己的公网地址，判断出路由器阻止直连的限制方法的协议。\n\n客户端通过给公网的 stun 服务器发送请求获得自己的公网地址信息，以及是否能够被（穿过路由器）访问。\n\n\n\n\n# nat\n\n网络地址转换协议network address translation (nat) 用来给你的（私网）设备映射一个公网的 ip 地址的协议。一般情况下，路由器的 wan 口有一个公网 ip，所有连接这个路由器 lan 口的设备会分配一个私有网段的 ip 地址（例如 192.168.1.3）。私网设备的 ip 被映射成路由器的公网 ip 和唯一的端口，通过这种方式不需要为每一个私网设备分配不同的公网 ip，但是依然能被外网设备发现。\n\n一些路由器严格地限定了部分私网设备的对外连接。这种情况下，即使 stun 服务器识别了该私网设备的公网 ip 和端口的映射，依然无法和这个私网设备建立连接。这种情况下就需要转向 turn 协议。\n\n\n# turn\n\n一些路由器使用一种“对称型 nat”的 nat 模型。这意味着路由器只接受和对端先前建立的连接（就是下一次请求建立新的连接映射）。\n\nnat 的中继穿越方式traversal using relays around nat (turn) 通过 turn 服务器中继所有数据的方式来绕过“对称型 nat”。你需要在 turn 服务器上创建一个连接，然后告诉所有对端设备发包到服务器上，turn 服务器再把包转发给你。很显然这种方式是开销很大的，所以只有在没得选择的情况下采用。\n\n\n\n\n# sdp\n\n会话描述协议session description protocol (sdp) 是一个描述多媒体连接内容的协议，例如分辨率，格式，编码，加密算法等。所以在数据传输时两端都能够理解彼此的数据。本质上，这些描述内容的元数据并不是媒体流本身。\n\n从技术上讲，sdp 并不是一个真正的协议，而是一种数据格式，用于描述在设备之间共享媒体的连接。\n\nsdp 由一行或多行 utf-8 文本组成，每行以一个字符的类型开头，后跟等号（“ =”），然后是包含值或描述的结构化文本，其格式取决于类型。以给定字母开头的文本行通常称为“字母行”。例如，提供媒体描述的行的类型为“ m”，因此这些行称为“ m 行”。\n\n\n# 信令与视频通话\n\nwebrtc允许在两个设备之间进行实时的对等媒体交换。通过称为信令的发现和协商过程建立连接。本教程将指导你构建双向视频通话。\n\nwebrtc是一个完全对等技术，用于实时交换音频、视频和数据，同时提供一个中心警告。如其他地方所讨论的，必须进行一种发现和媒体格式协商，以使不同网络上的两个设备相互定位。这个过程被称为 信令 ，并涉及两个设备连接到第三个共同商定的服务器。通过这个第三方服务器，这两台设备可以相互定位，并交换协商消息。\n\n\n# 信令服务器\n\n两个设备之间建立 webrtc 连接需要一个信令服务器来实现双方通过网络进行连接。信令服务器的作用是作为一个中间人帮助双方在尽可能少的暴露隐私的情况下建立连接。\n\nwebrtc 并没有提供信令传递机制，你可以使用任何你喜欢的方式如websocket 或者xmlhttprequest 等等，来交换彼此的令牌信息。\n\n重要的是信令服务器并不需要理解和解释信令数据内容。通过信令服务器的消息的内容实际上是一个黑盒。重要的是，当ice子系统指示你将信令数据发送给另一个对等方时，你就这样做，而另一个对等方知道如何接收此信息并将其传递给自己的 ice 子系统。你所要做的就是来回传递信息。内容对信令服务器一点都不重要。\n\n\n# 信令与视频通话",charsets:{cjk:!0},lastUpdated:"2022/07/04, 20:40:33",lastUpdatedTimestamp:1656938433e3},{title:"本章导读",frontmatter:{title:"本章导读",date:"2022-06-27T14:42:19.000Z",permalink:"/basic/intro/index/",categories:["基础","概要"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/20.%E6%A6%82%E8%A6%81/0.index.html",relativePath:"20.基础/20.概要/0.index.md",key:"v-12491e9e",path:"/basic/intro/index/",readingTime:{text:"0 min read",minutes:0,time:0,words:0},headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"WebRTC 概要介绍",frontmatter:{title:"WebRTC 概要介绍",date:"2022-06-27T14:44:14.000Z",permalink:"/basic/intro/introduce/",categories:["基础","概要"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/20.%E6%A6%82%E8%A6%81/10.intro.html",relativePath:"20.基础/20.概要/10.intro.md",key:"v-73a49df9",path:"/basic/intro/introduce/",headers:[{level:2,title:"什么是 WebRTC？",slug:"什么是-webrtc",normalizedTitle:"什么是 webrtc？",charIndex:2},{level:2,title:"WebRTC 可以做什么？",slug:"webrtc-可以做什么",normalizedTitle:"webrtc 可以做什么？",charIndex:299},{level:2,title:"难点",slug:"难点",normalizedTitle:"难点",charIndex:818},{level:2,title:"WebRTC与FFmpeg",slug:"webrtc与ffmpeg",normalizedTitle:"webrtc与ffmpeg",charIndex:919},{level:2,title:"应用流程",slug:"应用流程",normalizedTitle:"应用流程",charIndex:1046},{level:2,title:"新功能",slug:"新功能",normalizedTitle:"新功能",charIndex:1108},{level:2,title:"原理与架构",slug:"原理与架构",normalizedTitle:"原理与架构",charIndex:1118},{level:3,title:"核心层",slug:"核心层",normalizedTitle:"核心层",charIndex:1331},{level:3,title:"引擎层",slug:"引擎层",normalizedTitle:"引擎层",charIndex:1679},{level:4,title:"音频引擎",slug:"音频引擎",normalizedTitle:"音频引擎",charIndex:1576},{level:5,title:"编解码器",slug:"编解码器",normalizedTitle:"编解码器",charIndex:1846},{level:5,title:"防止抖动与丢失",slug:"防止抖动与丢失",normalizedTitle:"防止抖动与丢失",charIndex:2192},{level:5,title:"回音消除、降噪",slug:"回音消除、降噪",normalizedTitle:"回音消除、降噪",charIndex:753},{level:4,title:"视频引擎",slug:"视频引擎",normalizedTitle:"视频引擎",charIndex:1581},{level:3,title:"传输层",slug:"传输层",normalizedTitle:"传输层",charIndex:2941},{level:2,title:"WebRTC API",slug:"webrtc-api",normalizedTitle:"webrtc api",charIndex:3348},{level:2,title:"媒体设备使用入门",slug:"媒体设备使用入门",normalizedTitle:"媒体设备使用入门",charIndex:3616},{level:3,title:"查询媒体设备",slug:"查询媒体设备",normalizedTitle:"查询媒体设备",charIndex:4453},{level:3,title:"监听设备更改",slug:"监听设备更改",normalizedTitle:"监听设备更改",charIndex:5003},{level:3,title:"媒体限制",slug:"媒体限制",normalizedTitle:"媒体限制",charIndex:6296},{level:3,title:"本地播放",slug:"本地播放",normalizedTitle:"本地播放",charIndex:7455},{level:2,title:"媒体捕获和约束",slug:"媒体捕获和约束",normalizedTitle:"媒体捕获和约束",charIndex:8279},{level:3,title:"媒体设备",slug:"媒体设备",normalizedTitle:"媒体设备",charIndex:1076},{level:3,title:"约束条件",slug:"约束条件",normalizedTitle:"约束条件",charIndex:8542},{level:3,title:"显示媒体",slug:"显示媒体",normalizedTitle:"显示媒体",charIndex:8348},{level:3,title:"数据流和轨道",slug:"数据流和轨道",normalizedTitle:"数据流和轨道",charIndex:10169},{level:4,title:"媒体流跟踪",slug:"媒体流跟踪",normalizedTitle:"媒体流跟踪",charIndex:10314},{level:2,title:"开始使用对等连接",slug:"开始使用对等连接",normalizedTitle:"开始使用对等连接",charIndex:10462},{level:3,title:"信令",slug:"信令",normalizedTitle:"信令",charIndex:10712},{level:3,title:"启动对等连接",slug:"启动对等连接",normalizedTitle:"启动对等连接",charIndex:11349},{level:3,title:"ICE Candidate",slug:"ice-candidate",normalizedTitle:"ice candidate",charIndex:13208},{level:4,title:"Trickle ICE",slug:"trickle-ice",normalizedTitle:"trickle ice",charIndex:13599},{level:3,title:"已建立连接",slug:"已建立连接",normalizedTitle:"已建立连接",charIndex:14645},{level:2,title:"远程数据流",slug:"远程数据流",normalizedTitle:"远程数据流",charIndex:15006},{level:3,title:"添加远程轨道",slug:"添加远程轨道",normalizedTitle:"添加远程轨道",charIndex:15473},{level:2,title:"数据通道",slug:"数据通道",normalizedTitle:"数据通道",charIndex:15940},{level:3,title:"打开和关闭事件",slug:"打开和关闭事件",normalizedTitle:"打开和关闭事件",charIndex:16511},{level:3,title:"信息",slug:"信息",normalizedTitle:"信息",charIndex:2623},{level:2,title:"TURN 服务器",slug:"turn-服务器",normalizedTitle:"turn 服务器",charIndex:10635},{level:2,title:"测试 WebRTC 应用",slug:"测试-webrtc-应用",normalizedTitle:"测试 webrtc 应用",charIndex:18812},{level:3,title:"Chrome",slug:"chrome",normalizedTitle:"chrome",charIndex:400},{level:3,title:"Firefox",slug:"firefox",normalizedTitle:"firefox",charIndex:19278},{level:2,title:"WebRTC运行机制",slug:"webrtc运行机制",normalizedTitle:"webrtc运行机制",charIndex:20114},{level:3,title:"轨与流",slug:"轨与流",normalizedTitle:"轨与流",charIndex:20129},{level:3,title:"重要类",slug:"重要类",normalizedTitle:"重要类",charIndex:20232},{level:3,title:"PeerConnection调用过程",slug:"peerconnection调用过程",normalizedTitle:"peerconnection调用过程",charIndex:20493},{level:3,title:"调用时序图",slug:"调用时序图",normalizedTitle:"调用时序图",charIndex:20817},{level:2,title:"声明",slug:"声明",normalizedTitle:"声明",charIndex:21757},{level:2,title:"实例",slug:"实例",normalizedTitle:"实例",charIndex:12468},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:21837}],readingTime:{text:"9 min read",minutes:8.555,time:513299.99999999994,words:1711},headersStr:"什么是 WebRTC？ WebRTC 可以做什么？ 难点 WebRTC与FFmpeg 应用流程 新功能 原理与架构 核心层 引擎层 音频引擎 编解码器 防止抖动与丢失 回音消除、降噪 视频引擎 传输层 WebRTC API 媒体设备使用入门 查询媒体设备 监听设备更改 媒体限制 本地播放 媒体捕获和约束 媒体设备 约束条件 显示媒体 数据流和轨道 媒体流跟踪 开始使用对等连接 信令 启动对等连接 ICE Candidate Trickle ICE 已建立连接 远程数据流 添加远程轨道 数据通道 打开和关闭事件 信息 TURN 服务器 测试 WebRTC 应用 Chrome Firefox WebRTC运行机制 轨与流 重要类 PeerConnection调用过程 调用时序图 声明 实例 参考",content:"# 什么是 WebRTC？\n\n面向网络的实时通信：\n\n借助 WebRTC，您可以为应用添加基于开放标准运行的实时通信功能。它支持在对等设备之间发送视频、语音和通用数据，使开发者能够构建强大的语音和视频通信解决方案。这项技术适用于所有现代浏览器以及所有主要平台的原生客户端。WebRTC 采用的技术是开放网络标准，以常规 JavaScript API 的形式在所有主流浏览器中提供。对于原生客户端（例如 Android 和 iOS 应用），可以使用具备相同功能的库。\n\n特点：\n\n * 音视频处理+即时通讯的开源库\n * 2010 年 Google 将其开源\n * 优秀的多媒体框架，跨平台\n\n\n# WebRTC 可以做什么？\n\n将WebRTC加入浏览器，使得浏览器的功能更加强大。WebRTC（Web Real-Time Communication）项目的最终目的主要是让Web开发者能够基于浏览器（Chrome\\FireFox...）轻易快捷开发出丰富的实时多媒体应用，而无需下载安装任何插件，Web开发者也无需关注多媒体的数字信号处理过程，只需编写简单的Javascript程序即可实现，W3C等组织正在制定Javascript 标准API，目前是WebRTC 1.0版本即Draft状态；另外WebRTC还希望能够建立一个多互联网浏览器间健壮的实时通信的平台，形成开发者与浏览器厂商良好的生态环境。同时，Google也希望和致力于让WebRTC的技术成为HTML5标准之一，可见Google布局之深远。\n\nWebRTC 有许多不同的用例，从使用摄像头或麦克风的基本 Web 应用，到更高级的视频通话应用和屏幕共享。\n\n * 音视频实时互动\n * 游戏、即时通讯、文件传输等等\n * 传输、音视频处理（回音消除、降噪等）\n\nWebRTC 的应用场景：\n\n\n\n愿景：各浏览器之间可以快速开发可以实时互动的音视频的应用场景\n\n\n\n\n# 难点\n\n * 过多的协议，WebRTC太庞大、烦杂，门槛高。\n * 客户端与服务端分离，WebRTC只有客户端，没有服务端，需要自己根据业务实现。\n * 相关资料少。\n * 网上代码错误太多。\n\n\n# WebRTC与FFmpeg\n\n * WebRTC与FFmpeg是音视频领域的两个佼佼者，两个侧重点不同。\n * FFmpeg侧重于多媒体文件的编辑，音视频的编解码等。\n * WebRTC侧重于处理网络抖动、丢包、评估以及音频处理，回音降噪等等。\n\n\n# 应用流程\n\nWebRTC 应用通常会经过常见的应用流程。访问媒体设备，打开对等连接，发现对等设备，并开始流式传输。\n\n\n# 新功能\n\n\n\n\n# 原理与架构\n\nWebRTC实现了基于网页的视频会议，标准是 WHATWG 协议，目的是通过浏览器提供简单的javascript就可以达到实时通讯（Real-Time Communications (RTC)）能力。\n\n\n\nWebRTC整体架构主要分为两部分：\n\n * 第一部分为绿色区域，为webrtc库所提供的核心功能。\n * 第二部分为紫色区域，是浏览器提供的javascript的API层，也就是说浏览器对webrtc的核心层的C++ API做了一层封装，封装成为了javascript接口。\n * 第三部分为箭头区域，是很多的上层应用。\n * 调用顺序就是从上到下。\n\n\n# 核心层\n\n分为如下4层：\n\n\n\n * 第一层为C++ API，是WebRTC库提供给浏览器javascript层的核心功能API接口（比如：连接、P2P进行连接、传输质量、设备管理....）。\n * 第二层为Session层，上下文管理层，音频、视频、非音视频的数据传输，都通过session层处理，实现相关逻辑。\n * 第三层包括音频引擎、视频引擎、传输模块。\n * 第四层与硬件相关，包括音视频的采集、网络IO （可重载的，可以使用自己的方案）\n\n注意：在webrtc中没有对视频进行渲染处理，所以需要我们在应用中自己实现。\n\n\n# 引擎层\n\n引擎层包括音频引擎、视频引擎、传输模块。将这3个模块分隔开来，逻辑更加清晰。另外音视频的同步不是在引擎层实现。\n\n\n\n音频引擎：包含一系列音频多媒体处理的框架，包括从视频采集卡到网络传输端等整个解决方案。VoiceEngine是WebRTC极具价值的技术之一，是Google收购GIPS公司后开源的。\n\n# 音频引擎\n\n# 编解码器\n\n * iSAC（Internet Speech Audio Codec）：针对VoIP和音频流的宽带和超宽带音频编解码器，是WebRTC音频引擎的默认的编解码器。\n\n参数\n\n * 采样频率：16khz，24khz，32khz；（默认为16khz）\n * 自适应速率为10kbit/s ~ 52kbit/s\n * 自适应包大小：30~60ms\n * 算法延时：frame + 3ms\n\n * iLBC（Internet Low Bitrate Codec）：VoIP音频流的窄带语音编解码器。\n\n参数\n\n * 采样频率：8khz；\n * 20ms帧比特率为15.2kbps\n * 30ms帧比特率为13.33kbps\n * 标准由IETF RFC3951和RFC3952定义\n\n# 防止抖动与丢失\n\nNetEQ for Voice：针对音频软件实现的语音信号处理元件。\n\nNetEQ算法是自适应抖动控制算法以及语音包丢失隐藏算法。使其能够快速且高解析度地适应不断变化的网络环境，确保音质优美且缓冲延迟最小。 是GIPS公司独步天下的技术，能够有效的处理由于网络抖动和语音包丢失时候对语音质量产生的影响。\n\nNetEQ 也是WebRTC中一个极具价值的技术，对于提高VoIP质量有明显效果，加以AEC\\NR\\AGC等模块集成使用，效果更好。\n\n# 回音消除、降噪\n\n * Acoustic Echo Canceler (AEC) ：回声消除器是一个基于软件的信号处理元件，能实时的去除mic采集到的回声。\n * Noise Reduction (NR)：噪声抑制也是一个基于软件的信号处理元件，用于消除与相关VoIP的某些类型的背景噪声（嘶嘶声，风扇噪音等等……）。\n\n# 视频引擎\n\n视频引擎包含一系列视频处理的整体框架，从摄像头采集视频到视频信息网络传输再到视频显示整个完整过程的解决方案。\n\n * 编解码器：视频图像编解码器，是WebRTC视频引擎的默认的编解码器。VP8适合实时通信应用场景，因为它主要是针对低延时而设计的编解码器。\n\n扩展\n\nVPx编解码器是Google收购ON2公司后开源的，VPx现在是WebM项目的一部分，而WebM项目是Google致力于推动的HTML5标准之一\n\n * 视频抖动缓冲器：Video Jitter Buffer，可以降低由于视频抖动和视频信息包丢失带来的不良影响。\n * 图像质量增强模块：Image enhancements，对网络摄像头采集到的图像进行处理，包括明暗度检测、颜色增强、降噪处理等功能，用来提升视频质量。\n\n\n# 传输层\n\n底层使用UDP，上层使用RTP。所有的音视频的接收与发送，都是通过传输模块实现的。此外在传输层实现了网络链路的检测，进行网络带宽的估计，从而对（音视频、非音视频）数据的传输进行控制。\n\n扩展\n\n * 由于浏览器需要安全传输，所以使用了 SRTP 协议，为了进行控制，使用了 RTCP;\n * 为了处理多个流复用同一个通道，实现了 Multiplexing。\n * 最下面实现了P2P相关的协议，比如 STUN + TRUN + ICE。\n * 虽然UDP很适合实时通讯，但是也有需要使用TCP的场景：连通性TCP要优于UDP，假如国内外通信，可能某些区域不允许通过UDP进行实时传输。为了保证连通率，优先选择UDP，如果UDP无法通信，则选择TCP，以此来保证连通率。当然，也存在部分情况，TCP依旧不通，比如通过企业内部网访问，网关拒绝访问外网，这时可以使用Https。这时不太保证实时性了。\n\n\n# WebRTC API\n\nWebRTC 标准概括介绍了两种不同的技术：媒体捕获设备和点对点连接。\n\n媒体捕获设备包括摄像机和麦克风，还包括屏幕捕获设备。对于摄像头和麦克风，我们使用 navigator.mediaDevices.getUserMedia() 来捕获 MediaStreams。对于屏幕录制，我们改为使用 navigator.mediaDevices.getDisplayMedia()。\n\n点对点连接由 RTCPeerConnection 接口处理。这是在 WebRTC 中两个对等方之间建立和控制连接的中心点。\n\n\n# 媒体设备使用入门\n\n针对 Web 开发时，WebRTC 标准提供了用于访问连接到计算机或智能手机的相机和麦克风的 API。这些设备通常称为媒体设备，可以通过实现 MediaDevices 接口的 navigator.mediaDevices 对象使用 JavaScript 进行访问。通过此对象，我们可以枚举所有已连接的设备，监听设备的变化（设备连接或断开连接时）以及打开设备以检索媒体流（见下文）。\n\n其最常见的方式是通过 getUserMedia() 函数，该函数会返回一个解析为匹配媒体设备的 MediaStream 的 promise。此函数采用单个 MediaStreamConstraints 对象，用于指定我们的要求。例如，要简单地打开默认麦克风和摄像头，请执行以下操作。\n\nconst openMediaDevices = async (constraints) => {\n    return await navigator.mediaDevices.getUserMedia(constraints);\n}\n\ntry {\n    const stream = openMediaDevices({'video':true,'audio':true});\n    console.log('Got MediaStream:', stream);\n} catch(error) {\n    console.error('Error accessing media devices.', error);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n调用 getUserMedia() 将触发权限请求。如果用户接受该权限，系统会使用包含一个视频和一个音轨的 MediaStream 解析该 promise。如果权限遭拒，系统会抛出 PermissionDeniedError。如果没有连接任何匹配的设备，则会抛出 NotFoundError。\n\n\n# 查询媒体设备\n\n在更复杂的应用中，我们很可能需要检查所有连接的摄像头和麦克风，并向用户提供相应的反馈。这可以通过调用 enumerateDevices() 函数来实现。这将返回一个 promise，它可以解析为描述每个已知媒体设备的 MediaDevicesInfo 数组。我们可以用它来呈现界面，让用户选择他们喜欢的那个。每个 MediaDevicesInfo 都包含一个名为 kind 的属性，其值为 audioinput、audiooutput 或 videoinput，指示它是哪种类型的媒体设备。\n\nasync function getConnectedDevices(type) {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return devices.filter(device => device.kind === type)\n}\n\nconst videoCameras = getConnectedDevices('videoinput');\nconsole.log('Cameras found:', videoCameras);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 监听设备更改\n\n大多数计算机都支持在运行时插入各种设备。它可能是通过 USB 连接的摄像头、蓝牙耳机或一组外部扬声器。为了正确支持这一点，Web 应用应监听媒体设备的变化。这可以通过为 devicechange 事件的 navigator.mediaDevices 添加监听器来实现。\n\n// Updates the select element with the provided set of cameras\nfunction updateCameraList(cameras) {\n    const listElement = document.querySelector('select#availableCameras');\n    listElement.innerHTML = '';\n    cameras.map(camera => {\n        const cameraOption = document.createElement('option');\n        cameraOption.label = camera.label;\n        cameraOption.value = camera.deviceId;\n        return cameraOption;\n    }).forEach(cameraOption => listElement.add(cameraOption));\n}\n\n// Fetch an array of devices of a certain type\nasync function getConnectedDevices(type) {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return devices.filter(device => device.kind === type)\n}\n\n// Get the initial set of cameras connected\nconst videoCameras = getConnectedDevices('videoinput');\nupdateCameraList(videoCameras);\n\n// Listen for changes to media devices and update the list accordingly\nnavigator.mediaDevices.addEventListener('devicechange', event => {\n    const newCameraList = getConnectedDevices('video');\n    updateCameraList(newCameraList);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 媒体限制\n\n如果约束对象必须实现 MediaStreamConstraints 接口并将其作为参数传递给 getUserMedia()，我们就可以打开符合特定要求的媒体设备。此要求可以非常宽泛（音频和/或视频），也可以非常具体（最低相机分辨率或确切设备 ID）。建议使用 getUserMedia() API 的应用先检查现有设备，然后使用 deviceId 限制条件指定与设备完全匹配的限制条件。如果可能，设备还会根据限制条件进行配置。我们可以对麦克风启用回声消除功能，也可以从摄像头设置视频的特定或最小宽度和高度。\n\nasync function getConnectedDevices(type) {\n    const devices = await navigator.mediaDevices.enumerateDevices();\n    return devices.filter(device => device.kind === type)\n}\n\n// Open camera with at least minWidth and minHeight capabilities\nasync function openCamera(cameraId, minWidth, minHeight) {\n    const constraints = {\n        'audio': {'echoCancellation': true},\n        'video': {\n            'deviceId': cameraId,\n            'width': {'min': minWidth},\n            'height': {'min': minHeight}\n            }\n        }\n\n    return await navigator.mediaDevices.getUserMedia(constraints);\n}\n\nconst cameras = getConnectedDevices('videoinput');\nif (cameras && cameras.length > 0) {\n    // Open first available video camera with a resolution of 1280x720 pixels\n    const stream = openCamera(cameras[0].deviceId, 1280, 720);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 本地播放\n\n媒体设备打开后，如果有 MediaStream，我们可以将其分配给视频或音频元素，以在本地播放流。\n\nasync function playVideoFromCamera() {\n    try {\n        const constraints = {'video': true, 'audio': true};\n        const stream = await navigator.mediaDevices.getUserMedia(constraints);\n        const videoElement = document.querySelector('video#localVideo');\n        videoElement.srcObject = stream;\n    } catch(error) {\n        console.error('Error opening video camera.', error);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n与 getUserMedia() 一起使用的典型视频元素所需的 HTML 通常具有 autoplay 和 playsinline 属性。autoplay 属性将使分配给元素的新数据流自动播放。playsinline 属性允许视频在特定移动浏览器中内嵌播放，而不仅仅是全屏播放。此外，我们还建议对直播使用 controls=\"false\"，除非用户应能够暂停这些直播。\n\n<html>\n<head><title>Local video playback</video></head>\n<body>\n    <video id=\"localVideo\" autoplay playsinline controls=\"false\"/>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 媒体捕获和约束\n\nWebRTC 的媒体部分介绍了如何使用能够捕捉视频和音频的硬件（例如相机和麦克风），以及媒体流的工作原理。此外，还介绍了显示媒体，这是应用可执行屏幕捕获的方式。\n\n\n# 媒体设备\n\n您可以通过 navigator.mediaDevices 对象访问和管理浏览器支持的所有摄像头和麦克风。应用可以检索已连接设备的最新列表并监听变化，因为许多相机和微型麦克风可通过 USB 连接，并且可以在应用生命周期内连接和断开连接。由于媒体设备的状态可能会随时发生变化，因此建议应用注册设备更改，以便正确处理更改。\n\n\n# 约束条件\n\n访问媒体设备时，建议您提供尽可能详细的限制条件。虽然可以通过简单的约束条件打开默认摄像头和麦克风，但其提供的媒体流可能明显优于应用的最佳流。\n\n具体的约束条件在 MediaTrackConstraint 对象中定义，一个针对音频，另一个针对视频。此对象中的特性类型为 ConstraintLong、ConstraintBoolean、ConstraintDouble 或 ConstraintDOMString。这些对象可以是特定值（例如数字、布尔值或字符串）、范围（具有最小值和最大值的 LongRange 或 DoubleRange）或具有 ideal 或 exact 定义的对象。对于特定值，浏览器将尝试选择尽可能接近的值。对于某个范围，将使用该范围内的最佳值。指定 exact 后，系统将仅返回与约束条件完全匹配的媒体流。\n\n// Camera with a resolution as close to 640x480 as possible\n{\n    \"video\": {\n        \"width\": 640,\n        \"height\": 480\n    }\n}\n// Camera with a resolution in the range 640x480 to 1024x768\n{\n    \"video\": {\n        \"width\": {\n            \"min\": 640,\n            \"max\": 1024\n        },\n        \"height\": {\n            \"min\": 480,\n            \"max\": 768\n        }\n    }\n}\n// Camera with the exact resolution of 1024x768\n{\n    \"video\": {\n        \"width\": {\n            \"exact\": 1024\n        },\n        \"height\": {\n            \"exact\": 768\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n为了确定某个媒体流的特定轨道的实际配置，我们可以调用 MediaStreamTrack.getSettings()，它会返回当前应用的 MediaTrackSettings。\n\n此外，也可以通过对媒体轨道上调用 applyConstraints() 来更新已打开的媒体设备上的轨道约束条件。这样，应用无需重新关闭现有音频流，即可重新配置媒体设备。\n\n\n# 显示媒体\n\n想要能够截取和录制屏幕的应用必须使用 Display Media API。函数 getDisplayMedia()（属于 navigator.mediaDevices 的一部分）与getUserMedia() 类似，用于打开显示内容（或部分内容，如窗口）。返回的 MediaStream 与使用 getUserMedia() 时相同。\n\ngetDisplayMedia() 的约束条件与常规视频或音频输入资源的限制不同。\n\n{\n    video: {\n        cursor: 'always' | 'motion' | 'never',\n        displaySurface: 'application' | 'browser' | 'monitor' | 'window'\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上述代码片段展示了屏幕录制的特殊限制的工作原理。请注意，并非所有支持显示媒体支持的浏览器都支持这些属性。\n\n\n# 数据流和轨道\n\nMediaStream 表示媒体内容流，由音频和视频轨道 (MediaStreamTrack) 组成。您可以通过调用 MediaStream.getTracks() 从 MediaStream 检索所有轨道，该方法会返回一组 MediaStreamTrack 对象。\n\n# 媒体流跟踪\n\nMediaStreamTrack 具有的 kind 属性为 audio 或 video，用于表示其表示的媒体类型。您可以通过切换其 enabled 属性将各个轨道静音。轨道具有布尔属性 remote，它会指示它来自 RTCPeerConnection 而来自远程对等设备。\n\n\n# 开始使用对等连接\n\n点对点连接是 WebRTC 规范的一部分，该规范旨在对点一台计算机上的两台应用进行连接，以使用点对点协议进行通信。对等设备之间的通信可以是视频、音频或任意二进制数据（适用于支持 RTCDataChannel API 的客户端）。为了发现两个对等端如何连接，两个客户端都需要提供 ICE Server 配置。这是 STUN 或 TURN 服务器，其作用是向每个客户端提供 ICE 候选对象，然后这些客户端将被传输到远程对等方。这种转移 ICE 候选对象的方式通常称为信号。\n\n\n# 信令\n\nWebRTC 规范包含用于与 ICE（互联网连接建立）服务器通信的 API，但信令组件并不属于该组件。需要发出信号才能让两个对等网络共享它们之间的连接方式。这通常可以通过基于 HTTP 的常规 Web API（即 REST 服务或其他 RPC 机制）解决，在此过程中，网络应用可在发起对等连接之前中继必要的信息。\n\n以下代码段展示了如何使用虚构信号服务异步发送和接收消息。必要时，本指南的其余示例将使用该方法。\n\n// Set up an asynchronous communication channel that will be\n// used during the peer connection setup\nconst signalingChannel = new SignalingChannel(remoteClientId);\nsignalingChannel.addEventListener('message', message => {\n    // New message from remote client received\n});\n\n// Send an asynchronous message to the remote client\nsignalingChannel.send('Hello!');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n信令可以通过许多不同的方式实现，WebRTC 规范不偏好任何特定的解决方案。\n\n\n# 启动对等连接\n\n每个对等连接都由一个 RTCPeerConnection 对象处理。此类的构造函数接受单个 RTCConfiguration 对象作为其参数。此对象定义对等连接的设置方式，应包含关于要使用的 ICE 服务器的信息。\n\n创建 RTCPeerConnection 后，我们需要创建 SDP offer 或 answer，具体取决于我们是发起通话的对等方还是接收方的对等方。SDP offer 或 answer 一经创建，就必须通过其他信道发送给远程对等方。将 SDP 对象传递给远程对等设备的过程称为信号，不在 WebRTC 规范的涵盖范围内。\n\n为了从调用方启动对等连接设置，我们创建一个 RTCPeerConnection 对象，然后调用 createOffer() 以创建 RTCSessionDescription 对象。此会话说明设置为使用 setLocalDescription() 的本地说明，然后通过我们的信令通道发送到接收端。我们还针对针对信令渠道设置了监听器，接收方收到所提供会话说明后得回答会被监听到。\n\nasync function makeCall() {\n    const configuration = {'iceServers': [{'urls': 'stun:stun.l.google.com:19302'}]}\n    const peerConnection = new RTCPeerConnection(configuration);\n    signalingChannel.addEventListener('message', async message => {\n        if (message.answer) {\n            const remoteDesc = new RTCSessionDescription(message.answer);\n            await peerConnection.setRemoteDescription(remoteDesc);\n        }\n    });\n    const offer = await peerConnection.createOffer();\n    await peerConnection.setLocalDescription(offer);\n    signalingChannel.send({'offer': offer});\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n在接收端，创建 RTCPeerConnection 实例，创建 offer 并通过信令通道发送到远程。在等待 remote answer 的消息监听中，我们使用 setRemoteDescription() 设置收到的 answer。在远端，我们调用 createAnswer() 为收到的 offer 创建答案。系统会使用 setLocalDescription() 将此答案设置为本地说明，然后通过我们的信令服务器将其发送至发起调用的一方。\n\nconst peerConnection = new RTCPeerConnection(configuration);\nsignalingChannel.addEventListener('message', async message => {\n    if (message.offer) {\n        peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));\n        const answer = await peerConnection.createAnswer();\n        await peerConnection.setLocalDescription(answer);\n        signalingChannel.send({'answer': answer});\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n两个对等方同时设置了本地和远程会话说明之后，他们就会了解远程对等方的功能。这并不意味着对等设备之间的连接已准备就绪。为此，我们需要在每个对等端收集 ICE 候选项，并通过信令通道传输给另一个对等方。\n\n\n# ICE Candidate\n\n两个对等方必须用 WebRTC 交换连接信息，然后才能使用 WebRTC 进行通信。由于网络条件可能因多种因素而发生变化，因此通常使用外部服务来发现连接到对等网络的潜在候选对象。此服务称为 ICE，使用的是 STUN 或 TURN 服务器。STUN 代表用于 NAT 的会话遍历实用程序，通常在大多数 WebRTC 应用中间接使用。\n\nTURN（Traversal using Relay NAT）是一种整合了 STUN 协议的更高级解决方案，大多数基于 WebRTC 的商业服务都使用 TURN 服务器在对等方之间建立连接。WebRTC API 直接支持 STUN 和 TURN，在更完整的术语“互联网连接建立”下收集。创建 WebRTC 连接时，我们通常会在 RTCPeerConnection 对象的配置中提供一个或多个 ICE 服务器。\n\n# Trickle ICE\n\n创建 RTCPeerConnection 对象后，底层框架会使用提供的 ICE 服务器收集连接建立的候选对象（ICE 候选对象）。RTCPeerConnection 上的事件 icegatheringstatechange 会指示 ICE 收集的状态为（new、gathering 或 complete）。\n\n虽然对等设备可以等待 ICE 收集完成，但通常要高效地使用“滚动冰”技术，并在发现每个 ICE 候选设备后将其传输到远程对等设备。这将大大缩短对等连接的设置时间，并允许视频通话以更低的延迟开始。\n\n要收集 ICE 候选对象，只需为 icecandidate 事件添加监听器即可。针对该监听器发出的 RTCPeerConnectionIceEvent 将包含 candidate 属性，该属性表示应发送到远程对等端的新候选成员（请参阅信号）。\n\n// Listen for local ICE candidates on the local RTCPeerConnection\npeerConnection.addEventListener('icecandidate', event => {\n    if (event.candidate) {\n        signalingChannel.send({'new-ice-candidate': event.candidate});\n    }\n});\n\n// Listen for remote ICE candidates and add them to the local RTCPeerConnection\nsignalingChannel.addEventListener('message', async message => {\n    if (message.iceCandidate) {\n        try {\n            await peerConnection.addIceCandidate(message.iceCandidate);\n        } catch (e) {\n            console.error('Error adding received ice candidate', e);\n        }\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 已建立连接\n\n收到 ICE 候选对象后，我们的对等连接状态最终会变为已连接状态。为了检测这一点，我们在 RTCPeerConnection 中添加一个监听器，用于监听 connectionstatechange 事件。\n\n// Listen for connectionstatechange on the local RTCPeerConnection\npeerConnection.addEventListener('connectionstatechange', event => {\n    if (peerConnection.connectionState === 'connected') {\n        // Peers connected!\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 远程数据流\n\nRTCPeerConnection 连接到远程对等设备后，就可以在它们之间流式传输音频和视频。此时，我们会将从 getUserMedia() 收到的数据流连接到 RTCPeerConnection。媒体流包含至少一个媒体轨道，当我们想将媒体传输到远程对等设备时，它们会分别添加到 RTCPeerConnection 中。\n\nconst localStream = await getUserMedia({vide: true, audio: true});\nconst peerConnection = new RTCPeerConnection(iceConfig);\nlocalStream.getTracks().forEach(track => {\n    peerConnection.addTrack(track, localStream);\n});\n\n\n1\n2\n3\n4\n5\n\n\n轨道可以在连接到远程对等方之前添加到 RTCPeerConnection，因此最好尽早执行此设置，而不是等待连接完成。\n\n\n# 添加远程轨道\n\n为了接收由另一个对等方添加的远程轨道，我们会在本地 RTCPeerConnection 上注册一个监听器，用于监听 track 事件。RTCTrackEvent 包含一个 MediaStream 对象数组，这些对象与对等项的相应本地数据流具有相同的 MediaStream.id 值。在我们的示例中，每个轨道仅与单个数据流相关联。\n\n请注意，尽管 MediaStream ID 在对等端的两端均匹配，但 MediaStreamTrack ID 通常并非如此。\n\nconst remoteVideo = document.querySelector('#remoteVideo');\n\npeerConnection.addEventListener('track', async (event) => {\n    const [remoteStream] = event.streams;\n    remoteVideo.srcObject = remoteStream;\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 数据通道\n\nWebRTC 标准还涵盖用于通过 RTCPeerConnection 发送任意数据的 API。可通过对 RTCPeerConnection 对象调用 createDataChannel() 来完成此操作，该方法会返回 RTCDataChannel 对象。\n\nconst peerConnection = new RTCPeerConnection(configuration);\nconst dataChannel = peerConnection.createDataChannel();\n\n\n1\n2\n\n\n远程对等端可以通过监听 RTCPeerConnection 对象的 datachannel 事件来接收数据通道。收到的事件是 RTCDataChannelEvent 类型，包含一个 channel 属性，该属性表示在对等方之间连接的 RTCDataChannel。\n\nconst peerConnection = new RTCPeerConnection(configuration);\npeerConnection.addEventListener('datachannel', event => {\n    const dataChannel = event.channel;\n});\n\n\n1\n2\n3\n4\n\n\n\n# 打开和关闭事件\n\n在使用数据通道发送数据之前，客户端需要等到数据通道打开后才能使用它。具体方法是监听 open 事件。同样，当任意一侧关闭频道时，也会发生 close 事件。\n\nconst messageBox = document.querySelector('#messageBox');\nconst sendButton = document.querySelector('#sendButton');\nconst peerConnection = new RTCPeerConnection(configuration);\nconst dataChannel = peerConnection.createDataChannel();\n\n// Enable textarea and button when opened\ndataChannel.addEventListener('open', event => {\n    messageBox.disabled = false;\n    messageBox.focus();\n    sendButton.disabled = false;\n});\n\n// Disable input when closed\ndataChannel.addEventListener('close', event => {\n    messageBox.disabled = false;\n    sendButton.disabled = false;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 信息\n\n如需在 RTCDataChannel 上发送消息，请使用要发送的数据调用 send() 函数。此函数的 data 参数可以是字符串、Blob、ArrayBuffer 或 ArrayBufferView。\n\nconst messageBox = document.querySelector('#messageBox');\nconst sendButton = document.querySelector('#sendButton');\n\n// Send a simple text message when we click the button\nsendButton.addEventListener('click', event => {\n    const message = messageBox.textContent;\n    dataChannel.send(message);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n远程对等端将通过监听 message 事件来接收 RTCDataChannel 上发送的消息。\n\nconst incomingMessages = document.querySelector('#incomingMessages');\n\nconst peerConnection = new RTCPeerConnection(configuration);\nconst dataChannel = peerConnection.createDataChannel();\n\n// Append new messages to the box of incoming messages\ndataChannel.addEventListener('message', event => {\n    const message = event.data;\n    incomingMessages.textContent += message + '\\n';\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# TURN 服务器\n\n对于大多数 WebRTC 应用，服务器都需要在对等设备之间中继流量，因为在客户端之间通常无法实现直接套接字（除非这些应用在同一本地网络中）。解决此问题的常见方法是使用 TURN 服务器。术语表示使用中继 NAT 的遍历，是一种中继网络流量的协议。\n\n目前有几种针对 TURN 服务器的选择：在线托管应用（如开源 COTURN 项目）和作为云提供的服务。\n\n有了 TURN 服务器可在线使用后，您只需具备正确的 RTCConfiguration 以供客户端应用使用。以下代码段展示了 RTCPeerConnection 的示例配置，其中 TURN 服务器的主机名为 my-turn-server.mycompany.com，端口为 19403。配置对象还支持 username 和 credentials 属性，以确保对服务器访问的安全。连接到 TURN 服务器时需要这些证书。\n\nconst iceConfiguration = {\n    iceServers: [\n        {\n            urls: 'turn:my-turn-server.mycompany.com:19403',\n            username: 'optional-username',\n            credentials: 'auth-token'\n        }\n    ]\n}\n\nconst peerConnection = new RTCPeerConnection(iceConfiguration);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 测试 WebRTC 应用\n\n为 WebRTC 应用编写自动化测试时，可以对浏览器启用一些有用的配置，以便更轻松地进行开发和测试。\n\n\n# Chrome\n\n在 Chrome 上运行自动化测试时，以下参数在启动时非常有用：\n\n * --allow-file-access-from-files - 允许访问 file:// 网址的 API\n * --disable-translate - 停用翻译弹出窗口\n * --use-fake-ui-for-media-stream - 提供虚假媒体流。在 CI 服务器上运行时非常有用。\n * --use-file-for-fake-audio-capture=<filename> - 提供用于捕获音频的文件。\n * --use-file-for-fake-video-capture=<filename> - 提供在捕获视频时使用的文件。\n * --headless - 在无头模式下运行。在 CI 服务器上运行时非常有用。\n * --mute-audio - 将音频输出静音。\n\n\n# Firefox\n\n在 Firefox 上运行自动化测试时，您需要提供一组偏好设置键，这些键将用于已启动的实例。以下是用于 WebRTC 自动化测试示例的配置：\n\n\"prefs\": {\n    \"browser.cache.disk.enable\": false,\n    \"browser.cache.disk.capacity\": 0,\n    \"browser.cache.disk.smart_size.enabled\": false,\n    \"browser.cache.disk.smart_size.first_run\": false,\n    \"browser.sessionstore.resume_from_crash\": false,\n    \"browser.startup.page\": 0,\n    \"media.navigator.streams.fake\": true,\n    \"media.navigator.permission.disabled\": true,\n    \"device.storage.enabled\": false,\n    \"media.gstreamer.enabled\": false,\n    \"browser.startup.homepage\": \"about:blank\",\n    \"browser.startup.firstrunSkipsHomepage\": false,\n    \"extensions.update.enabled\": false,\n    \"app.update.enabled\": false,\n    \"network.http.use-cache\": false,\n    \"browser.shell.checkDefaultBrowser\": false\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# WebRTC运行机制\n\n\n# 轨与流\n\n\n\n * 轨：比如一路音频，就是一路轨;一路视频，也是一路轨。两条轨之间是不相交的，单独存放！！两路音频也是两路轨，也是不相交的。\n * 流：媒体流，内部包含了很多轨，两者属于层级关系。\n\n\n# 重要类\n\n * MediaStream：同前面的讲解。\n * RTCPeerConnection：是整个WebRTC中最重要的类（大而全），包含了很多的功能。对于应用层非常方便，在应用层只要创建了 PeerConnection，然后将流放入 PeerConnection 中即可，其他的逻辑全部由 peerConnection 内部实现\n * RTCDataChannel：对于非音视频的数据，都通过dataChannel进行传输。其中RTCDataChannel是通过RTCPeerConnection获取的。\n\n\n# PeerConnection调用过程\n\n\n\nPeerConnection中包含两个线程，Worker线程和Signaling线程，可以创建 PeerConnectionFactory ，之后 PeerConnectionFactory 可以创建 PeerConnection 和 LocalMediaStream 和 LocalVideo/AudioTrack，通过 AddTrack 将我们创建的多个 Track 轨加入到 MediaStream 流中，通过 AddStream 可以将多个 MediaStream 流（与多方通信，每一方（每一个参与单位）都是对应一个Stream）加入同一个 PeerConnection 中（复用）。\n\n\n# 调用时序图\n\n\n\n 1. 首先应用层 Application（注意这里Application本身就是一个 PeerConnectionObserver），创建出一个 PeerConnectionFactory(通过CreatePeerConnectionFactory)；\n 2. PeerConnectionFactory 触发 CreatePeerConnection、CreateLocalMediaStream、CreateLocalVideoTrack、CreateLocalAudioTrack 创建了 PeerConnection、MediaStream 等等实例；\n 3. 然后通过 AddTrack，把各种轨（track）加到流（LocalMediaStream）中去，然后通过 AddStream，把流加到 PeerConnection 中；\n 4. 流加到 PeerConnection 之后，会通过 CommitStreamChanges 提交流的变化；当流发生变化的时候，会触发 OnSignalingMessage 事件，创造出一个 offer【SDP描述信息】；\n 5. 有了 offer【SDP描述信息】之后，就会通过应用层Application，通过信令，发送到远端【Send offer to the remote peer】；\n\n扩展\n\n【SDP描述信息】内容：有哪些音视频数据，音视频数据的格式分别是什么，传输地址是什么等。\n\n 6. 远端收到数据后，则根据 offerSDP，回复一个 answerSDP【Get answer from the remote peer】，交给本地信令；\n 7. 信令收到远端的 answerSDP 之后，会把信息传给本地 PeerConnection【ProcessSignalingMessage】，本地 PeerConnection 就会拿到对方的媒体流信息、传输端口、传输地址；至此，远端和本地就打通连接，可以相互传媒体数据；\n 8. 远端数据来的时候，PeerConnection 还会将远端的流添加到Application中去；【OnAddStream（注意区分AddStream）】\n\n\n# 声明\n\n * 本文部分内容来源于WebRTC学习（一）WebRTC了解 - 山上有风景，特此感谢。\n\n\n# 实例\n\n * WebRTC samples\n\n\n# 参考\n\n * WebRTC 使用入门\n * webrtc/samples: WebRTC Web demos and samples\n * WebRTC学习（一）WebRTC了解 - 山上有风景",normalizedContent:"# 什么是 webrtc？\n\n面向网络的实时通信：\n\n借助 webrtc，您可以为应用添加基于开放标准运行的实时通信功能。它支持在对等设备之间发送视频、语音和通用数据，使开发者能够构建强大的语音和视频通信解决方案。这项技术适用于所有现代浏览器以及所有主要平台的原生客户端。webrtc 采用的技术是开放网络标准，以常规 javascript api 的形式在所有主流浏览器中提供。对于原生客户端（例如 android 和 ios 应用），可以使用具备相同功能的库。\n\n特点：\n\n * 音视频处理+即时通讯的开源库\n * 2010 年 google 将其开源\n * 优秀的多媒体框架，跨平台\n\n\n# webrtc 可以做什么？\n\n将webrtc加入浏览器，使得浏览器的功能更加强大。webrtc（web real-time communication）项目的最终目的主要是让web开发者能够基于浏览器（chrome\\firefox...）轻易快捷开发出丰富的实时多媒体应用，而无需下载安装任何插件，web开发者也无需关注多媒体的数字信号处理过程，只需编写简单的javascript程序即可实现，w3c等组织正在制定javascript 标准api，目前是webrtc 1.0版本即draft状态；另外webrtc还希望能够建立一个多互联网浏览器间健壮的实时通信的平台，形成开发者与浏览器厂商良好的生态环境。同时，google也希望和致力于让webrtc的技术成为html5标准之一，可见google布局之深远。\n\nwebrtc 有许多不同的用例，从使用摄像头或麦克风的基本 web 应用，到更高级的视频通话应用和屏幕共享。\n\n * 音视频实时互动\n * 游戏、即时通讯、文件传输等等\n * 传输、音视频处理（回音消除、降噪等）\n\nwebrtc 的应用场景：\n\n\n\n愿景：各浏览器之间可以快速开发可以实时互动的音视频的应用场景\n\n\n\n\n# 难点\n\n * 过多的协议，webrtc太庞大、烦杂，门槛高。\n * 客户端与服务端分离，webrtc只有客户端，没有服务端，需要自己根据业务实现。\n * 相关资料少。\n * 网上代码错误太多。\n\n\n# webrtc与ffmpeg\n\n * webrtc与ffmpeg是音视频领域的两个佼佼者，两个侧重点不同。\n * ffmpeg侧重于多媒体文件的编辑，音视频的编解码等。\n * webrtc侧重于处理网络抖动、丢包、评估以及音频处理，回音降噪等等。\n\n\n# 应用流程\n\nwebrtc 应用通常会经过常见的应用流程。访问媒体设备，打开对等连接，发现对等设备，并开始流式传输。\n\n\n# 新功能\n\n\n\n\n# 原理与架构\n\nwebrtc实现了基于网页的视频会议，标准是 whatwg 协议，目的是通过浏览器提供简单的javascript就可以达到实时通讯（real-time communications (rtc)）能力。\n\n\n\nwebrtc整体架构主要分为两部分：\n\n * 第一部分为绿色区域，为webrtc库所提供的核心功能。\n * 第二部分为紫色区域，是浏览器提供的javascript的api层，也就是说浏览器对webrtc的核心层的c++ api做了一层封装，封装成为了javascript接口。\n * 第三部分为箭头区域，是很多的上层应用。\n * 调用顺序就是从上到下。\n\n\n# 核心层\n\n分为如下4层：\n\n\n\n * 第一层为c++ api，是webrtc库提供给浏览器javascript层的核心功能api接口（比如：连接、p2p进行连接、传输质量、设备管理....）。\n * 第二层为session层，上下文管理层，音频、视频、非音视频的数据传输，都通过session层处理，实现相关逻辑。\n * 第三层包括音频引擎、视频引擎、传输模块。\n * 第四层与硬件相关，包括音视频的采集、网络io （可重载的，可以使用自己的方案）\n\n注意：在webrtc中没有对视频进行渲染处理，所以需要我们在应用中自己实现。\n\n\n# 引擎层\n\n引擎层包括音频引擎、视频引擎、传输模块。将这3个模块分隔开来，逻辑更加清晰。另外音视频的同步不是在引擎层实现。\n\n\n\n音频引擎：包含一系列音频多媒体处理的框架，包括从视频采集卡到网络传输端等整个解决方案。voiceengine是webrtc极具价值的技术之一，是google收购gips公司后开源的。\n\n# 音频引擎\n\n# 编解码器\n\n * isac（internet speech audio codec）：针对voip和音频流的宽带和超宽带音频编解码器，是webrtc音频引擎的默认的编解码器。\n\n参数\n\n * 采样频率：16khz，24khz，32khz；（默认为16khz）\n * 自适应速率为10kbit/s ~ 52kbit/s\n * 自适应包大小：30~60ms\n * 算法延时：frame + 3ms\n\n * ilbc（internet low bitrate codec）：voip音频流的窄带语音编解码器。\n\n参数\n\n * 采样频率：8khz；\n * 20ms帧比特率为15.2kbps\n * 30ms帧比特率为13.33kbps\n * 标准由ietf rfc3951和rfc3952定义\n\n# 防止抖动与丢失\n\nneteq for voice：针对音频软件实现的语音信号处理元件。\n\nneteq算法是自适应抖动控制算法以及语音包丢失隐藏算法。使其能够快速且高解析度地适应不断变化的网络环境，确保音质优美且缓冲延迟最小。 是gips公司独步天下的技术，能够有效的处理由于网络抖动和语音包丢失时候对语音质量产生的影响。\n\nneteq 也是webrtc中一个极具价值的技术，对于提高voip质量有明显效果，加以aec\\nr\\agc等模块集成使用，效果更好。\n\n# 回音消除、降噪\n\n * acoustic echo canceler (aec) ：回声消除器是一个基于软件的信号处理元件，能实时的去除mic采集到的回声。\n * noise reduction (nr)：噪声抑制也是一个基于软件的信号处理元件，用于消除与相关voip的某些类型的背景噪声（嘶嘶声，风扇噪音等等……）。\n\n# 视频引擎\n\n视频引擎包含一系列视频处理的整体框架，从摄像头采集视频到视频信息网络传输再到视频显示整个完整过程的解决方案。\n\n * 编解码器：视频图像编解码器，是webrtc视频引擎的默认的编解码器。vp8适合实时通信应用场景，因为它主要是针对低延时而设计的编解码器。\n\n扩展\n\nvpx编解码器是google收购on2公司后开源的，vpx现在是webm项目的一部分，而webm项目是google致力于推动的html5标准之一\n\n * 视频抖动缓冲器：video jitter buffer，可以降低由于视频抖动和视频信息包丢失带来的不良影响。\n * 图像质量增强模块：image enhancements，对网络摄像头采集到的图像进行处理，包括明暗度检测、颜色增强、降噪处理等功能，用来提升视频质量。\n\n\n# 传输层\n\n底层使用udp，上层使用rtp。所有的音视频的接收与发送，都是通过传输模块实现的。此外在传输层实现了网络链路的检测，进行网络带宽的估计，从而对（音视频、非音视频）数据的传输进行控制。\n\n扩展\n\n * 由于浏览器需要安全传输，所以使用了 srtp 协议，为了进行控制，使用了 rtcp;\n * 为了处理多个流复用同一个通道，实现了 multiplexing。\n * 最下面实现了p2p相关的协议，比如 stun + trun + ice。\n * 虽然udp很适合实时通讯，但是也有需要使用tcp的场景：连通性tcp要优于udp，假如国内外通信，可能某些区域不允许通过udp进行实时传输。为了保证连通率，优先选择udp，如果udp无法通信，则选择tcp，以此来保证连通率。当然，也存在部分情况，tcp依旧不通，比如通过企业内部网访问，网关拒绝访问外网，这时可以使用https。这时不太保证实时性了。\n\n\n# webrtc api\n\nwebrtc 标准概括介绍了两种不同的技术：媒体捕获设备和点对点连接。\n\n媒体捕获设备包括摄像机和麦克风，还包括屏幕捕获设备。对于摄像头和麦克风，我们使用 navigator.mediadevices.getusermedia() 来捕获 mediastreams。对于屏幕录制，我们改为使用 navigator.mediadevices.getdisplaymedia()。\n\n点对点连接由 rtcpeerconnection 接口处理。这是在 webrtc 中两个对等方之间建立和控制连接的中心点。\n\n\n# 媒体设备使用入门\n\n针对 web 开发时，webrtc 标准提供了用于访问连接到计算机或智能手机的相机和麦克风的 api。这些设备通常称为媒体设备，可以通过实现 mediadevices 接口的 navigator.mediadevices 对象使用 javascript 进行访问。通过此对象，我们可以枚举所有已连接的设备，监听设备的变化（设备连接或断开连接时）以及打开设备以检索媒体流（见下文）。\n\n其最常见的方式是通过 getusermedia() 函数，该函数会返回一个解析为匹配媒体设备的 mediastream 的 promise。此函数采用单个 mediastreamconstraints 对象，用于指定我们的要求。例如，要简单地打开默认麦克风和摄像头，请执行以下操作。\n\nconst openmediadevices = async (constraints) => {\n    return await navigator.mediadevices.getusermedia(constraints);\n}\n\ntry {\n    const stream = openmediadevices({'video':true,'audio':true});\n    console.log('got mediastream:', stream);\n} catch(error) {\n    console.error('error accessing media devices.', error);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n调用 getusermedia() 将触发权限请求。如果用户接受该权限，系统会使用包含一个视频和一个音轨的 mediastream 解析该 promise。如果权限遭拒，系统会抛出 permissiondeniederror。如果没有连接任何匹配的设备，则会抛出 notfounderror。\n\n\n# 查询媒体设备\n\n在更复杂的应用中，我们很可能需要检查所有连接的摄像头和麦克风，并向用户提供相应的反馈。这可以通过调用 enumeratedevices() 函数来实现。这将返回一个 promise，它可以解析为描述每个已知媒体设备的 mediadevicesinfo 数组。我们可以用它来呈现界面，让用户选择他们喜欢的那个。每个 mediadevicesinfo 都包含一个名为 kind 的属性，其值为 audioinput、audiooutput 或 videoinput，指示它是哪种类型的媒体设备。\n\nasync function getconnecteddevices(type) {\n    const devices = await navigator.mediadevices.enumeratedevices();\n    return devices.filter(device => device.kind === type)\n}\n\nconst videocameras = getconnecteddevices('videoinput');\nconsole.log('cameras found:', videocameras);\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 监听设备更改\n\n大多数计算机都支持在运行时插入各种设备。它可能是通过 usb 连接的摄像头、蓝牙耳机或一组外部扬声器。为了正确支持这一点，web 应用应监听媒体设备的变化。这可以通过为 devicechange 事件的 navigator.mediadevices 添加监听器来实现。\n\n// updates the select element with the provided set of cameras\nfunction updatecameralist(cameras) {\n    const listelement = document.queryselector('select#availablecameras');\n    listelement.innerhtml = '';\n    cameras.map(camera => {\n        const cameraoption = document.createelement('option');\n        cameraoption.label = camera.label;\n        cameraoption.value = camera.deviceid;\n        return cameraoption;\n    }).foreach(cameraoption => listelement.add(cameraoption));\n}\n\n// fetch an array of devices of a certain type\nasync function getconnecteddevices(type) {\n    const devices = await navigator.mediadevices.enumeratedevices();\n    return devices.filter(device => device.kind === type)\n}\n\n// get the initial set of cameras connected\nconst videocameras = getconnecteddevices('videoinput');\nupdatecameralist(videocameras);\n\n// listen for changes to media devices and update the list accordingly\nnavigator.mediadevices.addeventlistener('devicechange', event => {\n    const newcameralist = getconnecteddevices('video');\n    updatecameralist(newcameralist);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# 媒体限制\n\n如果约束对象必须实现 mediastreamconstraints 接口并将其作为参数传递给 getusermedia()，我们就可以打开符合特定要求的媒体设备。此要求可以非常宽泛（音频和/或视频），也可以非常具体（最低相机分辨率或确切设备 id）。建议使用 getusermedia() api 的应用先检查现有设备，然后使用 deviceid 限制条件指定与设备完全匹配的限制条件。如果可能，设备还会根据限制条件进行配置。我们可以对麦克风启用回声消除功能，也可以从摄像头设置视频的特定或最小宽度和高度。\n\nasync function getconnecteddevices(type) {\n    const devices = await navigator.mediadevices.enumeratedevices();\n    return devices.filter(device => device.kind === type)\n}\n\n// open camera with at least minwidth and minheight capabilities\nasync function opencamera(cameraid, minwidth, minheight) {\n    const constraints = {\n        'audio': {'echocancellation': true},\n        'video': {\n            'deviceid': cameraid,\n            'width': {'min': minwidth},\n            'height': {'min': minheight}\n            }\n        }\n\n    return await navigator.mediadevices.getusermedia(constraints);\n}\n\nconst cameras = getconnecteddevices('videoinput');\nif (cameras && cameras.length > 0) {\n    // open first available video camera with a resolution of 1280x720 pixels\n    const stream = opencamera(cameras[0].deviceid, 1280, 720);\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\n\n# 本地播放\n\n媒体设备打开后，如果有 mediastream，我们可以将其分配给视频或音频元素，以在本地播放流。\n\nasync function playvideofromcamera() {\n    try {\n        const constraints = {'video': true, 'audio': true};\n        const stream = await navigator.mediadevices.getusermedia(constraints);\n        const videoelement = document.queryselector('video#localvideo');\n        videoelement.srcobject = stream;\n    } catch(error) {\n        console.error('error opening video camera.', error);\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n与 getusermedia() 一起使用的典型视频元素所需的 html 通常具有 autoplay 和 playsinline 属性。autoplay 属性将使分配给元素的新数据流自动播放。playsinline 属性允许视频在特定移动浏览器中内嵌播放，而不仅仅是全屏播放。此外，我们还建议对直播使用 controls=\"false\"，除非用户应能够暂停这些直播。\n\n<html>\n<head><title>local video playback</video></head>\n<body>\n    <video id=\"localvideo\" autoplay playsinline controls=\"false\"/>\n</body>\n</html>\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 媒体捕获和约束\n\nwebrtc 的媒体部分介绍了如何使用能够捕捉视频和音频的硬件（例如相机和麦克风），以及媒体流的工作原理。此外，还介绍了显示媒体，这是应用可执行屏幕捕获的方式。\n\n\n# 媒体设备\n\n您可以通过 navigator.mediadevices 对象访问和管理浏览器支持的所有摄像头和麦克风。应用可以检索已连接设备的最新列表并监听变化，因为许多相机和微型麦克风可通过 usb 连接，并且可以在应用生命周期内连接和断开连接。由于媒体设备的状态可能会随时发生变化，因此建议应用注册设备更改，以便正确处理更改。\n\n\n# 约束条件\n\n访问媒体设备时，建议您提供尽可能详细的限制条件。虽然可以通过简单的约束条件打开默认摄像头和麦克风，但其提供的媒体流可能明显优于应用的最佳流。\n\n具体的约束条件在 mediatrackconstraint 对象中定义，一个针对音频，另一个针对视频。此对象中的特性类型为 constraintlong、constraintboolean、constraintdouble 或 constraintdomstring。这些对象可以是特定值（例如数字、布尔值或字符串）、范围（具有最小值和最大值的 longrange 或 doublerange）或具有 ideal 或 exact 定义的对象。对于特定值，浏览器将尝试选择尽可能接近的值。对于某个范围，将使用该范围内的最佳值。指定 exact 后，系统将仅返回与约束条件完全匹配的媒体流。\n\n// camera with a resolution as close to 640x480 as possible\n{\n    \"video\": {\n        \"width\": 640,\n        \"height\": 480\n    }\n}\n// camera with a resolution in the range 640x480 to 1024x768\n{\n    \"video\": {\n        \"width\": {\n            \"min\": 640,\n            \"max\": 1024\n        },\n        \"height\": {\n            \"min\": 480,\n            \"max\": 768\n        }\n    }\n}\n// camera with the exact resolution of 1024x768\n{\n    \"video\": {\n        \"width\": {\n            \"exact\": 1024\n        },\n        \"height\": {\n            \"exact\": 768\n        }\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n\n\n为了确定某个媒体流的特定轨道的实际配置，我们可以调用 mediastreamtrack.getsettings()，它会返回当前应用的 mediatracksettings。\n\n此外，也可以通过对媒体轨道上调用 applyconstraints() 来更新已打开的媒体设备上的轨道约束条件。这样，应用无需重新关闭现有音频流，即可重新配置媒体设备。\n\n\n# 显示媒体\n\n想要能够截取和录制屏幕的应用必须使用 display media api。函数 getdisplaymedia()（属于 navigator.mediadevices 的一部分）与getusermedia() 类似，用于打开显示内容（或部分内容，如窗口）。返回的 mediastream 与使用 getusermedia() 时相同。\n\ngetdisplaymedia() 的约束条件与常规视频或音频输入资源的限制不同。\n\n{\n    video: {\n        cursor: 'always' | 'motion' | 'never',\n        displaysurface: 'application' | 'browser' | 'monitor' | 'window'\n    }\n}\n\n\n1\n2\n3\n4\n5\n6\n\n\n上述代码片段展示了屏幕录制的特殊限制的工作原理。请注意，并非所有支持显示媒体支持的浏览器都支持这些属性。\n\n\n# 数据流和轨道\n\nmediastream 表示媒体内容流，由音频和视频轨道 (mediastreamtrack) 组成。您可以通过调用 mediastream.gettracks() 从 mediastream 检索所有轨道，该方法会返回一组 mediastreamtrack 对象。\n\n# 媒体流跟踪\n\nmediastreamtrack 具有的 kind 属性为 audio 或 video，用于表示其表示的媒体类型。您可以通过切换其 enabled 属性将各个轨道静音。轨道具有布尔属性 remote，它会指示它来自 rtcpeerconnection 而来自远程对等设备。\n\n\n# 开始使用对等连接\n\n点对点连接是 webrtc 规范的一部分，该规范旨在对点一台计算机上的两台应用进行连接，以使用点对点协议进行通信。对等设备之间的通信可以是视频、音频或任意二进制数据（适用于支持 rtcdatachannel api 的客户端）。为了发现两个对等端如何连接，两个客户端都需要提供 ice server 配置。这是 stun 或 turn 服务器，其作用是向每个客户端提供 ice 候选对象，然后这些客户端将被传输到远程对等方。这种转移 ice 候选对象的方式通常称为信号。\n\n\n# 信令\n\nwebrtc 规范包含用于与 ice（互联网连接建立）服务器通信的 api，但信令组件并不属于该组件。需要发出信号才能让两个对等网络共享它们之间的连接方式。这通常可以通过基于 http 的常规 web api（即 rest 服务或其他 rpc 机制）解决，在此过程中，网络应用可在发起对等连接之前中继必要的信息。\n\n以下代码段展示了如何使用虚构信号服务异步发送和接收消息。必要时，本指南的其余示例将使用该方法。\n\n// set up an asynchronous communication channel that will be\n// used during the peer connection setup\nconst signalingchannel = new signalingchannel(remoteclientid);\nsignalingchannel.addeventlistener('message', message => {\n    // new message from remote client received\n});\n\n// send an asynchronous message to the remote client\nsignalingchannel.send('hello!');\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n信令可以通过许多不同的方式实现，webrtc 规范不偏好任何特定的解决方案。\n\n\n# 启动对等连接\n\n每个对等连接都由一个 rtcpeerconnection 对象处理。此类的构造函数接受单个 rtcconfiguration 对象作为其参数。此对象定义对等连接的设置方式，应包含关于要使用的 ice 服务器的信息。\n\n创建 rtcpeerconnection 后，我们需要创建 sdp offer 或 answer，具体取决于我们是发起通话的对等方还是接收方的对等方。sdp offer 或 answer 一经创建，就必须通过其他信道发送给远程对等方。将 sdp 对象传递给远程对等设备的过程称为信号，不在 webrtc 规范的涵盖范围内。\n\n为了从调用方启动对等连接设置，我们创建一个 rtcpeerconnection 对象，然后调用 createoffer() 以创建 rtcsessiondescription 对象。此会话说明设置为使用 setlocaldescription() 的本地说明，然后通过我们的信令通道发送到接收端。我们还针对针对信令渠道设置了监听器，接收方收到所提供会话说明后得回答会被监听到。\n\nasync function makecall() {\n    const configuration = {'iceservers': [{'urls': 'stun:stun.l.google.com:19302'}]}\n    const peerconnection = new rtcpeerconnection(configuration);\n    signalingchannel.addeventlistener('message', async message => {\n        if (message.answer) {\n            const remotedesc = new rtcsessiondescription(message.answer);\n            await peerconnection.setremotedescription(remotedesc);\n        }\n    });\n    const offer = await peerconnection.createoffer();\n    await peerconnection.setlocaldescription(offer);\n    signalingchannel.send({'offer': offer});\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n\n在接收端，创建 rtcpeerconnection 实例，创建 offer 并通过信令通道发送到远程。在等待 remote answer 的消息监听中，我们使用 setremotedescription() 设置收到的 answer。在远端，我们调用 createanswer() 为收到的 offer 创建答案。系统会使用 setlocaldescription() 将此答案设置为本地说明，然后通过我们的信令服务器将其发送至发起调用的一方。\n\nconst peerconnection = new rtcpeerconnection(configuration);\nsignalingchannel.addeventlistener('message', async message => {\n    if (message.offer) {\n        peerconnection.setremotedescription(new rtcsessiondescription(message.offer));\n        const answer = await peerconnection.createanswer();\n        await peerconnection.setlocaldescription(answer);\n        signalingchannel.send({'answer': answer});\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\n两个对等方同时设置了本地和远程会话说明之后，他们就会了解远程对等方的功能。这并不意味着对等设备之间的连接已准备就绪。为此，我们需要在每个对等端收集 ice 候选项，并通过信令通道传输给另一个对等方。\n\n\n# ice candidate\n\n两个对等方必须用 webrtc 交换连接信息，然后才能使用 webrtc 进行通信。由于网络条件可能因多种因素而发生变化，因此通常使用外部服务来发现连接到对等网络的潜在候选对象。此服务称为 ice，使用的是 stun 或 turn 服务器。stun 代表用于 nat 的会话遍历实用程序，通常在大多数 webrtc 应用中间接使用。\n\nturn（traversal using relay nat）是一种整合了 stun 协议的更高级解决方案，大多数基于 webrtc 的商业服务都使用 turn 服务器在对等方之间建立连接。webrtc api 直接支持 stun 和 turn，在更完整的术语“互联网连接建立”下收集。创建 webrtc 连接时，我们通常会在 rtcpeerconnection 对象的配置中提供一个或多个 ice 服务器。\n\n# trickle ice\n\n创建 rtcpeerconnection 对象后，底层框架会使用提供的 ice 服务器收集连接建立的候选对象（ice 候选对象）。rtcpeerconnection 上的事件 icegatheringstatechange 会指示 ice 收集的状态为（new、gathering 或 complete）。\n\n虽然对等设备可以等待 ice 收集完成，但通常要高效地使用“滚动冰”技术，并在发现每个 ice 候选设备后将其传输到远程对等设备。这将大大缩短对等连接的设置时间，并允许视频通话以更低的延迟开始。\n\n要收集 ice 候选对象，只需为 icecandidate 事件添加监听器即可。针对该监听器发出的 rtcpeerconnectioniceevent 将包含 candidate 属性，该属性表示应发送到远程对等端的新候选成员（请参阅信号）。\n\n// listen for local ice candidates on the local rtcpeerconnection\npeerconnection.addeventlistener('icecandidate', event => {\n    if (event.candidate) {\n        signalingchannel.send({'new-ice-candidate': event.candidate});\n    }\n});\n\n// listen for remote ice candidates and add them to the local rtcpeerconnection\nsignalingchannel.addeventlistener('message', async message => {\n    if (message.icecandidate) {\n        try {\n            await peerconnection.addicecandidate(message.icecandidate);\n        } catch (e) {\n            console.error('error adding received ice candidate', e);\n        }\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 已建立连接\n\n收到 ice 候选对象后，我们的对等连接状态最终会变为已连接状态。为了检测这一点，我们在 rtcpeerconnection 中添加一个监听器，用于监听 connectionstatechange 事件。\n\n// listen for connectionstatechange on the local rtcpeerconnection\npeerconnection.addeventlistener('connectionstatechange', event => {\n    if (peerconnection.connectionstate === 'connected') {\n        // peers connected!\n    }\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 远程数据流\n\nrtcpeerconnection 连接到远程对等设备后，就可以在它们之间流式传输音频和视频。此时，我们会将从 getusermedia() 收到的数据流连接到 rtcpeerconnection。媒体流包含至少一个媒体轨道，当我们想将媒体传输到远程对等设备时，它们会分别添加到 rtcpeerconnection 中。\n\nconst localstream = await getusermedia({vide: true, audio: true});\nconst peerconnection = new rtcpeerconnection(iceconfig);\nlocalstream.gettracks().foreach(track => {\n    peerconnection.addtrack(track, localstream);\n});\n\n\n1\n2\n3\n4\n5\n\n\n轨道可以在连接到远程对等方之前添加到 rtcpeerconnection，因此最好尽早执行此设置，而不是等待连接完成。\n\n\n# 添加远程轨道\n\n为了接收由另一个对等方添加的远程轨道，我们会在本地 rtcpeerconnection 上注册一个监听器，用于监听 track 事件。rtctrackevent 包含一个 mediastream 对象数组，这些对象与对等项的相应本地数据流具有相同的 mediastream.id 值。在我们的示例中，每个轨道仅与单个数据流相关联。\n\n请注意，尽管 mediastream id 在对等端的两端均匹配，但 mediastreamtrack id 通常并非如此。\n\nconst remotevideo = document.queryselector('#remotevideo');\n\npeerconnection.addeventlistener('track', async (event) => {\n    const [remotestream] = event.streams;\n    remotevideo.srcobject = remotestream;\n});\n\n\n1\n2\n3\n4\n5\n6\n\n\n\n# 数据通道\n\nwebrtc 标准还涵盖用于通过 rtcpeerconnection 发送任意数据的 api。可通过对 rtcpeerconnection 对象调用 createdatachannel() 来完成此操作，该方法会返回 rtcdatachannel 对象。\n\nconst peerconnection = new rtcpeerconnection(configuration);\nconst datachannel = peerconnection.createdatachannel();\n\n\n1\n2\n\n\n远程对等端可以通过监听 rtcpeerconnection 对象的 datachannel 事件来接收数据通道。收到的事件是 rtcdatachannelevent 类型，包含一个 channel 属性，该属性表示在对等方之间连接的 rtcdatachannel。\n\nconst peerconnection = new rtcpeerconnection(configuration);\npeerconnection.addeventlistener('datachannel', event => {\n    const datachannel = event.channel;\n});\n\n\n1\n2\n3\n4\n\n\n\n# 打开和关闭事件\n\n在使用数据通道发送数据之前，客户端需要等到数据通道打开后才能使用它。具体方法是监听 open 事件。同样，当任意一侧关闭频道时，也会发生 close 事件。\n\nconst messagebox = document.queryselector('#messagebox');\nconst sendbutton = document.queryselector('#sendbutton');\nconst peerconnection = new rtcpeerconnection(configuration);\nconst datachannel = peerconnection.createdatachannel();\n\n// enable textarea and button when opened\ndatachannel.addeventlistener('open', event => {\n    messagebox.disabled = false;\n    messagebox.focus();\n    sendbutton.disabled = false;\n});\n\n// disable input when closed\ndatachannel.addeventlistener('close', event => {\n    messagebox.disabled = false;\n    sendbutton.disabled = false;\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\n\n# 信息\n\n如需在 rtcdatachannel 上发送消息，请使用要发送的数据调用 send() 函数。此函数的 data 参数可以是字符串、blob、arraybuffer 或 arraybufferview。\n\nconst messagebox = document.queryselector('#messagebox');\nconst sendbutton = document.queryselector('#sendbutton');\n\n// send a simple text message when we click the button\nsendbutton.addeventlistener('click', event => {\n    const message = messagebox.textcontent;\n    datachannel.send(message);\n})\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n远程对等端将通过监听 message 事件来接收 rtcdatachannel 上发送的消息。\n\nconst incomingmessages = document.queryselector('#incomingmessages');\n\nconst peerconnection = new rtcpeerconnection(configuration);\nconst datachannel = peerconnection.createdatachannel();\n\n// append new messages to the box of incoming messages\ndatachannel.addeventlistener('message', event => {\n    const message = event.data;\n    incomingmessages.textcontent += message + '\\n';\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# turn 服务器\n\n对于大多数 webrtc 应用，服务器都需要在对等设备之间中继流量，因为在客户端之间通常无法实现直接套接字（除非这些应用在同一本地网络中）。解决此问题的常见方法是使用 turn 服务器。术语表示使用中继 nat 的遍历，是一种中继网络流量的协议。\n\n目前有几种针对 turn 服务器的选择：在线托管应用（如开源 coturn 项目）和作为云提供的服务。\n\n有了 turn 服务器可在线使用后，您只需具备正确的 rtcconfiguration 以供客户端应用使用。以下代码段展示了 rtcpeerconnection 的示例配置，其中 turn 服务器的主机名为 my-turn-server.mycompany.com，端口为 19403。配置对象还支持 username 和 credentials 属性，以确保对服务器访问的安全。连接到 turn 服务器时需要这些证书。\n\nconst iceconfiguration = {\n    iceservers: [\n        {\n            urls: 'turn:my-turn-server.mycompany.com:19403',\n            username: 'optional-username',\n            credentials: 'auth-token'\n        }\n    ]\n}\n\nconst peerconnection = new rtcpeerconnection(iceconfiguration);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\n\n# 测试 webrtc 应用\n\n为 webrtc 应用编写自动化测试时，可以对浏览器启用一些有用的配置，以便更轻松地进行开发和测试。\n\n\n# chrome\n\n在 chrome 上运行自动化测试时，以下参数在启动时非常有用：\n\n * --allow-file-access-from-files - 允许访问 file:// 网址的 api\n * --disable-translate - 停用翻译弹出窗口\n * --use-fake-ui-for-media-stream - 提供虚假媒体流。在 ci 服务器上运行时非常有用。\n * --use-file-for-fake-audio-capture=<filename> - 提供用于捕获音频的文件。\n * --use-file-for-fake-video-capture=<filename> - 提供在捕获视频时使用的文件。\n * --headless - 在无头模式下运行。在 ci 服务器上运行时非常有用。\n * --mute-audio - 将音频输出静音。\n\n\n# firefox\n\n在 firefox 上运行自动化测试时，您需要提供一组偏好设置键，这些键将用于已启动的实例。以下是用于 webrtc 自动化测试示例的配置：\n\n\"prefs\": {\n    \"browser.cache.disk.enable\": false,\n    \"browser.cache.disk.capacity\": 0,\n    \"browser.cache.disk.smart_size.enabled\": false,\n    \"browser.cache.disk.smart_size.first_run\": false,\n    \"browser.sessionstore.resume_from_crash\": false,\n    \"browser.startup.page\": 0,\n    \"media.navigator.streams.fake\": true,\n    \"media.navigator.permission.disabled\": true,\n    \"device.storage.enabled\": false,\n    \"media.gstreamer.enabled\": false,\n    \"browser.startup.homepage\": \"about:blank\",\n    \"browser.startup.firstrunskipshomepage\": false,\n    \"extensions.update.enabled\": false,\n    \"app.update.enabled\": false,\n    \"network.http.use-cache\": false,\n    \"browser.shell.checkdefaultbrowser\": false\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n\n\n\n# webrtc运行机制\n\n\n# 轨与流\n\n\n\n * 轨：比如一路音频，就是一路轨;一路视频，也是一路轨。两条轨之间是不相交的，单独存放！！两路音频也是两路轨，也是不相交的。\n * 流：媒体流，内部包含了很多轨，两者属于层级关系。\n\n\n# 重要类\n\n * mediastream：同前面的讲解。\n * rtcpeerconnection：是整个webrtc中最重要的类（大而全），包含了很多的功能。对于应用层非常方便，在应用层只要创建了 peerconnection，然后将流放入 peerconnection 中即可，其他的逻辑全部由 peerconnection 内部实现\n * rtcdatachannel：对于非音视频的数据，都通过datachannel进行传输。其中rtcdatachannel是通过rtcpeerconnection获取的。\n\n\n# peerconnection调用过程\n\n\n\npeerconnection中包含两个线程，worker线程和signaling线程，可以创建 peerconnectionfactory ，之后 peerconnectionfactory 可以创建 peerconnection 和 localmediastream 和 localvideo/audiotrack，通过 addtrack 将我们创建的多个 track 轨加入到 mediastream 流中，通过 addstream 可以将多个 mediastream 流（与多方通信，每一方（每一个参与单位）都是对应一个stream）加入同一个 peerconnection 中（复用）。\n\n\n# 调用时序图\n\n\n\n 1. 首先应用层 application（注意这里application本身就是一个 peerconnectionobserver），创建出一个 peerconnectionfactory(通过createpeerconnectionfactory)；\n 2. peerconnectionfactory 触发 createpeerconnection、createlocalmediastream、createlocalvideotrack、createlocalaudiotrack 创建了 peerconnection、mediastream 等等实例；\n 3. 然后通过 addtrack，把各种轨（track）加到流（localmediastream）中去，然后通过 addstream，把流加到 peerconnection 中；\n 4. 流加到 peerconnection 之后，会通过 commitstreamchanges 提交流的变化；当流发生变化的时候，会触发 onsignalingmessage 事件，创造出一个 offer【sdp描述信息】；\n 5. 有了 offer【sdp描述信息】之后，就会通过应用层application，通过信令，发送到远端【send offer to the remote peer】；\n\n扩展\n\n【sdp描述信息】内容：有哪些音视频数据，音视频数据的格式分别是什么，传输地址是什么等。\n\n 6. 远端收到数据后，则根据 offersdp，回复一个 answersdp【get answer from the remote peer】，交给本地信令；\n 7. 信令收到远端的 answersdp 之后，会把信息传给本地 peerconnection【processsignalingmessage】，本地 peerconnection 就会拿到对方的媒体流信息、传输端口、传输地址；至此，远端和本地就打通连接，可以相互传媒体数据；\n 8. 远端数据来的时候，peerconnection 还会将远端的流添加到application中去；【onaddstream（注意区分addstream）】\n\n\n# 声明\n\n * 本文部分内容来源于webrtc学习（一）webrtc了解 - 山上有风景，特此感谢。\n\n\n# 实例\n\n * webrtc samples\n\n\n# 参考\n\n * webrtc 使用入门\n * webrtc/samples: webrtc web demos and samples\n * webrtc学习（一）webrtc了解 - 山上有风景",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"读懂 WebRTC's Statistics API",frontmatter:{title:"读懂 WebRTC's Statistics API",date:"2022-06-28T19:14:12.000Z",permalink:"/basic/intro/stats/",categories:["基础","概要"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/20.%E6%A6%82%E8%A6%81/20.stats.html",relativePath:"20.基础/20.概要/20.stats.md",key:"v-3bcd4756",path:"/basic/intro/stats/",headers:[{level:2,title:"场景",slug:"场景",normalizedTitle:"场景",charIndex:2},{level:2,title:"元信息",slug:"元信息",normalizedTitle:"元信息",charIndex:130},{level:2,title:"ICE candidate grid",slug:"ice-candidate-grid",normalizedTitle:"ice candidate grid",charIndex:775},{level:3,title:"RTCIceCandidatePair",slug:"rtcicecandidatepair",normalizedTitle:"rtcicecandidatepair",charIndex:800},{level:3,title:"RTCIceCandidate",slug:"rtcicecandidate",normalizedTitle:"rtcicecandidate",charIndex:800},{level:3,title:"字段含义",slug:"字段含义",normalizedTitle:"字段含义",charIndex:1878},{level:2,title:"Time/Event 时间/事件列表",slug:"time-event-时间-事件列表",normalizedTitle:"time/event 时间/事件列表",charIndex:2863},{level:3,title:"事件含义",slug:"事件含义",normalizedTitle:"事件含义",charIndex:2888},{level:3,title:"Offer",slug:"offer",normalizedTitle:"offer",charIndex:4229},{level:2,title:"Stats Tables 实时变化的统计信息表",slug:"stats-tables-实时变化的统计信息表",normalizedTitle:"stats tables 实时变化的统计信息表",charIndex:13249},{level:3,title:"RTCAudioSource",slug:"rtcaudiosource",normalizedTitle:"rtcaudiosource",charIndex:13279},{level:3,title:"RTCVideoSource",slug:"rtcvideosource",normalizedTitle:"rtcvideosource",charIndex:14110},{level:3,title:"RTCCertificate 含义",slug:"rtccertificate-含义",normalizedTitle:"rtccertificate 含义",charIndex:16252},{level:3,title:"RTCIceCandidate 含义",slug:"rtcicecandidate-含义",normalizedTitle:"rtcicecandidate 含义",charIndex:17521},{level:3,title:"RTCIceCandidatePair 含义",slug:"rtcicecandidatepair-含义",normalizedTitle:"rtcicecandidatepair 含义",charIndex:18847},{level:3,title:"RTCInboundRTPAudioStream 含义",slug:"rtcinboundrtpaudiostream-含义",normalizedTitle:"rtcinboundrtpaudiostream 含义",charIndex:20711},{level:3,title:"RTCInboundRTPVideoStream 含义",slug:"rtcinboundrtpvideostream-含义",normalizedTitle:"rtcinboundrtpvideostream 含义",charIndex:22294},{level:2,title:"RTCMediaStreamTrack 含义",slug:"rtcmediastreamtrack-含义",normalizedTitle:"rtcmediastreamtrack 含义",charIndex:23970},{level:3,title:"RTCPeerConnection 含义",slug:"rtcpeerconnection-含义",normalizedTitle:"rtcpeerconnection 含义",charIndex:24853},{level:3,title:"RTCRemoteOutboundRTPAudioStream",slug:"rtcremoteoutboundrtpaudiostream",normalizedTitle:"rtcremoteoutboundrtpaudiostream",charIndex:21058},{level:3,title:"RTCTransport",slug:"rtctransport",normalizedTitle:"rtctransport",charIndex:17622},{level:3,title:"Stats graphs for RTCAudioSource",slug:"stats-graphs-for-rtcaudiosource",normalizedTitle:"stats graphs for rtcaudiosource",charIndex:26384},{level:3,title:"Stats graphs for RTCVideoSource",slug:"stats-graphs-for-rtcvideosource",normalizedTitle:"stats graphs for rtcvideosource",charIndex:26422},{level:3,title:"Stats graphs for RTCIceCandidatePair",slug:"stats-graphs-for-rtcicecandidatepair",normalizedTitle:"stats graphs for rtcicecandidatepair",charIndex:26460},{level:3,title:"Stats graphs for RTCMediaStreamTrack",slug:"stats-graphs-for-rtcmediastreamtrack",normalizedTitle:"stats graphs for rtcmediastreamtrack",charIndex:26503},{level:3,title:"Stats graphs for RTCOutboundRTPAudioStream",slug:"stats-graphs-for-rtcoutboundrtpaudiostream",normalizedTitle:"stats graphs for rtcoutboundrtpaudiostream",charIndex:26546},{level:3,title:"Stats graphs for RTCOutboundRTPVideoStream",slug:"stats-graphs-for-rtcoutboundrtpvideostream",normalizedTitle:"stats graphs for rtcoutboundrtpvideostream",charIndex:26595},{level:3,title:"Stats graphs for RTCPeerConnection",slug:"stats-graphs-for-rtcpeerconnection",normalizedTitle:"stats graphs for rtcpeerconnection",charIndex:26644},{level:3,title:"Stats graphs for RTCRemoteInboundRtpAudioStream",slug:"stats-graphs-for-rtcremoteinboundrtpaudiostream",normalizedTitle:"stats graphs for rtcremoteinboundrtpaudiostream",charIndex:26685},{level:3,title:"Stats graphs for RTCRemoteInboundRtpVideoStream",slug:"stats-graphs-for-rtcremoteinboundrtpvideostream",normalizedTitle:"stats graphs for rtcremoteinboundrtpvideostream",charIndex:26739},{level:3,title:"Stats graphs for RTCTransport",slug:"stats-graphs-for-rtctransport",normalizedTitle:"stats graphs for rtctransport",charIndex:26793},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:1034}],readingTime:{text:"11 min read",minutes:10.095,time:605700,words:2019},headersStr:"场景 元信息 ICE candidate grid RTCIceCandidatePair RTCIceCandidate 字段含义 Time/Event 时间/事件列表 事件含义 Offer Stats Tables 实时变化的统计信息表 RTCAudioSource RTCVideoSource RTCCertificate 含义 RTCIceCandidate 含义 RTCIceCandidatePair 含义 RTCInboundRTPAudioStream 含义 RTCInboundRTPVideoStream 含义 RTCMediaStreamTrack 含义 RTCPeerConnection 含义 RTCRemoteOutboundRTPAudioStream RTCTransport Stats graphs for RTCAudioSource Stats graphs for RTCVideoSource Stats graphs for RTCIceCandidatePair Stats graphs for RTCMediaStreamTrack Stats graphs for RTCOutboundRTPAudioStream Stats graphs for RTCOutboundRTPVideoStream Stats graphs for RTCPeerConnection Stats graphs for RTCRemoteInboundRtpAudioStream Stats graphs for RTCRemoteInboundRtpVideoStream Stats graphs for RTCTransport 参考",content:'# 场景\n\n在调试 WebRTC 应用时，经常会查看 chrome 浏览器 chrome://webrtc-internals/ 调试页面的调试信息。如下：\n\n\n\n现在我们以 Peer connection 实例 为例。\n\n下面详细解读此页面的信息。\n\n\n# 元信息\n\n// 应用链接，创建 PeerConnection 是的配置信息（RTCConfiguration）\nhttps://webrtc.github.io/samples/src/content/peerconnection/pc1/, { iceServers: [], iceTransportPolicy: all, bundlePolicy: balanced, rtcpMuxPolicy: require, iceCandidatePoolSize: 0, sdpSemantics: "unified-plan", extmapAllowMixed: true }\n// ICE 连接状态的变化过程\nICE connection state: new => checking => connected\n// PeerConnection 连接状态的变化过程\nConnection state: new => connecting => connected\n// PeerConnection 中 signaling 线程执行的状态变化\nSignaling state: new => have-local-offer => stable\n// ICE Candidate 配对的状况\nICE Candidate pair: 172.33.50.23:65226 &lt;=> 172.33.50.23:56145\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# ICE candidate grid\n\n\n\n\n# RTCIceCandidatePair\n\nRTCIceCandidatePair 描述了一对 ICE 候选者，它们共同构成了对两个 WebRTC 端点之间可行连接的描述。RTCIceCandidatePair 包含了 local 和 remote。\n\n * local：描述连接本地端配置的 RTCIceCandidate。\n * remote：描述连接远程端配置的 RTCIceCandidate。\n\n每个 RTCIceCandidatePair 有一个 id。\n\n参考：\n\n * RTCIceCandidatePair - Web APIs | MDN\n\n\n# RTCIceCandidate\n\nRTCIceCandidate 代表一个候选的交互式连接建立 (ICE，Interactive Connectivity Establishment) 配置，可用于建立 RTCPeerConnection。\n\nICE 候选描述了 WebRTC 能够与远程设备通信所需的协议和路由。当开始一个 WebRTC 对等连接时，通常连接的每一端都会提出一些候选者，直到他们相互同意一个描述他们认为最好的连接的候选者。 WebRTC 然后使用该候选人的详细信息来启动连接。\n\n一个 RTCIceCandidatePair 包含了一对 RTCIceCandidate，分别属于 local 和 remote。即 Candidate type 分别为 local-candidate 和 remote-candidate。\n\n可以看到，在上述众多的协商的 RTCIceCandidatePair 中，只有一个 RTCIceCandidatePair 的状态是 succeeded，其余的都是 waiting，可见，在 ICE 协商中，PeerConnection 只选择一个 RTCIceCandidatePair，其余的 RTCIceCandidatePair 都置为 waiting。另外，也只有被选择的 RTCIceCandidatePair 才会有相应的实时数据变化。\n\n\n\n另外，从 W3C 的文档中，我们可以看到 RTCIceCandidatePair 可以具有如下的一些状态：\n\nenum RTCStatsIceCandidatePairState {\n    "frozen",\n    "waiting",\n    "in-progress",\n    "failed",\n    "succeeded"\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 字段含义\n\n其余的数据含义如下：\n\n * Network type / address: 网络类型、地址。RTCIceCandidatePair 的网络为以太网；RTCIceCandidate 的地址。\n * Port:RTCIceCandidate 的端口。\n * Protocol / candidate type: RTCIceCandidatePair 使用的网络协议、RTCIceCandidate 的类型。RTCIceCandidatePair 使用 udp 协议；RTCIceCandidate 的类型为 host。\n * (Pair) Priority: RTCIceCandidatePair 的优先级。\n * Bytes sent / received: RTCIceCandidatePair 上行和下行的数据字节。\n * STUN requests sent / responses received: STUN 发送的请求数和收到的回应数。\n * STUN requests received / responses sent: STUN 收到的请求数和发送的回应数。\n * RTT: 来回通信延迟（Round-trip delay time），在通信（Communication）、电脑网络（Computer network）领域中，意指：在双方通信中，发讯方的信号（Signal）传播（Propagation）到收讯方的时间（意即：传播延迟（Propagation delay）），加上收讯方回传消息到发讯方的时间（如果没有造成双向传播速率差异的因素，此时间与发讯方将信号传播到收讯方的时间一样久）。\n * Last update: 最新更新同级数据的时间。\n\n扩展\n\nenum RTCIceCandidateType {\n  "host",\n  "srflx",\n  "prflx",\n  "relay"\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\nRTCIceCandidate 的类型有如上四种。\n\n参考：\n\n * RTCIceCandidate - Web APIs | MDN\n * Identifiers for WebRTC\'s Statistics API\n * Round-trip delay - Wikipedia\n\n\n# Time/Event 时间/事件列表\n\n\n\n\n# 事件含义\n\n下面我们按照事件发生的顺序分析：\n\n 1. transceiverAdded（添加 RTCRtpTransceiver）\n\nCaused by: addTrack\n\ngetTransceivers()[0]:{\n  mid:null,\n  sender:{\n    track:\'f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\',\n    streams:[\'zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE\'],\n  },\n  receiver:{\n    track:\'17079991-a6fc-49de-b53d-0614f5ac50bb\',\n    streams:[],\n  },\n  direction:\'sendrecv\',\n  currentDirection:null,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n什么是 RTCRtpTransceiver？\n\nWebRTC 接口 RTCRtpTransceiver 描述了 RTCRtpSender 和 RTCRtpReceiver 的永久配对，以及一些共享状态。\n\n每个 SDP 媒体段描述一个双向 SRTP（“安全实时协议，Secure Real Time Protocol”）流（RTCDataChannel 的媒体段除外）。这种发送和接收 SRTP 流的配对对于某些应用程序来说很重要，因此 RTCRtpTransceiver 用于表示这种配对，以及来自媒体段的其他重要状态。每个未禁用的 SRTP 媒体段总是由一个收发器(RTCRtpTransceiver)表示。\n\n收发器使用其 mid 属性唯一标识，该属性与其对应的 m-line 的媒体 ID (mid) 相同。如果一个 RTCRtpTransceiver 的 mid 是非空的则，与一个 m-line 相关联；否则就不相连。\n\nRTCPeerConnection.addTransceiver(）：\n\nRTCPeerConnection 的方法 addTransceiver() 创建一个新的 RTCRtpTransceiver 并将其添加到与 RTCPeerConnection 关联的收发器集合中。每个收发器代表一个双向流，有一个 RTCRtpSender 和一个 RTCRtpReceiver 与之关联。\n\nW3C\n\nRTCRtpTransceiver 接口表示共享公共 mid 的 RTCRtpSender 和 RTCRtpReceiver 的组合。如JSEP 3.4.1中定义的，如果 RTCRtpTransceiver 的 mid 属性非空，则称其与媒体描述相关联，否则不相关。概念上说，一个被关联的收发器代表上一次会话描述中应用的收发器。\n\n * sender：RTCRtpSender 对象负责编码和发送数据到远程对等端。\n * receiver：处理接收和解码传入媒体的 RTCRtpReceiver 对象。\n\n参考：\n\n * RTCRtpTransceiver - Web APIs | MDN\n\n 2. createOffer（创建 Offer）\n\n// 以相应的配置创建 offer\noptions: {offerToReceiveVideo: 1, offerToReceiveAudio: 1, voiceActivityDetection: true, iceRestart: false}\n\n\n1\n2\n\n\n 3. negotiationneeded （需要 offer/answer 协商）\n\n 4. createOfferOnSuccess (type: "offer", 3 sections)（成功创建 Offer，offer 分为 3 段）\n\n\n\n 5. setLocalDescription (type: "offer", 3 sections)（设置本地的会话描述，描述分为 3 段）\n\n这里将上面创建的 offer 作为本地的会话描述。\n\n 6. setLocalDescriptionOnSuccess（成功设置了本地的会话描述）\n\n 7. signalingstatechange（信令状态已经改变）\n\n// 信令状态变更\nhave-local-offer\n\n\n1\n2\n\n\n如果 connection 的信令状态改变了，触发一个名为 signalingstatechange 的事件，此事件在 RTCPeerConnection 对象上触发，表示信令状态已改变。状态的改变原因是调用了 setLocalDescription 或 setRemoteDescription。\n\n 8. transceiverModified（收发器被修改）\n\nCaused by: setLocalDescription\n\ngetTransceivers()[0]:{\n  mid:\'0\',\n  sender:{\n    track:\'f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\',\n    streams:[\'zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE\'],\n  },\n  receiver:{\n    track:\'17079991-a6fc-49de-b53d-0614f5ac50bb\',\n    streams:[],\n  },\n  direction:\'sendrecv\',\n  currentDirection:null,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nsetLocalDescription 触发收发器被修改。注意，此时的 mid 变成了 \'0\'，这说明该收发器已经与与媒体描述相关联。\n\n 9. icegatheringstatechange（ICE 收集状态变更）\n\n此事件在 RTCPeerConnection 对象上触发，表示 RTCPeerConnection 的ICE连接状态已改变。\n\n 10. icecandidate (host)（接收到新的candidate）\n\nsdpMid: 0, sdpMLineIndex: 0, candidate: candidate:2344440289 1 udp 2122260223 172.33.50.23 64147 typ host generation 0 ufrag yS7M network-id 2\n\n\n1\n\n\n此事件在 RTCPeerConnection 对象上触发，表示新的 RTCIceCandidate 已对脚本可见。\n\n参数含义：\n\n * DOMString类型的 candidate ，只读：它携带了[ICE]第15.1中定义的 candidate-attribute 。如果这个 RTCIceCandidate 代表了候选地址结束的指示， candidate 是一个空字符串。\n * DOMString类型的 sdpMid ，只读，可空：如果不为 null ，它将包含RFC5888中定义的该候选地址关联的媒体组件中的媒体流"识别标签"。\n * unsigned short类型的 sdpMLineIndex ，只读，可空：如果不为 null ，它表示该候选地址关联的SDP中媒体描述的索引值（从0开始）。\n\n 11. setRemoteDescription (type: "answer", 3 sections)（设置远端的会话描述，该描述分为3 节）\n\n 12. iceconnectionstatechange（ICE连接状态改变）\n\nchecking\n\n\n1\n\n\n该事件在 RTCPeerConnection 对象上触发，表示 RTCPeerConnection 的ICE连接状态已改变。\n\n 13. setRemoteDescriptionOnSuccess（成功设置远端会话描述）\n\n 14. signalingstatechange（信令状态已经改变）\n\nstable\n\n\n1\n\n 15. iceconnectionstatechange\n\nconnected\n\n\n1\n\n 16. connectionstatechange\n\nconnecting\n\n\n1\n\n 17. icegatheringstatechange\n\ncomplete\n\n\n1\n\n 18. connectionstatechange\n\nconnected\n\n\n1\n\n 19. addIceCandidate（）\n\nsdpMid: 0, sdpMLineIndex: 0, candidate: candidate:2344440289 1 udp 2122260223 172.33.50.23 60048 typ host generation 0 ufrag Aa8c network-id 2\n\n\n\n1\n2\n\n\nRTCPeerConnection.addIceCandidate()，当使用 RTCPeerConnection 的网站或应用程序通过其信令通道从远程对等方接收到新的 ICE 候选者时，它会通过调用 RTCPeerConnection.addIceCandidate() 将新接收到的候选者传递给浏览器的 ICE 代理。这会将这个新的远程候选添加到 RTCPeerConnection 的远程描述中，该描述描述了连接的远程端的状态。\n\n 20. close\n\nRTCPeerConnection.close() 方法关闭当前对等连接。\n\n 21. connectionstatechange\n\nclosed\n\n\n1\n\n\n\n# Offer\n\nOffer 具有如下的描述：\n\n=> v=0 (6 more lines)\no=- 594927128365591396 2 IN IP4 127.0.0.1\ns=-\nt=0 0\na=group:BUNDLE 0 1\na=extmap-allow-mixed\na=msid-semantic: WMS zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE\n\n=> m=audio 9 UDP/TLS/RTP/SAVPF 111 63 103 104 9 0 8 106 105 13 110 112 113 126 (34 more lines) mid=0\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:yS7M\na=ice-pwd:OdrjHcHv5i7uHAmdM58YvXMS\na=ice-options:trickle\na=fingerprint:sha-256 2B:E5:1B:34:8F:27:69:AF:91:1C:FB:17:B4:FD:FD:AA:11:B8:88:CB:A9:8B:CD:B1:5E:72:DF:E7:DD:2E:F2:B6\na=setup:actpass\na=mid:0\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\na=sendrecv\na=msid:zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\na=rtcp-mux\na=rtpmap:111 opus/48000/2\na=rtcp-fb:111 transport-cc\na=fmtp:111 minptime=10;useinbandfec=1\na=rtpmap:63 red/48000/2\na=fmtp:63 111/111\na=rtpmap:103 ISAC/16000\na=rtpmap:104 ISAC/32000\na=rtpmap:9 G722/8000\na=rtpmap:0 PCMU/8000\na=rtpmap:8 PCMA/8000\na=rtpmap:106 CN/32000\na=rtpmap:105 CN/16000\na=rtpmap:13 CN/8000\na=rtpmap:110 telephone-event/48000\na=rtpmap:112 telephone-event/32000\na=rtpmap:113 telephone-event/16000\na=rtpmap:126 telephone-event/8000\na=ssrc:2506391311 cname:5hNpuIfTpUS1YL30\na=ssrc:2506391311 msid:zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\n\n=> m=video 9 UDP/TLS/RTP/SAVPF 96 97 98 99 100 101 127 121 125 107 108 109 124 120 123 119 35 36 41 42 114 115 116 117 118 (129 more lines) mid=1\nc=IN IP4 0.0.0.0\na=rtcp:9 IN IP4 0.0.0.0\na=ice-ufrag:yS7M\na=ice-pwd:OdrjHcHv5i7uHAmdM58YvXMS\na=ice-options:trickle\na=fingerprint:sha-256 2B:E5:1B:34:8F:27:69:AF:91:1C:FB:17:B4:FD:FD:AA:11:B8:88:CB:A9:8B:CD:B1:5E:72:DF:E7:DD:2E:F2:B6\na=setup:actpass\na=mid:1\na=extmap:14 urn:ietf:params:rtp-hdrext:toffset\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\na=extmap:13 urn:3gpp:video-orientation\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\na=extmap:5 http://www.webrtc.org/experiments/rtp-hdrext/playout-delay\na=extmap:6 http://www.webrtc.org/experiments/rtp-hdrext/video-content-type\na=extmap:7 http://www.webrtc.org/experiments/rtp-hdrext/video-timing\na=extmap:8 http://www.webrtc.org/experiments/rtp-hdrext/color-space\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\na=extmap:10 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\na=extmap:11 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\na=sendrecv\na=msid:zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\na=rtcp-mux\na=rtcp-rsize\na=rtpmap:96 VP8/90000\na=rtcp-fb:96 goog-remb\na=rtcp-fb:96 transport-cc\na=rtcp-fb:96 ccm fir\na=rtcp-fb:96 nack\na=rtcp-fb:96 nack pli\na=rtpmap:97 rtx/90000\na=fmtp:97 apt=96\na=rtpmap:98 VP9/90000\na=rtcp-fb:98 goog-remb\na=rtcp-fb:98 transport-cc\na=rtcp-fb:98 ccm fir\na=rtcp-fb:98 nack\na=rtcp-fb:98 nack pli\na=fmtp:98 profile-id=0\na=rtpmap:99 rtx/90000\na=fmtp:99 apt=98\na=rtpmap:100 VP9/90000\na=rtcp-fb:100 goog-remb\na=rtcp-fb:100 transport-cc\na=rtcp-fb:100 ccm fir\na=rtcp-fb:100 nack\na=rtcp-fb:100 nack pli\na=fmtp:100 profile-id=2\na=rtpmap:101 rtx/90000\na=fmtp:101 apt=100\na=rtpmap:127 H264/90000\na=rtcp-fb:127 goog-remb\na=rtcp-fb:127 transport-cc\na=rtcp-fb:127 ccm fir\na=rtcp-fb:127 nack\na=rtcp-fb:127 nack pli\na=fmtp:127 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\na=rtpmap:121 rtx/90000\na=fmtp:121 apt=127\na=rtpmap:125 H264/90000\na=rtcp-fb:125 goog-remb\na=rtcp-fb:125 transport-cc\na=rtcp-fb:125 ccm fir\na=rtcp-fb:125 nack\na=rtcp-fb:125 nack pli\na=fmtp:125 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42001f\na=rtpmap:107 rtx/90000\na=fmtp:107 apt=125\na=rtpmap:108 H264/90000\na=rtcp-fb:108 goog-remb\na=rtcp-fb:108 transport-cc\na=rtcp-fb:108 ccm fir\na=rtcp-fb:108 nack\na=rtcp-fb:108 nack pli\na=fmtp:108 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\na=rtpmap:109 rtx/90000\na=fmtp:109 apt=108\na=rtpmap:124 H264/90000\na=rtcp-fb:124 goog-remb\na=rtcp-fb:124 transport-cc\na=rtcp-fb:124 ccm fir\na=rtcp-fb:124 nack\na=rtcp-fb:124 nack pli\na=fmtp:124 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42e01f\na=rtpmap:120 rtx/90000\na=fmtp:120 apt=124\na=rtpmap:123 H264/90000\na=rtcp-fb:123 goog-remb\na=rtcp-fb:123 transport-cc\na=rtcp-fb:123 ccm fir\na=rtcp-fb:123 nack\na=rtcp-fb:123 nack pli\na=fmtp:123 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=4d001f\na=rtpmap:119 rtx/90000\na=fmtp:119 apt=123\na=rtpmap:35 H264/90000\na=rtcp-fb:35 goog-remb\na=rtcp-fb:35 transport-cc\na=rtcp-fb:35 ccm fir\na=rtcp-fb:35 nack\na=rtcp-fb:35 nack pli\na=fmtp:35 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=4d001f\na=rtpmap:36 rtx/90000\na=fmtp:36 apt=35\na=rtpmap:41 AV1/90000\na=rtcp-fb:41 goog-remb\na=rtcp-fb:41 transport-cc\na=rtcp-fb:41 ccm fir\na=rtcp-fb:41 nack\na=rtcp-fb:41 nack pli\na=rtpmap:42 rtx/90000\na=fmtp:42 apt=41\na=rtpmap:114 H264/90000\na=rtcp-fb:114 goog-remb\na=rtcp-fb:114 transport-cc\na=rtcp-fb:114 ccm fir\na=rtcp-fb:114 nack\na=rtcp-fb:114 nack pli\na=fmtp:114 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=64001f\na=rtpmap:115 rtx/90000\na=fmtp:115 apt=114\na=rtpmap:116 red/90000\na=rtpmap:117 rtx/90000\na=fmtp:117 apt=116\na=rtpmap:118 ulpfec/90000\na=ssrc-group:FID 4091169142 3039037968\na=ssrc:4091169142 cname:5hNpuIfTpUS1YL30\na=ssrc:4091169142 msid:zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\na=ssrc:3039037968 cname:5hNpuIfTpUS1YL30\na=ssrc:3039037968 msid:zh3YAzJj9xjmrvkm0NbZ0V1ZEUPXZgYUOOhE 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n\n\n详见协议/SDP协议。\n\n\n# Stats Tables 实时变化的统计信息表\n\n\n\n\n# RTCAudioSource\n\nStatistics RTCAudioSource_5\n\ntimestamp 6/29/2022, 2:28:43 PM\ntrackIdentifier f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5 \nkind audio\naudioLevel 0.13782158879360332\ntotalAudioEnergy 2.9554321642936476\n[Audio_Level_in_RMS] 0.1339591782847916\ntotalSamplesDuration 189.92999999997224\nechoReturnLoss 20\nechoReturnLossEnhancement 2.6021299362182617\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nRTCMediaSourceStats 类型：\n\ndictionary RTCMediaSourceStats : RTCStats {         // 媒体源-帧速率和分辨率\n    required DOMString  trackIdentifier;            // MediaStreamTrack的id属性值\n    required DOMString  kind;                       // MediaStreamTrack的kind属性的值。 这是“音频”或“视频”。 \n                                                    // 如果它是“音频”, 那么这个stats对象的类型是RTCAudioSourceStats。 \n                                                    // 如果它是“video”, 那么这个stats对象的类型是RTCVideoSourceStats\n    boolean             relayedSource;              // 源是远程的，例如如果它是通过 RTCPeerConnection 来自另一个主机，则为true。否则为假\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nRTCAudioSourceStats 类型：\n\ndictionary RTCAudioSourceStats : RTCMediaSourceStats {\n    double    audioLevel;                   // 媒体源的音频电平,0-1,其中1.0表示0 dBov，0表示静音，0.5表示声压级从0 dBov开始大约6dBSPL变化\n    double    totalAudioEnergy;             // 总音频能量\n    double    totalSamplesDuration;         // 媒体源的音频持续时间\n    double    echoReturnLoss;               // 回声返回损失,仅当 MediaStreamTrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n    double    echoReturnLossEnhancement;    // 回声回波损耗增强，仅当 MediaStreamTrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * trackIdentifier: MediaStreamTrack的id属性值。\n * kind: MediaStreamTrack的kind属性的值。 这是“音频”或“视频”。\n * audioLevel: 媒体源的音频电平，0.0-1.1区间，其中 1.0 表示 0 dBov，0 表示静音，0.5 表示声压级从 0 dBov开始变化大约 6dB SPL。\n\n一个双精度浮点数，表示最近从 RTCRtpContributingSource 描述的源接收到的 RTP 数据包中的音频音量。\n\n该值在 0.0 到 1.0 的范围内，呈线性比例，其值以 dBov 或分贝（过载）为单位定义。这是相对于开始发生音频削波的点的幅度。值 1.0 表示 0 dBov（最大音量），值 0.0 表示静音，值 0.5 表示声压级从 0 dBov 变化大约 6 dB SPL（声压级分贝）。\n\n\n1\n2\n3\n\n * totalAudioEnergy: 总音频能量。\n * Audio_Level_in_RMS：\n * totalSamplesDuration：媒体源的音频持续时间。\n * echoReturnLoss: 回声返回损失,仅当 MediaStreamTrack 来自应用了回声消除的麦克风时才存在。 以分贝计算。\n * echoReturnLossEnhancement：回声回波损耗增强，仅当 MediaStreamTrack 来自应用了回声消除的麦克风时才存在。 以分贝计算。\n\n参考\n\n * RTCRtpContributingSource.audioLevel - Web APIs | MDN\n\n\n# RTCVideoSource\n\nStatistics RTCVideoSource_6\n\ntimestamp 6/29/2022, 2:37:11 PM\ntrackIdentifier 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\nkind video\nwidth 640\nheight 480\nframes 20945\nframesPerSecond 30\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nRTCVideoSourceStats 类型：\n\ndictionary RTCVideoSourceStats : RTCMediaSourceStats {\n    unsigned long        width;                     // 宽\n    unsigned long        height;                    // 高\n    unsigned long        bitDepth;                  // 位深\n    unsigned long        frames;                    // 总帧数\n    double               framesPerSecond;           // 最后一秒的编码帧数。这可能低于媒体源帧速率\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * width：宽度。\n * height：高度。\n * frames：视频总帧数。\n * framesPerSecond：最后一秒的编码帧数。这可能低于媒体源帧速率。\n * bitDepth：视频位深。\n\n参考：\n\n * 什么是比特位深(Bit Depth)？ - 知乎\n\n\n# RTCCertificate 含义\n\n// Statistics RTCCertificate_F4:D7:27:88:19:17:A8:8D:18:96:29:B5:AA:1D:B0:26:2A:07:D0:EA:22:5B:1D:CA:76:87:51:2F:3C:8A:26:86\n\ntimestamp 6/29/2022, 2:02:13 PM\nfingerprint 2B:E5:1B:34:8F:27:69:AF:91:1C:FB:17:B4:FD:FD:AA:11:B8:88:CB:A9:8B:CD:B1:5E:72:DF:E7:DD:2E:F2:B6\nfingerprintAlgorithm sha-256\nbase64Certificate MIIBFTCBvKADAgECAghfLDzRghfSqzAKBggqhkjOPQQDAjARMQ8wDQYDVQQDDAZXZWJSVEMwHhcNMjIwNjI4MDUwOTM3WhcNMjIwNzI5MDUwOTM3WjARMQ8wDQYDVQQDDAZXZWJSVEMwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASVnJVVJkSTOphoqAW6SUC7sMT39KhVvybIrWbOiW3/swYurWI5XHj8YUbt8e2bFBsm1eMq3trabdKCt/jcndYPMAoGCCqGSM49BAMCA0gAMEUCIQCpPo7BLuZXGwOsd7reEXiuP0Tmb1eclimj1hJdx1+MYwIgCn2/VDncEPlGmVlV5lSaihsMhJ64GMar4gltQkT5Uew=\n\n\n1\n2\n3\n4\n5\n6\n\n\nRTCCertificateStats:\n\ndictionary RTCCertificateStats : RTCStats {\n    required DOMString                      fingerprint;                // 证书的指纹\n    required DOMString                      fingerprintAlgorithm;       // 用于计算证书指纹的哈希函数\n    required DOMString                      base64Certificate;          // 证书的DER编码的base-64\n    DOMString                               issuerCertificateId;        // 包含证书链中下一个证书的stats对象\n};\n\n\n1\n2\n3\n4\n5\n6\n\n * fingerprint：证书的指纹。\n * fingerprintAlgorithm：用于计算证书指纹的哈希函数。\n * base64Certificate：书的DER编码的base-64。\n\n\n# RTCIceCandidate 含义\n\nStatistics RTCIceCandidate_c6yMpJWD\n\ntimestamp 6/29/2022, 2:19:02 PM\ntransportId RTCTransport_0_1\nisRemote true\nip 172.33.50.23\naddress 172.33.50.23\nport 57778\nprotocol udp\ncandidateType host\npriority 2122260223\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nRTCIceCandidateStats:\n\ndictionary RTCIceCandidateStats : RTCStats {\n    required DOMString           transportId;               // 传输标识\n    DOMString?                   address;                   // 它是候选地址,允许使用IPv4地址、IPv6地址和完全限定域名\n    long                         port;                      // 候选人的端口号\n    DOMString                    protocol;                  // 协议传输的有效值是“udp”和“tcp”之一\n    required RTCIceCandidateType candidateType;             // 候选人类型\n    long                         priority;                  // 优先级\n    DOMString                    url;                       // 对于本地候选人，这是从中获取候选人的ICE服务器的URL\n    DOMString                    relayProtocol;             // 它是端点用于与TURN服务器通信的协议。这仅适用于本地候选人。\n                                                            // 有效值为“udp”、“tcp”或“tls\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * transportId：传输标识。\n * isRemote：是否属于远端。\n * ip：IPv4地址、IPv6地址。\n * address：它是候选地址,允许使用IPv4地址、IPv6地址和完全限定域名。\n * port：候选人的端口号。\n * protocol：协议传输的有效值是“udp”和“tcp”之一。\n * candidateType：候选人类型。\n * priority：优先级。\n * url：对于本地候选人，这是从中获取候选人的ICE服务器的URL。\n\n\n# RTCIceCandidatePair 含义\n\nStatistics RTCIceCandidatePair_yHl6guQU_c6yMpJWD\n\ntimestamp 6/29/2022, 2:19:02 PM\ntransportId RTCTransport_0_1\nlocalCandidateId RTCIceCandidate_yHl6guQU\nremoteCandidateId RTCIceCandidate_c6yMpJWD\nstate succeeded\npriority 9115038255631187454\nnominated true\nwritable true\npacketsSent 195\n[packetsSent/s] 20.93237148143175\npacketsReceived 1205\n[packetsReceived/s] 132.57168604906775\nbytesSent 9389\n[bytesSent_in_bits/s] 7352.246287954314\nbytesReceived 719795\n[bytesReceived_in_bits/s] 656032.4835832033\ntotalRoundTripTime 0.004\n[totalRoundTripTime/responsesReceived] 0\ncurrentRoundTripTime 0.001\navailableOutgoingBitrate 300000\nrequestsReceived 7\nrequestsSent 1\nresponsesReceived 7\nresponsesSent 7\nconsentRequestsSent 6\npacketsDiscardedOnSend 0\nbytesDiscardedOnSend 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n * transportId：传输标识。\n * localCandidateId：本地候选人ID。\n * remoteCandidateId：远端候选人状态。\n * state：代表一对本地和远程候选者的清单状态。\n * priority：优先级。\n * nominated：与更新部分中描述的提名标志相关。\n * writable：是否可写。\n * packetsSent：在此候选对上发送的数据包总数。\n * [packetsSent/s]：在此候选对上每秒发送的数据包总数。\n * packetsReceived：在此候选对上接收到的数据包总数。\n * [packetsReceived/s]：在此候选对上每秒接收到的数据包总数。\n * bytesSent：此候选对上发送的有效载荷字节总数。\n * [bytesSent_in_bits/s]：此候选对上每秒发送的有效载荷比特总数。\n * bytesReceived：在此候选对上接收的有效载荷字节总数。\n * [bytesReceived_in_bits/s]：在此候选对上每秒接收的有效载荷比特总数。\n * totalRoundTripTime：自会话开始以来所有往返时间测量的总和（以秒为单位）。\n * [totalRoundTripTime/responsesReceived]：每次相应的往返时间测量。\n * currentRoundTripTime：以秒为单位的最新往返时间，由两个STUN连接检查[STUN-PATH-CHAR]计算得出。\n * availableOutgoingBitrate：可用传出比特率-由底层拥塞控制通过使用此候选对组合所有传出 RTP 流的可用比特率来计算的。\n * requestsReceived：收到的连接请求总数（包括重传）。\n * requestsSent：发送的连接检查请求总数。\n * responsesReceived： 收到的连接响应总数。\n * responsesSent：发送的连接检查响应总数。\n * consentRequestsSent：发送的同意请求总数。\n * packetsDiscardedOnSend：由于套接字错误而被丢弃的此候选对的数据包总数。\n * bytesDiscardedOnSend：由于套接字错误而被丢弃的此候选对的总字节数。\n\n\n# RTCInboundRTPAudioStream 含义\n\nStatistics RTCInboundRTPAudioStream_730260482\n\ntimestamp 6/29/2022, 2:19:02 PM\nssrc 730260482\nkind audio\ntrackId RTCMediaStreamTrack_receiver_7\ntransportId RTCTransport_0_1\ncodecId RTCCodec_0_Inbound_111\n[codec] opus (111, minptime=10;useinbandfec=1)\nmediaType audio\njitter 0\npacketsLost 0\npacketsDiscarded 0\nremoteId RTCRemoteOutboundRTPAudioStream_730260482\npacketsReceived 464\n[packetsReceived/s] 49.83897971769464\nfecPacketsReceived 0\nfecPacketsDiscarded 0\nbytesReceived 40528\n[bytesReceived_in_bits/s] 34161.63025769662\nheaderBytesReceived 12992\n[headerBytesReceived_in_bits/s] 11163.931456763601\nlastPacketReceivedTimestamp 1656483542436\n[lastPacketReceivedTimestamp] 6/29/2022, 2:19:02 PM\njitterBufferDelay 16387.2\n[jitterBufferDelay/jitterBufferEmittedCount_in_ms] 35\njitterBufferEmittedCount 444480\ntotalSamplesReceived 445760\n[totalSamplesReceived/s] 48323.87473427673\nconcealedSamples 576\n[concealedSamples/s] 0\n[concealedSamples/totalSamplesReceived] 0\nsilentConcealedSamples 0\n[silentConcealedSamples/s] 0\nconcealmentEvents 2\ninsertedSamplesForDeceleration 1785\n[insertedSamplesForDeceleration/s] 0\nremovedSamplesForAcceleration 492\n[removedSamplesForAcceleration/s] 0\naudioLevel 0.01132236701559496\ntotalAudioEnergy 0.22607659102361047\n[Audio_Level_in_RMS] 0.024382712400248877\ntotalSamplesDuration 9.299999999999846\nestimatedPlayoutTimestamp 3865472342398\n[estimatedPlayoutTimestamp] 6/28/2092, 2:19:02 PM\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# RTCInboundRTPVideoStream 含义\n\nStatistics RTCInboundRTPVideoStream_115767491\ntimestamp 6/29/2022, 2:19:02 PM\nssrc 115767491\nkind video\ntrackId RTCMediaStreamTrack_receiver_8\ntransportId RTCTransport_0_1\ncodecId RTCCodec_1_Inbound_96\n[codec] VP8 (96)\nmediaType video\njitter 0.009\npacketsLost 0\npacketsReceived 711\n[packetsReceived/s] 81.73592673701921\nbytesReceived 627667\n[bytesReceived_in_bits/s] 583419.083693711\nheaderBytesReceived 17852\n[headerBytesReceived_in_bits/s] 16203.649085816884\nlastPacketReceivedTimestamp 1656483542438\n[lastPacketReceivedTimestamp] 6/29/2022, 2:19:02 PM\njitterBufferDelay 8.548\n[jitterBufferDelay/jitterBufferEmittedCount_in_ms] 33.566666666666656\njitterBufferEmittedCount 274\nframesReceived 276\n[framesReceived/s] 29.903387830616786\n[framesReceived-framesDecoded] 1\nframeWidth 320\nframeHeight 240\nframesPerSecond 30\nframesDecoded 275\n[framesDecoded/s] 29.903387830616786\nkeyFramesDecoded 1\n[keyFramesDecoded/s] 0\nframesDropped 0\ntotalDecodeTime 0.101\n[totalDecodeTime/framesDecoded_in_ms] 0.16666666666666682\ntotalProcessingDelay 7.998\n[totalProcessingDelay/framesDecoded_in_ms] 34.233333333333334\ntotalInterFrameDelay 9.127000000000008\n[totalInterFrameDelay/framesDecoded_in_ms] 33.333333333333336\ntotalSquaredInterFrameDelay 0.30461900000000014\n[interFrameDelayStDev_in_ms] 0.8692269873613643\ndecoderImplementation libvpx\nfirCount 0\npliCount 0\nnackCount 0\nqpSum 3500\n[qpSum/framesDecoded] 10.166666666666666\nestimatedPlayoutTimestamp 3865472342402\n[estimatedPlayoutTimestamp] 6/28/2092, 2:19:02 PM\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# RTCMediaStreamTrack 含义\n\nStatistics RTCMediaStreamTrack_receiver_7\n\ntimestamp 6/29/2022, 2:19:02 PM\ntrackIdentifier f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\nremoteSource true\nended false\ndetached false\nkind audio\njitterBufferDelay 16387.2\n[jitterBufferDelay/jitterBufferEmittedCount_in_ms] 35\njitterBufferEmittedCount 444480\naudioLevel 0.01132236701559496\ntotalAudioEnergy 0.22607659102361047\n[Audio_Level_in_RMS] 0.024382712400248877\ntotalSamplesReceived 445760\ntotalSamplesDuration 9.299999999999846\nconcealedSamples 576\nsilentConcealedSamples 0\nconcealmentEvents 2\ninsertedSamplesForDeceleration 1785\nremovedSamplesForAcceleration 492\njitterBufferFlushes* 2\ndelayedPacketOutageSamples* 256\nrelativePacketArrivalDelay* 0.04\njitterBufferTargetDelay* 14937.6\ninterruptionCount* 0\ntotalInterruptionDuration* 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# RTCPeerConnection 含义\n\nStatistics RTCPeerConnection\n\ntimestamp 6/29/2022, 2:24:01 PM\ndataChannelsOpened 0\ndataChannelsClosed 0\n\n\n1\n2\n3\n4\n5\n\n\n\n# RTCRemoteOutboundRTPAudioStream\n\nStatistics RTCRemoteOutboundRTPAudioStream_730260482\n\ntimestamp 6/29/2022, 2:18:59 PM\nssrc 730260482\nkind audio\ntransportId RTCTransport_0_1\ncodecId RTCCodec_0_Inbound_111\npacketsSent 326\nbytesSent 27996\nlocalId RTCInboundRTPAudioStream_730260482\nremoteTimestamp 1656483539696\n[remoteTimestamp] 6/29/2022, 2:18:59 PM\nreportsSent 2\nroundTripTimeMeasurements 0\ntotalRoundTripTime 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# RTCTransport\n\nStatistics RTCTransport_0_1\n\ntimestamp 6/29/2022, 2:19:02 PM\nbytesSent 9389\n[bytesSent_in_bits/s] 7352.246287954314\npacketsSent 195\n[packetsSent/s] 20.93237148143175\nbytesReceived 719795\n[bytesReceived_in_bits/s] 656032.4835832033\npacketsReceived 1205\n[packetsReceived/s] 132.57168604906775\ndtlsState connected\nselectedCandidatePairId RTCIceCandidatePair_yHl6guQU_c6yMpJWD\nlocalCertificateId RTCCertificate_1F:47:0C:D2:8C:47:E3:41:4F:31:41:49:36:87:96:F9:A0:CB:0E:B1:08:40:03:EE:B8:3A:D5:C0:40:1E:DB:3C\nremoteCertificateId RTCCertificate_EB:2C:A5:26:8C:F2:11:F2:34:B1:A8:77:7D:90:30:8E:57:BB:CB:0E:64:7D:40:9B:29:68:87:DE:2D:17:94:82\ntlsVersion FEFD\ndtlsCipher TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\ndtlsRole client\nsrtpCipher AES_CM_128_HMAC_SHA1_80\nselectedCandidatePairChanges 1\niceRole controlled\niceLocalUsernameFragment 2Es1\niceState connected\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# Stats graphs for RTCAudioSource\n\n\n\n\n# Stats graphs for RTCVideoSource\n\n\n\n\n# Stats graphs for RTCIceCandidatePair\n\n\n\n\n# Stats graphs for RTCMediaStreamTrack\n\n\n\n\n# Stats graphs for RTCOutboundRTPAudioStream\n\n\n\n\n# Stats graphs for RTCOutboundRTPVideoStream\n\n\n\n\n# Stats graphs for RTCPeerConnection\n\n\n\n\n# Stats graphs for RTCRemoteInboundRtpAudioStream\n\n\n\n\n# Stats graphs for RTCRemoteInboundRtpVideoStream\n\n\n\n\n# Stats graphs for RTCTransport\n\n\n\n\n# 参考\n\nWebrtc Statistics Dictionary | Fancy WebRTC',normalizedContent:'# 场景\n\n在调试 webrtc 应用时，经常会查看 chrome 浏览器 chrome://webrtc-internals/ 调试页面的调试信息。如下：\n\n\n\n现在我们以 peer connection 实例 为例。\n\n下面详细解读此页面的信息。\n\n\n# 元信息\n\n// 应用链接，创建 peerconnection 是的配置信息（rtcconfiguration）\nhttps://webrtc.github.io/samples/src/content/peerconnection/pc1/, { iceservers: [], icetransportpolicy: all, bundlepolicy: balanced, rtcpmuxpolicy: require, icecandidatepoolsize: 0, sdpsemantics: "unified-plan", extmapallowmixed: true }\n// ice 连接状态的变化过程\nice connection state: new => checking => connected\n// peerconnection 连接状态的变化过程\nconnection state: new => connecting => connected\n// peerconnection 中 signaling 线程执行的状态变化\nsignaling state: new => have-local-offer => stable\n// ice candidate 配对的状况\nice candidate pair: 172.33.50.23:65226 &lt;=> 172.33.50.23:56145\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n# ice candidate grid\n\n\n\n\n# rtcicecandidatepair\n\nrtcicecandidatepair 描述了一对 ice 候选者，它们共同构成了对两个 webrtc 端点之间可行连接的描述。rtcicecandidatepair 包含了 local 和 remote。\n\n * local：描述连接本地端配置的 rtcicecandidate。\n * remote：描述连接远程端配置的 rtcicecandidate。\n\n每个 rtcicecandidatepair 有一个 id。\n\n参考：\n\n * rtcicecandidatepair - web apis | mdn\n\n\n# rtcicecandidate\n\nrtcicecandidate 代表一个候选的交互式连接建立 (ice，interactive connectivity establishment) 配置，可用于建立 rtcpeerconnection。\n\nice 候选描述了 webrtc 能够与远程设备通信所需的协议和路由。当开始一个 webrtc 对等连接时，通常连接的每一端都会提出一些候选者，直到他们相互同意一个描述他们认为最好的连接的候选者。 webrtc 然后使用该候选人的详细信息来启动连接。\n\n一个 rtcicecandidatepair 包含了一对 rtcicecandidate，分别属于 local 和 remote。即 candidate type 分别为 local-candidate 和 remote-candidate。\n\n可以看到，在上述众多的协商的 rtcicecandidatepair 中，只有一个 rtcicecandidatepair 的状态是 succeeded，其余的都是 waiting，可见，在 ice 协商中，peerconnection 只选择一个 rtcicecandidatepair，其余的 rtcicecandidatepair 都置为 waiting。另外，也只有被选择的 rtcicecandidatepair 才会有相应的实时数据变化。\n\n\n\n另外，从 w3c 的文档中，我们可以看到 rtcicecandidatepair 可以具有如下的一些状态：\n\nenum rtcstatsicecandidatepairstate {\n    "frozen",\n    "waiting",\n    "in-progress",\n    "failed",\n    "succeeded"\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\n\n# 字段含义\n\n其余的数据含义如下：\n\n * network type / address: 网络类型、地址。rtcicecandidatepair 的网络为以太网；rtcicecandidate 的地址。\n * port:rtcicecandidate 的端口。\n * protocol / candidate type: rtcicecandidatepair 使用的网络协议、rtcicecandidate 的类型。rtcicecandidatepair 使用 udp 协议；rtcicecandidate 的类型为 host。\n * (pair) priority: rtcicecandidatepair 的优先级。\n * bytes sent / received: rtcicecandidatepair 上行和下行的数据字节。\n * stun requests sent / responses received: stun 发送的请求数和收到的回应数。\n * stun requests received / responses sent: stun 收到的请求数和发送的回应数。\n * rtt: 来回通信延迟（round-trip delay time），在通信（communication）、电脑网络（computer network）领域中，意指：在双方通信中，发讯方的信号（signal）传播（propagation）到收讯方的时间（意即：传播延迟（propagation delay）），加上收讯方回传消息到发讯方的时间（如果没有造成双向传播速率差异的因素，此时间与发讯方将信号传播到收讯方的时间一样久）。\n * last update: 最新更新同级数据的时间。\n\n扩展\n\nenum rtcicecandidatetype {\n  "host",\n  "srflx",\n  "prflx",\n  "relay"\n};\n\n\n1\n2\n3\n4\n5\n6\n\n\nrtcicecandidate 的类型有如上四种。\n\n参考：\n\n * rtcicecandidate - web apis | mdn\n * identifiers for webrtc\'s statistics api\n * round-trip delay - wikipedia\n\n\n# time/event 时间/事件列表\n\n\n\n\n# 事件含义\n\n下面我们按照事件发生的顺序分析：\n\n 1. transceiveradded（添加 rtcrtptransceiver）\n\ncaused by: addtrack\n\ngettransceivers()[0]:{\n  mid:null,\n  sender:{\n    track:\'f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\',\n    streams:[\'zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe\'],\n  },\n  receiver:{\n    track:\'17079991-a6fc-49de-b53d-0614f5ac50bb\',\n    streams:[],\n  },\n  direction:\'sendrecv\',\n  currentdirection:null,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n什么是 rtcrtptransceiver？\n\nwebrtc 接口 rtcrtptransceiver 描述了 rtcrtpsender 和 rtcrtpreceiver 的永久配对，以及一些共享状态。\n\n每个 sdp 媒体段描述一个双向 srtp（“安全实时协议，secure real time protocol”）流（rtcdatachannel 的媒体段除外）。这种发送和接收 srtp 流的配对对于某些应用程序来说很重要，因此 rtcrtptransceiver 用于表示这种配对，以及来自媒体段的其他重要状态。每个未禁用的 srtp 媒体段总是由一个收发器(rtcrtptransceiver)表示。\n\n收发器使用其 mid 属性唯一标识，该属性与其对应的 m-line 的媒体 id (mid) 相同。如果一个 rtcrtptransceiver 的 mid 是非空的则，与一个 m-line 相关联；否则就不相连。\n\nrtcpeerconnection.addtransceiver(）：\n\nrtcpeerconnection 的方法 addtransceiver() 创建一个新的 rtcrtptransceiver 并将其添加到与 rtcpeerconnection 关联的收发器集合中。每个收发器代表一个双向流，有一个 rtcrtpsender 和一个 rtcrtpreceiver 与之关联。\n\nw3c\n\nrtcrtptransceiver 接口表示共享公共 mid 的 rtcrtpsender 和 rtcrtpreceiver 的组合。如jsep 3.4.1中定义的，如果 rtcrtptransceiver 的 mid 属性非空，则称其与媒体描述相关联，否则不相关。概念上说，一个被关联的收发器代表上一次会话描述中应用的收发器。\n\n * sender：rtcrtpsender 对象负责编码和发送数据到远程对等端。\n * receiver：处理接收和解码传入媒体的 rtcrtpreceiver 对象。\n\n参考：\n\n * rtcrtptransceiver - web apis | mdn\n\n 2. createoffer（创建 offer）\n\n// 以相应的配置创建 offer\noptions: {offertoreceivevideo: 1, offertoreceiveaudio: 1, voiceactivitydetection: true, icerestart: false}\n\n\n1\n2\n\n\n 3. negotiationneeded （需要 offer/answer 协商）\n\n 4. createofferonsuccess (type: "offer", 3 sections)（成功创建 offer，offer 分为 3 段）\n\n\n\n 5. setlocaldescription (type: "offer", 3 sections)（设置本地的会话描述，描述分为 3 段）\n\n这里将上面创建的 offer 作为本地的会话描述。\n\n 6. setlocaldescriptiononsuccess（成功设置了本地的会话描述）\n\n 7. signalingstatechange（信令状态已经改变）\n\n// 信令状态变更\nhave-local-offer\n\n\n1\n2\n\n\n如果 connection 的信令状态改变了，触发一个名为 signalingstatechange 的事件，此事件在 rtcpeerconnection 对象上触发，表示信令状态已改变。状态的改变原因是调用了 setlocaldescription 或 setremotedescription。\n\n 8. transceivermodified（收发器被修改）\n\ncaused by: setlocaldescription\n\ngettransceivers()[0]:{\n  mid:\'0\',\n  sender:{\n    track:\'f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\',\n    streams:[\'zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe\'],\n  },\n  receiver:{\n    track:\'17079991-a6fc-49de-b53d-0614f5ac50bb\',\n    streams:[],\n  },\n  direction:\'sendrecv\',\n  currentdirection:null,\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\nsetlocaldescription 触发收发器被修改。注意，此时的 mid 变成了 \'0\'，这说明该收发器已经与与媒体描述相关联。\n\n 9. icegatheringstatechange（ice 收集状态变更）\n\n此事件在 rtcpeerconnection 对象上触发，表示 rtcpeerconnection 的ice连接状态已改变。\n\n 10. icecandidate (host)（接收到新的candidate）\n\nsdpmid: 0, sdpmlineindex: 0, candidate: candidate:2344440289 1 udp 2122260223 172.33.50.23 64147 typ host generation 0 ufrag ys7m network-id 2\n\n\n1\n\n\n此事件在 rtcpeerconnection 对象上触发，表示新的 rtcicecandidate 已对脚本可见。\n\n参数含义：\n\n * domstring类型的 candidate ，只读：它携带了[ice]第15.1中定义的 candidate-attribute 。如果这个 rtcicecandidate 代表了候选地址结束的指示， candidate 是一个空字符串。\n * domstring类型的 sdpmid ，只读，可空：如果不为 null ，它将包含rfc5888中定义的该候选地址关联的媒体组件中的媒体流"识别标签"。\n * unsigned short类型的 sdpmlineindex ，只读，可空：如果不为 null ，它表示该候选地址关联的sdp中媒体描述的索引值（从0开始）。\n\n 11. setremotedescription (type: "answer", 3 sections)（设置远端的会话描述，该描述分为3 节）\n\n 12. iceconnectionstatechange（ice连接状态改变）\n\nchecking\n\n\n1\n\n\n该事件在 rtcpeerconnection 对象上触发，表示 rtcpeerconnection 的ice连接状态已改变。\n\n 13. setremotedescriptiononsuccess（成功设置远端会话描述）\n\n 14. signalingstatechange（信令状态已经改变）\n\nstable\n\n\n1\n\n 15. iceconnectionstatechange\n\nconnected\n\n\n1\n\n 16. connectionstatechange\n\nconnecting\n\n\n1\n\n 17. icegatheringstatechange\n\ncomplete\n\n\n1\n\n 18. connectionstatechange\n\nconnected\n\n\n1\n\n 19. addicecandidate（）\n\nsdpmid: 0, sdpmlineindex: 0, candidate: candidate:2344440289 1 udp 2122260223 172.33.50.23 60048 typ host generation 0 ufrag aa8c network-id 2\n\n\n\n1\n2\n\n\nrtcpeerconnection.addicecandidate()，当使用 rtcpeerconnection 的网站或应用程序通过其信令通道从远程对等方接收到新的 ice 候选者时，它会通过调用 rtcpeerconnection.addicecandidate() 将新接收到的候选者传递给浏览器的 ice 代理。这会将这个新的远程候选添加到 rtcpeerconnection 的远程描述中，该描述描述了连接的远程端的状态。\n\n 20. close\n\nrtcpeerconnection.close() 方法关闭当前对等连接。\n\n 21. connectionstatechange\n\nclosed\n\n\n1\n\n\n\n# offer\n\noffer 具有如下的描述：\n\n=> v=0 (6 more lines)\no=- 594927128365591396 2 in ip4 127.0.0.1\ns=-\nt=0 0\na=group:bundle 0 1\na=extmap-allow-mixed\na=msid-semantic: wms zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe\n\n=> m=audio 9 udp/tls/rtp/savpf 111 63 103 104 9 0 8 106 105 13 110 112 113 126 (34 more lines) mid=0\nc=in ip4 0.0.0.0\na=rtcp:9 in ip4 0.0.0.0\na=ice-ufrag:ys7m\na=ice-pwd:odrjhchv5i7uhamdm58yvxms\na=ice-options:trickle\na=fingerprint:sha-256 2b:e5:1b:34:8f:27:69:af:91:1c:fb:17:b4:fd:fd:aa:11:b8:88:cb:a9:8b:cd:b1:5e:72:df:e7:dd:2e:f2:b6\na=setup:actpass\na=mid:0\na=extmap:1 urn:ietf:params:rtp-hdrext:ssrc-audio-level\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\na=sendrecv\na=msid:zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\na=rtcp-mux\na=rtpmap:111 opus/48000/2\na=rtcp-fb:111 transport-cc\na=fmtp:111 minptime=10;useinbandfec=1\na=rtpmap:63 red/48000/2\na=fmtp:63 111/111\na=rtpmap:103 isac/16000\na=rtpmap:104 isac/32000\na=rtpmap:9 g722/8000\na=rtpmap:0 pcmu/8000\na=rtpmap:8 pcma/8000\na=rtpmap:106 cn/32000\na=rtpmap:105 cn/16000\na=rtpmap:13 cn/8000\na=rtpmap:110 telephone-event/48000\na=rtpmap:112 telephone-event/32000\na=rtpmap:113 telephone-event/16000\na=rtpmap:126 telephone-event/8000\na=ssrc:2506391311 cname:5hnpuiftpus1yl30\na=ssrc:2506391311 msid:zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\n\n=> m=video 9 udp/tls/rtp/savpf 96 97 98 99 100 101 127 121 125 107 108 109 124 120 123 119 35 36 41 42 114 115 116 117 118 (129 more lines) mid=1\nc=in ip4 0.0.0.0\na=rtcp:9 in ip4 0.0.0.0\na=ice-ufrag:ys7m\na=ice-pwd:odrjhchv5i7uhamdm58yvxms\na=ice-options:trickle\na=fingerprint:sha-256 2b:e5:1b:34:8f:27:69:af:91:1c:fb:17:b4:fd:fd:aa:11:b8:88:cb:a9:8b:cd:b1:5e:72:df:e7:dd:2e:f2:b6\na=setup:actpass\na=mid:1\na=extmap:14 urn:ietf:params:rtp-hdrext:toffset\na=extmap:2 http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\na=extmap:13 urn:3gpp:video-orientation\na=extmap:3 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\na=extmap:5 http://www.webrtc.org/experiments/rtp-hdrext/playout-delay\na=extmap:6 http://www.webrtc.org/experiments/rtp-hdrext/video-content-type\na=extmap:7 http://www.webrtc.org/experiments/rtp-hdrext/video-timing\na=extmap:8 http://www.webrtc.org/experiments/rtp-hdrext/color-space\na=extmap:4 urn:ietf:params:rtp-hdrext:sdes:mid\na=extmap:10 urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id\na=extmap:11 urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id\na=sendrecv\na=msid:zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\na=rtcp-mux\na=rtcp-rsize\na=rtpmap:96 vp8/90000\na=rtcp-fb:96 goog-remb\na=rtcp-fb:96 transport-cc\na=rtcp-fb:96 ccm fir\na=rtcp-fb:96 nack\na=rtcp-fb:96 nack pli\na=rtpmap:97 rtx/90000\na=fmtp:97 apt=96\na=rtpmap:98 vp9/90000\na=rtcp-fb:98 goog-remb\na=rtcp-fb:98 transport-cc\na=rtcp-fb:98 ccm fir\na=rtcp-fb:98 nack\na=rtcp-fb:98 nack pli\na=fmtp:98 profile-id=0\na=rtpmap:99 rtx/90000\na=fmtp:99 apt=98\na=rtpmap:100 vp9/90000\na=rtcp-fb:100 goog-remb\na=rtcp-fb:100 transport-cc\na=rtcp-fb:100 ccm fir\na=rtcp-fb:100 nack\na=rtcp-fb:100 nack pli\na=fmtp:100 profile-id=2\na=rtpmap:101 rtx/90000\na=fmtp:101 apt=100\na=rtpmap:127 h264/90000\na=rtcp-fb:127 goog-remb\na=rtcp-fb:127 transport-cc\na=rtcp-fb:127 ccm fir\na=rtcp-fb:127 nack\na=rtcp-fb:127 nack pli\na=fmtp:127 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42001f\na=rtpmap:121 rtx/90000\na=fmtp:121 apt=127\na=rtpmap:125 h264/90000\na=rtcp-fb:125 goog-remb\na=rtcp-fb:125 transport-cc\na=rtcp-fb:125 ccm fir\na=rtcp-fb:125 nack\na=rtcp-fb:125 nack pli\na=fmtp:125 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42001f\na=rtpmap:107 rtx/90000\na=fmtp:107 apt=125\na=rtpmap:108 h264/90000\na=rtcp-fb:108 goog-remb\na=rtcp-fb:108 transport-cc\na=rtcp-fb:108 ccm fir\na=rtcp-fb:108 nack\na=rtcp-fb:108 nack pli\na=fmtp:108 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=42e01f\na=rtpmap:109 rtx/90000\na=fmtp:109 apt=108\na=rtpmap:124 h264/90000\na=rtcp-fb:124 goog-remb\na=rtcp-fb:124 transport-cc\na=rtcp-fb:124 ccm fir\na=rtcp-fb:124 nack\na=rtcp-fb:124 nack pli\na=fmtp:124 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=42e01f\na=rtpmap:120 rtx/90000\na=fmtp:120 apt=124\na=rtpmap:123 h264/90000\na=rtcp-fb:123 goog-remb\na=rtcp-fb:123 transport-cc\na=rtcp-fb:123 ccm fir\na=rtcp-fb:123 nack\na=rtcp-fb:123 nack pli\na=fmtp:123 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=4d001f\na=rtpmap:119 rtx/90000\na=fmtp:119 apt=123\na=rtpmap:35 h264/90000\na=rtcp-fb:35 goog-remb\na=rtcp-fb:35 transport-cc\na=rtcp-fb:35 ccm fir\na=rtcp-fb:35 nack\na=rtcp-fb:35 nack pli\na=fmtp:35 level-asymmetry-allowed=1;packetization-mode=0;profile-level-id=4d001f\na=rtpmap:36 rtx/90000\na=fmtp:36 apt=35\na=rtpmap:41 av1/90000\na=rtcp-fb:41 goog-remb\na=rtcp-fb:41 transport-cc\na=rtcp-fb:41 ccm fir\na=rtcp-fb:41 nack\na=rtcp-fb:41 nack pli\na=rtpmap:42 rtx/90000\na=fmtp:42 apt=41\na=rtpmap:114 h264/90000\na=rtcp-fb:114 goog-remb\na=rtcp-fb:114 transport-cc\na=rtcp-fb:114 ccm fir\na=rtcp-fb:114 nack\na=rtcp-fb:114 nack pli\na=fmtp:114 level-asymmetry-allowed=1;packetization-mode=1;profile-level-id=64001f\na=rtpmap:115 rtx/90000\na=fmtp:115 apt=114\na=rtpmap:116 red/90000\na=rtpmap:117 rtx/90000\na=fmtp:117 apt=116\na=rtpmap:118 ulpfec/90000\na=ssrc-group:fid 4091169142 3039037968\na=ssrc:4091169142 cname:5hnpuiftpus1yl30\na=ssrc:4091169142 msid:zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\na=ssrc:3039037968 cname:5hnpuiftpus1yl30\na=ssrc:3039037968 msid:zh3yazjj9xjmrvkm0nbz0v1zeupxzgyuoohe 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n\n\n详见协议/sdp协议。\n\n\n# stats tables 实时变化的统计信息表\n\n\n\n\n# rtcaudiosource\n\nstatistics rtcaudiosource_5\n\ntimestamp 6/29/2022, 2:28:43 pm\ntrackidentifier f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5 \nkind audio\naudiolevel 0.13782158879360332\ntotalaudioenergy 2.9554321642936476\n[audio_level_in_rms] 0.1339591782847916\ntotalsamplesduration 189.92999999997224\nechoreturnloss 20\nechoreturnlossenhancement 2.6021299362182617\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nrtcmediasourcestats 类型：\n\ndictionary rtcmediasourcestats : rtcstats {         // 媒体源-帧速率和分辨率\n    required domstring  trackidentifier;            // mediastreamtrack的id属性值\n    required domstring  kind;                       // mediastreamtrack的kind属性的值。 这是“音频”或“视频”。 \n                                                    // 如果它是“音频”, 那么这个stats对象的类型是rtcaudiosourcestats。 \n                                                    // 如果它是“video”, 那么这个stats对象的类型是rtcvideosourcestats\n    boolean             relayedsource;              // 源是远程的，例如如果它是通过 rtcpeerconnection 来自另一个主机，则为true。否则为假\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n\nrtcaudiosourcestats 类型：\n\ndictionary rtcaudiosourcestats : rtcmediasourcestats {\n    double    audiolevel;                   // 媒体源的音频电平,0-1,其中1.0表示0 dbov，0表示静音，0.5表示声压级从0 dbov开始大约6dbspl变化\n    double    totalaudioenergy;             // 总音频能量\n    double    totalsamplesduration;         // 媒体源的音频持续时间\n    double    echoreturnloss;               // 回声返回损失,仅当 mediastreamtrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n    double    echoreturnlossenhancement;    // 回声回波损耗增强，仅当 mediastreamtrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * trackidentifier: mediastreamtrack的id属性值。\n * kind: mediastreamtrack的kind属性的值。 这是“音频”或“视频”。\n * audiolevel: 媒体源的音频电平，0.0-1.1区间，其中 1.0 表示 0 dbov，0 表示静音，0.5 表示声压级从 0 dbov开始变化大约 6db spl。\n\n一个双精度浮点数，表示最近从 rtcrtpcontributingsource 描述的源接收到的 rtp 数据包中的音频音量。\n\n该值在 0.0 到 1.0 的范围内，呈线性比例，其值以 dbov 或分贝（过载）为单位定义。这是相对于开始发生音频削波的点的幅度。值 1.0 表示 0 dbov（最大音量），值 0.0 表示静音，值 0.5 表示声压级从 0 dbov 变化大约 6 db spl（声压级分贝）。\n\n\n1\n2\n3\n\n * totalaudioenergy: 总音频能量。\n * audio_level_in_rms：\n * totalsamplesduration：媒体源的音频持续时间。\n * echoreturnloss: 回声返回损失,仅当 mediastreamtrack 来自应用了回声消除的麦克风时才存在。 以分贝计算。\n * echoreturnlossenhancement：回声回波损耗增强，仅当 mediastreamtrack 来自应用了回声消除的麦克风时才存在。 以分贝计算。\n\n参考\n\n * rtcrtpcontributingsource.audiolevel - web apis | mdn\n\n\n# rtcvideosource\n\nstatistics rtcvideosource_6\n\ntimestamp 6/29/2022, 2:37:11 pm\ntrackidentifier 7e7f7c52-d11a-4ee0-9c3e-743e490d0788\nkind video\nwidth 640\nheight 480\nframes 20945\nframespersecond 30\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n\n\nrtcvideosourcestats 类型：\n\ndictionary rtcvideosourcestats : rtcmediasourcestats {\n    unsigned long        width;                     // 宽\n    unsigned long        height;                    // 高\n    unsigned long        bitdepth;                  // 位深\n    unsigned long        frames;                    // 总帧数\n    double               framespersecond;           // 最后一秒的编码帧数。这可能低于媒体源帧速率\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n\n * width：宽度。\n * height：高度。\n * frames：视频总帧数。\n * framespersecond：最后一秒的编码帧数。这可能低于媒体源帧速率。\n * bitdepth：视频位深。\n\n参考：\n\n * 什么是比特位深(bit depth)？ - 知乎\n\n\n# rtccertificate 含义\n\n// statistics rtccertificate_f4:d7:27:88:19:17:a8:8d:18:96:29:b5:aa:1d:b0:26:2a:07:d0:ea:22:5b:1d:ca:76:87:51:2f:3c:8a:26:86\n\ntimestamp 6/29/2022, 2:02:13 pm\nfingerprint 2b:e5:1b:34:8f:27:69:af:91:1c:fb:17:b4:fd:fd:aa:11:b8:88:cb:a9:8b:cd:b1:5e:72:df:e7:dd:2e:f2:b6\nfingerprintalgorithm sha-256\nbase64certificate miibftcbvkadagecaghfldzrghfsqzakbggqhkjopqqdajarmq8wdqydvqqddazxzwjsvemwhhcnmjiwnji4mduwotm3whcnmjiwnzi5mduwotm3wjarmq8wdqydvqqddazxzwjsvemwwtatbgcqhkjopqibbggqhkjopqmbbwncaasvnjvvjkstophoqaw6suc7smt39khvvybirwboiw3/swyurwi5xhj8yubt8e2bfbsm1emq3trabdkct/jcndypmaogccqgsm49bamca0gameuciqcppo7bluzxgwosd7reexiup0tmb1eclimj1hjdx1+mywigcn2/vdnceplgmvlv5lsaihsmhj64gmar4gltqkt5uew=\n\n\n1\n2\n3\n4\n5\n6\n\n\nrtccertificatestats:\n\ndictionary rtccertificatestats : rtcstats {\n    required domstring                      fingerprint;                // 证书的指纹\n    required domstring                      fingerprintalgorithm;       // 用于计算证书指纹的哈希函数\n    required domstring                      base64certificate;          // 证书的der编码的base-64\n    domstring                               issuercertificateid;        // 包含证书链中下一个证书的stats对象\n};\n\n\n1\n2\n3\n4\n5\n6\n\n * fingerprint：证书的指纹。\n * fingerprintalgorithm：用于计算证书指纹的哈希函数。\n * base64certificate：书的der编码的base-64。\n\n\n# rtcicecandidate 含义\n\nstatistics rtcicecandidate_c6ympjwd\n\ntimestamp 6/29/2022, 2:19:02 pm\ntransportid rtctransport_0_1\nisremote true\nip 172.33.50.23\naddress 172.33.50.23\nport 57778\nprotocol udp\ncandidatetype host\npriority 2122260223\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n\nrtcicecandidatestats:\n\ndictionary rtcicecandidatestats : rtcstats {\n    required domstring           transportid;               // 传输标识\n    domstring?                   address;                   // 它是候选地址,允许使用ipv4地址、ipv6地址和完全限定域名\n    long                         port;                      // 候选人的端口号\n    domstring                    protocol;                  // 协议传输的有效值是“udp”和“tcp”之一\n    required rtcicecandidatetype candidatetype;             // 候选人类型\n    long                         priority;                  // 优先级\n    domstring                    url;                       // 对于本地候选人，这是从中获取候选人的ice服务器的url\n    domstring                    relayprotocol;             // 它是端点用于与turn服务器通信的协议。这仅适用于本地候选人。\n                                                            // 有效值为“udp”、“tcp”或“tls\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n\n * transportid：传输标识。\n * isremote：是否属于远端。\n * ip：ipv4地址、ipv6地址。\n * address：它是候选地址,允许使用ipv4地址、ipv6地址和完全限定域名。\n * port：候选人的端口号。\n * protocol：协议传输的有效值是“udp”和“tcp”之一。\n * candidatetype：候选人类型。\n * priority：优先级。\n * url：对于本地候选人，这是从中获取候选人的ice服务器的url。\n\n\n# rtcicecandidatepair 含义\n\nstatistics rtcicecandidatepair_yhl6guqu_c6ympjwd\n\ntimestamp 6/29/2022, 2:19:02 pm\ntransportid rtctransport_0_1\nlocalcandidateid rtcicecandidate_yhl6guqu\nremotecandidateid rtcicecandidate_c6ympjwd\nstate succeeded\npriority 9115038255631187454\nnominated true\nwritable true\npacketssent 195\n[packetssent/s] 20.93237148143175\npacketsreceived 1205\n[packetsreceived/s] 132.57168604906775\nbytessent 9389\n[bytessent_in_bits/s] 7352.246287954314\nbytesreceived 719795\n[bytesreceived_in_bits/s] 656032.4835832033\ntotalroundtriptime 0.004\n[totalroundtriptime/responsesreceived] 0\ncurrentroundtriptime 0.001\navailableoutgoingbitrate 300000\nrequestsreceived 7\nrequestssent 1\nresponsesreceived 7\nresponsessent 7\nconsentrequestssent 6\npacketsdiscardedonsend 0\nbytesdiscardedonsend 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n * transportid：传输标识。\n * localcandidateid：本地候选人id。\n * remotecandidateid：远端候选人状态。\n * state：代表一对本地和远程候选者的清单状态。\n * priority：优先级。\n * nominated：与更新部分中描述的提名标志相关。\n * writable：是否可写。\n * packetssent：在此候选对上发送的数据包总数。\n * [packetssent/s]：在此候选对上每秒发送的数据包总数。\n * packetsreceived：在此候选对上接收到的数据包总数。\n * [packetsreceived/s]：在此候选对上每秒接收到的数据包总数。\n * bytessent：此候选对上发送的有效载荷字节总数。\n * [bytessent_in_bits/s]：此候选对上每秒发送的有效载荷比特总数。\n * bytesreceived：在此候选对上接收的有效载荷字节总数。\n * [bytesreceived_in_bits/s]：在此候选对上每秒接收的有效载荷比特总数。\n * totalroundtriptime：自会话开始以来所有往返时间测量的总和（以秒为单位）。\n * [totalroundtriptime/responsesreceived]：每次相应的往返时间测量。\n * currentroundtriptime：以秒为单位的最新往返时间，由两个stun连接检查[stun-path-char]计算得出。\n * availableoutgoingbitrate：可用传出比特率-由底层拥塞控制通过使用此候选对组合所有传出 rtp 流的可用比特率来计算的。\n * requestsreceived：收到的连接请求总数（包括重传）。\n * requestssent：发送的连接检查请求总数。\n * responsesreceived： 收到的连接响应总数。\n * responsessent：发送的连接检查响应总数。\n * consentrequestssent：发送的同意请求总数。\n * packetsdiscardedonsend：由于套接字错误而被丢弃的此候选对的数据包总数。\n * bytesdiscardedonsend：由于套接字错误而被丢弃的此候选对的总字节数。\n\n\n# rtcinboundrtpaudiostream 含义\n\nstatistics rtcinboundrtpaudiostream_730260482\n\ntimestamp 6/29/2022, 2:19:02 pm\nssrc 730260482\nkind audio\ntrackid rtcmediastreamtrack_receiver_7\ntransportid rtctransport_0_1\ncodecid rtccodec_0_inbound_111\n[codec] opus (111, minptime=10;useinbandfec=1)\nmediatype audio\njitter 0\npacketslost 0\npacketsdiscarded 0\nremoteid rtcremoteoutboundrtpaudiostream_730260482\npacketsreceived 464\n[packetsreceived/s] 49.83897971769464\nfecpacketsreceived 0\nfecpacketsdiscarded 0\nbytesreceived 40528\n[bytesreceived_in_bits/s] 34161.63025769662\nheaderbytesreceived 12992\n[headerbytesreceived_in_bits/s] 11163.931456763601\nlastpacketreceivedtimestamp 1656483542436\n[lastpacketreceivedtimestamp] 6/29/2022, 2:19:02 pm\njitterbufferdelay 16387.2\n[jitterbufferdelay/jitterbufferemittedcount_in_ms] 35\njitterbufferemittedcount 444480\ntotalsamplesreceived 445760\n[totalsamplesreceived/s] 48323.87473427673\nconcealedsamples 576\n[concealedsamples/s] 0\n[concealedsamples/totalsamplesreceived] 0\nsilentconcealedsamples 0\n[silentconcealedsamples/s] 0\nconcealmentevents 2\ninsertedsamplesfordeceleration 1785\n[insertedsamplesfordeceleration/s] 0\nremovedsamplesforacceleration 492\n[removedsamplesforacceleration/s] 0\naudiolevel 0.01132236701559496\ntotalaudioenergy 0.22607659102361047\n[audio_level_in_rms] 0.024382712400248877\ntotalsamplesduration 9.299999999999846\nestimatedplayouttimestamp 3865472342398\n[estimatedplayouttimestamp] 6/28/2092, 2:19:02 pm\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n\n\n\n# rtcinboundrtpvideostream 含义\n\nstatistics rtcinboundrtpvideostream_115767491\ntimestamp 6/29/2022, 2:19:02 pm\nssrc 115767491\nkind video\ntrackid rtcmediastreamtrack_receiver_8\ntransportid rtctransport_0_1\ncodecid rtccodec_1_inbound_96\n[codec] vp8 (96)\nmediatype video\njitter 0.009\npacketslost 0\npacketsreceived 711\n[packetsreceived/s] 81.73592673701921\nbytesreceived 627667\n[bytesreceived_in_bits/s] 583419.083693711\nheaderbytesreceived 17852\n[headerbytesreceived_in_bits/s] 16203.649085816884\nlastpacketreceivedtimestamp 1656483542438\n[lastpacketreceivedtimestamp] 6/29/2022, 2:19:02 pm\njitterbufferdelay 8.548\n[jitterbufferdelay/jitterbufferemittedcount_in_ms] 33.566666666666656\njitterbufferemittedcount 274\nframesreceived 276\n[framesreceived/s] 29.903387830616786\n[framesreceived-framesdecoded] 1\nframewidth 320\nframeheight 240\nframespersecond 30\nframesdecoded 275\n[framesdecoded/s] 29.903387830616786\nkeyframesdecoded 1\n[keyframesdecoded/s] 0\nframesdropped 0\ntotaldecodetime 0.101\n[totaldecodetime/framesdecoded_in_ms] 0.16666666666666682\ntotalprocessingdelay 7.998\n[totalprocessingdelay/framesdecoded_in_ms] 34.233333333333334\ntotalinterframedelay 9.127000000000008\n[totalinterframedelay/framesdecoded_in_ms] 33.333333333333336\ntotalsquaredinterframedelay 0.30461900000000014\n[interframedelaystdev_in_ms] 0.8692269873613643\ndecoderimplementation libvpx\nfircount 0\nplicount 0\nnackcount 0\nqpsum 3500\n[qpsum/framesdecoded] 10.166666666666666\nestimatedplayouttimestamp 3865472342402\n[estimatedplayouttimestamp] 6/28/2092, 2:19:02 pm\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n\n\n\n# rtcmediastreamtrack 含义\n\nstatistics rtcmediastreamtrack_receiver_7\n\ntimestamp 6/29/2022, 2:19:02 pm\ntrackidentifier f5c0e6b4-e674-450a-bf7c-a2d82c16d8d5\nremotesource true\nended false\ndetached false\nkind audio\njitterbufferdelay 16387.2\n[jitterbufferdelay/jitterbufferemittedcount_in_ms] 35\njitterbufferemittedcount 444480\naudiolevel 0.01132236701559496\ntotalaudioenergy 0.22607659102361047\n[audio_level_in_rms] 0.024382712400248877\ntotalsamplesreceived 445760\ntotalsamplesduration 9.299999999999846\nconcealedsamples 576\nsilentconcealedsamples 0\nconcealmentevents 2\ninsertedsamplesfordeceleration 1785\nremovedsamplesforacceleration 492\njitterbufferflushes* 2\ndelayedpacketoutagesamples* 256\nrelativepacketarrivaldelay* 0.04\njitterbuffertargetdelay* 14937.6\ninterruptioncount* 0\ntotalinterruptionduration* 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n\n\n\n# rtcpeerconnection 含义\n\nstatistics rtcpeerconnection\n\ntimestamp 6/29/2022, 2:24:01 pm\ndatachannelsopened 0\ndatachannelsclosed 0\n\n\n1\n2\n3\n4\n5\n\n\n\n# rtcremoteoutboundrtpaudiostream\n\nstatistics rtcremoteoutboundrtpaudiostream_730260482\n\ntimestamp 6/29/2022, 2:18:59 pm\nssrc 730260482\nkind audio\ntransportid rtctransport_0_1\ncodecid rtccodec_0_inbound_111\npacketssent 326\nbytessent 27996\nlocalid rtcinboundrtpaudiostream_730260482\nremotetimestamp 1656483539696\n[remotetimestamp] 6/29/2022, 2:18:59 pm\nreportssent 2\nroundtriptimemeasurements 0\ntotalroundtriptime 0\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n\n\n\n# rtctransport\n\nstatistics rtctransport_0_1\n\ntimestamp 6/29/2022, 2:19:02 pm\nbytessent 9389\n[bytessent_in_bits/s] 7352.246287954314\npacketssent 195\n[packetssent/s] 20.93237148143175\nbytesreceived 719795\n[bytesreceived_in_bits/s] 656032.4835832033\npacketsreceived 1205\n[packetsreceived/s] 132.57168604906775\ndtlsstate connected\nselectedcandidatepairid rtcicecandidatepair_yhl6guqu_c6ympjwd\nlocalcertificateid rtccertificate_1f:47:0c:d2:8c:47:e3:41:4f:31:41:49:36:87:96:f9:a0:cb:0e:b1:08:40:03:ee:b8:3a:d5:c0:40:1e:db:3c\nremotecertificateid rtccertificate_eb:2c:a5:26:8c:f2:11:f2:34:b1:a8:77:7d:90:30:8e:57:bb:cb:0e:64:7d:40:9b:29:68:87:de:2d:17:94:82\ntlsversion fefd\ndtlscipher tls_ecdhe_ecdsa_with_aes_128_gcm_sha256\ndtlsrole client\nsrtpcipher aes_cm_128_hmac_sha1_80\nselectedcandidatepairchanges 1\nicerole controlled\nicelocalusernamefragment 2es1\nicestate connected\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n\n\n\n# stats graphs for rtcaudiosource\n\n\n\n\n# stats graphs for rtcvideosource\n\n\n\n\n# stats graphs for rtcicecandidatepair\n\n\n\n\n# stats graphs for rtcmediastreamtrack\n\n\n\n\n# stats graphs for rtcoutboundrtpaudiostream\n\n\n\n\n# stats graphs for rtcoutboundrtpvideostream\n\n\n\n\n# stats graphs for rtcpeerconnection\n\n\n\n\n# stats graphs for rtcremoteinboundrtpaudiostream\n\n\n\n\n# stats graphs for rtcremoteinboundrtpvideostream\n\n\n\n\n# stats graphs for rtctransport\n\n\n\n\n# 参考\n\nwebrtc statistics dictionary | fancy webrtc',charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"WebRTC 中的三角形和梯形会话",frontmatter:{title:"WebRTC 中的三角形和梯形会话",date:"2022-06-29T08:56:09.000Z",permalink:"/basic/intro/session/",categories:["基础","概要"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/20.%E6%A6%82%E8%A6%81/30.session.html",relativePath:"20.基础/20.概要/30.session.md",key:"v-363e47ae",path:"/basic/intro/session/",headers:[{level:2,title:"梯形结构",slug:"梯形结构",normalizedTitle:"梯形结构",charIndex:42},{level:3,title:"采用SIP协议实现WebRTC通话",slug:"采用sip协议实现webrtc通话",normalizedTitle:"采用sip协议实现webrtc通话",charIndex:917},{level:3,title:"采用Jingle协议实现WebRTC通话",slug:"采用jingle协议实现webrtc通话",normalizedTitle:"采用jingle协议实现webrtc通话",charIndex:1213},{level:2,title:"三角形结构",slug:"三角形结构",normalizedTitle:"三角形结构",charIndex:1298},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:1501}],readingTime:{text:"1 min read",minutes:.575,time:34500,words:115},headersStr:"梯形结构 采用SIP协议实现WebRTC通话 采用Jingle协议实现WebRTC通话 三角形结构 参考",content:"WebRTC实现音视频通话有两种不同的结构模式，即为梯形模式和三角形模式。\n\n\n# 梯形结构\n\nWebRTC 在浏览器之间的引入点对点通信范式来扩展 client-server 的语义(semantics)。 最通用的 WebRTC 架构模型从所谓的 SIP （会话发起协议）梯形（RFC3261）中汲取灵感。\n\n\n\n在 WebRTC 梯形模型中，两个浏览器都运行一个 Web 应用程序，该应用程序是从其他 Web 服务器下载的。 信令消息用于建立和终止通信。 它们是通过 HTTP 或 WebSocket 协议通过 Web 服务器传输的，这些Web服务器可以根据需要修改，转换或管理它们。 值得注意的是，WebRTC 中浏览器和服务器之间的信令未标准化，因为它被认为是应用程序的一部分（请参阅信令）。 关于数据路径，PeerConnection 允许媒体直接在浏览器之间流动，而无需任何中间服务器。 这两个 Web 服务器可以使用标准信令协议（例如 SIP 或 Jingle（XEP-0166））进行通信。 或者，也可以使用专有的信令协议。\n\n注意\n\n 1. 在WebRTC中我们常常把浏览器和服务器之间的连接成为信令，但是其实他并非指电话系统中的信令。信令在WebRTC中并没有实现标准化。\n 2. WebRTC梯形中采用的都是标准协议。例如：很多视频会议系统用到的会话发起协议（SIP）或者Jingle。当然，还可以采用专有的信令协议。\n\nWebRTC梯形调用流程（SIP）：\n\n\n\nWebRTC梯形调用流程（Jingle）：\n\n\n\n扩展\n\n什么是 SIP 和 Jingle？\n\n * SIP：会话发起协议（Session Initiation Protocol，缩写SIP）是一个由 IETF MMUSIC 工作组开发的协议，作为标准被提议用于建立，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话。\n\n * Jingle：由 Google 及 XMPP 标准基金会设计。其多媒体流被设计用于RTP（实时传输协议）。若需要，可由NAT穿透辅助以使用ICE（交互式连接建立）。\n\n\n# 采用SIP协议实现WebRTC通话\n\n\n\n如果浏览器想和一个SIP客户端（例如SIP电话）进行视频通话，首先要做的少就是从Web服务器下载带有WebRTC代码的网页程序，在浏览器端向Web服务器发起音频通话请求对象M，Web服务器把M发给SIP服务器，SIP服务器把请求M发给SIP客户端（例如SIP电话）。\n\nSIP客户端在成功接收请求之后会相应另外一个请求对象S发给SIP服务器，SIP服务器把S发给Web服务器，Web服务器把S发给浏览器。在进行外上面的步骤后，浏览器和SIP服务器开始进行打洞，密钥协商，媒体会话等操作。会话关闭的时候流程和建立链接的时候类似。这里不再复述。\n\n\n# 采用Jingle协议实现WebRTC通话\n\n\n\n整个过程和SIP模式相比除了Web服务器A和Web服务器B之间采用的协议不同，其他的基本相似。这里不再详细说明。\n\n\n# 三角形结构\n\n最常见的 WebRTC 场景很可能是两种浏览器都运行相同的 Web 应用程序（从相同的网页下载）。 在这种情况下，梯形变为三角形。\n\n为什么会是三角形？\n\n因为这三个元素之间的信令路线和和媒体之间所构成的形状恰似一个三角形。两个浏览器之间的媒体通讯并不通过Web服务器，而是通过建立对等连接来实现音视频媒体以及一些附加数据。\n\n\n\n又如：\n\n\n\nWebRTC三角形数据调用流程：\n\n\n\n\n# 参考\n\n * WebRTC 实时通信",normalizedContent:"webrtc实现音视频通话有两种不同的结构模式，即为梯形模式和三角形模式。\n\n\n# 梯形结构\n\nwebrtc 在浏览器之间的引入点对点通信范式来扩展 client-server 的语义(semantics)。 最通用的 webrtc 架构模型从所谓的 sip （会话发起协议）梯形（rfc3261）中汲取灵感。\n\n\n\n在 webrtc 梯形模型中，两个浏览器都运行一个 web 应用程序，该应用程序是从其他 web 服务器下载的。 信令消息用于建立和终止通信。 它们是通过 http 或 websocket 协议通过 web 服务器传输的，这些web服务器可以根据需要修改，转换或管理它们。 值得注意的是，webrtc 中浏览器和服务器之间的信令未标准化，因为它被认为是应用程序的一部分（请参阅信令）。 关于数据路径，peerconnection 允许媒体直接在浏览器之间流动，而无需任何中间服务器。 这两个 web 服务器可以使用标准信令协议（例如 sip 或 jingle（xep-0166））进行通信。 或者，也可以使用专有的信令协议。\n\n注意\n\n 1. 在webrtc中我们常常把浏览器和服务器之间的连接成为信令，但是其实他并非指电话系统中的信令。信令在webrtc中并没有实现标准化。\n 2. webrtc梯形中采用的都是标准协议。例如：很多视频会议系统用到的会话发起协议（sip）或者jingle。当然，还可以采用专有的信令协议。\n\nwebrtc梯形调用流程（sip）：\n\n\n\nwebrtc梯形调用流程（jingle）：\n\n\n\n扩展\n\n什么是 sip 和 jingle？\n\n * sip：会话发起协议（session initiation protocol，缩写sip）是一个由 ietf mmusic 工作组开发的协议，作为标准被提议用于建立，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话。\n\n * jingle：由 google 及 xmpp 标准基金会设计。其多媒体流被设计用于rtp（实时传输协议）。若需要，可由nat穿透辅助以使用ice（交互式连接建立）。\n\n\n# 采用sip协议实现webrtc通话\n\n\n\n如果浏览器想和一个sip客户端（例如sip电话）进行视频通话，首先要做的少就是从web服务器下载带有webrtc代码的网页程序，在浏览器端向web服务器发起音频通话请求对象m，web服务器把m发给sip服务器，sip服务器把请求m发给sip客户端（例如sip电话）。\n\nsip客户端在成功接收请求之后会相应另外一个请求对象s发给sip服务器，sip服务器把s发给web服务器，web服务器把s发给浏览器。在进行外上面的步骤后，浏览器和sip服务器开始进行打洞，密钥协商，媒体会话等操作。会话关闭的时候流程和建立链接的时候类似。这里不再复述。\n\n\n# 采用jingle协议实现webrtc通话\n\n\n\n整个过程和sip模式相比除了web服务器a和web服务器b之间采用的协议不同，其他的基本相似。这里不再详细说明。\n\n\n# 三角形结构\n\n最常见的 webrtc 场景很可能是两种浏览器都运行相同的 web 应用程序（从相同的网页下载）。 在这种情况下，梯形变为三角形。\n\n为什么会是三角形？\n\n因为这三个元素之间的信令路线和和媒体之间所构成的形状恰似一个三角形。两个浏览器之间的媒体通讯并不通过web服务器，而是通过建立对等连接来实现音视频媒体以及一些附加数据。\n\n\n\n又如：\n\n\n\nwebrtc三角形数据调用流程：\n\n\n\n\n# 参考\n\n * webrtc 实时通信",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"Webrtc Statistics Dictionary",frontmatter:{title:"Webrtc Statistics Dictionary",date:"2022-07-01T14:34:18.000Z",permalink:"/basic/intro/dict/",categories:["基础","概要"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/20.%E6%A6%82%E8%A6%81/40.Webrtc%20Statistics%20Dictionary.html",relativePath:"20.基础/20.概要/40.Webrtc Statistics Dictionary.md",key:"v-4ae09651",path:"/basic/intro/dict/",readingTime:{text:"13 min read",minutes:12.79,time:767400,words:2558},headersStr:null,content:'Webrtc Statistics Dictionary:\n\nenum RTCStatsType {\n    "codec",                        // RTCPeerConnection流当前正在使用的编解码器                        \n    "inbound-rtp",                  // 收到的RTP流统计信息                                           \n    "outbound-rtp",                 // 发送的RTP流统计信息                                              \n    "remote-inbound-rtp",           // 对端收到的RTP流统计信息                                            \n    "remote-outbound-rtp",          // 对端发送的RTP流统计信息                                            \n    "media-source",                 // 发送到编码器的媒体信息                                          \n    "csrc",                         // RTP流CSRC                                                     \n    "peer-connection",              // RTCPeerConnection对象相关的统计信息                               \n    "data-channel",                 // RTCDataChannel 相关的统计信息                                   \n    "stream",                       // 媒体轨道统计信息包含与特定MediaStream相关的统计信息              \n    "track",                        // 媒体轨道统计信息                                                     \n    "transceiver",                  // RTCRtpTransceiver                                                \n    "sender",                       // 媒体级指标相关的统计信息                                         \n    "receiver",                     // 特定接收器相关的统计数据和相应的媒体级指标                        \n    "transport",                    // 媒体传输统计信息                                                 \n    "sctp-transport",               // RTCSctpTransport 对象相关的 SCTP 传输统计信息                   \n    "candidate-pair",               // ICE候选对统计信息                                               \n    "local-candidate",              // ICE 本地候选统计信息                                             \n    "remote-candidate",             // ICE 远程候选统计信息                                             \n    "certificate",                  // RTCIceTransport 使用的证书的信息                                 \n    "ice-server"                    // 有关与ICE服务器的连接的信息                                  \n};\nRTCStatsType                                Dictionary                      \n"codec"                                     RTCStats\n                                            RTCCodecStats\n                                            \n"inbound-rtp"                               RTCStats\n                                            RTCRtpStreamStats\n                                            RTCReceivedRtpStreamStats\n                                            RTCInboundRtpStreamStats\n                                            \n​\n"outbound-rtp"                              RTCStats\n                                            RTCRtpStreamStats\n                                            RTCSentRtpStreamStats\n                                            RTCOutboundRtpStreamStats\n                                            \n"remote-inbound-rtp"                        RTCStats\n                                            RTCRtpStreamStats\n                                            RTCReceivedRtpStreamStats\n                                            RTCRemoteInboundRtpStreamStats\n                                            \n"remote-outbound-rtp"                       RTCStats        \n                                            RTCRtpStreamStats\n                                            RTCSentRtpStreamStats\n                                            RTCRemoteOutboundRtpStreamStats\n                                            \n"media-source"                              RTCStats\n                                            RTCMediaSourceStats\n                                            RTCAudioSourceStats\n                                            RTCVideoSourceStats\n                                            \n"csrc"                                      RTCStats\n                                            RTCRtpContributingSourceStats\n                                            \n"peer-connection"                           RTCStats\n                                            RTCPeerConnectionStats\n                                            \n"data-channel"                              RTCStats\n                                            RTCDataChannelStats                 \n                                            \n"transceiver"                               RTCStats            \n                                            RTCRtpTransceiverStats\n                                            \n"sender"                                    RTCStats\n                                            RTCMediaHandlerStats\n                                            RTCAudioSenderStats\n                                            RTCVideoSenderStats\n                                            \n"receiver"                                  RTCStats\n                                            RTCMediaHandlerStats\n                                                                                \n"transport"                                 RTCStats        \n                                            RTCTransportStats\n                                            \n"sctp-transport"                            RTCStats\n                                            RTCSctpTransportStats\n                                            \n"candidate-pair"                            RTCStats                    \n                                            RTCIceCandidatePairStats\n                                            \n"local-candidate"                           RTCStats                \n                                            RTCIceCandidateStats\n                                            \n"remote-candidate"                          RTCStats                \n                                            RTCIceCandidateStats\n                                            \n"certificate"                               RTCStats                \n                                            RTCCertificateStats\n                                            \n"ice-server"                                RTCStats        \n                                            RTCIceServerStats\n                                            \nTCRtpStreamStats：适用于任何 RTP 流任何端的统计信息 RTCReceivedRtpStreamStats：在 RTP 流的接收端测量的统计数据，已知是因为它们在本地测量或通过 RTCP 接收器报告 (RR) 或扩展报告 (XR) 块传输。 RTCInboundRtpStreamStats：只能在 RTP 流的本地接收端测量的统计信息。 RTCRemoteInboundRtpStreamStats：与 RTP 流的远程接收端相关的统计信息 - 通常通过将本地数据与通过 RTCP RR 或 XR 块接收的数据相结合来计算。 RTCSentRtpStreamStats：在 RTP 流的发送端测量的统计数据，已知是因为它们是在本地测量的，或者因为它们是通过 RTCP 接收的，通常在 RTCP 发送者报告 (SR) 中 RTCOutboundRtpStreamStats：本地测量的统计数据。 RTCRemoteOutboundRtpStreamStats：与 RTP 流的远程发送端相关的统计信息，通常基于 RTCP SR 计算\n\ndictionary RTCRtpStreamStats : RTCStats {\n    required unsigned long      ssrc;           // 同步源标识符,每个[RFC3550]的无符号整数值\n    required DOMString          kind;           // “音频”或“视频, 匹配”MediaStreamTrack的kind属性\n    DOMString                   transportId;    // 唯一标识符与此RTP流相关联的RTCTransportStats\n    DOMString                   codecId;        // 唯一标识符与RTP流关联的RTCCodecStats的对象相关联\n};\n​\nenum RTCCodecType {\n    "encode",\n    "decode",\n};\n​\ndictionary RTCCodecStats : RTCStats {\n    required unsigned long      ;   // RTP编码或解码中使用的有效载荷类型\n    RTCCodecType                codecType;      // 编码或解码 取决于此对象是否表示实现准备进行编码或解码的媒体格式\n                                                // 如果字典成员不存在，则意味着该媒体格式既可以编码也可以解码\n    required DOMString          transportId;    // 使用此编解码器的传输的唯一标识符,可用于查找相应的RTCTransportStats对象\n    required DOMString          mimeType;       // 编解码器MIME媒体类型/子类型。 例如:video/vp8或等效文件\n    unsigned long               clockRate;      // 媒体采样率\n    unsigned long               channels;       // 通道数,立体声使用2，其他大多数情况下都没有\n    DOMString                   sdpFmtpLine;    // SDP中的a=fmtp行对应于编解码器，即在PT后面的冒号之后。 这由第 5.7 节中的 [JSEP] 定义。\n};\n​\ndictionary RTCReceivedRtpStreamStats : RTCRtpStreamStats {\n    unsigned long long          packetsReceived;        // SSRC接收的RTP数据包总数\n    long long                   packetsLost;            // SSRC丢失的RTP数据包总数\n    double                      jitter;                 // SSRC数据包抖动,以秒为单位测量\n    unsigned long long          packetsDiscarded;       // 由于迟到或早到而被抖动缓冲区丢弃的RTP数据包的累积数量\n    unsigned long long          packetsRepaired;        // 应用错误恢复机制 [XRBLOCK-STATS]后修复的丢失RTP数据包的累积数量\n    unsigned long long          burstPacketsLost;       // 丢失突发期间丢失的RTP数据包的累积数量\n    unsigned long long          burstPacketsDiscarded;  // 在丢弃突发期间丢弃的RTP数据包的累积数量\n    unsigned long               burstLossCount;         // 丢失RTP数据包的累积突发数\n    unsigned long               burstDiscardCount;      // 丢弃的RTP数据包的累积突发数\n    double                      burstLossRate;          // 突发期间丢失的RTP数据包占突发中预期的RTP数据包总数的比例\n    double                      burstDiscardRate;       // 突发期间丢弃的RTP数据包占突发中预期的RTP数据包总数的比例\n    double                      gapLossRate;            // 在间隙期间丢失的 RTP 数据包的比例\n    double                      gapDiscardRate;         // 在间隙期间丢弃的 RTP 数据包的比例\n    unsigned long               framesDropped;          // 只存在于视频,在解码之前丢弃或丢弃的帧总数\n    unsigned long               partialFramesLost;      // 只存在于视频,丢失的部分帧的累积数量\n    unsigned long               fullFramesLost;         // 只存在于视频,丢失的完整帧的累积数量\n};\n​\ndictionary RTCInboundRtpStreamStats : RTCReceivedRtpStreamStats {       // RTP 媒体流的测量指标\n    required DOMString  receiverId;                 // 查找接收此流的RTCAudioReceiverStats或RTCVideoReceiverStats 对象的统计ID\n    DOMString           remoteId;                   // 用于查找同一 SSRC 的远程 RTCRemoteOutboundRtpStreamStats 对象\n    unsigned long       framesDecoded;              // RTP 流正确解码的帧总数，即如果没有丢帧将显示的帧数。\n    unsigned long       keyFramesDecoded;           // 只存在于视频。 它表示关键帧的总数\n    unsigned long       frameWidth;                 // 只存在于视频。 表示最后解码帧的宽度\n    unsigned long       frameHeight;                // 只存在于视频。 表示最后解码帧的高度\n    unsigned long       frameBitDepth;              // 只存在于视频。 表示最后一个编码帧的每个像素的位深度。典型值为 24、30 或 36 位\n    double              framesPerSecond;            // 只存在于视频。 最后一秒的编码帧数。这可能低于媒体源帧速率\n    unsigned long long  qpSum;                      // 只存在于视频。 此接收器解码的帧的 QP 值的总和。 帧数以framesDecoded 为单位\n    double              totalDecodeTime;            // 解码此流的 framesDecoded 帧所花费的总秒数,\n                                                    // 以通过将此值除以framesDecoded 来计算平均解码时间\n                                                    // 解码一帧所需的时间是向解码器馈送一帧和解码器返回该帧的解码数据之间经过的时间\n    double              totalInterFrameDelay;       // 连续解码的帧之间的帧间延迟总和（以秒为单位）\n                                                    // (totalSquaredInterFrameDelay -   \n                                                    // totalInterFrameDelay^2/framesDecoded)/framesDecoded\n                                                    // 从totalInterFrameDelay、totalSquaredInterFrameDelay \n                                                    // 和framesDecoded 计算帧间延迟方差\n    double              totalSquaredInterFrameDelay;// 连续解码的帧之间的平方帧间延迟的总和（以秒为单位）\n    boolean             voiceActivityFlag;          // 只存在于音频。 其帧被传送到 RTCRtpReceiver 的 MediaStreamTrack \n                                                    // 以进行播放的最后一个 RTP 数据包是否包含语音活动，取决于扩展标头中 V 位的存在\n    DOMHighResTimeStamp lastPacketReceivedTimestamp;// 表示接收到此 SSRC 的最后一个数据包的时间戳\n    double              averageRtcpInterval;        // 两个连续复合 RTCP 数据包之间的平均 RTCP 间隔\n    unsigned long long  headerBytesReceived;        // 为此SSRC接收的RTP标头和填充字节的总数。这不包括传输层标头的大小\n    unsigned long long  fecPacketsReceived;         // 为此SSRC接收的RTP FEC数据包总数,\n                                                    // 当使用媒体数据包（例如，使用 Opus）在带内接收 FEC 数据包时，此计数器也可以增加\n    unsigned long long  fecPacketsDiscarded;        // 为该SSRC接收的RTP FEC数据包总数,其中应用程序丢弃了纠错有效负载\n    unsigned long long  bytesReceived;              // SSRC接收的总字节数\n    unsigned long long  packetsFailedDecryption;    // 程序未能解密的 RTP 数据包的累积数量\n    unsigned long long  packetsDuplicated;          // 由于重复而丢弃的累积数据包数。 重复的数据包不计入丢弃的数据包中\n    record<USVString, unsigned long long> perDscpPacketsReceived;           \n                                                    //为此SSRC接收的数据包总数,DSCP被标识为字符串形式的十进制整数\n    unsigned long       nackCount;                  // 计算此接收器发送的图片丢失指示 (PLI) 数据包的总数\n    unsigned long       firCount;                   // 只存在于视频。 计算此接收器发送的完整帧内请求 (FIR) 数据包的总数\n    unsigned long       pliCount;                   // 只存在于视频。 计算此接收器发送的图片丢失指示 (PLI) 数据包的总数\n    unsigned long       sliCount;                   // 只存在于视频。 计算此接收器发送的切片丢失指示 (SLI) 数据包的总数\n    double              totalProcessingDelay;       // 每个音频样本或视频帧从收到第一个 RTP 数据包的时间（接收时间戳）\n                                                    // 到解码相应样本或帧的时间（解码的时间戳）所用时间的总和\n    DOMHighResTimeStamp estimatedPlayoutTimestamp;  // 这是此接收器曲目的估计播放时间。 \n                                                    // 播放时间是具有已知时间戳的最后一个可播放音频样本或视频帧的\n                                                    // NTP 时间戳（从 RTCP SR 数据包将 RTP 时间戳映射到 NTP 时间戳）\n    double              jitterBufferDelay;          // 抖动缓冲区的目的是将 RTP 数据包重新组合成帧（在视频的情况下）并平滑播放。\n                                                    // 此处描述的模型假设样本或帧仍处于压缩状态且尚未解码。\n                                                    // 它是每个音频样本或视频帧从抖动缓冲区接收到第一个数据包的时间\n                                                    //（摄取时间戳）到它退出抖动缓冲区的时间（发出时间戳）所用时间的总和，以秒为单位\n                                                    // 在音频的情况下，多个样本属于同一个 RTP 数据包\n                                                    // 因此它们将具有相同的摄取时间戳，但不同的抖动缓冲区发出时间戳\n                                                    // 在视频的情况下，帧可能是通过多个 RTP 数据包接收的，\n                                                    // 因此摄取时间戳是进入抖动缓冲区的最早数据包，发射时间戳是整个帧退出抖动缓冲区的时间\n                                                    // 该指标在样本或帧退出时增加，在缓冲区中完成它们的时间\n                                                    // （并增加 jitterBufferEmittedCount）\n                                                    // 平均抖动缓冲延迟可以通过将 jitterBufferDelay 与 \n                                                    // jitterBufferEmittedCount 相除来计算\n    unsigned long long  jitterBufferEmittedCount;   // 来自抖动缓冲区的音频样本或视频帧的总数（增加 jitterBufferDelay）\n    unsigned long long  totalSamplesReceived;       // 只存在于音频。在此 RTP 流上接收到的样本总数\n    unsigned long long  totalSamplesDecoded;        // 只存在于音频。在此 RTP 流上解码的样本总数\n    unsigned long long  samplesDecodedWithSilk;     // 仅存在于音频且音频编解码器为Opus时。Opus 编解码器的 SILK 部分解码的样本总数。\n    unsigned long long  samplesDecodedWithCelt;     // 仅存在于音频且音频编解码器为Opus时。Opus 编解码器的 CELT 部分解码的样本总数\n    unsigned long long  concealedSamples;           // 只存在于音频,隐藏样本的样本总数\n    unsigned long long  silentConcealedSamples;     // 只存在于音频,插入的“无声”隐藏样本总数,播放静音样本会导致静音或舒适噪\n    unsigned long long  concealmentEvents;          // 只存在于音频,隐藏事件的数量。\n    unsigned long long  insertedSamplesForDeceleration; \n                                                    // 只存在于音频,当播放速度减慢时，此计数器会根据接收到的样本数与播放的样本数之间的差异而增加\n    unsigned long long  removedSamplesForAcceleration;  \n                                                    // 只存在于音频,当播放加速时，此计数器增加接收的样本数与播放的样本数之间的差值\n    double              audioLevel;                 // 只存在于音频。有关本地附加轨道的音频级别，请参阅 RTCAudioSourceStats。\n                                                    // 该值介于 0..1（线性）之间，其中 1.0 表示 0 dBov，0 表示静音，\n                                                    // 0.5 表示声压级从 0 dBov 开始大约 6 dBSPL 变化。\n                                                    // 使用 totalAudioEnergy 中描述的算法，在某个小区间内平均 audioLevel。\n                                                    // 使用的间隔取决于实现。\n    double              totalAudioEnergy;           // 只存在于音频。表示接收轨道的音频能量。有关本地附加轨道的音频能量，\n                                                    // 请参阅 RTCAudioSourceStats\n                                                    // 对于接收到的每个音频样本（因此按 totalSamplesReceived 计数）\n                                                    // 将样本值除以最高强度的可编码值，平方， 然后乘以以秒为单位的样本持续时间。\n                                                    // 换句话说，持续时间 * Math.pow(energy/maxEnergy, 2)。\n                                                    // 这可用于获得与 audioLevel 使用相同单位的均方根 (RMS) 值，如 [RFC6464] 中所定义。\n                                                    // 可以使用公式 \n                                                    // Math.sqrt(totalAudioEnergy/totalSamplesDuration) 将其转换为这些单位。\n                                                    // 也可以使用两个不同 getStats() 调用的值之间的差异来执行此计算，\n                                                    // 以便计算任何所需时间间隔内的平均音频电平。\n                                                    // 换句话说，做 Math.sqrt((energy2 - energy1)/(duration2 - duration1))。\n                                                    // 例如，如果生成一个 10 毫秒的音频数据包，其 RMS 为 0.5（超出 1.0），\n                                                    // 则应将 0.5 * 0.5 * 0.01 = 0.0025 添加到 totalAudioEnergy。\n                                                    // 如果接收到另一个 RMS 为 0.1 的 10ms 数据包，\n                                                    // 这应该类似地将 0.0001 添加到 totalAudioEnergy。然后， \n                                                    // Math.sqrt(totalAudioEnergy/totalSamplesDuration) 变为 \n                                                    // Math.sqrt(0.0026/0.02) = 0.36，\n                                                    // 这与通过对连续 20 毫秒音频段进行 RMS 计算获得的值相同。\n                                                    // 如果使用多个音频通道，则样本的音频能量是指任一通道的最高能量。\n    double              totalSamplesDuration;       // 只存在于音频。 表示接收轨道的音频持续时间。 \n                                                    // 有关本地附加轨道的音频持续时间，请参阅 RTCAudioSourceStats\n    unsigned long       ramesReceived;              // 只存在于视频。 表示在此 RTP 流上接收到的完整帧的总数\n    DOMString           decoderImplementation;      // 标识使用的解码器实现\n};\n​\ndictionary RTCRemoteInboundRtpStreamStats : RTCReceivedRtpStreamStats {\n    DOMString          localId;                  // 查找RTCOutboundRtpStreamStats                 \n    double             roundTripTime;            // 此 SSRC 的估计往返时间基于 RTCP 接收器报告 (RR) 中的 RTCP 时间戳，以秒为单位\n    double             totalRoundTripTime;       // 表示自会话开始以来所有往返时间测量的累积总和（以秒为单位）\n    double             fractionLost;             // 为此 SSRC 报告的部分丢包率\n    unsigned long long reportsReceived;          // SSRC 接收的 RTCP RR 块的总数\n    unsigned long long roundTripTimeMeasurements;// SSRC 接收的包含有效往返时间的 RTCP RR 块的总数\n};\n​\ndictionary RTCSentRtpStreamStats : RTCRtpStreamStats {\n    unsigned long       packetsSent;                // SRC发送的RTP数据包总数。这包括重传\n    unsigned long long  bytesSent;                  // 为此SSRC发送的总字节数。这包括重传\n};\n​\ndictionary RTCOutboundRtpStreamStats : RTCSentRtpStreamStats {\n    unsigned long       rtxSsrc;                    // ssrc\n    DOMString           mediaSourceId;              // stats 对象的标识符\n    DOMString           senderId;                   // RTCAudioSenderStats 或 RTCVideoSenderStats 对象的统计ID\n    DOMString           remoteId;                   // 用于查找同一SSRC的远程 RTCRemoteInboundRtpStreamStats对象\n    DOMString           rid;                        // 如果已设置，则公开此 RTP 流的rid 编码参数，否则未定义\n    DOMHighResTimeStamp lastPacketSentTimestamp;    // 表示为此 SSRC 发送最后一个数据包的时间戳\n    unsigned long long  headerBytesSent;            // 为此 SSRC 发送的 RTP 标头和填充字节的总数。 这不包括传输层标头的大小\n                                                    // 例如 IP 或 UDP headerBytesSent + bytesSent等于通过传输作为有效负载发送的字节数\n                                                    // 例如 IP 或 UDP headerBytesSent + bytesSent等于通过传输作为有效负载发送的字节数\n    unsigned long       packetsDiscardedOnSend;     // 由于套接字错误而被丢弃的此 SSRC 的 RTP 数据包总数\n    unsigned long long  bytesDiscardedOnSend;       // 由于套接字错误而被丢弃的此 SSRC 的总字节数\n    unsigned long       fecPacketsSent;             // 为此 SSRC 发送的 RTP FEC 数据包总数\n    unsigned long long  retransmittedPacketsSent;   // 为此 SSRC 重新传输的数据包总数\n    unsigned long long  retransmittedBytesSent;     // 为此 SSRC 重传的字节总数，仅包括有效载荷字节\n    double              targetBitrate;              // 编码器目标比特率\n    unsigned long long  totalEncodedBytesTarget;    // 每次对帧进行编码时，该值都会增加目标帧大小(以字节为单位)\n    unsigned long       frameWidth;                 // 最后一个编码帧的宽度, 编码帧的分辨率可能低于编码源\n    unsigned long       frameHeight;                // 最后一个编码帧的高度, 编码帧的分辨率可能低于编码源\n    unsigned long       frameBitDepth;              // 每个像素的位深度24、30、36\n    double              framesPerSecond;            // 最后一秒解码的帧数\n    unsigned long       framesSent;                 // RTP 流上发送的帧总数\n    unsigned long       hugeFramesSent;             // 表示此RTP流发送的huge帧总数.根据定义,huge帧编码大小至少是帧平均大小的2.5倍\n    unsigned long       framesEncoded;              // RTP 媒体流成功编码的帧总数\n    unsigned long       keyFramesEncoded;           // 关键帧的总数\n    unsigned long       framesDiscardedOnSend;      // 由于套接字错误而为此 SSRC 丢弃的视频帧总数，即在将数据包交给套接字时发生套接字错误\n                                                    // 这可能由于各种原因而发生，包括缓冲区已满或没有可用内存。\n    unsigned long long  qpSum;                      // 发送方编码的帧的QP值的总和\n    unsigned long long  totalSamplesSent;           // RTP流发送的样本总数\n    unsigned long long  samplesEncodedWithSilk;     // 仅存在于音频且音频编解码器为Opus时,Opus编解码器的SILK部分编码的样本总数\n    unsigned long long  samplesEncodedWithCelt;     // 仅存在于音频且音频编解码器为 Opus 时。 Opus 编解码器的 CELT 部分编码的样本总数\n    boolean             voiceActivityFlag;          // 只存在于音频,根据[RFC6464]中定义的扩展报头中 V 位的存在\n                                                    // 最后发送的RTP数据包是否包含语音活动\n    double              totalEncodeTime;            // 编码此流的framesEncoded 帧所花费的总秒数。 \n                                                    // 可以通过将此值除以framesEncoded 来计算平均编码时间。 \n                                                    // 编码一帧所需的时间是向编码器提供一帧和编码器返回该帧的编码数据之间经过的时间。 \n                                                    // 这不包括打包结果数据可能花费的任何额外时间\n    double               totalPacketSendDelay;      // 总数据包发送延迟\n    double               averageRtcpInterval;       // 两个连续复合RTCP数据包之间的平均 RTCP间隔。这是在发送复合 RTCP 报告时由发送端点计算的。\n                                                    // 复合数据包必须至少包含一个RTCP RR 或 SR 块和一个带有 CNAME 项的 SDES 数据\n    RTCQualityLimitationReason  qualityLimitationReason;    \n                                                    // 只存在于视频。 当前限制分辨率和/或帧率的原因，如果不受限制，则为“无”。\n    record<DOMString, double> qualityLimitationDurations;   \n                                                    // 只存在于视频。 此流在每个质量限制状态中花费的总时间（以秒为单位）的记录\n    unsigned long        qualityLimitationResolutionChanges;    \n                                                    // 质量限制解决方案变更\n    record<USVString, unsigned long long>   perDscpPacketsSent; \n                                                    // 只存在于视频。由于质量受限而更改分辨率的次数,计数器最初为零，并在分辨率上升或下降时增加。 \n                                                    // 例如，如果将720p轨道作为480p发送一段时间，然后恢复为720p，   \n                                                    // 则qualityLimitationResolutionChanges的值为 2。\n    unsigned long        nackCount;                 // 计算此发送方收到的否定确认 (NACK) 数据包的总数\n    unsigned long        firCount;                  // 只存在于视频。 计算此发送方收到的完整帧内请求 (FIR) 数据包的总数\n    unsigned long        pliCount;                  // 只存在于视频。 计算此发送方收到的图片丢失指示 (PLI) 数据包的总数\n    unsigned long        sliCount;                  // 只存在于视频。 计算此发送方收到的切片丢失指示 (SLI) 数据包的总数\n    DOMString            encoderImplementation;     // 标识使用的编码器实现\n};\n​\nenum RTCQualityLimitationReason {\n    "none",                                 // 分辨率和/或帧率不受限制\n    "cpu",                                  // 由于CPU负载，分辨率和/或帧率主要受到限制\n    "bandwidth",                            // 由于带宽估计期间的拥塞线索，分辨率和/或帧率主要受到限制。 \n                                                // 典型的拥塞控制算法使用到达间隔时间、往返时间、数据包或其他拥塞线索来执行带宽估计\n    "other",                                // 分辨率和/或帧率主要由于上述以外的原因而受到限制\n};\n​\ndictionary RTCRemoteOutboundRtpStreamStats : RTCSentRtpStreamStats {\n    DOMString           localId;                  // 用于查找同一SSRC的本地RTCInboundRtpStreamStats对象\n    DOMHighResTimeStamp remoteTimestamp;          // 表示远端发送这些统计信息的远程时间戳。这与时间戳不同，时间戳表示本端生成或接收统计信息的时间\n    unsigned long long  reportsSent;              // SSRC 发送的 RTCP SR 块的总数\n    double              roundTripTime;            // rtt往返时间\n    double              totalRoundTripTime;       // 总往返时间\n    unsigned long long  roundTripTimeMeasurements;// 往返时间测量,SSRC 接收的 RTCP 发送方报告 (SR) 块的总数\n};\n​\ndictionary RTCMediaSourceStats : RTCStats {         // 媒体源-帧速率和分辨率\n    required DOMString  trackIdentifier;            // MediaStreamTrack的id属性值\n    required DOMString  kind;                       // MediaStreamTrack的kind属性的值。 这是“音频”或“视频”。 \n                                                    // 如果它是“音频”, 那么这个stats对象的类型是RTCAudioSourceStats。 \n                                                    // 如果它是“video”, 那么这个stats对象的类型是RTCVideoSourceStats\n    boolean             relayedSource;              // 源是远程的，例如如果它是通过 RTCPeerConnection 来自另一个主机，则为true。否则为假\n};\n​\ndictionary RTCAudioSourceStats : RTCMediaSourceStats {\n    double    audioLevel;                   // 媒体源的音频电平,0-1,其中1.0表示0 dBov，0表示静音，0.5表示声压级从0 dBov开始大约6dBSPL变化\n    double    totalAudioEnergy;             // 总音频能量\n    double    totalSamplesDuration;         // 媒体源的音频持续时间\n    double    echoReturnLoss;               // 回声返回损失,仅当 MediaStreamTrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n    double    echoReturnLossEnhancement;    // 回波回波损耗增强,仅当 MediaStreamTrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n};\n​\ndictionary RTCVideoSourceStats : RTCMediaSourceStats {\n    unsigned long        width;                     // 宽\n    unsigned long        height;                    // 高\n    unsigned long        bitDepth;                  // 位深\n    unsigned long        frames;                    // 总帧数\n    double               framesPerSecond;           // 最后一秒的编码帧数。这可能低于媒体源帧速率\n};\n​\ndictionary RTCRtpContributingSourceStats : RTCStats {\n    required unsigned long contributorSsrc;         // stats对象表示的贡献源的SSRC标识符,32位无符号整数\n    required DOMString     inboundRtpStreamId;      // 入站的RTP流ID\n    unsigned long          packetsContributedTo;    // 此贡献源贡献的 RTP 数据包总数\n    double                 audioLevel;              // 此源贡献的最后接收到 RTP数据包包含[RFC6465]混音器到客户端音频级别标头扩展, 0-1\n};\n​\ndictionary RTCPeerConnectionStats : RTCStats {      \n    unsigned long       dataChannelsOpened;         // 表示在其生命周期内进入“打开”状态的唯一RTCDataChannel的数量\n    unsigned long       dataChannelsClosed;         // 表示在其生命周期内离开“打开”状态的唯一RTCDataChannel的数量\n    unsigned long       dataChannelsRequested;      // RTCPeerConnection 上成功的createDataChannel()调用返回的唯一RTCDataChannel的数量\n     unsigned long      dataChannelsAccepted;       // 在RTCPeerConnection上的ondatachannel事件中发出信号的唯一RTCDataChannel的数量\n};\n​\ndictionary RTCRtpTransceiverStats : RTCStats {\n    required DOMString      senderId;       // RTCRtpTransceiver关联的RTCRtpSender的stats对象的标识符\n    required DOMString      receiverId;     // 与此stats对象表示的RTCRtpTransceiver关联的RTCRtpReceiver的stats对象的标识符\n    DOMString               mid;            // 如果这个stats对象表示的RTCRtpTransceiver有一个不为空的中间值，这就是那个值，否则这个成员不存在\n};\n​\ndictionary RTCMediaHandlerStats : RTCStats {\n    DOMString               trackIdentifier;            // 轨道的id属性\n    boolean                 ended;                      // 反映轨道的结束状态\n    required DOMString      kind;                       // “音频”或“视频”。 这反映了MediaStreamTrack的kind属性\n};\n​\ndictionary RTCVideoHandlerStats : RTCMediaHandlerStats {\n};\n​\ndictionary RTCVideoSenderStats : RTCVideoHandlerStats {\n    DOMString               mediaSourceId;              // 媒体源ID\n};\n​\ndictionary RTCVideoReceiverStats : RTCVideoHandlerStats {\n};\n​\ndictionary RTCAudioHandlerStats : RTCMediaHandlerStats {\n};\n​\ndictionary RTCAudioSenderStats : RTCAudioHandlerStats {\n    DOMString               mediaSourceId;\n};\n​\ndictionary RTCDataChannelStats : RTCStats {\n    DOMString                    label;                     // RTCDataChannel 对象的标签值\n    DOMString                    rotocol;                   // RTCDataChannel 对象的协议值\n    unsigned short               dataChannelIdentifier;     // RTCDataChannel 对象的id属性\n    required RTCDataChannelState state;                     // RTCDataChannel 对象的readyState值\n    unsigned long                messagesSent;              // 表示发送的 API“消息”事件总数\n    unsigned long long           bytesSent;                 // 表示在此 RTCDataChannel 上发送的有效负载字节总数，即，不包括标头或填充\n    unsigned long                messagesReceived;          // 表示收到的 API“消息”事件总数\n    unsigned long long           bytesReceived;             // 表示在此RTCDataChannel上接收的总字节数，即不包括头或填充\n};\n​\ndictionary RTCTransportStats : RTCStats {   // RTCTransportStats对象表示与RTCDtlsTransport及其底层RTCIceTransport对应的统计信息\n    unsigned long long           packetsSent;               // 表示通过此传输发送的数据包总数\n    unsigned long long           packetsReceived;           // 表示在此传输上接收的数据包总数\n    unsigned long long           bytesSent;                 // 表示在此RTCIceTransport上发送的有效载荷字节总数，\n                                                            // 即不包括标头、填充或ICE连接检查。\n    unsigned long long           bytesReceived;             // 表示在此RTCIceTransport上接收的有效载荷字节总数，\n                                                            // 即不包括标头、填充或ICE 连接检查\n    DOMString                    rtcpTransportStatsId;      // 如果RTP和RTCP未复用，则这是提供RTCP组件统计信息的传输ID，\n                                                            // 并且此记录仅包含RTP组件统计信息\n    RTCIceRole                   iceRole;                   // ICE角色\n    DOMString                    iceLocalUsernameFragment;  // 设置为此RTCIceTransport的消息验证程序中使用的本地用户名片段的当前值。\n                                                            // 它可能会在 setLocalDescription()和ICE重启时更新。\n    required RTCDtlsTransportState dtlsState;               // 设置为底层 RTCDtlsTransport的state属性的当前值。\n    RTCIceTransportState          iceState;                 // 设置为底层 RTCIceTransport 的 state 属性的当前值。\n    DOMString                     selectedCandidatePairId;  // 它是与被检查的对象相关联的唯一标识符,\n                                                            // 以生成与此传输相关联的RTCIceCandidatePairStats\n    DOMString                     localCertificateId;       // 对于协商 DTLS 的组件，提供本地证书\n    DOMString                     remoteCertificateId;      // 对于协商 DTLS 的组件，提供远程证书\n    DOMString                     tlsVersion;               // TLS版本,仅在 DTLS 协商完成后才存在\n    DOMString                     dtlsCipher;               // 用于DTLS传输的密码套件的描述性名称,\n                                                            // 如IANA密码套件注册表[IANA-TLS-CIPHERS]的“描述”列中所定义\n    DOMString                     srtpCipher;               // 用于SRTP传输的保护配置文件的描述性名称\n    DOMString                     tlsGroup;                 // TSL组\n    unsigned long                 selectedCandidatePairChanges; // 此传输的选定候选对已更改的次数\n};\n​\ndictionary RTCSctpTransportStats : RTCStats {\n    DOMString                     transportId;              // 被检查以生成支持SCTP传输的DTLSTransport和ICETransport的  \n                                                            // RTCTransportStats的对象的标识符\n    double                        smoothedRoundTripTime;    // 最新平滑的往返时间值\n    unsigned long                 congestionWindow;         // 最新的拥塞窗口\n    unsigned long                 receiverWindow;           // 最新的接收器窗口\n    unsigned long                 mtu;                      // 最新的最大传输单元\n    unsigned long                 unackData;                // 未确认的DATA块的数量\n};\n​\n​\ndictionary RTCIceCandidateStats : RTCStats {\n    required DOMString           transportId;               // 传输标识\n    DOMString?                   address;                   // 它是候选地址,允许使用IPv4地址、IPv6地址和完全限定域名\n    long                         port;                      // 候选人的端口号\n    DOMString                    protocol;                  // 协议传输的有效值是“udp”和“tcp”之一\n    required RTCIceCandidateType candidateType;             // 候选人类型\n    long                         priority;                  // 优先级\n    DOMString                    url;                       // 对于本地候选人，这是从中获取候选人的ICE服务器的URL\n    DOMString                    relayProtocol;             // 它是端点用于与TURN服务器通信的协议。这仅适用于本地候选人。\n                                                            // 有效值为“udp”、“tcp”或“tls\n};\n​\n​\ndictionary RTCIceCandidatePairStats : RTCStats {\n    required DOMString                      transportId;                // 传输标识\n    required DOMString                      localCandidateId;           // 本地候选人ID\n    required DOMString                      remoteCandidateId;          // 远端候选人状态\n    required RTCStatsIceCandidatePairState  state;                      // 代表一对本地和远程候选者的清单状态\n    boolean                                 nominated;                  // 与更新部分中描述的提名标志相关\n    unsigned long long                      packetsSent;                // 在此候选对上发送的数据包总数\n    unsigned long long                      packetsReceived;            // 在此候选对上接收到的数据包总数\n    unsigned long long                      bytesSent;                  // 此候选对上发送的有效载荷字节总数\n    unsigned long long                      bytesReceived;              // 在此候选对上接收的有效载荷字节总数\n    DOMHighResTimeStamp                     lastPacketSentTimestamp;    // 在此特定候选对上发送最后一个数据包的时间戳，不包括STUN数据包\n    DOMHighResTimeStamp                     lastPacketReceivedTimestamp;// 在此特定候选对上接收到最后一个数据包的时间戳,不包括 STUN 数据包\n    DOMHighResTimeStamp                     firstRequestTimestamp;      // 在此特定候选对上发送第一个STUN请求的时间戳\n    DOMHighResTimeStamp                     lastRequestTimestamp;       // 在此特定候选对上发送最后一个STUN请求的时间戳  (lastRequestTimestamp - firstRequestTimestamp) / requestsSent\n    DOMHighResTimeStamp                     lastResponseTimestamp;      // 此特定候选对上收到最后一个STUN响应的时间戳\n    double                                  totalRoundTripTime;         // 自会话开始以来所有往返时间测量的总和（以秒为单位）\n    double                                  currentRoundTripTime;       // 以秒为单位的最新往返时间，由两个STUN连接检查[STUN-PATH-CHAR]计算得出\n     double                                 availableOutgoingBitrate;   // 可用传出比特率-由底层拥塞控制通过使用此候选对组合所有传出 RTP 流的可用比特率来计算的。 \n                                                                            // 比特率测量不计算 IP 或其他传输层（如 TCP 或 UDP）的大小\n    double                                  availableIncomingBitrate;   // 可用输入比特率-由底层拥塞控制通过使用此候选对组合所有传入 RTP 流的可用比特率来计算的。 \n                                                                            // 比特率测量不计算 IP 或其他传输层（如 TCP 或 UDP）的大小\n    unsigned long                           circuitBreakerTriggerCount; // 触发断路器的次数\n    unsigned long long                      requestsReceived;           // 收到的连接检查请求总数（包括重传）\n    unsigned long long                      requestsSent;               // 发送的连接检查请求总数（不包括重传）\n    unsigned long long                      responsesReceived;          // 收到的连接检查响应总数\n    unsigned long long                      responsesSent;              // 发送的连接检查响应总数\n    unsigned long long                      retransmissionsReceived;    // 收到的连接检查请求重传总数\n    unsigned long long                      retransmissionsSent;        // 发送的连接检查请求重传总数\n    unsigned long long                      consentRequestsSent;        // 发送的同意请求总数\n    DOMHighResTimeStamp                     consentExpiredTimestamp;    // 最新的有效STUN绑定响应过期的时间戳\n    unsigned long                           packetsDiscardedOnSend;     // 由于套接字错误而被丢弃的此候选对的数据包总数\n    unsigned long long                      bytesDiscardedOnSend;       // 由于套接字错误而被丢弃的此候选对的总字节数\n    unsigned long long                      requestBytesSent;           // 为连通性检查发送的总字节数\n    unsigned long long                      consentRequestBytesSent;    // 为同意请求发送的总字节数\n    unsigned long long                      responseBytesSent;          // 为连通性检查响应发送的总字节数\n};\n​\nenum RTCStatsIceCandidatePairState {\n    "frozen",\n    "waiting",\n    "in-progress",\n    "failed",\n    "succeeded"\n};\n​\n​\ndictionary RTCCertificateStats : RTCStats {\n    required DOMString                      fingerprint;                // 证书的指纹\n    required DOMString                      fingerprintAlgorithm;       // 用于计算证书指纹的哈希函数\n    required DOMString                      base64Certificate;          // 证书的DER编码的base-64\n    DOMString                               issuerCertificateId;        // 包含证书链中下一个证书的stats对象\n};\n​\ndictionary RTCIceServerStats : RTCStats {\n    required DOMString                      url;                        // ICE服务器的URL\n    long                                    port;                       // 客户端使用的端口号\n    DOMString                               relayProtocol;              // 端点用于与ICE服务器通信的协议\n    unsigned long                           totalRequestsSent;          // 已发送到此服务器的请求总数\n    unsigned long                           totalResponsesReceived;     // 从该服务器收到的响应总数\n    double                                  totalRoundTripTime;         // 在收到响应的情况下已发送的所有请求的 RTT 总和\n};  \n​\ndictionary RTCMediaStreamStats : RTCStats {     // 由于发送方、接收方和收发器统计对象更适合描述现代 RTCPeerConnection 模型（统一计划）\n                                                // 因此整个字典已于 2019 年 9 月过时。\n    DOMString                               streamIdentifier;           // stream.id 属性\n    sequence<DOMString>                     trackIds;                   // stats 对象的id,并不是TrackID\n};\n​\ndictionary RTCSenderVideoTrackAttachmentStats : RTCVideoSenderStats {\n};\n​\ndictionary RTCSenderAudioTrackAttachmentStats : RTCAudioSenderStats {\n};\n​\ndictionary RTCReceiverVideoTrackAttachmentStats : RTCVideoReceiverStats {};\n​\ndictionary RTCReceiverAudioTrackAttachmentStats : RTCAudioReceiverStats {};\n            \npartial dictionary RTCCodecStats {      \n    // 已于 2019 年 8 月移RTCInboundRtpStreamStats.RTCInboundRtpStreamStats/decoderImplementation}} \n    DOMString       implementation;             //  和 RTCOutboundRtpStreamStats.encoderImplementation    \n};\n​\npartial dictionary RTCIceCandidateStats {\n    boolean         deleted = false;            // 此字段已过时，因为如果删除 ICE 候选对象，它将不再出现在 getStats() 中\n    boolean         isRemote;                   // false 表示这代表本地候选人； true 表示这代表远程候选人\n};\n​\npartial dictionary RTCIceCandidatePairStats {\n    double             totalRtt;   // 该字段在 2016 年 12 月更名为 totalRoundTripTime\n    double             currentRtt; // 该字段于 2016 年 12 月更名为 currentRoundTripTime\n    unsigned long long priority;   // 该字段在2018年2月被删除，因为它不能用 53 位表示。如果需要，可以按照 [RFC5245] 第 5.7.2 节中的定义重新计算\n};\n​\npartial dictionary RTCRtpStreamStats {\n    DOMString          mediaType;                   // 表示接收轨道的 stats 对象的标识符RTCReceiverAudioTrackAttachmentStats 或 \n                                                    // RTCReceiverVideoTrackAttachmentStats,该字段于 2020 年 4 月被淘汰\n    double             averageRTCPInterval;\n};\n​\n​\npartial dictionary RTCOutboundRtpStreamStats {\n    DOMString          trackId;                     // stats 对象的标识符\n};\n​\npartial dictionary RTCMediaHandlerStats {\n    RTCPriorityType    priority;                    // 表示已为曲目设置的优先级\n    boolean            remoteSource;                // 如果轨道附件在 RTCRtpSender 上，则为 false，\n                                                    // 如果轨道附件在 RTCRtpReceiver 上，则为 true,2020 年 4 月过时\n};\n​\npartial dictionary RTCAudioHandlerStats {\n    double      audioLevel;                 // 已于 2019 年 6 月移至 RTCAudioReceiverStats 和 RTCAudioSourceStats\n    double      totalAudioEnergy;           // 已于 2019 年 6 月移至 RTCAudioReceiverStats 和 RTCAudioSourceStats\n    double      totalSamplesDuration;       // 已于 2019 年 6 月移至 RTCAudioReceiverStats 和 RTCAudioSourceStats\n    boolean     voiceActivityFlag;          // 该字段已于 2019 年 8 月移至 RTCOutboundRtpStreamStats 和 RTCInboundRtpStreamStats\n};\n​\npartial dictionary RTCAudioSenderStats {\n    unsigned long long                      totalSamplesSent;           // 这已于 2019 年 8 月移至 RTCOutboundRtpStreamStats\n    double                                  echoReturnLoss;             // 这已于 2019 年 8 月移至 RTCAudioSourceStats\n    double                                  echoReturnLossEnhancement;  // 这已于 2019 年 8 月移至 RTCAudioSourceStats\n};\n        \npartial dictionary RTCAudioReceiverStats {                                  // 已于 2019 年 8 月移至 RTCInboundRtpStreamStats\n    DOMHighResTimeStamp                     estimatedPlayoutTimestamp;  \n    double                                  jitterBufferDelay;          \n    unsigned long long                      jitterBufferEmittedCount;\n    unsigned long long                      totalSamplesReceived;\n    unsigned long long                      concealedSamples;\n    unsigned long long                      silentConcealedSamples;\n    unsigned long long                      concealmentEvents;\n    unsigned long long                      insertedSamplesForDeceleration;\n    unsigned long long                      removedSamplesForAcceleration;\n    double                                  audioLevel;\n    double                                  totalAudioEnergy;\n    double                                  totalSamplesDuration;\n};\n​\npartial dictionary RTCVideoHandlerStats {\n    unsigned long       frameWidth;     // 已于 2019 年 8 月移至 RTCOutboundRtpStreamStats 和 RTCInboundRtpStreamStats\n    unsigned long       frameHeight;    // 已于 2019 年 8 月移至 RTCOutboundRtpStreamStats 和 RTCInboundRtpStreamStats\n    double              ramesPerSecond; // 2019 年 5 月被 RTCVideoSourceStats.framesPerSecond 取代，代表轨道的帧速率\n                                        // 2019 年 8 月移至 RTCInboundRtpStreamStats，表示解码帧速率\n                                        // 2019年8月，RTCOutboundRtpStreamStats中还增加了framesPerSecond，代表编码帧率（可能低于源帧率）\n};\n​\npartial dictionary RTCVideoSenderStats {\n    unsigned long       keyFramesSent;              // 2019 年 6 月被 RTCOutboundRtpStreamStats 中的 keyFramesEncoded 替换\n    unsigned long       framesCaptured;             // 2019 年 5 月被 RTCVideoSourceStats.frames 取代\n    unsigned long       framesSent;                 // 2019 年 8 月移至 RTCOutboundRtpStreamStats\n    unsigned long       hugeFramesSent;             // 2019 年 8 月移至 RTCOutboundRtpStreamStats\n};\n​\npartial dictionary RTCVideoReceiverStats {\n    unsigned long       keyFramesReceived;          // 2019 年 6 月被 RTCInboundRtpStreamStats 中的 keyFramesDecoded 替换\n    DOMHighResTimeStamp estimatedPlayoutTimestamp;  // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    double              jitterBufferDelay;          // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    unsigned long long  jitterBufferEmittedCount;   // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    unsigned long       framesReceived;             // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    unsigned long       framesDecoded;              // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    unsigned long       framesDropped;              // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    unsigned long       partialFramesLost;          // 2019 年 8 月移至 RTCInboundRtpStreamStats\n    unsigned long       fullFramesLost;             // 2019 年 8 月移至 RTCInboundRtpStreamStats\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n',normalizedContent:'webrtc statistics dictionary:\n\nenum rtcstatstype {\n    "codec",                        // rtcpeerconnection流当前正在使用的编解码器                        \n    "inbound-rtp",                  // 收到的rtp流统计信息                                           \n    "outbound-rtp",                 // 发送的rtp流统计信息                                              \n    "remote-inbound-rtp",           // 对端收到的rtp流统计信息                                            \n    "remote-outbound-rtp",          // 对端发送的rtp流统计信息                                            \n    "media-source",                 // 发送到编码器的媒体信息                                          \n    "csrc",                         // rtp流csrc                                                     \n    "peer-connection",              // rtcpeerconnection对象相关的统计信息                               \n    "data-channel",                 // rtcdatachannel 相关的统计信息                                   \n    "stream",                       // 媒体轨道统计信息包含与特定mediastream相关的统计信息              \n    "track",                        // 媒体轨道统计信息                                                     \n    "transceiver",                  // rtcrtptransceiver                                                \n    "sender",                       // 媒体级指标相关的统计信息                                         \n    "receiver",                     // 特定接收器相关的统计数据和相应的媒体级指标                        \n    "transport",                    // 媒体传输统计信息                                                 \n    "sctp-transport",               // rtcsctptransport 对象相关的 sctp 传输统计信息                   \n    "candidate-pair",               // ice候选对统计信息                                               \n    "local-candidate",              // ice 本地候选统计信息                                             \n    "remote-candidate",             // ice 远程候选统计信息                                             \n    "certificate",                  // rtcicetransport 使用的证书的信息                                 \n    "ice-server"                    // 有关与ice服务器的连接的信息                                  \n};\nrtcstatstype                                dictionary                      \n"codec"                                     rtcstats\n                                            rtccodecstats\n                                            \n"inbound-rtp"                               rtcstats\n                                            rtcrtpstreamstats\n                                            rtcreceivedrtpstreamstats\n                                            rtcinboundrtpstreamstats\n                                            \n​\n"outbound-rtp"                              rtcstats\n                                            rtcrtpstreamstats\n                                            rtcsentrtpstreamstats\n                                            rtcoutboundrtpstreamstats\n                                            \n"remote-inbound-rtp"                        rtcstats\n                                            rtcrtpstreamstats\n                                            rtcreceivedrtpstreamstats\n                                            rtcremoteinboundrtpstreamstats\n                                            \n"remote-outbound-rtp"                       rtcstats        \n                                            rtcrtpstreamstats\n                                            rtcsentrtpstreamstats\n                                            rtcremoteoutboundrtpstreamstats\n                                            \n"media-source"                              rtcstats\n                                            rtcmediasourcestats\n                                            rtcaudiosourcestats\n                                            rtcvideosourcestats\n                                            \n"csrc"                                      rtcstats\n                                            rtcrtpcontributingsourcestats\n                                            \n"peer-connection"                           rtcstats\n                                            rtcpeerconnectionstats\n                                            \n"data-channel"                              rtcstats\n                                            rtcdatachannelstats                 \n                                            \n"transceiver"                               rtcstats            \n                                            rtcrtptransceiverstats\n                                            \n"sender"                                    rtcstats\n                                            rtcmediahandlerstats\n                                            rtcaudiosenderstats\n                                            rtcvideosenderstats\n                                            \n"receiver"                                  rtcstats\n                                            rtcmediahandlerstats\n                                                                                \n"transport"                                 rtcstats        \n                                            rtctransportstats\n                                            \n"sctp-transport"                            rtcstats\n                                            rtcsctptransportstats\n                                            \n"candidate-pair"                            rtcstats                    \n                                            rtcicecandidatepairstats\n                                            \n"local-candidate"                           rtcstats                \n                                            rtcicecandidatestats\n                                            \n"remote-candidate"                          rtcstats                \n                                            rtcicecandidatestats\n                                            \n"certificate"                               rtcstats                \n                                            rtccertificatestats\n                                            \n"ice-server"                                rtcstats        \n                                            rtciceserverstats\n                                            \ntcrtpstreamstats：适用于任何 rtp 流任何端的统计信息 rtcreceivedrtpstreamstats：在 rtp 流的接收端测量的统计数据，已知是因为它们在本地测量或通过 rtcp 接收器报告 (rr) 或扩展报告 (xr) 块传输。 rtcinboundrtpstreamstats：只能在 rtp 流的本地接收端测量的统计信息。 rtcremoteinboundrtpstreamstats：与 rtp 流的远程接收端相关的统计信息 - 通常通过将本地数据与通过 rtcp rr 或 xr 块接收的数据相结合来计算。 rtcsentrtpstreamstats：在 rtp 流的发送端测量的统计数据，已知是因为它们是在本地测量的，或者因为它们是通过 rtcp 接收的，通常在 rtcp 发送者报告 (sr) 中 rtcoutboundrtpstreamstats：本地测量的统计数据。 rtcremoteoutboundrtpstreamstats：与 rtp 流的远程发送端相关的统计信息，通常基于 rtcp sr 计算\n\ndictionary rtcrtpstreamstats : rtcstats {\n    required unsigned long      ssrc;           // 同步源标识符,每个[rfc3550]的无符号整数值\n    required domstring          kind;           // “音频”或“视频, 匹配”mediastreamtrack的kind属性\n    domstring                   transportid;    // 唯一标识符与此rtp流相关联的rtctransportstats\n    domstring                   codecid;        // 唯一标识符与rtp流关联的rtccodecstats的对象相关联\n};\n​\nenum rtccodectype {\n    "encode",\n    "decode",\n};\n​\ndictionary rtccodecstats : rtcstats {\n    required unsigned long      ;   // rtp编码或解码中使用的有效载荷类型\n    rtccodectype                codectype;      // 编码或解码 取决于此对象是否表示实现准备进行编码或解码的媒体格式\n                                                // 如果字典成员不存在，则意味着该媒体格式既可以编码也可以解码\n    required domstring          transportid;    // 使用此编解码器的传输的唯一标识符,可用于查找相应的rtctransportstats对象\n    required domstring          mimetype;       // 编解码器mime媒体类型/子类型。 例如:video/vp8或等效文件\n    unsigned long               clockrate;      // 媒体采样率\n    unsigned long               channels;       // 通道数,立体声使用2，其他大多数情况下都没有\n    domstring                   sdpfmtpline;    // sdp中的a=fmtp行对应于编解码器，即在pt后面的冒号之后。 这由第 5.7 节中的 [jsep] 定义。\n};\n​\ndictionary rtcreceivedrtpstreamstats : rtcrtpstreamstats {\n    unsigned long long          packetsreceived;        // ssrc接收的rtp数据包总数\n    long long                   packetslost;            // ssrc丢失的rtp数据包总数\n    double                      jitter;                 // ssrc数据包抖动,以秒为单位测量\n    unsigned long long          packetsdiscarded;       // 由于迟到或早到而被抖动缓冲区丢弃的rtp数据包的累积数量\n    unsigned long long          packetsrepaired;        // 应用错误恢复机制 [xrblock-stats]后修复的丢失rtp数据包的累积数量\n    unsigned long long          burstpacketslost;       // 丢失突发期间丢失的rtp数据包的累积数量\n    unsigned long long          burstpacketsdiscarded;  // 在丢弃突发期间丢弃的rtp数据包的累积数量\n    unsigned long               burstlosscount;         // 丢失rtp数据包的累积突发数\n    unsigned long               burstdiscardcount;      // 丢弃的rtp数据包的累积突发数\n    double                      burstlossrate;          // 突发期间丢失的rtp数据包占突发中预期的rtp数据包总数的比例\n    double                      burstdiscardrate;       // 突发期间丢弃的rtp数据包占突发中预期的rtp数据包总数的比例\n    double                      gaplossrate;            // 在间隙期间丢失的 rtp 数据包的比例\n    double                      gapdiscardrate;         // 在间隙期间丢弃的 rtp 数据包的比例\n    unsigned long               framesdropped;          // 只存在于视频,在解码之前丢弃或丢弃的帧总数\n    unsigned long               partialframeslost;      // 只存在于视频,丢失的部分帧的累积数量\n    unsigned long               fullframeslost;         // 只存在于视频,丢失的完整帧的累积数量\n};\n​\ndictionary rtcinboundrtpstreamstats : rtcreceivedrtpstreamstats {       // rtp 媒体流的测量指标\n    required domstring  receiverid;                 // 查找接收此流的rtcaudioreceiverstats或rtcvideoreceiverstats 对象的统计id\n    domstring           remoteid;                   // 用于查找同一 ssrc 的远程 rtcremoteoutboundrtpstreamstats 对象\n    unsigned long       framesdecoded;              // rtp 流正确解码的帧总数，即如果没有丢帧将显示的帧数。\n    unsigned long       keyframesdecoded;           // 只存在于视频。 它表示关键帧的总数\n    unsigned long       framewidth;                 // 只存在于视频。 表示最后解码帧的宽度\n    unsigned long       frameheight;                // 只存在于视频。 表示最后解码帧的高度\n    unsigned long       framebitdepth;              // 只存在于视频。 表示最后一个编码帧的每个像素的位深度。典型值为 24、30 或 36 位\n    double              framespersecond;            // 只存在于视频。 最后一秒的编码帧数。这可能低于媒体源帧速率\n    unsigned long long  qpsum;                      // 只存在于视频。 此接收器解码的帧的 qp 值的总和。 帧数以framesdecoded 为单位\n    double              totaldecodetime;            // 解码此流的 framesdecoded 帧所花费的总秒数,\n                                                    // 以通过将此值除以framesdecoded 来计算平均解码时间\n                                                    // 解码一帧所需的时间是向解码器馈送一帧和解码器返回该帧的解码数据之间经过的时间\n    double              totalinterframedelay;       // 连续解码的帧之间的帧间延迟总和（以秒为单位）\n                                                    // (totalsquaredinterframedelay -   \n                                                    // totalinterframedelay^2/framesdecoded)/framesdecoded\n                                                    // 从totalinterframedelay、totalsquaredinterframedelay \n                                                    // 和framesdecoded 计算帧间延迟方差\n    double              totalsquaredinterframedelay;// 连续解码的帧之间的平方帧间延迟的总和（以秒为单位）\n    boolean             voiceactivityflag;          // 只存在于音频。 其帧被传送到 rtcrtpreceiver 的 mediastreamtrack \n                                                    // 以进行播放的最后一个 rtp 数据包是否包含语音活动，取决于扩展标头中 v 位的存在\n    domhighrestimestamp lastpacketreceivedtimestamp;// 表示接收到此 ssrc 的最后一个数据包的时间戳\n    double              averagertcpinterval;        // 两个连续复合 rtcp 数据包之间的平均 rtcp 间隔\n    unsigned long long  headerbytesreceived;        // 为此ssrc接收的rtp标头和填充字节的总数。这不包括传输层标头的大小\n    unsigned long long  fecpacketsreceived;         // 为此ssrc接收的rtp fec数据包总数,\n                                                    // 当使用媒体数据包（例如，使用 opus）在带内接收 fec 数据包时，此计数器也可以增加\n    unsigned long long  fecpacketsdiscarded;        // 为该ssrc接收的rtp fec数据包总数,其中应用程序丢弃了纠错有效负载\n    unsigned long long  bytesreceived;              // ssrc接收的总字节数\n    unsigned long long  packetsfaileddecryption;    // 程序未能解密的 rtp 数据包的累积数量\n    unsigned long long  packetsduplicated;          // 由于重复而丢弃的累积数据包数。 重复的数据包不计入丢弃的数据包中\n    record<usvstring, unsigned long long> perdscppacketsreceived;           \n                                                    //为此ssrc接收的数据包总数,dscp被标识为字符串形式的十进制整数\n    unsigned long       nackcount;                  // 计算此接收器发送的图片丢失指示 (pli) 数据包的总数\n    unsigned long       fircount;                   // 只存在于视频。 计算此接收器发送的完整帧内请求 (fir) 数据包的总数\n    unsigned long       plicount;                   // 只存在于视频。 计算此接收器发送的图片丢失指示 (pli) 数据包的总数\n    unsigned long       slicount;                   // 只存在于视频。 计算此接收器发送的切片丢失指示 (sli) 数据包的总数\n    double              totalprocessingdelay;       // 每个音频样本或视频帧从收到第一个 rtp 数据包的时间（接收时间戳）\n                                                    // 到解码相应样本或帧的时间（解码的时间戳）所用时间的总和\n    domhighrestimestamp estimatedplayouttimestamp;  // 这是此接收器曲目的估计播放时间。 \n                                                    // 播放时间是具有已知时间戳的最后一个可播放音频样本或视频帧的\n                                                    // ntp 时间戳（从 rtcp sr 数据包将 rtp 时间戳映射到 ntp 时间戳）\n    double              jitterbufferdelay;          // 抖动缓冲区的目的是将 rtp 数据包重新组合成帧（在视频的情况下）并平滑播放。\n                                                    // 此处描述的模型假设样本或帧仍处于压缩状态且尚未解码。\n                                                    // 它是每个音频样本或视频帧从抖动缓冲区接收到第一个数据包的时间\n                                                    //（摄取时间戳）到它退出抖动缓冲区的时间（发出时间戳）所用时间的总和，以秒为单位\n                                                    // 在音频的情况下，多个样本属于同一个 rtp 数据包\n                                                    // 因此它们将具有相同的摄取时间戳，但不同的抖动缓冲区发出时间戳\n                                                    // 在视频的情况下，帧可能是通过多个 rtp 数据包接收的，\n                                                    // 因此摄取时间戳是进入抖动缓冲区的最早数据包，发射时间戳是整个帧退出抖动缓冲区的时间\n                                                    // 该指标在样本或帧退出时增加，在缓冲区中完成它们的时间\n                                                    // （并增加 jitterbufferemittedcount）\n                                                    // 平均抖动缓冲延迟可以通过将 jitterbufferdelay 与 \n                                                    // jitterbufferemittedcount 相除来计算\n    unsigned long long  jitterbufferemittedcount;   // 来自抖动缓冲区的音频样本或视频帧的总数（增加 jitterbufferdelay）\n    unsigned long long  totalsamplesreceived;       // 只存在于音频。在此 rtp 流上接收到的样本总数\n    unsigned long long  totalsamplesdecoded;        // 只存在于音频。在此 rtp 流上解码的样本总数\n    unsigned long long  samplesdecodedwithsilk;     // 仅存在于音频且音频编解码器为opus时。opus 编解码器的 silk 部分解码的样本总数。\n    unsigned long long  samplesdecodedwithcelt;     // 仅存在于音频且音频编解码器为opus时。opus 编解码器的 celt 部分解码的样本总数\n    unsigned long long  concealedsamples;           // 只存在于音频,隐藏样本的样本总数\n    unsigned long long  silentconcealedsamples;     // 只存在于音频,插入的“无声”隐藏样本总数,播放静音样本会导致静音或舒适噪\n    unsigned long long  concealmentevents;          // 只存在于音频,隐藏事件的数量。\n    unsigned long long  insertedsamplesfordeceleration; \n                                                    // 只存在于音频,当播放速度减慢时，此计数器会根据接收到的样本数与播放的样本数之间的差异而增加\n    unsigned long long  removedsamplesforacceleration;  \n                                                    // 只存在于音频,当播放加速时，此计数器增加接收的样本数与播放的样本数之间的差值\n    double              audiolevel;                 // 只存在于音频。有关本地附加轨道的音频级别，请参阅 rtcaudiosourcestats。\n                                                    // 该值介于 0..1（线性）之间，其中 1.0 表示 0 dbov，0 表示静音，\n                                                    // 0.5 表示声压级从 0 dbov 开始大约 6 dbspl 变化。\n                                                    // 使用 totalaudioenergy 中描述的算法，在某个小区间内平均 audiolevel。\n                                                    // 使用的间隔取决于实现。\n    double              totalaudioenergy;           // 只存在于音频。表示接收轨道的音频能量。有关本地附加轨道的音频能量，\n                                                    // 请参阅 rtcaudiosourcestats\n                                                    // 对于接收到的每个音频样本（因此按 totalsamplesreceived 计数）\n                                                    // 将样本值除以最高强度的可编码值，平方， 然后乘以以秒为单位的样本持续时间。\n                                                    // 换句话说，持续时间 * math.pow(energy/maxenergy, 2)。\n                                                    // 这可用于获得与 audiolevel 使用相同单位的均方根 (rms) 值，如 [rfc6464] 中所定义。\n                                                    // 可以使用公式 \n                                                    // math.sqrt(totalaudioenergy/totalsamplesduration) 将其转换为这些单位。\n                                                    // 也可以使用两个不同 getstats() 调用的值之间的差异来执行此计算，\n                                                    // 以便计算任何所需时间间隔内的平均音频电平。\n                                                    // 换句话说，做 math.sqrt((energy2 - energy1)/(duration2 - duration1))。\n                                                    // 例如，如果生成一个 10 毫秒的音频数据包，其 rms 为 0.5（超出 1.0），\n                                                    // 则应将 0.5 * 0.5 * 0.01 = 0.0025 添加到 totalaudioenergy。\n                                                    // 如果接收到另一个 rms 为 0.1 的 10ms 数据包，\n                                                    // 这应该类似地将 0.0001 添加到 totalaudioenergy。然后， \n                                                    // math.sqrt(totalaudioenergy/totalsamplesduration) 变为 \n                                                    // math.sqrt(0.0026/0.02) = 0.36，\n                                                    // 这与通过对连续 20 毫秒音频段进行 rms 计算获得的值相同。\n                                                    // 如果使用多个音频通道，则样本的音频能量是指任一通道的最高能量。\n    double              totalsamplesduration;       // 只存在于音频。 表示接收轨道的音频持续时间。 \n                                                    // 有关本地附加轨道的音频持续时间，请参阅 rtcaudiosourcestats\n    unsigned long       ramesreceived;              // 只存在于视频。 表示在此 rtp 流上接收到的完整帧的总数\n    domstring           decoderimplementation;      // 标识使用的解码器实现\n};\n​\ndictionary rtcremoteinboundrtpstreamstats : rtcreceivedrtpstreamstats {\n    domstring          localid;                  // 查找rtcoutboundrtpstreamstats                 \n    double             roundtriptime;            // 此 ssrc 的估计往返时间基于 rtcp 接收器报告 (rr) 中的 rtcp 时间戳，以秒为单位\n    double             totalroundtriptime;       // 表示自会话开始以来所有往返时间测量的累积总和（以秒为单位）\n    double             fractionlost;             // 为此 ssrc 报告的部分丢包率\n    unsigned long long reportsreceived;          // ssrc 接收的 rtcp rr 块的总数\n    unsigned long long roundtriptimemeasurements;// ssrc 接收的包含有效往返时间的 rtcp rr 块的总数\n};\n​\ndictionary rtcsentrtpstreamstats : rtcrtpstreamstats {\n    unsigned long       packetssent;                // src发送的rtp数据包总数。这包括重传\n    unsigned long long  bytessent;                  // 为此ssrc发送的总字节数。这包括重传\n};\n​\ndictionary rtcoutboundrtpstreamstats : rtcsentrtpstreamstats {\n    unsigned long       rtxssrc;                    // ssrc\n    domstring           mediasourceid;              // stats 对象的标识符\n    domstring           senderid;                   // rtcaudiosenderstats 或 rtcvideosenderstats 对象的统计id\n    domstring           remoteid;                   // 用于查找同一ssrc的远程 rtcremoteinboundrtpstreamstats对象\n    domstring           rid;                        // 如果已设置，则公开此 rtp 流的rid 编码参数，否则未定义\n    domhighrestimestamp lastpacketsenttimestamp;    // 表示为此 ssrc 发送最后一个数据包的时间戳\n    unsigned long long  headerbytessent;            // 为此 ssrc 发送的 rtp 标头和填充字节的总数。 这不包括传输层标头的大小\n                                                    // 例如 ip 或 udp headerbytessent + bytessent等于通过传输作为有效负载发送的字节数\n                                                    // 例如 ip 或 udp headerbytessent + bytessent等于通过传输作为有效负载发送的字节数\n    unsigned long       packetsdiscardedonsend;     // 由于套接字错误而被丢弃的此 ssrc 的 rtp 数据包总数\n    unsigned long long  bytesdiscardedonsend;       // 由于套接字错误而被丢弃的此 ssrc 的总字节数\n    unsigned long       fecpacketssent;             // 为此 ssrc 发送的 rtp fec 数据包总数\n    unsigned long long  retransmittedpacketssent;   // 为此 ssrc 重新传输的数据包总数\n    unsigned long long  retransmittedbytessent;     // 为此 ssrc 重传的字节总数，仅包括有效载荷字节\n    double              targetbitrate;              // 编码器目标比特率\n    unsigned long long  totalencodedbytestarget;    // 每次对帧进行编码时，该值都会增加目标帧大小(以字节为单位)\n    unsigned long       framewidth;                 // 最后一个编码帧的宽度, 编码帧的分辨率可能低于编码源\n    unsigned long       frameheight;                // 最后一个编码帧的高度, 编码帧的分辨率可能低于编码源\n    unsigned long       framebitdepth;              // 每个像素的位深度24、30、36\n    double              framespersecond;            // 最后一秒解码的帧数\n    unsigned long       framessent;                 // rtp 流上发送的帧总数\n    unsigned long       hugeframessent;             // 表示此rtp流发送的huge帧总数.根据定义,huge帧编码大小至少是帧平均大小的2.5倍\n    unsigned long       framesencoded;              // rtp 媒体流成功编码的帧总数\n    unsigned long       keyframesencoded;           // 关键帧的总数\n    unsigned long       framesdiscardedonsend;      // 由于套接字错误而为此 ssrc 丢弃的视频帧总数，即在将数据包交给套接字时发生套接字错误\n                                                    // 这可能由于各种原因而发生，包括缓冲区已满或没有可用内存。\n    unsigned long long  qpsum;                      // 发送方编码的帧的qp值的总和\n    unsigned long long  totalsamplessent;           // rtp流发送的样本总数\n    unsigned long long  samplesencodedwithsilk;     // 仅存在于音频且音频编解码器为opus时,opus编解码器的silk部分编码的样本总数\n    unsigned long long  samplesencodedwithcelt;     // 仅存在于音频且音频编解码器为 opus 时。 opus 编解码器的 celt 部分编码的样本总数\n    boolean             voiceactivityflag;          // 只存在于音频,根据[rfc6464]中定义的扩展报头中 v 位的存在\n                                                    // 最后发送的rtp数据包是否包含语音活动\n    double              totalencodetime;            // 编码此流的framesencoded 帧所花费的总秒数。 \n                                                    // 可以通过将此值除以framesencoded 来计算平均编码时间。 \n                                                    // 编码一帧所需的时间是向编码器提供一帧和编码器返回该帧的编码数据之间经过的时间。 \n                                                    // 这不包括打包结果数据可能花费的任何额外时间\n    double               totalpacketsenddelay;      // 总数据包发送延迟\n    double               averagertcpinterval;       // 两个连续复合rtcp数据包之间的平均 rtcp间隔。这是在发送复合 rtcp 报告时由发送端点计算的。\n                                                    // 复合数据包必须至少包含一个rtcp rr 或 sr 块和一个带有 cname 项的 sdes 数据\n    rtcqualitylimitationreason  qualitylimitationreason;    \n                                                    // 只存在于视频。 当前限制分辨率和/或帧率的原因，如果不受限制，则为“无”。\n    record<domstring, double> qualitylimitationdurations;   \n                                                    // 只存在于视频。 此流在每个质量限制状态中花费的总时间（以秒为单位）的记录\n    unsigned long        qualitylimitationresolutionchanges;    \n                                                    // 质量限制解决方案变更\n    record<usvstring, unsigned long long>   perdscppacketssent; \n                                                    // 只存在于视频。由于质量受限而更改分辨率的次数,计数器最初为零，并在分辨率上升或下降时增加。 \n                                                    // 例如，如果将720p轨道作为480p发送一段时间，然后恢复为720p，   \n                                                    // 则qualitylimitationresolutionchanges的值为 2。\n    unsigned long        nackcount;                 // 计算此发送方收到的否定确认 (nack) 数据包的总数\n    unsigned long        fircount;                  // 只存在于视频。 计算此发送方收到的完整帧内请求 (fir) 数据包的总数\n    unsigned long        plicount;                  // 只存在于视频。 计算此发送方收到的图片丢失指示 (pli) 数据包的总数\n    unsigned long        slicount;                  // 只存在于视频。 计算此发送方收到的切片丢失指示 (sli) 数据包的总数\n    domstring            encoderimplementation;     // 标识使用的编码器实现\n};\n​\nenum rtcqualitylimitationreason {\n    "none",                                 // 分辨率和/或帧率不受限制\n    "cpu",                                  // 由于cpu负载，分辨率和/或帧率主要受到限制\n    "bandwidth",                            // 由于带宽估计期间的拥塞线索，分辨率和/或帧率主要受到限制。 \n                                                // 典型的拥塞控制算法使用到达间隔时间、往返时间、数据包或其他拥塞线索来执行带宽估计\n    "other",                                // 分辨率和/或帧率主要由于上述以外的原因而受到限制\n};\n​\ndictionary rtcremoteoutboundrtpstreamstats : rtcsentrtpstreamstats {\n    domstring           localid;                  // 用于查找同一ssrc的本地rtcinboundrtpstreamstats对象\n    domhighrestimestamp remotetimestamp;          // 表示远端发送这些统计信息的远程时间戳。这与时间戳不同，时间戳表示本端生成或接收统计信息的时间\n    unsigned long long  reportssent;              // ssrc 发送的 rtcp sr 块的总数\n    double              roundtriptime;            // rtt往返时间\n    double              totalroundtriptime;       // 总往返时间\n    unsigned long long  roundtriptimemeasurements;// 往返时间测量,ssrc 接收的 rtcp 发送方报告 (sr) 块的总数\n};\n​\ndictionary rtcmediasourcestats : rtcstats {         // 媒体源-帧速率和分辨率\n    required domstring  trackidentifier;            // mediastreamtrack的id属性值\n    required domstring  kind;                       // mediastreamtrack的kind属性的值。 这是“音频”或“视频”。 \n                                                    // 如果它是“音频”, 那么这个stats对象的类型是rtcaudiosourcestats。 \n                                                    // 如果它是“video”, 那么这个stats对象的类型是rtcvideosourcestats\n    boolean             relayedsource;              // 源是远程的，例如如果它是通过 rtcpeerconnection 来自另一个主机，则为true。否则为假\n};\n​\ndictionary rtcaudiosourcestats : rtcmediasourcestats {\n    double    audiolevel;                   // 媒体源的音频电平,0-1,其中1.0表示0 dbov，0表示静音，0.5表示声压级从0 dbov开始大约6dbspl变化\n    double    totalaudioenergy;             // 总音频能量\n    double    totalsamplesduration;         // 媒体源的音频持续时间\n    double    echoreturnloss;               // 回声返回损失,仅当 mediastreamtrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n    double    echoreturnlossenhancement;    // 回波回波损耗增强,仅当 mediastreamtrack 来自应用了回声消除的麦克风时才存在。 以分贝计算\n};\n​\ndictionary rtcvideosourcestats : rtcmediasourcestats {\n    unsigned long        width;                     // 宽\n    unsigned long        height;                    // 高\n    unsigned long        bitdepth;                  // 位深\n    unsigned long        frames;                    // 总帧数\n    double               framespersecond;           // 最后一秒的编码帧数。这可能低于媒体源帧速率\n};\n​\ndictionary rtcrtpcontributingsourcestats : rtcstats {\n    required unsigned long contributorssrc;         // stats对象表示的贡献源的ssrc标识符,32位无符号整数\n    required domstring     inboundrtpstreamid;      // 入站的rtp流id\n    unsigned long          packetscontributedto;    // 此贡献源贡献的 rtp 数据包总数\n    double                 audiolevel;              // 此源贡献的最后接收到 rtp数据包包含[rfc6465]混音器到客户端音频级别标头扩展, 0-1\n};\n​\ndictionary rtcpeerconnectionstats : rtcstats {      \n    unsigned long       datachannelsopened;         // 表示在其生命周期内进入“打开”状态的唯一rtcdatachannel的数量\n    unsigned long       datachannelsclosed;         // 表示在其生命周期内离开“打开”状态的唯一rtcdatachannel的数量\n    unsigned long       datachannelsrequested;      // rtcpeerconnection 上成功的createdatachannel()调用返回的唯一rtcdatachannel的数量\n     unsigned long      datachannelsaccepted;       // 在rtcpeerconnection上的ondatachannel事件中发出信号的唯一rtcdatachannel的数量\n};\n​\ndictionary rtcrtptransceiverstats : rtcstats {\n    required domstring      senderid;       // rtcrtptransceiver关联的rtcrtpsender的stats对象的标识符\n    required domstring      receiverid;     // 与此stats对象表示的rtcrtptransceiver关联的rtcrtpreceiver的stats对象的标识符\n    domstring               mid;            // 如果这个stats对象表示的rtcrtptransceiver有一个不为空的中间值，这就是那个值，否则这个成员不存在\n};\n​\ndictionary rtcmediahandlerstats : rtcstats {\n    domstring               trackidentifier;            // 轨道的id属性\n    boolean                 ended;                      // 反映轨道的结束状态\n    required domstring      kind;                       // “音频”或“视频”。 这反映了mediastreamtrack的kind属性\n};\n​\ndictionary rtcvideohandlerstats : rtcmediahandlerstats {\n};\n​\ndictionary rtcvideosenderstats : rtcvideohandlerstats {\n    domstring               mediasourceid;              // 媒体源id\n};\n​\ndictionary rtcvideoreceiverstats : rtcvideohandlerstats {\n};\n​\ndictionary rtcaudiohandlerstats : rtcmediahandlerstats {\n};\n​\ndictionary rtcaudiosenderstats : rtcaudiohandlerstats {\n    domstring               mediasourceid;\n};\n​\ndictionary rtcdatachannelstats : rtcstats {\n    domstring                    label;                     // rtcdatachannel 对象的标签值\n    domstring                    rotocol;                   // rtcdatachannel 对象的协议值\n    unsigned short               datachannelidentifier;     // rtcdatachannel 对象的id属性\n    required rtcdatachannelstate state;                     // rtcdatachannel 对象的readystate值\n    unsigned long                messagessent;              // 表示发送的 api“消息”事件总数\n    unsigned long long           bytessent;                 // 表示在此 rtcdatachannel 上发送的有效负载字节总数，即，不包括标头或填充\n    unsigned long                messagesreceived;          // 表示收到的 api“消息”事件总数\n    unsigned long long           bytesreceived;             // 表示在此rtcdatachannel上接收的总字节数，即不包括头或填充\n};\n​\ndictionary rtctransportstats : rtcstats {   // rtctransportstats对象表示与rtcdtlstransport及其底层rtcicetransport对应的统计信息\n    unsigned long long           packetssent;               // 表示通过此传输发送的数据包总数\n    unsigned long long           packetsreceived;           // 表示在此传输上接收的数据包总数\n    unsigned long long           bytessent;                 // 表示在此rtcicetransport上发送的有效载荷字节总数，\n                                                            // 即不包括标头、填充或ice连接检查。\n    unsigned long long           bytesreceived;             // 表示在此rtcicetransport上接收的有效载荷字节总数，\n                                                            // 即不包括标头、填充或ice 连接检查\n    domstring                    rtcptransportstatsid;      // 如果rtp和rtcp未复用，则这是提供rtcp组件统计信息的传输id，\n                                                            // 并且此记录仅包含rtp组件统计信息\n    rtcicerole                   icerole;                   // ice角色\n    domstring                    icelocalusernamefragment;  // 设置为此rtcicetransport的消息验证程序中使用的本地用户名片段的当前值。\n                                                            // 它可能会在 setlocaldescription()和ice重启时更新。\n    required rtcdtlstransportstate dtlsstate;               // 设置为底层 rtcdtlstransport的state属性的当前值。\n    rtcicetransportstate          icestate;                 // 设置为底层 rtcicetransport 的 state 属性的当前值。\n    domstring                     selectedcandidatepairid;  // 它是与被检查的对象相关联的唯一标识符,\n                                                            // 以生成与此传输相关联的rtcicecandidatepairstats\n    domstring                     localcertificateid;       // 对于协商 dtls 的组件，提供本地证书\n    domstring                     remotecertificateid;      // 对于协商 dtls 的组件，提供远程证书\n    domstring                     tlsversion;               // tls版本,仅在 dtls 协商完成后才存在\n    domstring                     dtlscipher;               // 用于dtls传输的密码套件的描述性名称,\n                                                            // 如iana密码套件注册表[iana-tls-ciphers]的“描述”列中所定义\n    domstring                     srtpcipher;               // 用于srtp传输的保护配置文件的描述性名称\n    domstring                     tlsgroup;                 // tsl组\n    unsigned long                 selectedcandidatepairchanges; // 此传输的选定候选对已更改的次数\n};\n​\ndictionary rtcsctptransportstats : rtcstats {\n    domstring                     transportid;              // 被检查以生成支持sctp传输的dtlstransport和icetransport的  \n                                                            // rtctransportstats的对象的标识符\n    double                        smoothedroundtriptime;    // 最新平滑的往返时间值\n    unsigned long                 congestionwindow;         // 最新的拥塞窗口\n    unsigned long                 receiverwindow;           // 最新的接收器窗口\n    unsigned long                 mtu;                      // 最新的最大传输单元\n    unsigned long                 unackdata;                // 未确认的data块的数量\n};\n​\n​\ndictionary rtcicecandidatestats : rtcstats {\n    required domstring           transportid;               // 传输标识\n    domstring?                   address;                   // 它是候选地址,允许使用ipv4地址、ipv6地址和完全限定域名\n    long                         port;                      // 候选人的端口号\n    domstring                    protocol;                  // 协议传输的有效值是“udp”和“tcp”之一\n    required rtcicecandidatetype candidatetype;             // 候选人类型\n    long                         priority;                  // 优先级\n    domstring                    url;                       // 对于本地候选人，这是从中获取候选人的ice服务器的url\n    domstring                    relayprotocol;             // 它是端点用于与turn服务器通信的协议。这仅适用于本地候选人。\n                                                            // 有效值为“udp”、“tcp”或“tls\n};\n​\n​\ndictionary rtcicecandidatepairstats : rtcstats {\n    required domstring                      transportid;                // 传输标识\n    required domstring                      localcandidateid;           // 本地候选人id\n    required domstring                      remotecandidateid;          // 远端候选人状态\n    required rtcstatsicecandidatepairstate  state;                      // 代表一对本地和远程候选者的清单状态\n    boolean                                 nominated;                  // 与更新部分中描述的提名标志相关\n    unsigned long long                      packetssent;                // 在此候选对上发送的数据包总数\n    unsigned long long                      packetsreceived;            // 在此候选对上接收到的数据包总数\n    unsigned long long                      bytessent;                  // 此候选对上发送的有效载荷字节总数\n    unsigned long long                      bytesreceived;              // 在此候选对上接收的有效载荷字节总数\n    domhighrestimestamp                     lastpacketsenttimestamp;    // 在此特定候选对上发送最后一个数据包的时间戳，不包括stun数据包\n    domhighrestimestamp                     lastpacketreceivedtimestamp;// 在此特定候选对上接收到最后一个数据包的时间戳,不包括 stun 数据包\n    domhighrestimestamp                     firstrequesttimestamp;      // 在此特定候选对上发送第一个stun请求的时间戳\n    domhighrestimestamp                     lastrequesttimestamp;       // 在此特定候选对上发送最后一个stun请求的时间戳  (lastrequesttimestamp - firstrequesttimestamp) / requestssent\n    domhighrestimestamp                     lastresponsetimestamp;      // 此特定候选对上收到最后一个stun响应的时间戳\n    double                                  totalroundtriptime;         // 自会话开始以来所有往返时间测量的总和（以秒为单位）\n    double                                  currentroundtriptime;       // 以秒为单位的最新往返时间，由两个stun连接检查[stun-path-char]计算得出\n     double                                 availableoutgoingbitrate;   // 可用传出比特率-由底层拥塞控制通过使用此候选对组合所有传出 rtp 流的可用比特率来计算的。 \n                                                                            // 比特率测量不计算 ip 或其他传输层（如 tcp 或 udp）的大小\n    double                                  availableincomingbitrate;   // 可用输入比特率-由底层拥塞控制通过使用此候选对组合所有传入 rtp 流的可用比特率来计算的。 \n                                                                            // 比特率测量不计算 ip 或其他传输层（如 tcp 或 udp）的大小\n    unsigned long                           circuitbreakertriggercount; // 触发断路器的次数\n    unsigned long long                      requestsreceived;           // 收到的连接检查请求总数（包括重传）\n    unsigned long long                      requestssent;               // 发送的连接检查请求总数（不包括重传）\n    unsigned long long                      responsesreceived;          // 收到的连接检查响应总数\n    unsigned long long                      responsessent;              // 发送的连接检查响应总数\n    unsigned long long                      retransmissionsreceived;    // 收到的连接检查请求重传总数\n    unsigned long long                      retransmissionssent;        // 发送的连接检查请求重传总数\n    unsigned long long                      consentrequestssent;        // 发送的同意请求总数\n    domhighrestimestamp                     consentexpiredtimestamp;    // 最新的有效stun绑定响应过期的时间戳\n    unsigned long                           packetsdiscardedonsend;     // 由于套接字错误而被丢弃的此候选对的数据包总数\n    unsigned long long                      bytesdiscardedonsend;       // 由于套接字错误而被丢弃的此候选对的总字节数\n    unsigned long long                      requestbytessent;           // 为连通性检查发送的总字节数\n    unsigned long long                      consentrequestbytessent;    // 为同意请求发送的总字节数\n    unsigned long long                      responsebytessent;          // 为连通性检查响应发送的总字节数\n};\n​\nenum rtcstatsicecandidatepairstate {\n    "frozen",\n    "waiting",\n    "in-progress",\n    "failed",\n    "succeeded"\n};\n​\n​\ndictionary rtccertificatestats : rtcstats {\n    required domstring                      fingerprint;                // 证书的指纹\n    required domstring                      fingerprintalgorithm;       // 用于计算证书指纹的哈希函数\n    required domstring                      base64certificate;          // 证书的der编码的base-64\n    domstring                               issuercertificateid;        // 包含证书链中下一个证书的stats对象\n};\n​\ndictionary rtciceserverstats : rtcstats {\n    required domstring                      url;                        // ice服务器的url\n    long                                    port;                       // 客户端使用的端口号\n    domstring                               relayprotocol;              // 端点用于与ice服务器通信的协议\n    unsigned long                           totalrequestssent;          // 已发送到此服务器的请求总数\n    unsigned long                           totalresponsesreceived;     // 从该服务器收到的响应总数\n    double                                  totalroundtriptime;         // 在收到响应的情况下已发送的所有请求的 rtt 总和\n};  \n​\ndictionary rtcmediastreamstats : rtcstats {     // 由于发送方、接收方和收发器统计对象更适合描述现代 rtcpeerconnection 模型（统一计划）\n                                                // 因此整个字典已于 2019 年 9 月过时。\n    domstring                               streamidentifier;           // stream.id 属性\n    sequence<domstring>                     trackids;                   // stats 对象的id,并不是trackid\n};\n​\ndictionary rtcsendervideotrackattachmentstats : rtcvideosenderstats {\n};\n​\ndictionary rtcsenderaudiotrackattachmentstats : rtcaudiosenderstats {\n};\n​\ndictionary rtcreceivervideotrackattachmentstats : rtcvideoreceiverstats {};\n​\ndictionary rtcreceiveraudiotrackattachmentstats : rtcaudioreceiverstats {};\n            \npartial dictionary rtccodecstats {      \n    // 已于 2019 年 8 月移rtcinboundrtpstreamstats.rtcinboundrtpstreamstats/decoderimplementation}} \n    domstring       implementation;             //  和 rtcoutboundrtpstreamstats.encoderimplementation    \n};\n​\npartial dictionary rtcicecandidatestats {\n    boolean         deleted = false;            // 此字段已过时，因为如果删除 ice 候选对象，它将不再出现在 getstats() 中\n    boolean         isremote;                   // false 表示这代表本地候选人； true 表示这代表远程候选人\n};\n​\npartial dictionary rtcicecandidatepairstats {\n    double             totalrtt;   // 该字段在 2016 年 12 月更名为 totalroundtriptime\n    double             currentrtt; // 该字段于 2016 年 12 月更名为 currentroundtriptime\n    unsigned long long priority;   // 该字段在2018年2月被删除，因为它不能用 53 位表示。如果需要，可以按照 [rfc5245] 第 5.7.2 节中的定义重新计算\n};\n​\npartial dictionary rtcrtpstreamstats {\n    domstring          mediatype;                   // 表示接收轨道的 stats 对象的标识符rtcreceiveraudiotrackattachmentstats 或 \n                                                    // rtcreceivervideotrackattachmentstats,该字段于 2020 年 4 月被淘汰\n    double             averagertcpinterval;\n};\n​\n​\npartial dictionary rtcoutboundrtpstreamstats {\n    domstring          trackid;                     // stats 对象的标识符\n};\n​\npartial dictionary rtcmediahandlerstats {\n    rtcprioritytype    priority;                    // 表示已为曲目设置的优先级\n    boolean            remotesource;                // 如果轨道附件在 rtcrtpsender 上，则为 false，\n                                                    // 如果轨道附件在 rtcrtpreceiver 上，则为 true,2020 年 4 月过时\n};\n​\npartial dictionary rtcaudiohandlerstats {\n    double      audiolevel;                 // 已于 2019 年 6 月移至 rtcaudioreceiverstats 和 rtcaudiosourcestats\n    double      totalaudioenergy;           // 已于 2019 年 6 月移至 rtcaudioreceiverstats 和 rtcaudiosourcestats\n    double      totalsamplesduration;       // 已于 2019 年 6 月移至 rtcaudioreceiverstats 和 rtcaudiosourcestats\n    boolean     voiceactivityflag;          // 该字段已于 2019 年 8 月移至 rtcoutboundrtpstreamstats 和 rtcinboundrtpstreamstats\n};\n​\npartial dictionary rtcaudiosenderstats {\n    unsigned long long                      totalsamplessent;           // 这已于 2019 年 8 月移至 rtcoutboundrtpstreamstats\n    double                                  echoreturnloss;             // 这已于 2019 年 8 月移至 rtcaudiosourcestats\n    double                                  echoreturnlossenhancement;  // 这已于 2019 年 8 月移至 rtcaudiosourcestats\n};\n        \npartial dictionary rtcaudioreceiverstats {                                  // 已于 2019 年 8 月移至 rtcinboundrtpstreamstats\n    domhighrestimestamp                     estimatedplayouttimestamp;  \n    double                                  jitterbufferdelay;          \n    unsigned long long                      jitterbufferemittedcount;\n    unsigned long long                      totalsamplesreceived;\n    unsigned long long                      concealedsamples;\n    unsigned long long                      silentconcealedsamples;\n    unsigned long long                      concealmentevents;\n    unsigned long long                      insertedsamplesfordeceleration;\n    unsigned long long                      removedsamplesforacceleration;\n    double                                  audiolevel;\n    double                                  totalaudioenergy;\n    double                                  totalsamplesduration;\n};\n​\npartial dictionary rtcvideohandlerstats {\n    unsigned long       framewidth;     // 已于 2019 年 8 月移至 rtcoutboundrtpstreamstats 和 rtcinboundrtpstreamstats\n    unsigned long       frameheight;    // 已于 2019 年 8 月移至 rtcoutboundrtpstreamstats 和 rtcinboundrtpstreamstats\n    double              ramespersecond; // 2019 年 5 月被 rtcvideosourcestats.framespersecond 取代，代表轨道的帧速率\n                                        // 2019 年 8 月移至 rtcinboundrtpstreamstats，表示解码帧速率\n                                        // 2019年8月，rtcoutboundrtpstreamstats中还增加了framespersecond，代表编码帧率（可能低于源帧率）\n};\n​\npartial dictionary rtcvideosenderstats {\n    unsigned long       keyframessent;              // 2019 年 6 月被 rtcoutboundrtpstreamstats 中的 keyframesencoded 替换\n    unsigned long       framescaptured;             // 2019 年 5 月被 rtcvideosourcestats.frames 取代\n    unsigned long       framessent;                 // 2019 年 8 月移至 rtcoutboundrtpstreamstats\n    unsigned long       hugeframessent;             // 2019 年 8 月移至 rtcoutboundrtpstreamstats\n};\n​\npartial dictionary rtcvideoreceiverstats {\n    unsigned long       keyframesreceived;          // 2019 年 6 月被 rtcinboundrtpstreamstats 中的 keyframesdecoded 替换\n    domhighrestimestamp estimatedplayouttimestamp;  // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    double              jitterbufferdelay;          // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    unsigned long long  jitterbufferemittedcount;   // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    unsigned long       framesreceived;             // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    unsigned long       framesdecoded;              // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    unsigned long       framesdropped;              // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    unsigned long       partialframeslost;          // 2019 年 8 月移至 rtcinboundrtpstreamstats\n    unsigned long       fullframeslost;             // 2019 年 8 月移至 rtcinboundrtpstreamstats\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\n313\n314\n315\n316\n317\n318\n319\n320\n321\n322\n323\n324\n325\n326\n327\n328\n329\n330\n331\n332\n333\n334\n335\n336\n337\n338\n339\n340\n341\n342\n343\n344\n345\n346\n347\n348\n349\n350\n351\n352\n353\n354\n355\n356\n357\n358\n359\n360\n361\n362\n363\n364\n365\n366\n367\n368\n369\n370\n371\n372\n373\n374\n375\n376\n377\n378\n379\n380\n381\n382\n383\n384\n385\n386\n387\n388\n389\n390\n391\n392\n393\n394\n395\n396\n397\n398\n399\n400\n401\n402\n403\n404\n405\n406\n407\n408\n409\n410\n411\n412\n413\n414\n415\n416\n417\n418\n419\n420\n421\n422\n423\n424\n425\n426\n427\n428\n429\n430\n431\n432\n433\n434\n435\n436\n437\n438\n439\n440\n441\n442\n443\n444\n445\n446\n447\n448\n449\n450\n451\n452\n453\n454\n455\n456\n457\n458\n459\n460\n461\n462\n463\n464\n465\n466\n467\n468\n469\n470\n471\n472\n473\n474\n475\n476\n477\n478\n479\n480\n481\n482\n483\n484\n485\n486\n487\n488\n489\n490\n491\n492\n493\n494\n495\n496\n497\n498\n499\n500\n501\n502\n503\n504\n505\n506\n507\n508\n509\n510\n511\n512\n513\n514\n515\n516\n517\n518\n519\n520\n521\n522\n523\n524\n525\n526\n527\n528\n529\n530\n531\n532\n533\n534\n535\n536\n537\n538\n539\n540\n541\n542\n543\n544\n545\n546\n547\n548\n549\n550\n551\n552\n553\n554\n555\n556\n557\n558\n559\n560\n561\n562\n563\n564\n565\n566\n567\n568\n569\n570\n571\n572\n573\n574\n575\n576\n577\n578\n579\n580\n581\n582\n583\n584\n585\n586\n587\n588\n589\n590\n591\n592\n593\n594\n595\n596\n597\n598\n599\n600\n601\n602\n603\n604\n605\n606\n607\n608\n609\n610\n611\n612\n613\n614\n',charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"Roadmap 路线",frontmatter:{title:"Roadmap 路线",date:"2022-04-16T16:44:46.000Z",permalink:"/basic/roadmap/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/3.roadmap.html",relativePath:"20.基础/3.roadmap.md",key:"v-124c469a",path:"/basic/roadmap/",headers:[{level:2,title:"学习流程",slug:"学习流程",normalizedTitle:"学习流程",charIndex:2},{level:2,title:"学习目标",slug:"学习目标",normalizedTitle:"学习目标",charIndex:13}],readingTime:{text:"1 min read",minutes:.03,time:1799.9999999999998,words:6},headersStr:"学习流程 学习目标",content:"# 学习流程\n\n\n\n\n# 学习目标\n\n",normalizedContent:"# 学习流程\n\n\n\n\n# 学习目标\n\n",charsets:{cjk:!0},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"本章导读",frontmatter:{title:"本章导读",date:"2022-07-08T18:02:01.000Z",permalink:"/basic/app/index/",categories:["基础","应用"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/30.%E5%BA%94%E7%94%A8/0.index.html",relativePath:"20.基础/30.应用/0.index.md",key:"v-6f153665",path:"/basic/app/index/",headers:[{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:2},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:83}],readingTime:{text:"1 min read",minutes:.195,time:11700.000000000002,words:39},headersStr:"说明 参考",content:"# 说明\n\n * 本文以 Google 官方推荐仓库webrtc/samples为例，解读 WebRTC API 的基本用法和实例。\n * 只保留核心代码。\n\n\n# 参考\n\n * WebRTC samples\n * webrtc/samples: WebRTC Web demos and samples\n * webrtc/apprtc: appr.tc has been shutdown. Please use the Dockerfile to run your own test/dev instance.",normalizedContent:"# 说明\n\n * 本文以 google 官方推荐仓库webrtc/samples为例，解读 webrtc api 的基本用法和实例。\n * 只保留核心代码。\n\n\n# 参考\n\n * webrtc samples\n * webrtc/samples: webrtc web demos and samples\n * webrtc/apprtc: appr.tc has been shutdown. please use the dockerfile to run your own test/dev instance.",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"getUserMedia",frontmatter:{title:"getUserMedia",date:"2022-07-08T18:23:09.000Z",permalink:"/basic/app/get-user-media/",categories:["基础","应用"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/30.%E5%BA%94%E7%94%A8/10.getUserMedia.html",relativePath:"20.基础/30.应用/10.getUserMedia.md",key:"v-acfed1b6",path:"/basic/app/get-user-media/",headers:[{level:2,title:"Basic getUserMedia demo",slug:"basic-getusermedia-demo",normalizedTitle:"basic getusermedia demo",charIndex:2},{level:2,title:"Use getUserMedia with canvas",slug:"use-getusermedia-with-canvas",normalizedTitle:"use getusermedia with canvas",charIndex:1718},{level:2,title:"Use getUserMedia with canvas and CSS filters",slug:"use-getusermedia-with-canvas-and-css-filters",normalizedTitle:"use getusermedia with canvas and css filters",charIndex:2418},{level:2,title:"Choose camera resolution",slug:"choose-camera-resolution",normalizedTitle:"choose camera resolution",charIndex:3729},{level:2,title:"Audio-only getUserMedia() output to local audio element",slug:"audio-only-getusermedia-output-to-local-audio-element",normalizedTitle:"audio-only getusermedia() output to local audio element",charIndex:5227},{level:2,title:"Audio-only getUserMedia() displaying volume",slug:"audio-only-getusermedia-displaying-volume",normalizedTitle:"audio-only getusermedia() displaying volume",charIndex:5837},{level:2,title:"Record stream",slug:"record-stream",normalizedTitle:"record stream",charIndex:8886},{level:2,title:"Screensharing with getDisplayMedia",slug:"screensharing-with-getdisplaymedia",normalizedTitle:"screensharing with getdisplaymedia",charIndex:12694},{level:2,title:"Control camera pan, tilt, and zoom",slug:"control-camera-pan-tilt-and-zoom",normalizedTitle:"control camera pan, tilt, and zoom",charIndex:13755},{level:2,title:"Control exposure",slug:"control-exposure",normalizedTitle:"control exposure",charIndex:15676}],readingTime:{text:"9 min read",minutes:8.6,time:516e3,words:1720},headersStr:"Basic getUserMedia demo Use getUserMedia with canvas Use getUserMedia with canvas and CSS filters Choose camera resolution Audio-only getUserMedia() output to local audio element Audio-only getUserMedia() displaying volume Record stream Screensharing with getDisplayMedia Control camera pan, tilt, and zoom Control exposure",content:"# Basic getUserMedia demo\n\nView source on GitHub\n\n// Put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handleSuccess(stream) {\n  const video = document.querySelector('video');\n  const videoTracks = stream.getVideoTracks();\n  console.log('Got stream with constraints:', constraints);\n  console.log(`Using video device: ${videoTracks[0].label}`);\n  window.stream = stream; // make variable available to browser console\n  video.srcObject = stream;\n}\n\nfunction handleError(error) {\n  if (error.name === 'ConstraintNotSatisfiedError') {\n    const v = constraints.video;\n    errorMsg(`The resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`);\n  } else if (error.name === 'PermissionDeniedError') {\n    errorMsg('Permissions have not been granted to use your camera and ' +\n      'microphone, you need to allow the page access to your devices in ' +\n      'order for the demo to work.');\n  }\n  errorMsg(`getUserMedia error: ${error.name}`, error);\n}\n\nfunction errorMsg(msg, error) {\n  const errorElement = document.querySelector('#errorMsg');\n  errorElement.innerHTML += `<p>${msg}</p>`;\n  if (typeof error !== 'undefined') {\n    console.error(error);\n  }\n}\n\nasync function init(e) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleSuccess(stream);\n    e.target.disabled = true;\n  } catch (e) {\n    handleError(e);\n  }\n}\n\ndocument.querySelector('#showVideo').addEventListener('click', e => init(e));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# Use getUserMedia with canvas\n\nView source on GitHub\n\nbutton.onclick = function() {\n  canvas.width = video.videoWidth;\n  canvas.height = video.videoHeight;\n  canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n};\n\nconst constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handleSuccess(stream) {\n  window.stream = stream; // make stream available to browser console\n  video.srcObject = stream;\n}\n\nfunction handleError(error) {\n  console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\n}\n\nnavigator.mediaDevices.getUserMedia(constraints).then(handleSuccess).catch(handleError);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# Use getUserMedia with canvas and CSS filters\n\nView source on GitHub\n\nsnapshotButton.onclick = function() {\n  canvas.className = filterSelect.value;\n  canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height);\n};\n\nfilterSelect.onchange = function() {\n  video.className = filterSelect.value;\n};\n\nconst constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handleSuccess(stream) {\n  window.stream = stream; // make stream available to browser console\n  video.srcObject = stream;\n}\n\nfunction handleError(error) {\n  console.log('navigator.MediaDevices.getUserMedia error: ', error.message, error.name);\n}\n\nnavigator.mediaDevices.getUserMedia(constraints).then(handleSuccess).catch(handleError);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nstyle:\n\n.none {\n    -webkit-filter: none;\n    filter: none;\n}\n\n.blur {\n    -webkit-filter: blur(3px);\n    filter: blur(3px);\n}\n\n.grayscale {\n    -webkit-filter: grayscale(1);\n    filter: grayscale(1);\n}\n\n.invert {\n    -webkit-filter: invert(1);\n    filter: invert(1);\n}\n\n.sepia {\n    -webkit-filter: sepia(1);\n    filter: sepia(1);\n}\n\nbutton#snapshot {\n    margin: 0 10px 25px 0;\n    width: 110px;\n}\n\nvideo {\n    object-fit: cover;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# Choose camera resolution\n\nView source on GitHub\n\neightKButton.onclick = () => {\n  getMedia(eightKConstraints);\n};\n\nconst eightKConstraints = {\n  video: {width: {exact: 7680}, height: {exact: 4320}}\n};\n\nfunction gotStream(mediaStream) {\n  stream = window.stream = mediaStream; // stream available to console\n  video.srcObject = mediaStream;\n}\n\nfunction constraintChange(e) {\n  widthOutput.textContent = e.target.value;\n  const track = window.stream.getVideoTracks()[0];\n  let constraints;\n  if (aspectLock.checked) {\n    constraints = {\n      width: {exact: e.target.value},\n      aspectRatio: {\n        exact: video.videoWidth / video.videoHeight\n      }\n    };\n  } else {\n    constraints = {width: {exact: e.target.value}};\n  }\n  // ! track.applyConstraints\n  track.applyConstraints(constraints)\n      .then(() => {\n        console.log('applyConstraint success');\n        displayVideoDimensions('applyConstraints');\n      })\n      .catch(err => {\n        errorMessage('applyConstraints', err.name);\n      });\n}\n\nwidthInput.onchange = constraintChange;\n\nfunction getMedia(constraints) {\n  if (stream) {\n    stream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n\n  navigator.mediaDevices.getUserMedia(constraints)\n      .then(gotStream)\n      .catch(e => {\n        errorMessage('getUserMedia', e.message, e.name);\n      });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# Audio-only getUserMedia() output to local audio element\n\nView source on GitHub\n\nconst constraints = window.constraints = {\n  audio: true,\n  video: false\n};\n\nfunction handleSuccess(stream) {\n  const audioTracks = stream.getAudioTracks();\n  console.log('Using audio device: ' + audioTracks[0].label);\n  stream.oninactive = function() {\n    console.log('Stream ended');\n  };\n  window.stream = stream; // make variable available to browser console\n  audio.srcObject = stream;\n}\n\nnavigator.mediaDevices.getUserMedia(constraints).then(handleSuccess).catch(handleError);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# Audio-only getUserMedia() displaying volume\n\nView source on GitHub\n\n// Meter class that generates a number correlated to audio volume.\n// The meter class itself displays nothing, but it makes the\n// instantaneous and time-decaying volumes available for inspection.\n// It also reports on the fraction of samples that were at or near\n// the top of the measurement range.\nfunction SoundMeter(context) {\n  this.context = context;\n  this.instant = 0.0;\n  this.slow = 0.0;\n  this.clip = 0.0;\n  this.script = context.createScriptProcessor(2048, 1, 1);\n  const that = this;\n  this.script.onaudioprocess = function(event) {\n    const input = event.inputBuffer.getChannelData(0);\n    let i;\n    let sum = 0.0;\n    let clipcount = 0;\n    for (i = 0; i < input.length; ++i) {\n      sum += input[i] * input[i];\n      if (Math.abs(input[i]) > 0.99) {\n        clipcount += 1;\n      }\n    }\n    that.instant = Math.sqrt(sum / input.length);\n    that.slow = 0.95 * that.slow + 0.05 * that.instant;\n    that.clip = clipcount / input.length;\n  };\n}\n\nSoundMeter.prototype.connectToSource = function(stream, callback) {\n  try {\n    this.mic = this.context.createMediaStreamSource(stream);\n    this.mic.connect(this.script);\n    // necessary to make sample run, but should not be.\n    this.script.connect(this.context.destination);\n    if (typeof callback !== 'undefined') {\n      callback(null);\n    }\n  } catch (e) {\n    console.error(e);\n    if (typeof callback !== 'undefined') {\n      callback(e);\n    }\n  }\n};\n\nSoundMeter.prototype.stop = function() {\n  this.mic.disconnect();\n  this.script.disconnect();\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\nstartButton.onclick = start;\nstopButton.onclick = stop;\n\nfunction handleSuccess(stream) {\n  // Put variables in global scope to make them available to the\n  // browser console.\n  window.stream = stream;\n  // ！SoundMeter\n  const soundMeter = window.soundMeter = new SoundMeter(window.audioContext);\n  soundMeter.connectToSource(stream, function(e) {\n    if (e) {\n      alert(e);\n      return;\n    }\n    meterRefresh = setInterval(() => {\n      instantMeter.value = instantValueDisplay.innerText =\n        soundMeter.instant.toFixed(2);\n      slowMeter.value = slowValueDisplay.innerText =\n        soundMeter.slow.toFixed(2);\n      clipMeter.value = clipValueDisplay.innerText =\n        soundMeter.clip;\n    }, 200);\n  });\n}\n\nfunction start() {\n  try {\n    window.AudioContext = window.AudioContext || window.webkitAudioContext;\n    // ! AudioContext\n    window.audioContext = new AudioContext();\n  } catch (e) {\n    alert('Web Audio API not supported.');\n  }\n\n  navigator.mediaDevices\n      .getUserMedia(constraints)\n      .then(handleSuccess)\n      .catch(handleError);\n}\n\nfunction stop() {\n  window.stream.getTracks().forEach(track => track.stop());\n  window.soundMeter.stop();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# Record stream\n\nView source on GitHub\n\nlet mediaRecorder;\nlet recordedBlobs;\n\nrecordButton.addEventListener('click', () => {\n  if (recordButton.textContent === 'Start Recording') {\n    startRecording();\n  } else {\n    stopRecording();\n  }\n});\n\nconst playButton = document.querySelector('button#play');\nplayButton.addEventListener('click', () => {\n  const superBuffer = new Blob(recordedBlobs, {type: 'video/webm'});\n  recordedVideo.src = null;\n  recordedVideo.srcObject = null;\n  recordedVideo.src = window.URL.createObjectURL(superBuffer);\n  recordedVideo.controls = true;\n  recordedVideo.play();\n});\n\ndownloadButton.addEventListener('click', () => {\n  const blob = new Blob(recordedBlobs, {type: 'video/webm'});\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = 'test.webm';\n  document.body.appendChild(a);\n  a.click();\n  // for firefox\n  setTimeout(() => {\n    document.body.removeChild(a);\n    window.URL.revokeObjectURL(url);\n  }, 100);\n});\n\nfunction handleDataAvailable(event) {\n  console.log('handleDataAvailable', event);\n  if (event.data && event.data.size > 0) {\n    recordedBlobs.push(event.data);\n  }\n}\n\nfunction startRecording() {\n  recordedBlobs = [];\n  let options = {mimeType: 'video/webm;codecs=vp9,opus'};\n  if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n    console.error(`${options.mimeType} is not supported`);\n    options = {mimeType: 'video/webm;codecs=vp8,opus'};\n    if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n      console.error(`${options.mimeType} is not supported`);\n      options = {mimeType: 'video/webm'};\n      if (!MediaRecorder.isTypeSupported(options.mimeType)) {\n        console.error(`${options.mimeType} is not supported`);\n        options = {mimeType: ''};\n      }\n    }\n  }\n\n  try {\n    mediaRecorder = new MediaRecorder(window.stream, options);\n  } catch (e) {\n    console.error('Exception while creating MediaRecorder:', e);\n    errorMsgElement.innerHTML = `Exception while creating MediaRecorder: ${JSON.stringify(e)}`;\n    return;\n  }\n\n  console.log('Created MediaRecorder', mediaRecorder, 'with options', options);\n  mediaRecorder.onstop = (event) => {\n    console.log('Recorder stopped: ', event);\n    console.log('Recorded Blobs: ', recordedBlobs);\n  };\n  mediaRecorder.ondataavailable = handleDataAvailable;\n  mediaRecorder.start();\n  console.log('MediaRecorder started', mediaRecorder);\n}\n\nfunction stopRecording() {\n  mediaRecorder.stop();\n}\n\nfunction handleSuccess(stream) {\n  recordButton.disabled = false;\n  console.log('getUserMedia() got stream:', stream);\n  window.stream = stream;\n\n  const gumVideo = document.querySelector('video#gum');\n  gumVideo.srcObject = stream;\n}\n\nasync function init(constraints) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleSuccess(stream);\n  } catch (e) {\n    console.error('navigator.getUserMedia error:', e);\n    errorMsgElement.innerHTML = `navigator.getUserMedia error:${e.toString()}`;\n  }\n}\n\ndocument.querySelector('button#start').addEventListener('click', async () => {\n  const hasEchoCancellation = document.querySelector('#echoCancellation').checked;\n  const constraints = {\n    audio: {\n      echoCancellation: {exact: hasEchoCancellation}\n    },\n    video: {\n      width: 1280, height: 720\n    }\n  };\n  console.log('Using media constraints:', constraints);\n  await init(constraints);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n\n# Screensharing with getDisplayMedia\n\nView source on GitHub\n\n// Polyfill in Firefox.\n// See https://blog.mozilla.org/webrtc/getdisplaymedia-now-available-in-adapter-js/\nif (adapter.browserDetails.browser == 'firefox') {\n  adapter.browserShim.shimGetDisplayMedia(window, 'screen');\n}\n\nfunction handleSuccess(stream) {\n  const video = document.querySelector('video');\n  video.srcObject = stream;\n\n  // demonstrates how to detect that the user has stopped\n  // sharing the screen via the browser UI.\n  stream.getVideoTracks()[0].addEventListener('ended', () => {\n    startButton.disabled = false;\n  });\n}\n\nconst startButton = document.getElementById('startButton');\nstartButton.addEventListener('click', () => {\n  navigator.mediaDevices.getDisplayMedia({video: true})\n      .then(handleSuccess, handleError);\n});\n\nif ((navigator.mediaDevices && 'getDisplayMedia' in navigator.mediaDevices)) {\n  startButton.disabled = false;\n} else {\n  errorMsg('getDisplayMedia is not supported');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# Control camera pan, tilt, and zoom\n\nView source on GitHub\n\n// Put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\n  video: {\n    pan: true, tilt: true, zoom: true\n  }\n};\n\nfunction handleSuccess(stream) {\n  const video = document.querySelector('video');\n  const videoTracks = stream.getVideoTracks();\n  console.log('Got stream with constraints:', constraints);\n  console.log(`Using video device: ${videoTracks[0].label}`);\n  video.srcObject = stream;\n\n  // make track variable available to browser console.\n  const [track] = [window.track] = stream.getVideoTracks();\n  const capabilities = track.getCapabilities();\n  const settings = track.getSettings();\n\n  for (const ptz of ['pan', 'tilt', 'zoom']) {\n    // Check whether camera supports pan/tilt/zoom.\n    if (!(ptz in settings)) {\n      errorMsg(`Camera does not support ${ptz}.`);\n      continue;\n    }\n\n    // Map it to a slider element.\n    const input = document.querySelector(`input[name=${ptz}]`);\n    input.min = capabilities[ptz].min;\n    input.max = capabilities[ptz].max;\n    input.step = capabilities[ptz].step;\n    input.value = settings[ptz];\n    input.disabled = false;\n    input.oninput = async event => {\n      try {\n        const constraints = {advanced: [{[ptz]: input.value}]};\n        await track.applyConstraints(constraints);\n      } catch (err) {\n        console.error('applyConstraints() failed: ', err);\n      }\n    };\n  }\n}\n\nasync function init(e) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleSuccess(stream);\n    e.target.disabled = true;\n  } catch (e) {\n    handleError(e);\n  }\n}\n\ndocument.querySelector('#showVideo').addEventListener('click', e => init(e));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# Control exposure\n\nView source on GitHub\n\n// Put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handleSuccess(stream) {\n  const video = document.querySelector('video');\n  const videoTracks = stream.getVideoTracks();\n  console.log('Got stream with constraints:', constraints);\n  console.log(`Using video device: ${videoTracks[0].label}`);\n  video.srcObject = stream;\n\n  // make track variable available to browser console.\n  [window.track] = stream.getVideoTracks();\n\n  loadProperties();\n}\n\nfunction loadProperties(refreshValuesOnly) {\n  const track = window.track;\n  const capabilities = track.getCapabilities();\n  const settings = track.getSettings();\n  console.log('Capabilities: ', capabilities);\n  console.log('Settings: ', settings);\n\n  for (const property of ['exposureMode', 'exposureTime', 'exposureCompensation', 'brightness', 'whiteBalanceMode']) {\n    // Check whether camera supports exposure.\n    if (!(property in settings)) {\n      errorMsg(`Camera does not support ${property}.`);\n      continue;\n    }\n\n    let element;\n\n    if (Array.isArray(capabilities[property])) {\n      // Map it to a select element.\n      const select = document.querySelector(`select[name=${property}]`);\n      element = select;\n      if (capabilities[property] && !refreshValuesOnly) {\n        for (const mode of capabilities[property]) {\n          select.insertAdjacentHTML('afterbegin', `<option value=\"${mode}\">${mode}</option>`);\n        }\n      }\n    } else {\n      // Map it to a slider element.\n      const input = document.querySelector(`input[name=${property}]`);\n      element = input;\n      input.min = capabilities[property].min;\n      input.max = capabilities[property].max;\n      input.step = capabilities[property].step;\n    }\n\n    element.value = settings[property];\n    element.disabled = false;\n    if (!refreshValuesOnly) {\n      element.oninput = async event => {\n        try {\n          const constraints = {advanced: [{[property]: element.value}]};\n          await track.applyConstraints(constraints);\n          console.log('Did successfully apply new constraints: ', constraints);\n          console.log('New camera settings: ', track.getSettings());\n        } catch (err) {\n          console.error('applyConstraints() failed: ', err);\n        }\n      };\n    }\n  }\n}\n\nasync function init(e) {\n  try {\n    const stream = await navigator.mediaDevices.getUserMedia(constraints);\n    handleSuccess(stream);\n    e.target.disabled = true;\n  } catch (e) {\n    handleError(e);\n  }\n}\n\ndocument.querySelector('#showVideo').addEventListener('click', e => init(e));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n",normalizedContent:"# basic getusermedia demo\n\nview source on github\n\n// put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handlesuccess(stream) {\n  const video = document.queryselector('video');\n  const videotracks = stream.getvideotracks();\n  console.log('got stream with constraints:', constraints);\n  console.log(`using video device: ${videotracks[0].label}`);\n  window.stream = stream; // make variable available to browser console\n  video.srcobject = stream;\n}\n\nfunction handleerror(error) {\n  if (error.name === 'constraintnotsatisfiederror') {\n    const v = constraints.video;\n    errormsg(`the resolution ${v.width.exact}x${v.height.exact} px is not supported by your device.`);\n  } else if (error.name === 'permissiondeniederror') {\n    errormsg('permissions have not been granted to use your camera and ' +\n      'microphone, you need to allow the page access to your devices in ' +\n      'order for the demo to work.');\n  }\n  errormsg(`getusermedia error: ${error.name}`, error);\n}\n\nfunction errormsg(msg, error) {\n  const errorelement = document.queryselector('#errormsg');\n  errorelement.innerhtml += `<p>${msg}</p>`;\n  if (typeof error !== 'undefined') {\n    console.error(error);\n  }\n}\n\nasync function init(e) {\n  try {\n    const stream = await navigator.mediadevices.getusermedia(constraints);\n    handlesuccess(stream);\n    e.target.disabled = true;\n  } catch (e) {\n    handleerror(e);\n  }\n}\n\ndocument.queryselector('#showvideo').addeventlistener('click', e => init(e));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n\n\n\n# use getusermedia with canvas\n\nview source on github\n\nbutton.onclick = function() {\n  canvas.width = video.videowidth;\n  canvas.height = video.videoheight;\n  canvas.getcontext('2d').drawimage(video, 0, 0, canvas.width, canvas.height);\n};\n\nconst constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handlesuccess(stream) {\n  window.stream = stream; // make stream available to browser console\n  video.srcobject = stream;\n}\n\nfunction handleerror(error) {\n  console.log('navigator.mediadevices.getusermedia error: ', error.message, error.name);\n}\n\nnavigator.mediadevices.getusermedia(constraints).then(handlesuccess).catch(handleerror);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\n\n# use getusermedia with canvas and css filters\n\nview source on github\n\nsnapshotbutton.onclick = function() {\n  canvas.classname = filterselect.value;\n  canvas.getcontext('2d').drawimage(video, 0, 0, canvas.width, canvas.height);\n};\n\nfilterselect.onchange = function() {\n  video.classname = filterselect.value;\n};\n\nconst constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handlesuccess(stream) {\n  window.stream = stream; // make stream available to browser console\n  video.srcobject = stream;\n}\n\nfunction handleerror(error) {\n  console.log('navigator.mediadevices.getusermedia error: ', error.message, error.name);\n}\n\nnavigator.mediadevices.getusermedia(constraints).then(handlesuccess).catch(handleerror);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n\n\nstyle:\n\n.none {\n    -webkit-filter: none;\n    filter: none;\n}\n\n.blur {\n    -webkit-filter: blur(3px);\n    filter: blur(3px);\n}\n\n.grayscale {\n    -webkit-filter: grayscale(1);\n    filter: grayscale(1);\n}\n\n.invert {\n    -webkit-filter: invert(1);\n    filter: invert(1);\n}\n\n.sepia {\n    -webkit-filter: sepia(1);\n    filter: sepia(1);\n}\n\nbutton#snapshot {\n    margin: 0 10px 25px 0;\n    width: 110px;\n}\n\nvideo {\n    object-fit: cover;\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n\n\n\n# choose camera resolution\n\nview source on github\n\neightkbutton.onclick = () => {\n  getmedia(eightkconstraints);\n};\n\nconst eightkconstraints = {\n  video: {width: {exact: 7680}, height: {exact: 4320}}\n};\n\nfunction gotstream(mediastream) {\n  stream = window.stream = mediastream; // stream available to console\n  video.srcobject = mediastream;\n}\n\nfunction constraintchange(e) {\n  widthoutput.textcontent = e.target.value;\n  const track = window.stream.getvideotracks()[0];\n  let constraints;\n  if (aspectlock.checked) {\n    constraints = {\n      width: {exact: e.target.value},\n      aspectratio: {\n        exact: video.videowidth / video.videoheight\n      }\n    };\n  } else {\n    constraints = {width: {exact: e.target.value}};\n  }\n  // ! track.applyconstraints\n  track.applyconstraints(constraints)\n      .then(() => {\n        console.log('applyconstraint success');\n        displayvideodimensions('applyconstraints');\n      })\n      .catch(err => {\n        errormessage('applyconstraints', err.name);\n      });\n}\n\nwidthinput.onchange = constraintchange;\n\nfunction getmedia(constraints) {\n  if (stream) {\n    stream.gettracks().foreach(track => {\n      track.stop();\n    });\n  }\n\n  navigator.mediadevices.getusermedia(constraints)\n      .then(gotstream)\n      .catch(e => {\n        errormessage('getusermedia', e.message, e.name);\n      });\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n\n\n\n# audio-only getusermedia() output to local audio element\n\nview source on github\n\nconst constraints = window.constraints = {\n  audio: true,\n  video: false\n};\n\nfunction handlesuccess(stream) {\n  const audiotracks = stream.getaudiotracks();\n  console.log('using audio device: ' + audiotracks[0].label);\n  stream.oninactive = function() {\n    console.log('stream ended');\n  };\n  window.stream = stream; // make variable available to browser console\n  audio.srcobject = stream;\n}\n\nnavigator.mediadevices.getusermedia(constraints).then(handlesuccess).catch(handleerror);\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n\n\n\n# audio-only getusermedia() displaying volume\n\nview source on github\n\n// meter class that generates a number correlated to audio volume.\n// the meter class itself displays nothing, but it makes the\n// instantaneous and time-decaying volumes available for inspection.\n// it also reports on the fraction of samples that were at or near\n// the top of the measurement range.\nfunction soundmeter(context) {\n  this.context = context;\n  this.instant = 0.0;\n  this.slow = 0.0;\n  this.clip = 0.0;\n  this.script = context.createscriptprocessor(2048, 1, 1);\n  const that = this;\n  this.script.onaudioprocess = function(event) {\n    const input = event.inputbuffer.getchanneldata(0);\n    let i;\n    let sum = 0.0;\n    let clipcount = 0;\n    for (i = 0; i < input.length; ++i) {\n      sum += input[i] * input[i];\n      if (math.abs(input[i]) > 0.99) {\n        clipcount += 1;\n      }\n    }\n    that.instant = math.sqrt(sum / input.length);\n    that.slow = 0.95 * that.slow + 0.05 * that.instant;\n    that.clip = clipcount / input.length;\n  };\n}\n\nsoundmeter.prototype.connecttosource = function(stream, callback) {\n  try {\n    this.mic = this.context.createmediastreamsource(stream);\n    this.mic.connect(this.script);\n    // necessary to make sample run, but should not be.\n    this.script.connect(this.context.destination);\n    if (typeof callback !== 'undefined') {\n      callback(null);\n    }\n  } catch (e) {\n    console.error(e);\n    if (typeof callback !== 'undefined') {\n      callback(e);\n    }\n  }\n};\n\nsoundmeter.prototype.stop = function() {\n  this.mic.disconnect();\n  this.script.disconnect();\n};\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n\n\nstartbutton.onclick = start;\nstopbutton.onclick = stop;\n\nfunction handlesuccess(stream) {\n  // put variables in global scope to make them available to the\n  // browser console.\n  window.stream = stream;\n  // ！soundmeter\n  const soundmeter = window.soundmeter = new soundmeter(window.audiocontext);\n  soundmeter.connecttosource(stream, function(e) {\n    if (e) {\n      alert(e);\n      return;\n    }\n    meterrefresh = setinterval(() => {\n      instantmeter.value = instantvaluedisplay.innertext =\n        soundmeter.instant.tofixed(2);\n      slowmeter.value = slowvaluedisplay.innertext =\n        soundmeter.slow.tofixed(2);\n      clipmeter.value = clipvaluedisplay.innertext =\n        soundmeter.clip;\n    }, 200);\n  });\n}\n\nfunction start() {\n  try {\n    window.audiocontext = window.audiocontext || window.webkitaudiocontext;\n    // ! audiocontext\n    window.audiocontext = new audiocontext();\n  } catch (e) {\n    alert('web audio api not supported.');\n  }\n\n  navigator.mediadevices\n      .getusermedia(constraints)\n      .then(handlesuccess)\n      .catch(handleerror);\n}\n\nfunction stop() {\n  window.stream.gettracks().foreach(track => track.stop());\n  window.soundmeter.stop();\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n\n\n\n# record stream\n\nview source on github\n\nlet mediarecorder;\nlet recordedblobs;\n\nrecordbutton.addeventlistener('click', () => {\n  if (recordbutton.textcontent === 'start recording') {\n    startrecording();\n  } else {\n    stoprecording();\n  }\n});\n\nconst playbutton = document.queryselector('button#play');\nplaybutton.addeventlistener('click', () => {\n  const superbuffer = new blob(recordedblobs, {type: 'video/webm'});\n  recordedvideo.src = null;\n  recordedvideo.srcobject = null;\n  recordedvideo.src = window.url.createobjecturl(superbuffer);\n  recordedvideo.controls = true;\n  recordedvideo.play();\n});\n\ndownloadbutton.addeventlistener('click', () => {\n  const blob = new blob(recordedblobs, {type: 'video/webm'});\n  const url = window.url.createobjecturl(blob);\n  const a = document.createelement('a');\n  a.style.display = 'none';\n  a.href = url;\n  a.download = 'test.webm';\n  document.body.appendchild(a);\n  a.click();\n  // for firefox\n  settimeout(() => {\n    document.body.removechild(a);\n    window.url.revokeobjecturl(url);\n  }, 100);\n});\n\nfunction handledataavailable(event) {\n  console.log('handledataavailable', event);\n  if (event.data && event.data.size > 0) {\n    recordedblobs.push(event.data);\n  }\n}\n\nfunction startrecording() {\n  recordedblobs = [];\n  let options = {mimetype: 'video/webm;codecs=vp9,opus'};\n  if (!mediarecorder.istypesupported(options.mimetype)) {\n    console.error(`${options.mimetype} is not supported`);\n    options = {mimetype: 'video/webm;codecs=vp8,opus'};\n    if (!mediarecorder.istypesupported(options.mimetype)) {\n      console.error(`${options.mimetype} is not supported`);\n      options = {mimetype: 'video/webm'};\n      if (!mediarecorder.istypesupported(options.mimetype)) {\n        console.error(`${options.mimetype} is not supported`);\n        options = {mimetype: ''};\n      }\n    }\n  }\n\n  try {\n    mediarecorder = new mediarecorder(window.stream, options);\n  } catch (e) {\n    console.error('exception while creating mediarecorder:', e);\n    errormsgelement.innerhtml = `exception while creating mediarecorder: ${json.stringify(e)}`;\n    return;\n  }\n\n  console.log('created mediarecorder', mediarecorder, 'with options', options);\n  mediarecorder.onstop = (event) => {\n    console.log('recorder stopped: ', event);\n    console.log('recorded blobs: ', recordedblobs);\n  };\n  mediarecorder.ondataavailable = handledataavailable;\n  mediarecorder.start();\n  console.log('mediarecorder started', mediarecorder);\n}\n\nfunction stoprecording() {\n  mediarecorder.stop();\n}\n\nfunction handlesuccess(stream) {\n  recordbutton.disabled = false;\n  console.log('getusermedia() got stream:', stream);\n  window.stream = stream;\n\n  const gumvideo = document.queryselector('video#gum');\n  gumvideo.srcobject = stream;\n}\n\nasync function init(constraints) {\n  try {\n    const stream = await navigator.mediadevices.getusermedia(constraints);\n    handlesuccess(stream);\n  } catch (e) {\n    console.error('navigator.getusermedia error:', e);\n    errormsgelement.innerhtml = `navigator.getusermedia error:${e.tostring()}`;\n  }\n}\n\ndocument.queryselector('button#start').addeventlistener('click', async () => {\n  const hasechocancellation = document.queryselector('#echocancellation').checked;\n  const constraints = {\n    audio: {\n      echocancellation: {exact: hasechocancellation}\n    },\n    video: {\n      width: 1280, height: 720\n    }\n  };\n  console.log('using media constraints:', constraints);\n  await init(constraints);\n});\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\n97\n98\n99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n\n\n\n# screensharing with getdisplaymedia\n\nview source on github\n\n// polyfill in firefox.\n// see https://blog.mozilla.org/webrtc/getdisplaymedia-now-available-in-adapter-js/\nif (adapter.browserdetails.browser == 'firefox') {\n  adapter.browsershim.shimgetdisplaymedia(window, 'screen');\n}\n\nfunction handlesuccess(stream) {\n  const video = document.queryselector('video');\n  video.srcobject = stream;\n\n  // demonstrates how to detect that the user has stopped\n  // sharing the screen via the browser ui.\n  stream.getvideotracks()[0].addeventlistener('ended', () => {\n    startbutton.disabled = false;\n  });\n}\n\nconst startbutton = document.getelementbyid('startbutton');\nstartbutton.addeventlistener('click', () => {\n  navigator.mediadevices.getdisplaymedia({video: true})\n      .then(handlesuccess, handleerror);\n});\n\nif ((navigator.mediadevices && 'getdisplaymedia' in navigator.mediadevices)) {\n  startbutton.disabled = false;\n} else {\n  errormsg('getdisplaymedia is not supported');\n}\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n\n\n\n# control camera pan, tilt, and zoom\n\nview source on github\n\n// put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\n  video: {\n    pan: true, tilt: true, zoom: true\n  }\n};\n\nfunction handlesuccess(stream) {\n  const video = document.queryselector('video');\n  const videotracks = stream.getvideotracks();\n  console.log('got stream with constraints:', constraints);\n  console.log(`using video device: ${videotracks[0].label}`);\n  video.srcobject = stream;\n\n  // make track variable available to browser console.\n  const [track] = [window.track] = stream.getvideotracks();\n  const capabilities = track.getcapabilities();\n  const settings = track.getsettings();\n\n  for (const ptz of ['pan', 'tilt', 'zoom']) {\n    // check whether camera supports pan/tilt/zoom.\n    if (!(ptz in settings)) {\n      errormsg(`camera does not support ${ptz}.`);\n      continue;\n    }\n\n    // map it to a slider element.\n    const input = document.queryselector(`input[name=${ptz}]`);\n    input.min = capabilities[ptz].min;\n    input.max = capabilities[ptz].max;\n    input.step = capabilities[ptz].step;\n    input.value = settings[ptz];\n    input.disabled = false;\n    input.oninput = async event => {\n      try {\n        const constraints = {advanced: [{[ptz]: input.value}]};\n        await track.applyconstraints(constraints);\n      } catch (err) {\n        console.error('applyconstraints() failed: ', err);\n      }\n    };\n  }\n}\n\nasync function init(e) {\n  try {\n    const stream = await navigator.mediadevices.getusermedia(constraints);\n    handlesuccess(stream);\n    e.target.disabled = true;\n  } catch (e) {\n    handleerror(e);\n  }\n}\n\ndocument.queryselector('#showvideo').addeventlistener('click', e => init(e));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n\n\n\n# control exposure\n\nview source on github\n\n// put variables in global scope to make them available to the browser console.\nconst constraints = window.constraints = {\n  audio: false,\n  video: true\n};\n\nfunction handlesuccess(stream) {\n  const video = document.queryselector('video');\n  const videotracks = stream.getvideotracks();\n  console.log('got stream with constraints:', constraints);\n  console.log(`using video device: ${videotracks[0].label}`);\n  video.srcobject = stream;\n\n  // make track variable available to browser console.\n  [window.track] = stream.getvideotracks();\n\n  loadproperties();\n}\n\nfunction loadproperties(refreshvaluesonly) {\n  const track = window.track;\n  const capabilities = track.getcapabilities();\n  const settings = track.getsettings();\n  console.log('capabilities: ', capabilities);\n  console.log('settings: ', settings);\n\n  for (const property of ['exposuremode', 'exposuretime', 'exposurecompensation', 'brightness', 'whitebalancemode']) {\n    // check whether camera supports exposure.\n    if (!(property in settings)) {\n      errormsg(`camera does not support ${property}.`);\n      continue;\n    }\n\n    let element;\n\n    if (array.isarray(capabilities[property])) {\n      // map it to a select element.\n      const select = document.queryselector(`select[name=${property}]`);\n      element = select;\n      if (capabilities[property] && !refreshvaluesonly) {\n        for (const mode of capabilities[property]) {\n          select.insertadjacenthtml('afterbegin', `<option value=\"${mode}\">${mode}</option>`);\n        }\n      }\n    } else {\n      // map it to a slider element.\n      const input = document.queryselector(`input[name=${property}]`);\n      element = input;\n      input.min = capabilities[property].min;\n      input.max = capabilities[property].max;\n      input.step = capabilities[property].step;\n    }\n\n    element.value = settings[property];\n    element.disabled = false;\n    if (!refreshvaluesonly) {\n      element.oninput = async event => {\n        try {\n          const constraints = {advanced: [{[property]: element.value}]};\n          await track.applyconstraints(constraints);\n          console.log('did successfully apply new constraints: ', constraints);\n          console.log('new camera settings: ', track.getsettings());\n        } catch (err) {\n          console.error('applyconstraints() failed: ', err);\n        }\n      };\n    }\n  }\n}\n\nasync function init(e) {\n  try {\n    const stream = await navigator.mediadevices.getusermedia(constraints);\n    handlesuccess(stream);\n    e.target.disabled = true;\n  } catch (e) {\n    handleerror(e);\n  }\n}\n\ndocument.queryselector('#showvideo').addeventlistener('click', e => init(e));\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"devices",frontmatter:{title:"devices",date:"2022-07-11T10:48:10.000Z",permalink:"/basic/app/devices/",categories:["基础","应用"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/30.%E5%BA%94%E7%94%A8/20.devices.html",relativePath:"20.基础/30.应用/20.devices.md",key:"v-10f94591",path:"/basic/app/devices/",headers:[{level:2,title:"Choose camera, microphone and speaker",slug:"choose-camera-microphone-and-speaker",normalizedTitle:"choose camera, microphone and speaker",charIndex:2},{level:2,title:"Choose media source and audio output",slug:"choose-media-source-and-audio-output",normalizedTitle:"choose media source and audio output",charIndex:3630}],readingTime:{text:"4 min read",minutes:3.02,time:181200,words:604},headersStr:"Choose camera, microphone and speaker Choose media source and audio output",content:"# Choose camera, microphone and speaker\n\nView source on GitHub\n\nconst selectors = [audioInputSelect, audioOutputSelect, videoSelect];\n\naudioOutputSelect.disabled = !('sinkId' in HTMLMediaElement.prototype);\n\nfunction gotDevices(deviceInfos) {\n  // Handles being called several times to update labels. Preserve values.\n  const values = selectors.map(select => select.value);\n  selectors.forEach(select => {\n    while (select.firstChild) {\n      select.removeChild(select.firstChild);\n    }\n  });\n  for (let i = 0; i !== deviceInfos.length; ++i) {\n    const deviceInfo = deviceInfos[i];\n    const option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n    if (deviceInfo.kind === 'audioinput') {\n      option.text = deviceInfo.label || `microphone ${audioInputSelect.length + 1}`;\n      audioInputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'audiooutput') {\n      option.text = deviceInfo.label || `speaker ${audioOutputSelect.length + 1}`;\n      audioOutputSelect.appendChild(option);\n    } else if (deviceInfo.kind === 'videoinput') {\n      option.text = deviceInfo.label || `camera ${videoSelect.length + 1}`;\n      videoSelect.appendChild(option);\n    } else {\n      console.log('Some other kind of source/device: ', deviceInfo);\n    }\n  }\n  selectors.forEach((select, selectorIndex) => {\n    if (Array.prototype.slice.call(select.childNodes).some(n => n.value === values[selectorIndex])) {\n      select.value = values[selectorIndex];\n    }\n  });\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);\n\n// Attach audio output device to video element using device/sink ID.\nfunction attachSinkId(element, sinkId) {\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId)\n        .then(() => {\n          console.log(`Success, audio output device attached: ${sinkId}`);\n        })\n        .catch(error => {\n          let errorMessage = error;\n          if (error.name === 'SecurityError') {\n            errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\n          }\n          console.error(errorMessage);\n          // Jump back to first output device in the list as it's the default.\n          audioOutputSelect.selectedIndex = 0;\n        });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination() {\n  const audioDestination = audioOutputSelect.value;\n  attachSinkId(videoElement, audioDestination);\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n  videoElement.srcObject = stream;\n  // Refresh button list in case labels have become available\n  return navigator.mediaDevices.enumerateDevices();\n}\n\nfunction start() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n  const audioSource = audioInputSelect.value;\n  const videoSource = videoSelect.value;\n  const constraints = {\n    audio: {deviceId: audioSource ? {exact: audioSource} : undefined},\n    video: {deviceId: videoSource ? {exact: videoSource} : undefined}\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(gotStream).then(gotDevices).catch(handleError);\n}\n\naudioInputSelect.onchange = start;\naudioOutputSelect.onchange = changeAudioDestination;\n\nvideoSelect.onchange = start;\n\nstart();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n\n\n\n# Choose media source and audio output\n\nView source on GitHub\n\nfunction gotDevices(deviceInfos) {\n  const masterOutputSelector = document.createElement('select');\n\n  for (let i = 0; i !== deviceInfos.length; ++i) {\n    const deviceInfo = deviceInfos[i];\n    const option = document.createElement('option');\n    option.value = deviceInfo.deviceId;\n    if (deviceInfo.kind === 'audiooutput') {\n      console.info('Found audio output device: ', deviceInfo.label);\n      option.text = deviceInfo.label || `speaker ${masterOutputSelector.length + 1}`;\n      masterOutputSelector.appendChild(option);\n    } else {\n      console.log('Found non audio output device: ', deviceInfo.label);\n    }\n  }\n\n  // Clone the master outputSelector and replace outputSelector placeholders.\n  const allOutputSelectors = document.querySelectorAll('select');\n  for (let selector = 0; selector < allOutputSelectors.length; selector++) {\n    const newOutputSelector = masterOutputSelector.cloneNode(true);\n    newOutputSelector.addEventListener('change', changeAudioDestination);\n    allOutputSelectors[selector].parentNode.replaceChild(newOutputSelector,\n        allOutputSelectors[selector]);\n  }\n}\n\nnavigator.mediaDevices.enumerateDevices().then(gotDevices).catch(handleError);\n\n// Attach audio output device to the provided media element using the deviceId.\nfunction attachSinkId(element, sinkId, outputSelector) {\n  if (typeof element.sinkId !== 'undefined') {\n    element.setSinkId(sinkId)\n        .then(() => {\n          console.log(`Success, audio output device attached: ${sinkId} to element with ${element.title} as source.`);\n        })\n        .catch(error => {\n          let errorMessage = error;\n          if (error.name === 'SecurityError') {\n            errorMessage = `You need to use HTTPS for selecting audio output device: ${error}`;\n          }\n          console.error(errorMessage);\n          // Jump back to first output device in the list as it's the default.\n          outputSelector.selectedIndex = 0;\n        });\n  } else {\n    console.warn('Browser does not support output device selection.');\n  }\n}\n\nfunction changeAudioDestination(event) {\n  const deviceId = event.target.value;\n  const outputSelector = event.target;\n  const element = event.path[2].childNodes[1];\n  attachSinkId(element, deviceId, outputSelector);\n}\n\nfunction gotStream(stream) {\n  window.stream = stream; // make stream available to console\n  gumAudio.srcObject = stream;\n  gumVideo.srcObject = stream;\n}\n\nfunction start() {\n  if (window.stream) {\n    window.stream.getTracks().forEach(track => {\n      track.stop();\n    });\n  }\n  const constraints = {\n    audio: true,\n    video: true\n  };\n  navigator.mediaDevices.getUserMedia(constraints).then(gotStream).catch(handleError);\n}\n\nstart();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n",normalizedContent:"# choose camera, microphone and speaker\n\nview source on github\n\nconst selectors = [audioinputselect, audiooutputselect, videoselect];\n\naudiooutputselect.disabled = !('sinkid' in htmlmediaelement.prototype);\n\nfunction gotdevices(deviceinfos) {\n  // handles being called several times to update labels. preserve values.\n  const values = selectors.map(select => select.value);\n  selectors.foreach(select => {\n    while (select.firstchild) {\n      select.removechild(select.firstchild);\n    }\n  });\n  for (let i = 0; i !== deviceinfos.length; ++i) {\n    const deviceinfo = deviceinfos[i];\n    const option = document.createelement('option');\n    option.value = deviceinfo.deviceid;\n    if (deviceinfo.kind === 'audioinput') {\n      option.text = deviceinfo.label || `microphone ${audioinputselect.length + 1}`;\n      audioinputselect.appendchild(option);\n    } else if (deviceinfo.kind === 'audiooutput') {\n      option.text = deviceinfo.label || `speaker ${audiooutputselect.length + 1}`;\n      audiooutputselect.appendchild(option);\n    } else if (deviceinfo.kind === 'videoinput') {\n      option.text = deviceinfo.label || `camera ${videoselect.length + 1}`;\n      videoselect.appendchild(option);\n    } else {\n      console.log('some other kind of source/device: ', deviceinfo);\n    }\n  }\n  selectors.foreach((select, selectorindex) => {\n    if (array.prototype.slice.call(select.childnodes).some(n => n.value === values[selectorindex])) {\n      select.value = values[selectorindex];\n    }\n  });\n}\n\nnavigator.mediadevices.enumeratedevices().then(gotdevices).catch(handleerror);\n\n// attach audio output device to video element using device/sink id.\nfunction attachsinkid(element, sinkid) {\n  if (typeof element.sinkid !== 'undefined') {\n    element.setsinkid(sinkid)\n        .then(() => {\n          console.log(`success, audio output device attached: ${sinkid}`);\n        })\n        .catch(error => {\n          let errormessage = error;\n          if (error.name === 'securityerror') {\n            errormessage = `you need to use https for selecting audio output device: ${error}`;\n          }\n          console.error(errormessage);\n          // jump back to first output device in the list as it's the default.\n          audiooutputselect.selectedindex = 0;\n        });\n  } else {\n    console.warn('browser does not support output device selection.');\n  }\n}\n\nfunction changeaudiodestination() {\n  const audiodestination = audiooutputselect.value;\n  attachsinkid(videoelement, audiodestination);\n}\n\nfunction gotstream(stream) {\n  window.stream = stream; // make stream available to console\n  videoelement.srcobject = stream;\n  // refresh button list in case labels have become available\n  return navigator.mediadevices.enumeratedevices();\n}\n\nfunction start() {\n  if (window.stream) {\n    window.stream.gettracks().foreach(track => {\n      track.stop();\n    });\n  }\n  const audiosource = audioinputselect.value;\n  const videosource = videoselect.value;\n  const constraints = {\n    audio: {deviceid: audiosource ? {exact: audiosource} : undefined},\n    video: {deviceid: videosource ? {exact: videosource} : undefined}\n  };\n  navigator.mediadevices.getusermedia(constraints).then(gotstream).then(gotdevices).catch(handleerror);\n}\n\naudioinputselect.onchange = start;\naudiooutputselect.onchange = changeaudiodestination;\n\nvideoselect.onchange = start;\n\nstart();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n\n\n\n# choose media source and audio output\n\nview source on github\n\nfunction gotdevices(deviceinfos) {\n  const masteroutputselector = document.createelement('select');\n\n  for (let i = 0; i !== deviceinfos.length; ++i) {\n    const deviceinfo = deviceinfos[i];\n    const option = document.createelement('option');\n    option.value = deviceinfo.deviceid;\n    if (deviceinfo.kind === 'audiooutput') {\n      console.info('found audio output device: ', deviceinfo.label);\n      option.text = deviceinfo.label || `speaker ${masteroutputselector.length + 1}`;\n      masteroutputselector.appendchild(option);\n    } else {\n      console.log('found non audio output device: ', deviceinfo.label);\n    }\n  }\n\n  // clone the master outputselector and replace outputselector placeholders.\n  const alloutputselectors = document.queryselectorall('select');\n  for (let selector = 0; selector < alloutputselectors.length; selector++) {\n    const newoutputselector = masteroutputselector.clonenode(true);\n    newoutputselector.addeventlistener('change', changeaudiodestination);\n    alloutputselectors[selector].parentnode.replacechild(newoutputselector,\n        alloutputselectors[selector]);\n  }\n}\n\nnavigator.mediadevices.enumeratedevices().then(gotdevices).catch(handleerror);\n\n// attach audio output device to the provided media element using the deviceid.\nfunction attachsinkid(element, sinkid, outputselector) {\n  if (typeof element.sinkid !== 'undefined') {\n    element.setsinkid(sinkid)\n        .then(() => {\n          console.log(`success, audio output device attached: ${sinkid} to element with ${element.title} as source.`);\n        })\n        .catch(error => {\n          let errormessage = error;\n          if (error.name === 'securityerror') {\n            errormessage = `you need to use https for selecting audio output device: ${error}`;\n          }\n          console.error(errormessage);\n          // jump back to first output device in the list as it's the default.\n          outputselector.selectedindex = 0;\n        });\n  } else {\n    console.warn('browser does not support output device selection.');\n  }\n}\n\nfunction changeaudiodestination(event) {\n  const deviceid = event.target.value;\n  const outputselector = event.target;\n  const element = event.path[2].childnodes[1];\n  attachsinkid(element, deviceid, outputselector);\n}\n\nfunction gotstream(stream) {\n  window.stream = stream; // make stream available to console\n  gumaudio.srcobject = stream;\n  gumvideo.srcobject = stream;\n}\n\nfunction start() {\n  if (window.stream) {\n    window.stream.gettracks().foreach(track => {\n      track.stop();\n    });\n  }\n  const constraints = {\n    audio: true,\n    video: true\n  };\n  navigator.mediadevices.getusermedia(constraints).then(gotstream).catch(handleerror);\n}\n\nstart();\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n",charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"streamCapture",frontmatter:{title:"streamCapture",date:"2022-07-11T11:32:59.000Z",permalink:"/basic/app/streamCapture/",categories:["基础","应用"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/30.%E5%BA%94%E7%94%A8/30.streamCapture.html",relativePath:"20.基础/30.应用/30.streamCapture.md",key:"v-9d8b297e",path:"/basic/app/streamCapture/",readingTime:{text:"1 min read",minutes:.04,time:2400,words:8},headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"本章导读",frontmatter:{title:"本章导读",date:"2022-07-01T19:31:33.000Z",permalink:"/basic/p2p/index/",categories:["基础","P2P"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/0.index.html",relativePath:"20.基础/35.P2P/0.index.md",key:"v-a0a44bfa",path:"/basic/p2p/index/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/07/04, 20:40:33",lastUpdatedTimestamp:1656938433e3},{title:"NAT 类型探测和 NAT 穿越",frontmatter:{title:"NAT 类型探测和 NAT 穿越",date:"2022-07-01T19:32:40.000Z",permalink:"/basic/p2p/nat/",categories:["基础","P2P"],tags:["NAT 探测","NAT 穿越"],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/10.NAT%20%E7%B1%BB%E5%9E%8B%E6%8E%A2%E6%B5%8B%E5%92%8C%20NAT%20%E7%A9%BF%E8%B6%8A.html",relativePath:"20.基础/35.P2P/10.NAT 类型探测和 NAT 穿越.md",key:"v-05f9fb4f",path:"/basic/p2p/nat/",headers:[{level:2,title:"NAT：网络地址转换",slug:"nat-网络地址转换",normalizedTitle:"nat：网络地址转换",charIndex:2},{level:3,title:"缺点",slug:"缺点",normalizedTitle:"缺点",charIndex:341},{level:3,title:"优点",slug:"优点",normalizedTitle:"优点",charIndex:482},{level:2,title:"NAT类型",slug:"nat类型",normalizedTitle:"nat类型",charIndex:733},{level:2,title:"不同NAT的穿透性",slug:"不同nat的穿透性",normalizedTitle:"不同nat的穿透性",charIndex:1361},{level:2,title:"NAT类型判断",slug:"nat类型判断",normalizedTitle:"nat类型判断",charIndex:1463},{level:3,title:"过程简化",slug:"过程简化",normalizedTitle:"过程简化",charIndex:2958},{level:2,title:"P2P概念",slug:"p2p概念",normalizedTitle:"p2p概念",charIndex:3132},{level:2,title:"反向链接技术",slug:"反向链接技术",normalizedTitle:"反向链接技术",charIndex:3775},{level:2,title:"基于UDP协议的P2P打洞技术",slug:"基于udp协议的p2p打洞技术",normalizedTitle:"基于udp协议的p2p打洞技术",charIndex:4354},{level:3,title:"原理概述",slug:"原理概述",normalizedTitle:"原理概述",charIndex:4374},{level:4,title:"什么是集中服务器？",slug:"什么是集中服务器",normalizedTitle:"什么是集中服务器？",charIndex:4541},{level:4,title:"P2P的Session建立原理",slug:"p2p的session建立原理",normalizedTitle:"p2p的session建立原理",charIndex:5035},{level:3,title:"典型P2P情景1:两客户端位于同一NAT设备后面",slug:"典型p2p情景1-两客户端位于同一nat设备后面",normalizedTitle:"典型p2p情景1:两客户端位于同一nat设备后面",charIndex:5651},{level:3,title:"典型P2P情景2:两客户端位于不同的NAT设备后面",slug:"典型p2p情景2-两客户端位于不同的nat设备后面",normalizedTitle:"典型p2p情景2:两客户端位于不同的nat设备后面",charIndex:7028},{level:3,title:"典型P2P情景3:两客户端位于两层(或多层)NAT设备之后",slug:"典型p2p情景3-两客户端位于两层-或多层-nat设备之后",normalizedTitle:"典型p2p情景3:两客户端位于两层(或多层)nat设备之后",charIndex:8429},{level:3,title:"现实问题:UDP在空闲状态下的超时",slug:"现实问题-udp在空闲状态下的超时",normalizedTitle:"现实问题:udp在空闲状态下的超时",charIndex:9833},{level:2,title:"基于TCP协议的P2P打洞技术",slug:"基于tcp协议的p2p打洞技术",normalizedTitle:"基于tcp协议的p2p打洞技术",charIndex:10279},{level:3,title:"套接字和TCP端口的重用",slug:"套接字和tcp端口的重用",normalizedTitle:"套接字和tcp端口的重用",charIndex:10572},{level:3,title:"打开P2P的TCP流",slug:"打开p2p的tcp流",normalizedTitle:"打开p2p的tcp流",charIndex:11121},{level:3,title:"从应用程序的角度来看TCP“打洞”",slug:"从应用程序的角度来看tcp-打洞",normalizedTitle:"从应用程序的角度来看tcp“打洞”",charIndex:12263},{level:2,title:"本文小结",slug:"本文小结",normalizedTitle:"本文小结",charIndex:13245},{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:1773}],readingTime:{text:"2 min read",minutes:1.81,time:108600.00000000001,words:362},headersStr:"NAT：网络地址转换 缺点 优点 NAT类型 不同NAT的穿透性 NAT类型判断 过程简化 P2P概念 反向链接技术 基于UDP协议的P2P打洞技术 原理概述 什么是集中服务器？ P2P的Session建立原理 典型P2P情景1:两客户端位于同一NAT设备后面 典型P2P情景2:两客户端位于不同的NAT设备后面 典型P2P情景3:两客户端位于两层(或多层)NAT设备之后 现实问题:UDP在空闲状态下的超时 基于TCP协议的P2P打洞技术 套接字和TCP端口的重用 打开P2P的TCP流 从应用程序的角度来看TCP“打洞” 本文小结 说明",content:"# NAT：网络地址转换\n\n网络地址转换（英语：Network Address Translation，缩写：NAT；又称网络掩蔽、IP掩蔽）在计算机网络中是一种在IP数据包通过路由器或防火墙时重写来源IP地址或目的IP地址的技术。这种技术被普遍使用在有多台主机但只通过一个公有IP地址访问互联网的私有网络中。它是一个方便且得到了广泛应用的技术。当然，NAT也让主机之间的通信变得复杂，导致了通信效率的降低。\n\n\n\n或者：\n\n\n\nNAT缓解了IPV4地址不够用的问题，同时也带来了限制，那就是NAT外部的主机无法主动跟位于NAT内部的主机通信，NAT内部主机想要通信，必须主动和公网的一个IP通信，路由器负责建立一个映射关系，从而实现数据的转发， 这就是NAT的工作原理。\n\n\n# 缺点\n\n * 在一个具有NAT功能的路由器下的主机并没有创建真正的IP地址，并且不能参与一些因特网协议。\n * 端对端连接是被IAB委员会（Internet Architecture Board）支持的核心因特网协议之一，因此有些人据此认为NAT是对公用因特网的一个破坏。\n\n\n# 优点\n\nNAT除了带来方便和代价之外，对全双工连接支持的缺少在一些情况下可以看作是一个有好处的特征而不是一个限制。在一定程度上，NAT依赖于本地网络上的一台机器来初始化和路由器另一边的主机的任何连接，它可以阻止外部网络上的主机的恶意活动。这样就可以阻止网络蠕虫病毒来提高本地系统的可靠性，阻挡恶意浏览来提高本地系统的私密性。很多具有NAT功能的防火墙都是使用这种功能来提供核心保护的。另外，它也为UDP的跨局域网的传输提供了方便。\n\n参考：\n\n * 网络地址转换 - 维基百科，自由的百科全书\n\n\n# NAT类型\n\n基于UDP的P2P应用需要考虑NAT的类型，因为不同的NAT组合的穿透的方式并不一致，有的能通， 有的不能通。一般来讲， NAT可以分为四种类型，分别是:\n\n * 全锥型(Full Cone)。\n * 受限锥型(Restricted Cone)， 或者说是IP受限锥型。\n * 端口受限锥型(Port Restricted Cone), 或者说是IP + PORT受限锥型。\n * 对称型(Symmetric)。\n\n\n\n * 完全圆锥型NAT：这是一种比较宽松的策略，只要建立了内部网络的IP地址和端口与公网IP地址和端口的映射关系，则所有Internet上的主机都可以访问该NAT之后的主机！\n * 受限圆锥型NAT：当且仅当内网主机之前己经向公网主机发送过数据分组，此公网主机才能够向内网主机发送数据分组。\n * 端口受限圆锥型NAT：端口受限圆锥型NAT增加了端口号的限制，当且仅当内网主机之前已经向公网主机发送了数据分组，公网主机才能和此内网主机通信。\n * 对称型NAT：如果同一个内网主机，用相同的内网地址和端口向另一个地址发送数据分组，则会使用不同的映射，而且公网主机只有在接收到数据分组后，才能向与发送分组的内网主机进行通信。可见，对称性NAT是所有NAT类型中限制最为严格的。\n\n其中1,2,3属于同一种类型，都是锥型，区别只是路由器的不同的安全策略。还有些NAT不属于这四种中的任何一种，就不在本文的讨论范围了。\n\n\n# 不同NAT的穿透性\n\n\n\n对称NAT无法穿透，这个说法不正确。对称NAT与全椎NAT、对称NAT 与 ip受限椎型NAT，是可以穿透的，对称NAT与 端口受限、对称NAT与对称NAT，不可穿透。\n\n\n# NAT类型判断\n\nNAT类型的检测：查看主机所在的NAT网关（提供真正的外网IP地址，而不是伪外网IP地址）是属于哪种NAT类型，是否可以打洞成功。\n\n下面就看一下这个整体的判断逻辑，当然在这之前要有一个限定条件，就是在云端一定要部署一个STUN服务。这个STUN服务要有两个IP地址和端口，这两个IP地址的作用稍后会在逻辑判断的过程中介绍。\n\n\n\n流程：\n\n 1.  首先客户端要发送一个ECHO请求给服务端（提供STUN服务），服务端收到请求之后，通过同样的IP地址和端口，给我们返回一个信息回来。\n 2.  那在客户端就要等这个消息回复，设置一个超时器，看每个消息是否可以按时回来，那如果我们发送的数据没有回来，则说明这个UDP是不通的，我们就不要再进行判断了（网络不通，不需要判断）。\n 3.  如果我们收到了服务端的响应，那么就能拿到我们这个客户端出口的公网的IP地址和端口，这个时候要判断一下公网的IP地址和本机的IP地址是否是一致的，如果是一致的，说明本机没有在NAT之后而是一个公网地址。\n 4.  接下来要做进一步判断，判断我们的公网地址是不是一个完全的公网地址，这时我们再发送一个信息到第一个IP地址和端口，那服务端收到这个请求之后使用第二个IP地址和端口给我们回消息，如果我们真是一个完全的公网IP地址和端口的话，那其他任何公网上的主机都可以向我发送请求和回数据，这时候我都是能收到的，那如果我能收到，那就说明就是一个公网的地址，所以我们就没有在NAT之后，就完全可以接收数据了。\n 5.  那如果我们收不到，那说明我是在一个防火墙之后，而且一个对称的防火墙。（可以认为与对称NAT一样）\n 6.  如果我收到的公网的IP与我本地的IP不一致，那就说明我们确实是在NAT之后，那既然是在NAT之后我们就要对各种类型作判断了。\n 7.  这时我们再发送一个请求到服务端的第一个IP地址和端口，而服务端通过第二个IP地址和端口给我们回消息，那这时候我们要判断NAT的类型是不是完全锥型，如果我们出去一个请求，在我们的NAT服务和网关上建立了一个内网地址和外网地址的映射表之后，那其他公网上的主机都可以向我这个公网IP地址（含端口）发送消息，并且我可以接收到，那么这个时候可以收到的话，我们就是一个完全锥型NAT。\n 8.  那么如果收不到的话，需要做进一步的判断，这时候需要（客户端主动发送数据，用来探测对称型）向服务端的第二个IP地址和端口发送数据，那么此时服务端会用同样的IP地址和端口给我们回数据，那么这时候它也会带回一个公网的IP地址来，但是如果我们的出口，就是向第二个IP地址发送了请求带回的外网IP与端口与我们第一发送的请求带回的IP地址和端口（主要是端口）如果是不一样的，那就说明是对称型NAT（对称型NAT每次出去都会在映射表上形成不同的外网IP地址和端口）。\n 9.  如果一样（没有修改映射表，没有新建一个映射关系，即是说明客户端的外网IP和端口不变）就说明是限制型的，限制型分为两种一种是IP限制型，一种是端口限制型，所以还需要做进一步的检测。这个时候客户端主动再向服务端第一个IP地址和端口发送一个请求，如果服务端回信息时使用的是之前回复消息所使用的同一个IP地址，但是不是同一个的端口号，那么这时候我们就可以判断是否可以接收到，如果不能接收到，说明是对端口做了限制，所以是端口限制型的NAT，如果可以收到就说明是一个IP地址限制型的NAT。\n 10. 经过这样一个逻辑判断之后 ，我就可以知道我们自己这台在内网的主机是什么NAT类型了。\n\n\n# 过程简化\n\n 1. 公网还是 NAT：发 1 回 1，内外地址不同是 NAT。\n\n\n\n 2. 是否是对称型NAT：发 1 回 1，发 2 回 2，外部地址不同是对称型。\n\n\n\n 1. 是否是完全锥型NAT：发 1 回 2，收到回应是完全锥型。\n\n\n\n 4. IP限制锥型还是端口限制锥型：发 1 换端口回 1，收到回应是IP限制锥型。\n\n\n\n\n# P2P概念\n\nP2P即点对点通信，或称为对等联网，与传统的服务器客户端模式（如下图所示）有着明显的区别，在即时通讯方案中应用广泛（比如IM应用中的实时音视频通信、实时文件传输甚至文字聊天等）。\n\n\n\nP2P可以是一种通信模式、一种逻辑网络模型、一种技术、甚至一种理念。在P2P网络中，所有通信节点的地位都是对等的，每个节点都扮演着客户机和服务器双重角色，节点之间通过直接通信实现文件信息、处理器运算能力、存储空间等资源的共享。\n\nP2P网络具有分散性、可扩展性、健壮性等特点，这使得P2P技术在信息共享、即时通讯、协同工作、分布式计算、网络存储等领域都有广阔的应用。\n\nNAT技术和P2P技术作为经典的两项网络技术，在现在的网络上有着广泛的应用，P2P主机位于NAT网关后面的情况屡见不鲜。NAT技术虽然在一定程度上解决了IPv4地址短缺的问题，在构建防火墙、保证网络安全方面都发挥了一定的作用，却破坏了端到端的网络通信。NAT阻碍主机进行P2P通信的主要原因是NAT不允许外网主机主动访问内网主机，但是P2P技术却要求通信双方都能主动发起访问，所以要在NAT网络环境中进行有效的P2P通信，就必须采用新的解决方案。\n\nP2P作为一项实用的技术，有很大的优化空间，并且相对于网络设备，基于P2P的应用程序在实现上更为灵活。所以为了兼容NAT，基于P2P的应用程序在开发的时候大多会根据自身特点加入一些穿越NAT的功能以解决上述问题。以下着重介绍几种常见的P2P穿越NAT方案。\n\n\n# 反向链接技术\n\n此种情况是所有P2P场景中最简单的，通信双方中只有一方位于NAT设备之后，它使用一种被称为“反向链接技术”来解决这个问题。大致的原理如下所述。\n\n如图3所示，客户端A位于NAT之后，它通过TCP端口1234连接到服务器的TCP端口1235上，NAT设备为这个连接重新分配了TCP端口62000。客户端B也通过TCP端口1234连接到服务器端口1235上。\n\nA和B从服务器处获知的对方的外网地址二元组{IP地址:端口号}分别为{138.76.29.7:1234}和{155.99.25.11:62000}，它们在各自的本地端口上进行侦听。\n\n由于B 拥有外网IP地址，所以A要主动发起与B的通信，可以直接通过TCP连接到B。\n\n但如果B尝试通过TCP主动连接到A进行P2P通信，则会失败，原因是A位于NAT设备后，虽然B发出的TCP SYN请求能够到达NAT设备的端口62000，但NAT设备会拒绝这个连接请求。\n\n要想与Client A通信， B不是直接向A发起连接，而是通过服务器给A转发一个连接请求，反过来请求A连接到B（即进行反向链接），A在收到从服务器转发过来的请求以后，会主动向B发起一个TCP的连接请求，这样在NAT设备上就会建立起关于这个连接的相关表项，使A和B之间能够正常通信，从而建立起它们之间的TCP连接。\n\n\n\n\n# 基于UDP协议的P2P打洞技术\n\n\n# 原理概述\n\nUDP打洞技术是通过中间服务器的协助在各自的NAT网关上建立相关的表项，使P2P连接的双方发送的报文能够直接穿透对方的NAT网关，从而实现P2P客户端互连。如果两台位于NAT设备后面的P2P客户端希望在自己的NAT网关上打个洞，那么他们需要一个协助者——集中服务器，并且还需要一种用于打洞的Session建立机制。\n\n# 什么是集中服务器？\n\n集中服务器本质上是一台被设置在公网上的服务器，建立P2P的双方都可以直接访问到这台服务器。位于NAT网关后面的客户端A和B都可以与一台已知的集中服务器建立连接，并通过这台集中服务器了解对方的信息并中转各自的信息。\n\n同时集中服务器的另一个重要作用在于判断某个客户端是否在NAT网关之后。具体的方法是：\n\n一个客户端在集中服务器上登陆的时候，服务器记录下该客户端的两对地址二元组信息{IP地址:UDP端口}，一对是该客户端与集中服务器进行通信的自身的IP地址和端口号，另一对是集中服务器记录下的由服务器“观察”到的该客户端实际与自己通信所使用的IP地址和端口号（NAT网关的信息）。我们可以把前一对地址二元组看作是客户端的内网IP地址和端口号，把后一对地址二元组看作是客户端的内网IP地址和端口号经过NAT转换后的外网IP地址和端口号。\n\n集中服务器可以从客户端的登陆消息中得到该客户端的内网相关信息，还可以通过登陆消息的IP头和UDP头得到该客户端的外网相关信息。\n\n如果该客户端不是位于NAT设备后面，那么采用上述方法得到的两对地址二元组信息是完全相同的。\n\n# P2P的Session建立原理\n\n假定客户端A要发起对客户端B的直接连接，具体的“打洞”过程如下：\n\n * A最初不知道如何向客户端B发起连接，于是A向集中服务器发送消息，请求集中服务器帮助建立与客户端B的UDP连接。\n * 集中服务器将含有B的外网和内网的地址二元组发给A，同时，集中服务器将包含有A的外网和内网的地址二元组信息的消息也发给B。这样一来， A与B就都知道对方外网和内网的地址二元组信息了。\n * 当A收到由集中服务器发来的包含B的外网和内网的地址二元组信息后， A开始向B的地址二元组发送UDP数据包，并且A会自动锁定第一个给出响应的B的地址二元组。同理，当B收到由集中服务器发来的A的外网和内网地址二元组信息后，也会开始向A的外网和内网的地址二元组发送UDP数据包，并且自动锁定第一个得到A回应的地址二元组。由于A与B互相向对方发送UDP数据包的操作是异步的，所以A和B发送数据包的时间先后并没有时序要求。\n\n下面来看下这三者之间是如何进行UDP打洞的。在这我们分三种具体情景来讨论：\n\n * 第一种是最简单的一种情景，两个客户端都位于同一个NAT设备后面，即位于同一内网中；\n * 第二种是最普遍的一种情景，两个客户端分别位于不同的NAT设备后面，分属不同的内网；\n * 第三种是客户端位于两层NAT设备之后，通常最上层的NAT是由网络提供商提供的，第二层NAT是家用的NAT路由器之类的设备提供的。\n\n\n# 典型P2P情景1:两客户端位于同一NAT设备后面\n\n这是最简单的一种情况（如图所示）：客户端A和B分别与集中服务器建立UDP连接，经过NA\n\n\n\n * client A与Server S建立UDP连接，公共NAT（155.99.25.11）给client A分配一个公网端口62000；\n * client B与Server S建立UDP连接，公共NAT（155.99.25.11）给client B分配一个公网端口62005；\n * client A通过Server S发送一个消息要求连接client B，S给A回应B的公网和私网地址，并转发A的公网和私网地址给B；\n * A和B根据获取的地址试图直接发送UDP数据报文；是否成功取决于NAT设备是否支持hairpin translation（端口回流）。打开端口回流相当于与client A的数据经过NAT设备转发后才到达client B，即从外网NAT接口绕了一圈（不会去服务器）再访问到同一个子网里的client B。（优点是可以防止内部攻击）\n\n详细流程：\n\n * 当A向集中服务器发出消息请求与B进行连接，集中服务器将B的外网地址二元组以及内网地址二元组发给A，同时把A的外网以及内网的地址二元组信息发给B。\n * A和B发往对方公网地址二元组信息的UDP数据包不一定会被对方收到，这取决于当前的NAT设备是否支持不同端口之间的UDP数据包能否到达（即Hairpin转换特性），\n * 无论如何A与B发往对方内网的地址二元组信息的UDP数据包是一定可以到达的，内网数据包不需要路由，且速度更快。A与B推荐采用内网的地址二元组信息进行常规的P2P通信。\n * 假定NAT设备支持 Hairpin 转换，P2P双方也应忽略与内网地址二元组的连接，如果A 和B采用外网的地址二元组做为P2P通信的连接，这势必会造成数据包无谓地经过NAT设备，这是一种对资源的浪费。就目前的网络情况而言，应用程序在“打洞”的时候，最好还是把外网和内网的地址二元组都尝试一下。如果都能成功，优先以内网地址进行连接。\n\n总结:\n\n 1. A、B都获取了对端的内网、外网地址。\n 2. A、B可以直接通过内网地址直接通信（因为在同一个NAT网关后面，通过内网接口直接通信（直接通过交换机转发通信），效率高）。\n 3. 如果NAT网关支持Hairpin技术，就表示A、B通信可以通过NAT的外网接口进行通信（A->NAT内网接口1->NAT外网接口1->NAT外网接口2->NAT内网接口2->B),通过外网地址的访问可以防止内部攻击。\n\n扩展\n\n什么是Hairpin技术？\n\nHairpin技术又被称为Hairpin NAT、Loopback NAT或Hairpin Translation。Hairpin技术需要NAT网关支持，它能够让两台位于同一台NAT网关后面的主机，通过对方的公网地址和端口相互访问，NAT网关会根据一系列规则，将对内部主机发往其NAT公网IP地址的报文进行转换，并从私网接口发送给目标主机。目前有很多NAT设备不支持该技术，这种情况下，NAT网关在一些特定场合下将会阻断P2P穿越NAT的行为，打洞的尝试是无法成功的。好在现在已经有越来越多的NAT设备商开始加入到对该转换的支持中来。\n\n\n# 典型P2P情景2:两客户端位于不同的NAT设备后面\n\n这是最普遍的一种情况（如图5所示）：客户端A与B经由各自的NAT设备与集中服务器建立UDP连接。\n\n * 客户端A——>本地IP:10.0.0.1，本地端口:4321，外网IP:155.99.25.11，外网端口:62000\n * 客户端B——>本地IP:10.1.1.3，本地端口:4321，外网IP:138.76.29.7，外网端口:31000\n\n\n\n流程：\n\n * 注册内外网地址二元组：在A向服务器发送的登陆消息中，包含有A的内网地址二元组信息，即10.0.0.1:4321；服务器会记录下A的内网地址二元组信息，同时会把自己观察到的A的外网地址二元组信息记录下来。同理，服务器也会记录下B的内网地址二元组信息和由服务器观察到的客户端B的外网地址二元组信息。\n * 交互内外网地址二元组：无论A与B二者中的任何一方向服务器发送P2P连接请求，服务器都会将其记录下来的上述的外网和内网地址二元组发送给A或B。\n * A和B分属不同的内网，它们的内网地址在外网中是没有路由的，所以发往各自内网地址的UDP数据包会发送到错误的主机或者根本不存在的主机上。（也会同情景1一样，发送到内网地址中，但是这个地址可能错误/不存在，即便地址存在，对方也不会接收这个数据）\n * 当A的第一个消息发往B的外网地址（如图所示），该消息途经A的NAT设备，并在该设备上生成一个会话表项，该会话的源地址二元组信息是{10.0.0.1:4321}，和A与服务器建立连接的时候NAT生成的源地址二元组信息一样，但它的目的地址是B的外网地址。\n * 在A的NAT设备支持保留A的内网地址二元组信息的情况下，所有来自A的源地址二元组信息为{10.0.0.1:4321}的数据包都沿用A与集中服务器事先建立起来的会话，这些数据包的外网地址二元组信息均被映射为{155.99.25.11:62000}。\n * A向B的外网地址发送消息的过程就是“打洞”的过程，从A的内网的角度来看应为从{10.0.0.1:4321}发往{138.76.29.7:31000}，从A在其NAT设备上建立的会话来看，是从{155.99.25.11:62000}发到{138.76.29.7:31000}。\n * 如果A发给B的外网地址二元组的消息包在B向A发送消息包之前到达B的NAT设备，B的NAT设备会认为A发过来的消息是未经授权的外网消息，并丢弃该数据包。（但是A对应的NAT建立了与B的映射，后面B发送过来的数据是可以通过的）\n * B发往A的消息包也会在B的NAT设备上建立一个{10.1.1.3:4321，155.99.25.11:62000}的会话（通常也会沿用B与集中服务器连接时建立的会话，只是该会话现在不仅接受由服务器发给B的消息，还可以接受从A的NAT设备{155.99.25.11:6200}发来的消息）。\n * 一旦A与B都向对方的NAT设备在外网上的地址二元组发送了数据包，就打开了A与B之间的“洞”，A与B向对方的外网地址发送数据，等效为向对方的客户端直接发送UDP数据包了。\n * 一旦应用程序确认已经可以通过往对方的外网地址发送数据包的方式让数据包到达NAT后面的目的应用程序，程序会自动停止继续发送用于“打洞”的数据包，转而开始真正的P2P数据传输。\n\n\n# 典型P2P情景3:两客户端位于两层(或多层)NAT设备之后\n\n此种情景最典型的部署情况就像这样：最上层的NAT设备通常是由网络提供商（ISP）提供，下层NAT设备是家用路由器。\n\n如下图所示：假定NAT C是由ISP提供的NAT设备，NAT C提供将多个用户节点映射到有限的几个公网IP的服务，NAT A和NAT B作为NAT C的内网节点将把用户的内部网络接入NAT C的内网，用户的内部网络就可以经由NAT C访问公网了。\n\n从这种拓扑结构上来看，只有服务器与NAT C是真正拥有公网可路由IP地址的设备，而NAT A和NAT B所使用的公网IP地址，实际上是由ISP服务提供商设定的（相对于NAT C而言）内网地址（我们将这种由ISP提供的内网地址称之为伪公网地址）。\n\n同理，隶属于NAT A与NAT B的客户端，它们处于NAT A，NAT B的内网，以此类推，客户端可以放到到多层NAT设备后面。\n\n客户端A和客户端B发起对服务器S的连接的时候，就会依次在NAT A和NAT B上建立向外的Session，而NAT A、NAT B要联入公网的时候，会在NAT C上再建立向外的Session。\n\n\n\n现在假定客户端A和B希望通过UDP“打洞”完成两个客户端的P2P直连。最优化的路由策略是客户端A向客户端B的“伪公网”IP上发送数据包，即ISP服务提供商指定的内网IP，NAT B的“伪”公网地址二元组，{10.0.1.2:55000}。\n\n由于从服务器的角度只能观察到真正的公网地址，也就是NAT A，NAT B在NAT C建立session的真正的公网地址{155.99.25.11:62000}以及{155.99.25.11:62005}，非常不幸的是客户端A与客户端B是无法通过服务器知道这些“伪”公网的地址，而且即使客户端A和B通过某种手段可以得到NAT A和NAT B的“伪”公网地址，我们仍然不建议采用上述的“最优化”的打洞方式，这是因为这些地址是由ISP服务提供商提供的或许会存在与客户端本身所在的内网地址重复的可能性（例如:NAT A的内网的IP地址域恰好与NAT A在NAT C的“伪”公网IP地址域重复，这样就会导致打洞数据包无法发出的问题）。因此客户端别无选择，只能使用由公网服务器观察到的A，B的公网地址二元组进行“打洞”操作，用于“打洞”的数据包将由NAT C进行转发。\n\n流程：\n\n * 当客户端A向客户端B的公网地址二元组{155.99.25.11:62005}发送UDP数据包的时候，NAT A首先把数据包的源地址二元组由A的内网地址二元组{10.0.0.1:4321}转换为“伪”公网地址二元组{10.0.1.1:45000}，现在数据包到了NAT C，NAT C应该可以识别出来该数据包是要发往自身转换过的公网地址二元组，如果NAT C可以给出“合理”响应的话，NAT C将把该数据包的源地址二元组改为{155.99.25.11:62000}，目的地址二元组改为{10.0.1.2:55000}，即NAT B的“伪”公网地址二元组，NAT B最后会将收到的数据包发往客户端B。\n * 同样，由B发往A的数据包也会经过类似的过程。目前也有很多NAT设备不支持类似这样的“Hairpin转换”，但是已经有越来越多的NAT设备商开始加入对该转换的支持中来。\n\n\n# 现实问题:UDP在空闲状态下的超时\n\n当然，从应用的角度上来说，在完成打洞过程的同时，还有一些技术问题需要解决，如UDP在空闲状态下的超时问题。\n\n由于UDP转换协议提供的“洞”不是绝对可靠的，多数NAT设备内部都有一个UDP转换的空闲状态计时器，如果在一段时间内没有UDP数据通信，NAT设备会关掉由“打洞”过程打出来的“洞”。如果P2P应用程序希望“洞”的存活时间不受NAT网关的限制，就最好在穿越NAT以后设定一个穿越的有效期。\n\n对于有效期目前没有标准值，它与NAT设备内部的配置有关，某些设备上最短的只有20秒左右。在这个有效期内，即使没有P2P数据包需要传输，应用程序为了维持该“洞”可以正常工作，也必须向对方发送“打洞”心跳包。\n\n这个心跳包是需要双方应用程序都发送的，只有一方发送不会维持另一方的Session正常工作。除了频繁发送“打洞”心跳包以外，还有一个方法就是在当前的“洞”超时之前，P2P客户端双方重新“打洞”，丢弃原有的“洞”，这也不失为一个有效的方法。\n\n\n# 基于TCP协议的P2P打洞技术\n\n建立穿越NAT设备的P2P的TCP连接只比UDP复杂一点点，TCP协议的“打洞”从协议层来看是与UDP的“打洞”过程非常相似的。尽管如此，基于TCP协议的打洞至今为止还没有被很好的理解，这也造成了的对其提供支持的NAT设备不是很多。在NAT设备支持的前提下，基于TCP的“打洞”技术实际上与基于UDP的“打洞”技术一样快捷、可靠。实际上，只要NAT设备支持的话，基于TCP的P2P技术的健壮性将比基于UDP技术的更强一些，因为TCP协议的状态机给出了一种标准的方法来精确的获取某个TCP session的生命期，而UDP协议则无法做到这一点。\n\n\n# 套接字和TCP端口的重用\n\n实现基于TCP协议的P2P打洞过程中，最主要的问题不是来自于TCP协议，而是来自于应用程序的API接口。这是由于标准的伯克利(Berkeley)套接字的API是围绕着构建客户端/服务器程序而设计的，API允许TCP流套接字通过调用connect()函数来建立向外的连接，或者通过listen()和accept函数接受来自外部的连接，但是，API不提供类似UDP那样的，同一个端口既可以向外连接，又能够接受来自外部的连接。而且更糟的是，TCP的套接字通常仅允许建立1对1的响应，即应用程序在将一个套接字绑定到本地的一个端口以后，任何试图将第二个套接字绑定到该端口的操作都会失败。\n\n为了让TCP“打洞”能够顺利工作，我们需要使用一个本地的TCP端口来监听来自外部的TCP连接，同时建立多个向外的TCP连接。幸运的是，所有的主流操作系统都能够支持特殊的TCP套接字参数，通常叫做·“SO_REUSEADDR”，该参数允许应用程序将多个套接字绑定到本地的一个地址二元组（只要所有要绑定的套接字都设置了SO_REUSEADDR参数即可）。BSD系统引入了SO_REUSEPORT参数，该参数用于区分端口重用还是地址重用，在这样的系统里面，上述所有的参数必须都设置才行。\n\n\n# 打开P2P的TCP流\n\n假定客户端A希望建立与B的TCP连接。我们像通常一样假定A和B已经与公网上的已知服务器建立了TCP连接。服务器记录下来每个接入的客户端的公网和内网的地址二元组，如同为UDP服务的时候一样。\n\n从协议层来看，TCP“打洞”与UDP“打洞”是几乎完全相同的过程：\n\n * 客户端A使用其与服务器的连接向服务器发送请求，要求服务器协助其连接客户端B；\n * 服务器将B的公网和内网的TCP地址的二元组信息返回给A，同时，服务器将A的公网和内网的地址二元组也发送给B；\n * 客户端A和B使用连接服务器的端口异步地发起向对方的公网、内网地址二元组的TCP连接，同时监听各自的本地TCP端口是否有外部的连接联入；\n * A和B开始等待向外的连接是否成功，检查是否有新连接联入。如果向外的连接由于某种网络错误而失败，如：“连接被重置”或者“节点无法访问”，客户端只需要延迟一小段时间（例如延迟一秒钟），然后重新发起连接即可，延迟的时间和重复连接的次数可以由应用程序编写者来确定；\n * TCP连接建立起来以后，客户端之间应该开始鉴权操作，确保目前联入的连接就是所希望的连接。如果鉴权失败，客户端将关闭连接，并且继续等待新的连接联入。客户端通常采用“先入为主”的策略，只接受第一个通过鉴权操作的客户端，然后将进入P2P通信过程不再继续等待是否有新的连接联入。\n\n\n\n与UDP不同的是，因为使用UDP协议的每个客户端只需要一个套接字即可完成与服务器的通信，而TCP客户端必须处理多个套接字绑定到同一个本地TCP端口的问题，如图7所示。现在来看实际中常见的一种情景，A与B分别位于不同的NAT设备后面，如图5所示，并且假定图中的端口号是TCP协议的端口号，而不是UDP的端口号。图中向外的连接代表A和B向对方的内网地址二元组发起的连接，这些连接或许会失败或者无法连接到对方。如同使用UDP协议进行“打洞”操作遇到的问题一样，TCP的“打洞”操作也会遇到内网的IP与“伪”公网IP重复造成连接失败或者错误连接之类的问题。\n\n客户端向彼此公网地址二元组发起连接的操作，会使得各自的NAT设备打开新的“洞”允许A与B的TCP数据通过。如果NAT设备支持TCP“打洞”操作的话，一个在客户端之间的基于TCP协议的流通道就会自动建立起来。如果A向B发送的第一个SYN包发到了B的NAT设备，而B在此前没有向A发送SYN包，B的NAT设备会丢弃这个包，这会引起A的“连接失败”或“无法连接”问题。而此时，由于A已经向B发送过SYN包，B发往A的SYN包将被看作是由A发往B的包的回应的一部分，所以B发往A的SYN包会顺利地通过A的NAT设备，到达A，从而建立起A与B的P2P连接。\n\n\n# 从应用程序的角度来看TCP“打洞”\n\n从应用程序的角度来看，在进行TCP“打洞”的时候都发生了什么呢？假定A首先向B发出SYN包，该包发往B的公网地址二元组，并且被B的NAT设备丢弃，但是B发往A的公网地址二元组的SYN包则通过A的NAT到达了A，然后，会发生以下的两种结果中的一种，具体是哪一种取决于操作系统对TCP协议的实现：\n\n * A的TCP实现会发现收到的SYN包就是其发起连接并希望联入的B的SYN包，通俗一点来说就是“说曹操，曹操到”的意思，本来A要去找B，结果B自己找上门来了。A的TCP协议栈因此会把B作为A向B发起连接connect的一部分，并认为连接已经成功。程序A调用的异步connect()函数将成功返回，A的listen()等待从外部联入的函数将没有任何反映。此时，B联入A的操作在A程序的内部被理解为A联入B连接成功，并且A开始使用这个连接与B开始P2P通信。 由于收到的SYN包中不包含A需要的ACK数据，因此，A的TCP将用SYN-ACK包回应B的公网地址二元组，并且将使用先前A发向B的SYN包一样的序列号。一旦B的TCP收到由A发来的SYN-ACK包，则把自己的ACK包发给A，然后两端建立起TCP连接。简单的说，第一种，就是即使A发往B的SYN包被B的NAT丢弃了，但是由于B发往A的包到达了A。结果是，A认为自己连接成功了，B也认为自己连接成功了，不管是谁成功了，总之连接是已经建立起来了。\n\n * 另外一种结果是，A的TCP实现没有像（1）中所讲的那么“智能”，它没有发现现在联入的B就是自己希望联入的。就好比在机场接人，明明遇到了自己想要接的人却不认识，误认为是其他的人，安排别人给接走了，后来才知道是自己错过了机会，但是无论如何，人已经接到了任务已经完成了。然后，A通过常规的listen()函数和accept()函数得到与B的连接，而由A发起的向B的公网地址二元组的连接会以失败告终。尽管A向B的连接失败，A仍然得到了B发起的向A的连接，等效于A与B之间已经联通，不管中间过程如何，A与B已经连接起来了，结果是A和B的基于TCP协议的P2P连接已经建立起来了。\n\n第一种结果适用于基于BSD的操作系统对于TCP的实现，而第二种结果更加普遍一些，多数Linux和Windows系统都会按照第二种结果来处理。\n\n\n# 本文小结\n\n在IP地址极度短缺的今天，NAT几乎已经是无所不在的一项技术了，以至于现在任何一项新技术都不得不考虑和NAT的兼容。作为当下应用最广泛的技术之一，P2P技术也必然要面对NAT这个障碍。\n\n打洞技术看起来是一项近似乎蛮干的技术，却不失为一种有效的技术手段。在集中服务器的帮助下，P2P的双方利用端口预测的技术在NAT网关上打出通道，从而实现NAT穿越，解决了NAT对于P2P的阻隔，为P2P技术在网络中更广泛的推广作出了非常大的贡献。\n\n\n# 说明\n\n本文转载自P2P技术详解(二)：P2P中的NAT穿越(打洞)方案详解。",normalizedContent:"# nat：网络地址转换\n\n网络地址转换（英语：network address translation，缩写：nat；又称网络掩蔽、ip掩蔽）在计算机网络中是一种在ip数据包通过路由器或防火墙时重写来源ip地址或目的ip地址的技术。这种技术被普遍使用在有多台主机但只通过一个公有ip地址访问互联网的私有网络中。它是一个方便且得到了广泛应用的技术。当然，nat也让主机之间的通信变得复杂，导致了通信效率的降低。\n\n\n\n或者：\n\n\n\nnat缓解了ipv4地址不够用的问题，同时也带来了限制，那就是nat外部的主机无法主动跟位于nat内部的主机通信，nat内部主机想要通信，必须主动和公网的一个ip通信，路由器负责建立一个映射关系，从而实现数据的转发， 这就是nat的工作原理。\n\n\n# 缺点\n\n * 在一个具有nat功能的路由器下的主机并没有创建真正的ip地址，并且不能参与一些因特网协议。\n * 端对端连接是被iab委员会（internet architecture board）支持的核心因特网协议之一，因此有些人据此认为nat是对公用因特网的一个破坏。\n\n\n# 优点\n\nnat除了带来方便和代价之外，对全双工连接支持的缺少在一些情况下可以看作是一个有好处的特征而不是一个限制。在一定程度上，nat依赖于本地网络上的一台机器来初始化和路由器另一边的主机的任何连接，它可以阻止外部网络上的主机的恶意活动。这样就可以阻止网络蠕虫病毒来提高本地系统的可靠性，阻挡恶意浏览来提高本地系统的私密性。很多具有nat功能的防火墙都是使用这种功能来提供核心保护的。另外，它也为udp的跨局域网的传输提供了方便。\n\n参考：\n\n * 网络地址转换 - 维基百科，自由的百科全书\n\n\n# nat类型\n\n基于udp的p2p应用需要考虑nat的类型，因为不同的nat组合的穿透的方式并不一致，有的能通， 有的不能通。一般来讲， nat可以分为四种类型，分别是:\n\n * 全锥型(full cone)。\n * 受限锥型(restricted cone)， 或者说是ip受限锥型。\n * 端口受限锥型(port restricted cone), 或者说是ip + port受限锥型。\n * 对称型(symmetric)。\n\n\n\n * 完全圆锥型nat：这是一种比较宽松的策略，只要建立了内部网络的ip地址和端口与公网ip地址和端口的映射关系，则所有internet上的主机都可以访问该nat之后的主机！\n * 受限圆锥型nat：当且仅当内网主机之前己经向公网主机发送过数据分组，此公网主机才能够向内网主机发送数据分组。\n * 端口受限圆锥型nat：端口受限圆锥型nat增加了端口号的限制，当且仅当内网主机之前已经向公网主机发送了数据分组，公网主机才能和此内网主机通信。\n * 对称型nat：如果同一个内网主机，用相同的内网地址和端口向另一个地址发送数据分组，则会使用不同的映射，而且公网主机只有在接收到数据分组后，才能向与发送分组的内网主机进行通信。可见，对称性nat是所有nat类型中限制最为严格的。\n\n其中1,2,3属于同一种类型，都是锥型，区别只是路由器的不同的安全策略。还有些nat不属于这四种中的任何一种，就不在本文的讨论范围了。\n\n\n# 不同nat的穿透性\n\n\n\n对称nat无法穿透，这个说法不正确。对称nat与全椎nat、对称nat 与 ip受限椎型nat，是可以穿透的，对称nat与 端口受限、对称nat与对称nat，不可穿透。\n\n\n# nat类型判断\n\nnat类型的检测：查看主机所在的nat网关（提供真正的外网ip地址，而不是伪外网ip地址）是属于哪种nat类型，是否可以打洞成功。\n\n下面就看一下这个整体的判断逻辑，当然在这之前要有一个限定条件，就是在云端一定要部署一个stun服务。这个stun服务要有两个ip地址和端口，这两个ip地址的作用稍后会在逻辑判断的过程中介绍。\n\n\n\n流程：\n\n 1.  首先客户端要发送一个echo请求给服务端（提供stun服务），服务端收到请求之后，通过同样的ip地址和端口，给我们返回一个信息回来。\n 2.  那在客户端就要等这个消息回复，设置一个超时器，看每个消息是否可以按时回来，那如果我们发送的数据没有回来，则说明这个udp是不通的，我们就不要再进行判断了（网络不通，不需要判断）。\n 3.  如果我们收到了服务端的响应，那么就能拿到我们这个客户端出口的公网的ip地址和端口，这个时候要判断一下公网的ip地址和本机的ip地址是否是一致的，如果是一致的，说明本机没有在nat之后而是一个公网地址。\n 4.  接下来要做进一步判断，判断我们的公网地址是不是一个完全的公网地址，这时我们再发送一个信息到第一个ip地址和端口，那服务端收到这个请求之后使用第二个ip地址和端口给我们回消息，如果我们真是一个完全的公网ip地址和端口的话，那其他任何公网上的主机都可以向我发送请求和回数据，这时候我都是能收到的，那如果我能收到，那就说明就是一个公网的地址，所以我们就没有在nat之后，就完全可以接收数据了。\n 5.  那如果我们收不到，那说明我是在一个防火墙之后，而且一个对称的防火墙。（可以认为与对称nat一样）\n 6.  如果我收到的公网的ip与我本地的ip不一致，那就说明我们确实是在nat之后，那既然是在nat之后我们就要对各种类型作判断了。\n 7.  这时我们再发送一个请求到服务端的第一个ip地址和端口，而服务端通过第二个ip地址和端口给我们回消息，那这时候我们要判断nat的类型是不是完全锥型，如果我们出去一个请求，在我们的nat服务和网关上建立了一个内网地址和外网地址的映射表之后，那其他公网上的主机都可以向我这个公网ip地址（含端口）发送消息，并且我可以接收到，那么这个时候可以收到的话，我们就是一个完全锥型nat。\n 8.  那么如果收不到的话，需要做进一步的判断，这时候需要（客户端主动发送数据，用来探测对称型）向服务端的第二个ip地址和端口发送数据，那么此时服务端会用同样的ip地址和端口给我们回数据，那么这时候它也会带回一个公网的ip地址来，但是如果我们的出口，就是向第二个ip地址发送了请求带回的外网ip与端口与我们第一发送的请求带回的ip地址和端口（主要是端口）如果是不一样的，那就说明是对称型nat（对称型nat每次出去都会在映射表上形成不同的外网ip地址和端口）。\n 9.  如果一样（没有修改映射表，没有新建一个映射关系，即是说明客户端的外网ip和端口不变）就说明是限制型的，限制型分为两种一种是ip限制型，一种是端口限制型，所以还需要做进一步的检测。这个时候客户端主动再向服务端第一个ip地址和端口发送一个请求，如果服务端回信息时使用的是之前回复消息所使用的同一个ip地址，但是不是同一个的端口号，那么这时候我们就可以判断是否可以接收到，如果不能接收到，说明是对端口做了限制，所以是端口限制型的nat，如果可以收到就说明是一个ip地址限制型的nat。\n 10. 经过这样一个逻辑判断之后 ，我就可以知道我们自己这台在内网的主机是什么nat类型了。\n\n\n# 过程简化\n\n 1. 公网还是 nat：发 1 回 1，内外地址不同是 nat。\n\n\n\n 2. 是否是对称型nat：发 1 回 1，发 2 回 2，外部地址不同是对称型。\n\n\n\n 1. 是否是完全锥型nat：发 1 回 2，收到回应是完全锥型。\n\n\n\n 4. ip限制锥型还是端口限制锥型：发 1 换端口回 1，收到回应是ip限制锥型。\n\n\n\n\n# p2p概念\n\np2p即点对点通信，或称为对等联网，与传统的服务器客户端模式（如下图所示）有着明显的区别，在即时通讯方案中应用广泛（比如im应用中的实时音视频通信、实时文件传输甚至文字聊天等）。\n\n\n\np2p可以是一种通信模式、一种逻辑网络模型、一种技术、甚至一种理念。在p2p网络中，所有通信节点的地位都是对等的，每个节点都扮演着客户机和服务器双重角色，节点之间通过直接通信实现文件信息、处理器运算能力、存储空间等资源的共享。\n\np2p网络具有分散性、可扩展性、健壮性等特点，这使得p2p技术在信息共享、即时通讯、协同工作、分布式计算、网络存储等领域都有广阔的应用。\n\nnat技术和p2p技术作为经典的两项网络技术，在现在的网络上有着广泛的应用，p2p主机位于nat网关后面的情况屡见不鲜。nat技术虽然在一定程度上解决了ipv4地址短缺的问题，在构建防火墙、保证网络安全方面都发挥了一定的作用，却破坏了端到端的网络通信。nat阻碍主机进行p2p通信的主要原因是nat不允许外网主机主动访问内网主机，但是p2p技术却要求通信双方都能主动发起访问，所以要在nat网络环境中进行有效的p2p通信，就必须采用新的解决方案。\n\np2p作为一项实用的技术，有很大的优化空间，并且相对于网络设备，基于p2p的应用程序在实现上更为灵活。所以为了兼容nat，基于p2p的应用程序在开发的时候大多会根据自身特点加入一些穿越nat的功能以解决上述问题。以下着重介绍几种常见的p2p穿越nat方案。\n\n\n# 反向链接技术\n\n此种情况是所有p2p场景中最简单的，通信双方中只有一方位于nat设备之后，它使用一种被称为“反向链接技术”来解决这个问题。大致的原理如下所述。\n\n如图3所示，客户端a位于nat之后，它通过tcp端口1234连接到服务器的tcp端口1235上，nat设备为这个连接重新分配了tcp端口62000。客户端b也通过tcp端口1234连接到服务器端口1235上。\n\na和b从服务器处获知的对方的外网地址二元组{ip地址:端口号}分别为{138.76.29.7:1234}和{155.99.25.11:62000}，它们在各自的本地端口上进行侦听。\n\n由于b 拥有外网ip地址，所以a要主动发起与b的通信，可以直接通过tcp连接到b。\n\n但如果b尝试通过tcp主动连接到a进行p2p通信，则会失败，原因是a位于nat设备后，虽然b发出的tcp syn请求能够到达nat设备的端口62000，但nat设备会拒绝这个连接请求。\n\n要想与client a通信， b不是直接向a发起连接，而是通过服务器给a转发一个连接请求，反过来请求a连接到b（即进行反向链接），a在收到从服务器转发过来的请求以后，会主动向b发起一个tcp的连接请求，这样在nat设备上就会建立起关于这个连接的相关表项，使a和b之间能够正常通信，从而建立起它们之间的tcp连接。\n\n\n\n\n# 基于udp协议的p2p打洞技术\n\n\n# 原理概述\n\nudp打洞技术是通过中间服务器的协助在各自的nat网关上建立相关的表项，使p2p连接的双方发送的报文能够直接穿透对方的nat网关，从而实现p2p客户端互连。如果两台位于nat设备后面的p2p客户端希望在自己的nat网关上打个洞，那么他们需要一个协助者——集中服务器，并且还需要一种用于打洞的session建立机制。\n\n# 什么是集中服务器？\n\n集中服务器本质上是一台被设置在公网上的服务器，建立p2p的双方都可以直接访问到这台服务器。位于nat网关后面的客户端a和b都可以与一台已知的集中服务器建立连接，并通过这台集中服务器了解对方的信息并中转各自的信息。\n\n同时集中服务器的另一个重要作用在于判断某个客户端是否在nat网关之后。具体的方法是：\n\n一个客户端在集中服务器上登陆的时候，服务器记录下该客户端的两对地址二元组信息{ip地址:udp端口}，一对是该客户端与集中服务器进行通信的自身的ip地址和端口号，另一对是集中服务器记录下的由服务器“观察”到的该客户端实际与自己通信所使用的ip地址和端口号（nat网关的信息）。我们可以把前一对地址二元组看作是客户端的内网ip地址和端口号，把后一对地址二元组看作是客户端的内网ip地址和端口号经过nat转换后的外网ip地址和端口号。\n\n集中服务器可以从客户端的登陆消息中得到该客户端的内网相关信息，还可以通过登陆消息的ip头和udp头得到该客户端的外网相关信息。\n\n如果该客户端不是位于nat设备后面，那么采用上述方法得到的两对地址二元组信息是完全相同的。\n\n# p2p的session建立原理\n\n假定客户端a要发起对客户端b的直接连接，具体的“打洞”过程如下：\n\n * a最初不知道如何向客户端b发起连接，于是a向集中服务器发送消息，请求集中服务器帮助建立与客户端b的udp连接。\n * 集中服务器将含有b的外网和内网的地址二元组发给a，同时，集中服务器将包含有a的外网和内网的地址二元组信息的消息也发给b。这样一来， a与b就都知道对方外网和内网的地址二元组信息了。\n * 当a收到由集中服务器发来的包含b的外网和内网的地址二元组信息后， a开始向b的地址二元组发送udp数据包，并且a会自动锁定第一个给出响应的b的地址二元组。同理，当b收到由集中服务器发来的a的外网和内网地址二元组信息后，也会开始向a的外网和内网的地址二元组发送udp数据包，并且自动锁定第一个得到a回应的地址二元组。由于a与b互相向对方发送udp数据包的操作是异步的，所以a和b发送数据包的时间先后并没有时序要求。\n\n下面来看下这三者之间是如何进行udp打洞的。在这我们分三种具体情景来讨论：\n\n * 第一种是最简单的一种情景，两个客户端都位于同一个nat设备后面，即位于同一内网中；\n * 第二种是最普遍的一种情景，两个客户端分别位于不同的nat设备后面，分属不同的内网；\n * 第三种是客户端位于两层nat设备之后，通常最上层的nat是由网络提供商提供的，第二层nat是家用的nat路由器之类的设备提供的。\n\n\n# 典型p2p情景1:两客户端位于同一nat设备后面\n\n这是最简单的一种情况（如图所示）：客户端a和b分别与集中服务器建立udp连接，经过na\n\n\n\n * client a与server s建立udp连接，公共nat（155.99.25.11）给client a分配一个公网端口62000；\n * client b与server s建立udp连接，公共nat（155.99.25.11）给client b分配一个公网端口62005；\n * client a通过server s发送一个消息要求连接client b，s给a回应b的公网和私网地址，并转发a的公网和私网地址给b；\n * a和b根据获取的地址试图直接发送udp数据报文；是否成功取决于nat设备是否支持hairpin translation（端口回流）。打开端口回流相当于与client a的数据经过nat设备转发后才到达client b，即从外网nat接口绕了一圈（不会去服务器）再访问到同一个子网里的client b。（优点是可以防止内部攻击）\n\n详细流程：\n\n * 当a向集中服务器发出消息请求与b进行连接，集中服务器将b的外网地址二元组以及内网地址二元组发给a，同时把a的外网以及内网的地址二元组信息发给b。\n * a和b发往对方公网地址二元组信息的udp数据包不一定会被对方收到，这取决于当前的nat设备是否支持不同端口之间的udp数据包能否到达（即hairpin转换特性），\n * 无论如何a与b发往对方内网的地址二元组信息的udp数据包是一定可以到达的，内网数据包不需要路由，且速度更快。a与b推荐采用内网的地址二元组信息进行常规的p2p通信。\n * 假定nat设备支持 hairpin 转换，p2p双方也应忽略与内网地址二元组的连接，如果a 和b采用外网的地址二元组做为p2p通信的连接，这势必会造成数据包无谓地经过nat设备，这是一种对资源的浪费。就目前的网络情况而言，应用程序在“打洞”的时候，最好还是把外网和内网的地址二元组都尝试一下。如果都能成功，优先以内网地址进行连接。\n\n总结:\n\n 1. a、b都获取了对端的内网、外网地址。\n 2. a、b可以直接通过内网地址直接通信（因为在同一个nat网关后面，通过内网接口直接通信（直接通过交换机转发通信），效率高）。\n 3. 如果nat网关支持hairpin技术，就表示a、b通信可以通过nat的外网接口进行通信（a->nat内网接口1->nat外网接口1->nat外网接口2->nat内网接口2->b),通过外网地址的访问可以防止内部攻击。\n\n扩展\n\n什么是hairpin技术？\n\nhairpin技术又被称为hairpin nat、loopback nat或hairpin translation。hairpin技术需要nat网关支持，它能够让两台位于同一台nat网关后面的主机，通过对方的公网地址和端口相互访问，nat网关会根据一系列规则，将对内部主机发往其nat公网ip地址的报文进行转换，并从私网接口发送给目标主机。目前有很多nat设备不支持该技术，这种情况下，nat网关在一些特定场合下将会阻断p2p穿越nat的行为，打洞的尝试是无法成功的。好在现在已经有越来越多的nat设备商开始加入到对该转换的支持中来。\n\n\n# 典型p2p情景2:两客户端位于不同的nat设备后面\n\n这是最普遍的一种情况（如图5所示）：客户端a与b经由各自的nat设备与集中服务器建立udp连接。\n\n * 客户端a——>本地ip:10.0.0.1，本地端口:4321，外网ip:155.99.25.11，外网端口:62000\n * 客户端b——>本地ip:10.1.1.3，本地端口:4321，外网ip:138.76.29.7，外网端口:31000\n\n\n\n流程：\n\n * 注册内外网地址二元组：在a向服务器发送的登陆消息中，包含有a的内网地址二元组信息，即10.0.0.1:4321；服务器会记录下a的内网地址二元组信息，同时会把自己观察到的a的外网地址二元组信息记录下来。同理，服务器也会记录下b的内网地址二元组信息和由服务器观察到的客户端b的外网地址二元组信息。\n * 交互内外网地址二元组：无论a与b二者中的任何一方向服务器发送p2p连接请求，服务器都会将其记录下来的上述的外网和内网地址二元组发送给a或b。\n * a和b分属不同的内网，它们的内网地址在外网中是没有路由的，所以发往各自内网地址的udp数据包会发送到错误的主机或者根本不存在的主机上。（也会同情景1一样，发送到内网地址中，但是这个地址可能错误/不存在，即便地址存在，对方也不会接收这个数据）\n * 当a的第一个消息发往b的外网地址（如图所示），该消息途经a的nat设备，并在该设备上生成一个会话表项，该会话的源地址二元组信息是{10.0.0.1:4321}，和a与服务器建立连接的时候nat生成的源地址二元组信息一样，但它的目的地址是b的外网地址。\n * 在a的nat设备支持保留a的内网地址二元组信息的情况下，所有来自a的源地址二元组信息为{10.0.0.1:4321}的数据包都沿用a与集中服务器事先建立起来的会话，这些数据包的外网地址二元组信息均被映射为{155.99.25.11:62000}。\n * a向b的外网地址发送消息的过程就是“打洞”的过程，从a的内网的角度来看应为从{10.0.0.1:4321}发往{138.76.29.7:31000}，从a在其nat设备上建立的会话来看，是从{155.99.25.11:62000}发到{138.76.29.7:31000}。\n * 如果a发给b的外网地址二元组的消息包在b向a发送消息包之前到达b的nat设备，b的nat设备会认为a发过来的消息是未经授权的外网消息，并丢弃该数据包。（但是a对应的nat建立了与b的映射，后面b发送过来的数据是可以通过的）\n * b发往a的消息包也会在b的nat设备上建立一个{10.1.1.3:4321，155.99.25.11:62000}的会话（通常也会沿用b与集中服务器连接时建立的会话，只是该会话现在不仅接受由服务器发给b的消息，还可以接受从a的nat设备{155.99.25.11:6200}发来的消息）。\n * 一旦a与b都向对方的nat设备在外网上的地址二元组发送了数据包，就打开了a与b之间的“洞”，a与b向对方的外网地址发送数据，等效为向对方的客户端直接发送udp数据包了。\n * 一旦应用程序确认已经可以通过往对方的外网地址发送数据包的方式让数据包到达nat后面的目的应用程序，程序会自动停止继续发送用于“打洞”的数据包，转而开始真正的p2p数据传输。\n\n\n# 典型p2p情景3:两客户端位于两层(或多层)nat设备之后\n\n此种情景最典型的部署情况就像这样：最上层的nat设备通常是由网络提供商（isp）提供，下层nat设备是家用路由器。\n\n如下图所示：假定nat c是由isp提供的nat设备，nat c提供将多个用户节点映射到有限的几个公网ip的服务，nat a和nat b作为nat c的内网节点将把用户的内部网络接入nat c的内网，用户的内部网络就可以经由nat c访问公网了。\n\n从这种拓扑结构上来看，只有服务器与nat c是真正拥有公网可路由ip地址的设备，而nat a和nat b所使用的公网ip地址，实际上是由isp服务提供商设定的（相对于nat c而言）内网地址（我们将这种由isp提供的内网地址称之为伪公网地址）。\n\n同理，隶属于nat a与nat b的客户端，它们处于nat a，nat b的内网，以此类推，客户端可以放到到多层nat设备后面。\n\n客户端a和客户端b发起对服务器s的连接的时候，就会依次在nat a和nat b上建立向外的session，而nat a、nat b要联入公网的时候，会在nat c上再建立向外的session。\n\n\n\n现在假定客户端a和b希望通过udp“打洞”完成两个客户端的p2p直连。最优化的路由策略是客户端a向客户端b的“伪公网”ip上发送数据包，即isp服务提供商指定的内网ip，nat b的“伪”公网地址二元组，{10.0.1.2:55000}。\n\n由于从服务器的角度只能观察到真正的公网地址，也就是nat a，nat b在nat c建立session的真正的公网地址{155.99.25.11:62000}以及{155.99.25.11:62005}，非常不幸的是客户端a与客户端b是无法通过服务器知道这些“伪”公网的地址，而且即使客户端a和b通过某种手段可以得到nat a和nat b的“伪”公网地址，我们仍然不建议采用上述的“最优化”的打洞方式，这是因为这些地址是由isp服务提供商提供的或许会存在与客户端本身所在的内网地址重复的可能性（例如:nat a的内网的ip地址域恰好与nat a在nat c的“伪”公网ip地址域重复，这样就会导致打洞数据包无法发出的问题）。因此客户端别无选择，只能使用由公网服务器观察到的a，b的公网地址二元组进行“打洞”操作，用于“打洞”的数据包将由nat c进行转发。\n\n流程：\n\n * 当客户端a向客户端b的公网地址二元组{155.99.25.11:62005}发送udp数据包的时候，nat a首先把数据包的源地址二元组由a的内网地址二元组{10.0.0.1:4321}转换为“伪”公网地址二元组{10.0.1.1:45000}，现在数据包到了nat c，nat c应该可以识别出来该数据包是要发往自身转换过的公网地址二元组，如果nat c可以给出“合理”响应的话，nat c将把该数据包的源地址二元组改为{155.99.25.11:62000}，目的地址二元组改为{10.0.1.2:55000}，即nat b的“伪”公网地址二元组，nat b最后会将收到的数据包发往客户端b。\n * 同样，由b发往a的数据包也会经过类似的过程。目前也有很多nat设备不支持类似这样的“hairpin转换”，但是已经有越来越多的nat设备商开始加入对该转换的支持中来。\n\n\n# 现实问题:udp在空闲状态下的超时\n\n当然，从应用的角度上来说，在完成打洞过程的同时，还有一些技术问题需要解决，如udp在空闲状态下的超时问题。\n\n由于udp转换协议提供的“洞”不是绝对可靠的，多数nat设备内部都有一个udp转换的空闲状态计时器，如果在一段时间内没有udp数据通信，nat设备会关掉由“打洞”过程打出来的“洞”。如果p2p应用程序希望“洞”的存活时间不受nat网关的限制，就最好在穿越nat以后设定一个穿越的有效期。\n\n对于有效期目前没有标准值，它与nat设备内部的配置有关，某些设备上最短的只有20秒左右。在这个有效期内，即使没有p2p数据包需要传输，应用程序为了维持该“洞”可以正常工作，也必须向对方发送“打洞”心跳包。\n\n这个心跳包是需要双方应用程序都发送的，只有一方发送不会维持另一方的session正常工作。除了频繁发送“打洞”心跳包以外，还有一个方法就是在当前的“洞”超时之前，p2p客户端双方重新“打洞”，丢弃原有的“洞”，这也不失为一个有效的方法。\n\n\n# 基于tcp协议的p2p打洞技术\n\n建立穿越nat设备的p2p的tcp连接只比udp复杂一点点，tcp协议的“打洞”从协议层来看是与udp的“打洞”过程非常相似的。尽管如此，基于tcp协议的打洞至今为止还没有被很好的理解，这也造成了的对其提供支持的nat设备不是很多。在nat设备支持的前提下，基于tcp的“打洞”技术实际上与基于udp的“打洞”技术一样快捷、可靠。实际上，只要nat设备支持的话，基于tcp的p2p技术的健壮性将比基于udp技术的更强一些，因为tcp协议的状态机给出了一种标准的方法来精确的获取某个tcp session的生命期，而udp协议则无法做到这一点。\n\n\n# 套接字和tcp端口的重用\n\n实现基于tcp协议的p2p打洞过程中，最主要的问题不是来自于tcp协议，而是来自于应用程序的api接口。这是由于标准的伯克利(berkeley)套接字的api是围绕着构建客户端/服务器程序而设计的，api允许tcp流套接字通过调用connect()函数来建立向外的连接，或者通过listen()和accept函数接受来自外部的连接，但是，api不提供类似udp那样的，同一个端口既可以向外连接，又能够接受来自外部的连接。而且更糟的是，tcp的套接字通常仅允许建立1对1的响应，即应用程序在将一个套接字绑定到本地的一个端口以后，任何试图将第二个套接字绑定到该端口的操作都会失败。\n\n为了让tcp“打洞”能够顺利工作，我们需要使用一个本地的tcp端口来监听来自外部的tcp连接，同时建立多个向外的tcp连接。幸运的是，所有的主流操作系统都能够支持特殊的tcp套接字参数，通常叫做·“so_reuseaddr”，该参数允许应用程序将多个套接字绑定到本地的一个地址二元组（只要所有要绑定的套接字都设置了so_reuseaddr参数即可）。bsd系统引入了so_reuseport参数，该参数用于区分端口重用还是地址重用，在这样的系统里面，上述所有的参数必须都设置才行。\n\n\n# 打开p2p的tcp流\n\n假定客户端a希望建立与b的tcp连接。我们像通常一样假定a和b已经与公网上的已知服务器建立了tcp连接。服务器记录下来每个接入的客户端的公网和内网的地址二元组，如同为udp服务的时候一样。\n\n从协议层来看，tcp“打洞”与udp“打洞”是几乎完全相同的过程：\n\n * 客户端a使用其与服务器的连接向服务器发送请求，要求服务器协助其连接客户端b；\n * 服务器将b的公网和内网的tcp地址的二元组信息返回给a，同时，服务器将a的公网和内网的地址二元组也发送给b；\n * 客户端a和b使用连接服务器的端口异步地发起向对方的公网、内网地址二元组的tcp连接，同时监听各自的本地tcp端口是否有外部的连接联入；\n * a和b开始等待向外的连接是否成功，检查是否有新连接联入。如果向外的连接由于某种网络错误而失败，如：“连接被重置”或者“节点无法访问”，客户端只需要延迟一小段时间（例如延迟一秒钟），然后重新发起连接即可，延迟的时间和重复连接的次数可以由应用程序编写者来确定；\n * tcp连接建立起来以后，客户端之间应该开始鉴权操作，确保目前联入的连接就是所希望的连接。如果鉴权失败，客户端将关闭连接，并且继续等待新的连接联入。客户端通常采用“先入为主”的策略，只接受第一个通过鉴权操作的客户端，然后将进入p2p通信过程不再继续等待是否有新的连接联入。\n\n\n\n与udp不同的是，因为使用udp协议的每个客户端只需要一个套接字即可完成与服务器的通信，而tcp客户端必须处理多个套接字绑定到同一个本地tcp端口的问题，如图7所示。现在来看实际中常见的一种情景，a与b分别位于不同的nat设备后面，如图5所示，并且假定图中的端口号是tcp协议的端口号，而不是udp的端口号。图中向外的连接代表a和b向对方的内网地址二元组发起的连接，这些连接或许会失败或者无法连接到对方。如同使用udp协议进行“打洞”操作遇到的问题一样，tcp的“打洞”操作也会遇到内网的ip与“伪”公网ip重复造成连接失败或者错误连接之类的问题。\n\n客户端向彼此公网地址二元组发起连接的操作，会使得各自的nat设备打开新的“洞”允许a与b的tcp数据通过。如果nat设备支持tcp“打洞”操作的话，一个在客户端之间的基于tcp协议的流通道就会自动建立起来。如果a向b发送的第一个syn包发到了b的nat设备，而b在此前没有向a发送syn包，b的nat设备会丢弃这个包，这会引起a的“连接失败”或“无法连接”问题。而此时，由于a已经向b发送过syn包，b发往a的syn包将被看作是由a发往b的包的回应的一部分，所以b发往a的syn包会顺利地通过a的nat设备，到达a，从而建立起a与b的p2p连接。\n\n\n# 从应用程序的角度来看tcp“打洞”\n\n从应用程序的角度来看，在进行tcp“打洞”的时候都发生了什么呢？假定a首先向b发出syn包，该包发往b的公网地址二元组，并且被b的nat设备丢弃，但是b发往a的公网地址二元组的syn包则通过a的nat到达了a，然后，会发生以下的两种结果中的一种，具体是哪一种取决于操作系统对tcp协议的实现：\n\n * a的tcp实现会发现收到的syn包就是其发起连接并希望联入的b的syn包，通俗一点来说就是“说曹操，曹操到”的意思，本来a要去找b，结果b自己找上门来了。a的tcp协议栈因此会把b作为a向b发起连接connect的一部分，并认为连接已经成功。程序a调用的异步connect()函数将成功返回，a的listen()等待从外部联入的函数将没有任何反映。此时，b联入a的操作在a程序的内部被理解为a联入b连接成功，并且a开始使用这个连接与b开始p2p通信。 由于收到的syn包中不包含a需要的ack数据，因此，a的tcp将用syn-ack包回应b的公网地址二元组，并且将使用先前a发向b的syn包一样的序列号。一旦b的tcp收到由a发来的syn-ack包，则把自己的ack包发给a，然后两端建立起tcp连接。简单的说，第一种，就是即使a发往b的syn包被b的nat丢弃了，但是由于b发往a的包到达了a。结果是，a认为自己连接成功了，b也认为自己连接成功了，不管是谁成功了，总之连接是已经建立起来了。\n\n * 另外一种结果是，a的tcp实现没有像（1）中所讲的那么“智能”，它没有发现现在联入的b就是自己希望联入的。就好比在机场接人，明明遇到了自己想要接的人却不认识，误认为是其他的人，安排别人给接走了，后来才知道是自己错过了机会，但是无论如何，人已经接到了任务已经完成了。然后，a通过常规的listen()函数和accept()函数得到与b的连接，而由a发起的向b的公网地址二元组的连接会以失败告终。尽管a向b的连接失败，a仍然得到了b发起的向a的连接，等效于a与b之间已经联通，不管中间过程如何，a与b已经连接起来了，结果是a和b的基于tcp协议的p2p连接已经建立起来了。\n\n第一种结果适用于基于bsd的操作系统对于tcp的实现，而第二种结果更加普遍一些，多数linux和windows系统都会按照第二种结果来处理。\n\n\n# 本文小结\n\n在ip地址极度短缺的今天，nat几乎已经是无所不在的一项技术了，以至于现在任何一项新技术都不得不考虑和nat的兼容。作为当下应用最广泛的技术之一，p2p技术也必然要面对nat这个障碍。\n\n打洞技术看起来是一项近似乎蛮干的技术，却不失为一种有效的技术手段。在集中服务器的帮助下，p2p的双方利用端口预测的技术在nat网关上打出通道，从而实现nat穿越，解决了nat对于p2p的阻隔，为p2p技术在网络中更广泛的推广作出了非常大的贡献。\n\n\n# 说明\n\n本文转载自p2p技术详解(二)：p2p中的nat穿越(打洞)方案详解。",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"NAT穿越方案进阶",frontmatter:{title:"NAT穿越方案进阶",date:"2022-07-06T15:13:11.000Z",permalink:"/basic/p2p/nat-advance/",categories:["基础","P2P"],tags:["NAT 穿越"],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/20.NAT%E7%A9%BF%E8%B6%8A%E6%96%B9%E6%A1%88%E8%BF%9B%E9%98%B6.html",relativePath:"20.基础/35.P2P/20.NAT穿越方案进阶.md",key:"v-31f20e97",path:"/basic/p2p/nat-advance/",headers:[{level:2,title:"NAT 和 NAPT",slug:"nat-和-napt",normalizedTitle:"nat 和 napt",charIndex:2},{level:2,title:"NAT带来的问题",slug:"nat带来的问题",normalizedTitle:"nat带来的问题",charIndex:394},{level:2,title:"P2P通信穿越NAT的技术、方法",slug:"p2p通信穿越nat的技术、方法",normalizedTitle:"p2p通信穿越nat的技术、方法",charIndex:1574},{level:2,title:"NAT穿越技术1：应用层网关",slug:"nat穿越技术1-应用层网关",normalizedTitle:"nat穿越技术1：应用层网关",charIndex:1686},{level:3,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:1259},{level:3,title:"限制",slug:"限制",normalizedTitle:"限制",charIndex:553},{level:2,title:"NAT穿越技术2：中间件技术",slug:"nat穿越技术2-中间件技术",normalizedTitle:"nat穿越技术2：中间件技术",charIndex:2526},{level:3,title:"原理",slug:"原理-2",normalizedTitle:"原理",charIndex:1259},{level:3,title:"限制",slug:"限制-2",normalizedTitle:"限制",charIndex:553},{level:2,title:"NAT穿越技术3：打洞技术(Hole Punching)",slug:"nat穿越技术3-打洞技术-hole-punching",normalizedTitle:"nat穿越技术3：打洞技术(hole punching)",charIndex:2990},{level:3,title:"原理",slug:"原理-3",normalizedTitle:"原理",charIndex:1259},{level:3,title:"方法",slug:"方法",normalizedTitle:"方法",charIndex:1262},{level:4,title:"NAT行为类型与侦测方法",slug:"nat行为类型与侦测方法",normalizedTitle:"nat行为类型与侦测方法",charIndex:4026},{level:4,title:"NAT打洞过程",slug:"nat打洞过程",normalizedTitle:"nat打洞过程",charIndex:10062},{level:5,title:"网络拓扑类型一",slug:"网络拓扑类型一",normalizedTitle:"网络拓扑类型一",charIndex:11128},{level:5,title:"网络拓扑类型二",slug:"网络拓扑类型二",normalizedTitle:"网络拓扑类型二",charIndex:11805},{level:5,title:"网络拓扑类型三",slug:"网络拓扑类型三",normalizedTitle:"网络拓扑类型三",charIndex:12132},{level:5,title:"网络拓扑类型四",slug:"网络拓扑类型四",normalizedTitle:"网络拓扑类型四",charIndex:15295},{level:2,title:"NAT穿越技术4：Relay服务器中转技术",slug:"nat穿越技术4-relay服务器中转技术",normalizedTitle:"nat穿越技术4：relay服务器中转技术",charIndex:16061},{level:3,title:"UDP协议的Relay",slug:"udp协议的relay",normalizedTitle:"udp协议的relay",charIndex:17006},{level:4,title:"方式一、Send and Data methods，具体交互过程如下：",slug:"方式一、send-and-data-methods-具体交互过程如下",normalizedTitle:"方式一、send and data methods，具体交互过程如下：",charIndex:17106},{level:3,title:"9.1.2方式二、channels，具体交互过程如下：",slug:"_9-1-2方式二、channels-具体交互过程如下",normalizedTitle:"9.1.2方式二、channels，具体交互过程如下：",charIndex:20173},{level:3,title:"TCP协议的Relay",slug:"tcp协议的relay",normalizedTitle:"tcp协议的relay",charIndex:21842},{level:4,title:"情况一、Client to peer，网络拓扑如下：",slug:"情况一、client-to-peer-网络拓扑如下",normalizedTitle:"情况一、client to peer，网络拓扑如下：",charIndex:21955},{level:4,title:"情况二、Client to client，网络拓扑结构如下：",slug:"情况二、client-to-client-网络拓扑结构如下",normalizedTitle:"情况二、client to client，网络拓扑结构如下：",charIndex:25077},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:27834},{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:20093}],readingTime:{text:"8 min read",minutes:7.155,time:429300,words:1431},headersStr:"NAT 和 NAPT NAT带来的问题 P2P通信穿越NAT的技术、方法 NAT穿越技术1：应用层网关 原理 限制 NAT穿越技术2：中间件技术 原理 限制 NAT穿越技术3：打洞技术(Hole Punching) 原理 方法 NAT行为类型与侦测方法 NAT打洞过程 网络拓扑类型一 网络拓扑类型二 网络拓扑类型三 网络拓扑类型四 NAT穿越技术4：Relay服务器中转技术 UDP协议的Relay 方式一、Send and Data methods，具体交互过程如下： 9.1.2方式二、channels，具体交互过程如下： TCP协议的Relay 情况一、Client to peer，网络拓扑如下： 情况二、Client to client，网络拓扑结构如下： 参考 说明",content:'# NAT 和 NAPT\n\n网络地址转换（NAT，全称 Network Address Translation），早期的NAT指的是 Basic NAT（静态NAT），它在技术上比较简单一点，仅支持地址转换，不支持端口映射。这就需要对每一个当前连接都要对应一个IP地址，因此要维护一个公网的地址池。\n\n我们可以看出，Basic NAT一个比较明显的缺陷就是：同一时刻只能少量位于NAT后面的机器能够和外部交互（要看NAT有几个外网IP）。\n\n后期的NAT基本都指的是**NAPT(网络地址端口转换)**了，这种方式支持端口的映射并允许多台主机共享一个公用IP地址，这样就可以支持同时多个位于NAT后面的机器和外部进行交互了。\n\n支持端口转换的NAT又可以分为两类：\n\n * 源地址转换NAT（SNAT）；\n * 目的地址转换NAT（DNAT）。\n\n下面说的NAT都是指NAPT。\n\n\n# NAT带来的问题\n\nNAT在缓解IPv4地址资源的紧张的同时，也带来了不少问题：\n\n * NAT使IP会话的保持时效变短；\n * NAT在实现上将多个内部主机发出的连接复用到一个IP上，这就使依赖IP进行主机跟踪的机制都失效了；\n * NAT工作机制依赖于修改IP包头的信息，这会妨碍一些安全协议的工作；\n * NAT限制了使用一些高层协议(FTP、Quake、SIP)的Peer两端的P2P通信。\n\n对于问题1：其主要原因是，NAT设备建立的内网IP、端口到外网IP、端口的映射的表项是有一个保活期的。如果在一个超时时间内，该映射上没有实际数据的传输，那么NAT会过期并回收这个映射表项给其他通信链路用(IP和端口资源有限，通信的链路是无限)。为了避免这种通信链路提前被NAT中断的情况，很多应用层协议在设计的时候就考虑了一个连接保活的机制，即在一段时间没有数据需要发送时，主动发送一个NAT能感知到而又没有实际数据的保活消息，这么做的主要目的就是重置NAT的会话定时器。\n\n对于问题2：其主要原因是，对于NAT后面的N多主机，在外部看来都是同一个主机(NAT设备)，于是来之同一个IP的数据包一定是来之同一个主机的前提判断就会不准确了，这样一下基于这个前提的机制(例如：TCP的TIME_WAIT的回收和重用)都会有问题。\n\n对于问题3：其主要原因是，NAT篡改了IP地址、传输层端口号和校验和。\n\n对于问题4：其主要原因是，一般情况下，NAT是不允许外部的Peer节点主动连接或发送数据包给NAT后面的主机的(这里的主动指的是，在一段时间内，首先发送数据包的一方为主动方)。\n\nNAT表现出这样的行为，主要基于下面的几点考虑：\n\n * 出于安全考虑，避免来自网络外部的攻击，隐藏并保护网络内部的计算机；\n * 位于NAT后面的很多主机，对于主动进来的数据包，NAT一般不知道该路由给内部的哪个主机(NAT设备上没有相关转发表项)。\n\n由于NAT这种特性，那么在NAT环境下，实现P2P通信的完整解决方案包括几个部分呢？相关的原理、方法、技术有哪些？\n\n对于一个完整的P2P通信解决方案，其实现包括下面两个步骤：\n\n * 首先在Server的协助下，通信两端Peer尝试相互连接，如果两端Peer在尝试互联不成功后，那么就将失败结果反馈给Server转入步骤2）；\n * 这个步骤比较简单粗暴了，就是relay(服务器中转)，简单的来讲就是Peer1将要发给Peer2的数据发给Server，然后由Server帮忙转发给Peer2，同样对于Peer2来说也一样。\n\n对于实现P2P通信，步骤1是大家下功夫最多的，其原因比较简单，就是步骤2需要消耗较多的服务器资源，成本比较高。步骤1实现P2P两个节点间的直接通信，在资源消耗和效率上都是比较好的。\n\n\n# P2P通信穿越NAT的技术、方法\n\n目前常见的P2P通信穿越NAT的技术、方法主要有：\n\n * 应用层网关；\n * 中间件技术；\n * 打洞技术(Hole Punching)；\n * Relay(服务器中转)技术。\n\n\n# NAT穿越技术1：应用层网关\n\n应用层网关(ALG)是解决NAT对应用层协议无感知的一个最常用方法，已经被NAT设备厂商广泛采用，成为NAT设备的一个必需功能。\n\n\n# 原理\n\n利用带有ALG功能的NAT对特定应用层协议的支持和理解，在一个NAT网关检测到新的连接请求时，需要判断是否为已知的应用类型，这通常是基于连接的传输层端口信息来识别的。在识别为已知应用时，再调用相应功能对报文的深层内容进行检查，当发现任何形式表达的IP地址和端口时，将会把这些信息同步转换，并且为这个新连接创建一个附加的转换表项。\n\n这样，当报文到达公网侧的目的主机时，应用层协议中携带的信息就是NAT网关提供的地址和端口。\n\n例如下图，对于使用主动模式的FTP协议(PORT方式)，就需要AGL的支持了。\n\n\n\n由于FTP协议通信需要两个TCP连接，一个是命令链路，用来在FTP客户端与服务器之间传递命令；另一个是数据链路，用来上传或下载数据。如上图，位于NAT后面的FTP client(192.168.1.2)首先发起一个TCP连接(命令链路)连上外网FTP Server(8.8.8.1)，然后发送PORT报文(192.168.1.2，1084)说自己在1084端口接收数据，然后进过ALG处理PORT报文变成(8.8.8.1，12487)，同NAT建立其一条(192.168.1.2，1084 <—>8.8.8.1，12487)映射。这样FTP Server发往(8.8.8.1，12487)的数据就会被转到(192.168.1.2，1084)，从而实现数据传输(如果没经过ALG处理，那么FTP Server直接连接192.168.1.2，1084是无法连接上的)。\n\n\n# 限制\n\nALG技术是利用NAT本身的支持来进行NAT的穿越，这个方案有很大限制，主要的原因是ALG都是为特定协议的特定规范版本而开发的，然而不管是协议本身，还是协议的数量都在变化，这就使得ALG适应性不强。\n\n\n# NAT穿越技术2：中间件技术\n\n这是一种通过开发通用方法解决NAT穿越问题的努力。与前者不同之处是，AGL技术中NAT网关是这一解决方案的唯一参与者，而中间件技术中客户端会参与网关公网映射信息的维护。UPnP就是这样一种方法，UPnP中文全称为通用即插即用，是一个通用的网络终端与网关的通信协议，具备信息发布和管理控制的能力。\n\n\n# 原理\n\nNAT只要理解客户端的请求并按照要求去分配响应的映射转换表，不需要自己去分析客户端的应用层数据。网关映射请求可以为客户动态添加映射表项。\n\n此时，NAT不再需要理解应用层携带的信息，只转换IP地址和端口信息。而客户端通过控制消息或信令发到公网侧的信息中，直接携带公网映射的IP地址和端口，接收端可以按照此信息建立数据连接。NAT网关在收到数据或连接请求时，按照UPnP建立的表项只转换地址和端口信息，不关心内容，再将数据转发到内网。\n\n\n# 限制\n\n这种方案需要网关、内部主机和应用程序都支持UPnP技术，且组网允许内部主机和NAT网关之间可以直接交换UPnP信令才能实施。\n\n\n# NAT穿越技术3：打洞技术(Hole Punching)\n\nHole Punching技术是工作在运输层的技术，可以屏蔽上层应用层的差异，并且不需要NAT网关特定的支持，因此其通用性比较强，应用性也比较广。\n\n\n# 原理\n\n打洞技术的原理比较简单，就是NAT内网的节点需要在NAT上建立自己的一条转发映射关系(这就是所谓的在NAT上打下一个洞)，然后外网的节点就通过这个”洞”来进行通信。为描述方便，我们将一对IP地址和端口信息的组合称之为一个Endpoint。\n\n打洞原理可以简化为下面三个过程：\n\n * 首先位于NAT后的Peer1节点需要向外发送数据包，以便让NAT建立起内网Endpoint1(IP1、PORT1)和外网Endpoint2(IP2、PORT2)的映射关系；\n * 然后通过某种方式将映射后的外网Endpoint2通知给对端节点Peer2；\n * 最后Peer2往收到的外网Endpoint2发送数据包，然后该数据包就会被NAT转发给内网的Peer1。\n\n上面三个过程比较简单，然而细心的同学会有些疑问：\n\n * 步骤[1]中的映射关系的建立有什么规律的么?怎样才能获取到映射关系呢？\n * 通知对端节点Peer2的方式一般是怎么样的？\n * 步骤[3]一定可以实现么？也就是Peer2往收到的外网Endpoint2发送数据包，就一定能够被NAT转发给内网的Peer1吗？\n\n对于疑问(3)，如果全部会被转发给内网Peer1，那会不会太不安全了，只要知道内网Peer1的映射后的外网Endpoint2，就可以给穿透NAT给内网Peer1发送数据，这样内网Peer1不就很容易遭到攻击了？如果全部都不转发给内网Peer1，这样Peer1只能向外发数据，而无法收到外面的数据，严重影响Peer1的正常通信。\n\n那么，这就比较明了了，我们需要的是一部分可以转发，另外一部分不转发。这就涉及到NAT对外来数据包的一个过滤规则了，而疑问(1)提到的映射关系建立的规则，这涉及到NAT的Endpoint的映射规则。\n\n那么问题来了，有什么方法可以知道NAT的Endpoint映射规则和对外来数据包的过滤规则呢？\n\n\n# 方法\n\n由上面原理的讨论我们知道，要实现打洞穿越NAT，首先需要知道NAT的行为规则(NAT的Endpoint映射规则和对外来数据包的过滤规则)，这样才能更好地实现打洞穿越。\n\n那NAT有哪些行为类型？有什么办法来侦测NAT的行为呢？\n\n# NAT行为类型与侦测方法\n\nNAT的行为类型和侦测方法是由STUN（首先在RFC3489中定义，英文全称是Simple Traversal of UDP Through NATs）协议来描述的，STUN协议包括了RFC3489、RFC5389、RFC5780、RFC5769几个系列文档。\n\n早期的STUN协议是由RFC3489（经典的STUN）来描述，其定义的NAT行为类型如下：\n\n * Full Cone NAT - 完全锥形NAT：\n\n所有从同一个内网IP和端口号Endpoint1发送过来的请求都会被映射成同一个外网IP和端口号Endpoint2，并且任何一个外网主机都可以通过这个映射的Endpoint2向这台内网主机发送包。也就是外网所有发往Endpoint2的数据包都会被NAT转发给Endpoint1。由于对外部请求的来源无任何限制，因此这种方式虽然足够简单，但却不安全。\n\n * Restricted Cone NAT - 限制锥形NAT：\n\n它是Full Cone的受限版本：所有来自同一个内网Endpoint1的请求均被NAT映射成同一个外网Endpoint2，这与Full Cone相同。但不同的是，只有当内网Endpoint1曾经发送过报文给外部主机（假设其IP地址为IP3）后，外部主机IP3发往Endpoint2的数据包才会被NAT转发给Endpoint1。这意味着，NAT设备只向内转发那些来自于当前已知的外部主机的数据包，从而保障了外部请求来源的安全性\n\n * Port Restricted Cone NAT - 端口限制锥形NAT：\n\n它是Restricted Cone NAT的进一步受限版，与限制锥形NAT很相似，只不过它包括端口号PORT。只有当内网Endpoint1曾经发送过报文给外部Endpoint3(包括IP和端口了)，Endpoint3发往Endpoint2的数据包才会被NAT转发给Endpoint1。端口号PORT这一要求进一步强化了对外部报文请求来源的限制，从而较Restrictd Cone更具安全性。\n\n * Symmetric NAT - 对称NAT：\n\n上面的1）2）3）所有的Cone NAT中，映射关系只和内网的源Endpoint1相关，只要源Endpoint1不变其都会被映射成同一个Endpoint2。而对称NAT的映射关系不只与源Endpoint1相关，还与目的Endpoint3相关。也就是源Endpoint1发往目的Endpoint30的请求被映射为Endpoint20，而源Endpoint1发往目的Endpoint31的请求，则被映射为Endpoint21了。此外，只有收到过内网主机发送的数据的外网主机才可以反过来向内网主机发送数据包。\n\n经典 STUN 定义的 NAT 行为类型是将NAT的 Mapping Behavior （映射规则）和 Filtering Behavior（过滤规则）统一来归类的，这样对 Symmetric NAT 类型的归类过于笼统，使得许多 NAT 不完全符合由它定义的类型。\n\n于是后来，RFC3489被废弃并由RFC5389来替代，在RFC5389中，将 Mapping Behavior （映射规则）和 Filtering Behavior（过滤规则）分开来，定义了3种 Mapping Behavior （映射规则）和3种 Filtering Behavior（过滤规则），一共有9种组合。\n\n为什么是3种呢？其实理由很简单，对于一个特定的内网源Endpoint1，影响其映射关系的因素不外乎就4种情况：\n\n * 目的IP和目的端口PORT都无关；\n * 目的IP和目的端口PORT都相关；\n * 仅仅目的IP相关；\n * 仅仅目的PORT相关。\n\n对于4仅仅考虑一下PORT信息有点鸡肋，基本和1差不多，于是把4去掉了。同样，对于过滤规则也一样。\n\n3种Mapping Behavior （映射规则）和 Filtering Behavior（过滤规则）如下。\n\nMapping Behavior：\n\n * Endpoint-Independent Mapping：对于一个内网的EndpointP，其映射的外网EndpointG是基本固定的，不会随着通信外部主机的不同而变化。\n\n * Address and Port-Dependent Mapping：对于一个内网的EndpointP，如果与之通信的外部为EndpointGB1，那么EndpointP就会被NAT映射成EndpointG1；如果与之通信的外部为EndpointGB2，那么EndpointP就会被NAT映射成EndpointG2。也就是只要之通信的外部为EndpointGB发生变化，那么映射的外网EndpointG就会变化。\n\n * Address-Dependent Mapping：对于一个内网的EndpointP，如果与之通信的外部为EndpointGB1，那么EndpointP就会被NAT映射成EndpointG1；如果与之通信的外部为EndpointGB2(如果EndpointGB2的IP和EndpointGB1的相同)，那么EndpointP同样会被NAT映射成EndpointG1，否则就会被NAT映射成EndpointG2。也就是只要之通信的外部为EndpointGB的IP发生变化，那么映射的外网EndpointG就会变化。\n\nFiltering Behavior：\n\n * Endpoint-Independent Filtering：对于这种过滤类型，NAT在在自己的一个外网EndpointG1收到数据包，只要找到与之对应的内网EndpointP1，NAT就会转发这个数据包给相应的内网EndpointP1，不管这个数据包的来源是那里。(一般来说，这样过滤规则的NAT是比较少的，因为这样的安全系数比较低)\n\n * Address and Port-Dependent Filtering：对于这种过滤类型，NAT在自己的一个外网EndpointG1收到来源是EndpointGA1数据包，这个时候NAT要判断自己是否曾经通过自己的EndpointG1给EndpointGA1发送过数据包，如果曾经发过，那么NAT就允许该数据包通过NAT并路由给内网与之对于的内网EndpointP1；如果没发过，那么NAT会不允许该数据包通过NAT。\n\n * Address-Dependent Filtering：对于这种过滤类型，NAT在自己的一个外网EndpointG1收到来源是EndpointGA1数据包，这个时候NAT要判断自己是否曾经通过自己的EndpointG1给和EndpointGA1的IP相同的机器发送过数据包(这里会忽略端口)，如果曾经发过，那么NAT就允许该数据包通过NAT并路由给内网与之对于的内网EndpointP1；如果没发过，那么NAT会不允许该数据包通过NAT。\n\nRFC5389只是定义了协议的相关属性、机制、报文结构以及一些相关的安全注意点等等，并有没对怎么进行完整的NAT类型侦测做介绍。而对完整NAT类型侦测过程主要由RFC5780这个文档来描述。完整的NAT类型侦测的过程主要在RFC5780文档的4.3和4.4节，主要分为NAT映射规则（Determining NAT Mapping Behavior）和NAT过滤规则（Determining NAT Filtering Behavior）。\n\n下面对具体的侦测过程做介绍：\n\n要进行NAT类型的侦测，需要一个具有双公网IP的服务器来协助侦测，我们称该服务器为STUN Server。假设STUN Server的双IP分别为IP_SA(125.227.152.3)和IP_SB(125.227.152.4) 监听的两个端口分别为PORT_SA(4777)和PORT_SB(4888)，客户端A的内网和端口分别为IP_CA(10.70.142.12)和PORT_CA(1234)。\n\n * 客户端A以IP_CA: PORT_CA给STUN Server的IP_SA: PORT_SA发送一个bind请求，STUN server以IP_SA: PORT_SA给客户端A的IP_CA: PORT_CA回复响应，响应内容大体为：（NAT映射后的IP地址和端口为：IP_MCA1: PORT_MCA1，STUN Server的另外一个IP地址和端口为：IP_SB: PORT_SB）。这个时候客户端判断，如果IP_CA: PORT_CA == IP_MCA1: PORT_MCA1，那么该客户端是拥有公网IP的，NAT类型侦测结束。\n\n * 客户端A以IP_CA: PORT_CA给STUN server的IP_SB: PORT_SA(相对步骤1 ip改变了)发送一个bind请求，STUN server以IP_SB: PORT_SA给客户端A的IP_CA: PORT_CA回复响应，响应内容大体为：（NAT映射后的IP地址和端口为：IP_MCA2: PORT_MCA2）。这个时候客户端判断，如果IP_MCA1: PORT_MCA1 == IP_MCA2: PORT_MCA2，那么NAT是Endpoint Independent Mapping的映射规则，也就是同样的内网地址IP_CA: PORT_CA经过这种NAT映射后的IP_M: PORT_M是固定不变的；如果IP_MCA1: PORT_MCA1 != IP_MCA2: PORT_MCA2,那么就要进行下面的第3步测试。\n\n * 客户端A以IP_CA: PORT_CA给STUN server的IP_SB: PORT_SB(相对步骤1 ip和port改变了)发送一个bind请求，STUN server以IP_SB: PORT_SB给客户端A的IP_CA: PORT_CA回复响应，响应内容大体为：（NAT映射后的IP地址和端口为：IP_MCA3: PORT_MCA3）。这个时候客户端判断，如果IP_MCA2: PORT_MCA2== IP_MCA3: PORT_MCA3，那么NAT是Address Dependent Mapping的映射规则，也就是只要是目的IP是相同的，那么同样的内网地址IP_CA: PORT_CA经过这种NAT映射后的IP_M: PORT_M是固定不变的；如果IP_MCA2: PORT_MCA2!= IP_MCA3: PORT_MCA3，那么NAT是Address and Port Dependent Mapping，只要目的IP和PORT中有一个不一样，那么同样的内网地址IP_CA: PORT_CA经过这种NAT映射后的IP_M: PORT_M是不一样的。\n\n以上三个步骤是进行Mapping Behavior的侦测，下面两个步骤是进行Filtering Behavior侦测：\n\n * 客户端A以IP_CA: PORT_CA给STUN server的IP_SA: PORT_SA发送一个bind请求（请求中带CHANGE-REQUEST attribute来要求stun server改变IP和PORT来响应），STUN server以IP_SB: PORT_SB给客户端A的IP_CA: PORT_CA回复响应。如果客户端A能收到STUN server的响应，那么NAT是Endpoint-Independent Filtering的过滤规则，也就是只要给客户端A的IP_CA: PORT_CA映射后的IP_MCA: PORT_MCA地址发送数据都能通过NAT到达客户端A的IP_CA: PORT_CA（这种过滤规则的NAT估计很少）。如果不能收到STUN server的响应，那么需要进行下面的第五步测试。\n\n * 客户端A以IP_CA: PORT_CA给STUN server的IP_SA: PORT_SA发送一个bind请求（请求中带CHANGE-REQUEST attribute来要求stun server改变PORT来响应），STUN server以IP_SA: PORT_SB给客户端A的IP_CA: PORT_CA回复响应。如果客户端A能收到STUN server的响应，NAT是Address-Dependent Filtering的过滤规则，也就是只要之前客户端A以IP_CA: PORT_CA给IP为IP_D的主机发送过数据，那么在NAT映射的有效期内，IP为IP_D的主机以任何端口给客户端A的IP_CA: PORT_CA映射后的IP_MCA: PORT_MCA地址发送数据都能通过NAT到达客户端A的IP_CA: PORT_CA；如果不能收到响应，NAT是Address and Port-Dependent Filtering的过滤规则，也即是只有之前客户端A以IP_CA: PORT_CA给目的主机的IP_D: PORT_D发送过数据，那么在NAT映射的有效期内，只有以IP_D: PORT_D给客户端A的IP_CA: PORT_CA映射后的IP_MCA: PORT_MCA地址发送数据才能通过NAT到达客户端A的IP_CA: PORT_CA。\n\n通过以上5个步骤就能完成完整的NAT类型侦测。\n\n将NAT映射规则和过滤规则组合起来就形成9中不同的NAT行为类型：\n\n * Endpoint Independent Mapping和Endpoint-Independent Filtering组合对应于RFC3489中的Full Cone NAT；\n * Endpoint Independent Mapping和Address-Dependent Filtering组合对应于RFC3489中的Restricted Cone NAT；\n * Endpoint Independent Mapping和Address and Port-Dependent Filtering组合对应于RFC3489中的Port Restricted Cone NAT；\n * Address and Port-Dependent Mapping和Address and Port-Dependent Filtering组合是RFC3489中所说的Symmetric NAT。\n\n可见RFC3489只描述了9种NAT组合行为类型中的4种。最后一个文档rfc5769，定义了一些STUN协议的测试数据用于测试STUN server的正确性。\n\n# NAT打洞过程\n\n“打洞”方式穿越NAT有两种形式：TCP”打洞”和UDP”打洞”。原理上，TCP”打洞”与UDP”打洞”是没有本质的区别的。\n\n然而在实现上，TCP”打洞”的成功率远没UDP”打洞”的成功率高，其主要原因有三：\n\n * 有些NAT防火墙策略对TCP协议不是很友好：有些NAT的防火墙策略不允许来路不明的外部向内网机器发起TCP连接。由于TCP是有连接的，NAT比较容易分清哪些是NAT内网机器主动进行通信的外部节点，这样防火墙策略比较明确。而UDP是无连接的，没有连接来标明一个数据流，协议比较简单，这样NAT支持的比较多。\n\n * TCP协议本身：由于TCP的TIME_WAIT状态引起，同一个NAT后面的其他主机发起的连接被误判。具体可以看下面的文章：km.oa.com/group/25569/articles/show/246068 。\n\n * TCP协议的实现API：因为标准的Berkeley sockets API是围绕C/S编程而设计的。这个API通过connect()允许一个TCP流套接字初始化一个向外的连接，通过listen()和 accept()监听一个外入的连接，一个套接字不能既用来监听又用来初始化向外的连接。更进一步讲，TCP套接字通常与本地主机上的TCP端口一一对应：一个套接字绑定到本地主机上的某个端口后，另一个套接字就不能再绑定到该端口。然而TCP打洞要成功，需要一个本地的TCP端口既可以监听外入的连接，同时又可以发起多个向外的连接。幸运的是，所有主流的操作系统都支持一个特殊的socket选项SO_REUSEADDR，它运行应用程序绑定多个设置了该选项的套接字到同一端口。BSD系统引入了SO_REUSEPORT选项来控制端口重用，从而把端口重用和地址重用相分离。在这样的系统中，两个选项都需要被设置。尽管如此，要进行TCP打洞需要进行TCP三次握手的同时打开，但是有些TCP/IP的实现，可能不支持这种同时打开的情况，这样也就无法建立TCP连接了。\n\n下面就几种网络拓扑情况下，NAT打洞步骤进行逐一介绍。为了方便描述，假设通信的两个节点分别为Client A和Client B，而辅助NAT穿越的STUN Server为Server S。下面的所有方法都要求Client A、Client B都与Server S保持一条长连接，或者周期性连上Server S，以便能够接收Server S的相关指令，我们称这两个连接分别为ConnectA1，ConnectB1.\n\n# 网络拓扑类型一\n\n如下图所示，Client A 位于NAT内网，而Client B是具有公网IP的机器。如果是Client A需要连接Client B那么Client A直接连Client B就可以了。如果Client B需要连接Client A，那么Client B直接Connect Client A一般是连接不上的。但是我们可以反过来让Client A主动去连Client B不就可以了。下面所说的Client A或Client B的NAT类型指的是对于Server S能看到的Client的最外层的NAT的类型。\n\n\n\n反过来让Client A主动去连Client B的技术就是所谓的：反向连接技术。\n\n具体的穿越过程如下：\n\n * Client B通过ConnectB1向Server S发送请求，请求连接Client A；\n * Server S按需回复看是否需要启动Client B的NAT类型侦测。(这要看Server S是否已经缓存了Client B的相关NAT信息)；\n * Server S通过[2]可以知道Client B具有公网IP，于是，Server S通过ConnectA1发送指令给Client A让Client A主动连Client B并告诉Client A目标Client B的IPB和监听端口PortB；\n * Client A收到Client B的IPB和监听端口PortB，然后发送连接请求连上Cient A并附带一下身份信息，于是两者就可以进行通信。\n\n下面为了描述简便，具体的NAT侦测步骤就省略了。\n\n# 网络拓扑类型二\n\n如下图，Client A和Client B位于同一个NAT后面，这个时候Client A和 Client B位于同一个局域网。\n\n\n\n具体的穿越过程如下：\n\n * Client A通过ConnectA1向Server S发送请求，请求连接Client B；\n * Server S发现Client A、B位于同一个NAT后面，于是返回Client A、Client B的公网EndpointGA、EndpointGB和内网EndpointPA、EndpointPB给Client A；\n * Client A收到后，知道Client B和自己位于同一个NAT里面，于是直接连上Client B的内网EndpointPB进行通信。\n\n# 网络拓扑类型三\n\n如下图，Client A和Client B分别位于不同的NAT后面，这个时候Client A和 Client B位于独立的局域网。\n\n\n\n具体的穿越过程如下：\n\n * Client A通过ConnectA1向Server S发送请求，请求连接Client B；\n * Server S发现Client A、B位于独立的NAT后面，也是通过ConnectA1返回给Client A、Client B的公网EndpointGA、EndpointGB和内网EndpointPA、EndpointPA给Client A。并且通过ConnectB1返回给Client A、Client B的公网EndpointGA、EndpointGB和内网EndpointPA、EndpointPB给Client B。\n\n接下来的步骤和Client A、Client B的NAT类型密切相关，下面会分别就相应的组合进行介绍具体的过程步骤。\n\n * Client A是任意类型NAT，Client B 是Full Cone NAT(Endpoint Independent Mapping和Endpoint-Independent Filtering)\n\nFull Cone NAT一般是比较少的，因为这样的NAT安全性很差。\n\n[3] Server S通过ConnectA1发送指令让Client A直接Connect Client B的外网EndpointGB，由于Client B的NAT是Full Cone，于是NAT不管三七二十一就把收到的包转发给Client B，于是它们就可以顺利通信了。\n\n * Client A是任意类型NAT，Client B 是Restricted Cone NAT(Endpoint Independent Mapping和Address-Dependent Filtering)\n\n[3] Server S通过ConnectB1发送指令让Client B 先bind内网EndpointPB然后往Client A的外网EndpointGA发送Connect请求(由于Client B是Endpoint Independent Mapping，那么EndpointPB依旧是映射为EndpointGB)，如果连接建立成功，那么它们就可以进行通信了，反之失败的话，Client B将失败结果反馈给Server S，然后转入[4]；[4] Server S收到失败反馈，通过ConnectA1发送指令让Client A往Client B的外网EndpointGB发送Connect请求，由于在步骤[3]，Client B已经往Client A发送过数据包，根据过滤规则(Address-Dependent Filtering)，Client B的NAT会允许Client A的数据包通过NAT并转发给Client B。于是，它们就建立其连接进行通信。\n\n * Client A的NAT类型：映射规则是(Endpoint Independent Mapping)的，过滤规则任意；Client B 是Port Restricted Cone NAT(Endpoint Independent Mapping和Address and Port-Dependent Filtering)\n\n[3] 该步骤和情况(2)中的步骤[3]完全一样。[4] Server S收到失败反馈，通过ConnectA1发送指令让Client A 先bind内网EndpointPA然后往Client B的外网EndpointGB发送Connect请求(由于Client A是Endpoint Independent Mapping，那么EndpointPA依旧是映射为EndpointGA)，由于在步骤[3]，Client B已经往Client A的EndpointGA发送过数据包，根据过滤规则(Address and Port-Dependent Filtering)，Client B的NAT会允许Client A的EndpointGA的数据包通过NAT并转发给Client B。于是，它们就建立其连接进行通信。\n\n * Client A的NAT类型：映射规则是(非Endpoint Independent Mapping)的，过滤规则任意；Client B 是Port Restricted Cone NAT(Endpoint Independent Mapping和Address and Port-Dependent Filtering)\n\n在这种情况下，在上面的步骤[4]的时候，由于Client A是非Endpoint Independent Mapping，那么EndpointPA就会映射为是EndpointGA_B而不是EndpointGA了。这样根据过滤 规则(Address and Port-Dependent Filtering)，Client B的NAT将不会允许Client A的EndpointGA_B的数据包通过NAT。要想数据包能通过Client B的NAT，需要Client B曾经给EndpointGA_B发送过数据。但是，我们无法通过直接的方法让Client B提前知道Client A的外网EndpointGA_B，难道就无能为力了吗？不，还是有些方法的，虽然无法直接知道Client A的外网EndpointGA_B，但是我们可以进行预测。\n\n具体过程如下：\n\n[3] 该步骤和情况(2)中的步骤[3]完全一样。[4] Server S收到失败反馈，通过ConnectA1发送指令让Client A 启动端口映射预测过程。端口映射预测可以简单、可以复杂，大体就是让Client A往Server的不同端口、不同ip发送数据包，以便Server收集到Client A的端口映射样本，以便能够根据样本的端口映射变化规律预测Client A的NAT的Mapping规则。[5] Server S根据[4]的预测情况，通过ConnectB1发送给Client B接下来Client A可能的映射端口列表也就是可能的外网EndpointGA1、EndpointGA2 ... EndpointGAn，然后让Client B都往这些外网EndpointGA1、EndpointGA2 ... EndpointGAn发送数据包。[6] 然后Server S通过ConnectA1发送指令让Client A 先bind内网EndpointPA然后往Client B的外网EndpointGB发送Connect请求(这个时候，假设预测算法有效的话，那么Client A的内网EndpointPA将会映射为EndpointGAi)，由于在步骤[5]，Client B已经往Client A的EndpointGAi发送过数据包，根据过滤规则(Address and Port-Dependent Filtering)，Client B的NAT会允许Client A的EndpointGAi的数据包通过NAT并转发给Client B。于是，它们就建立其连接进行通信。[7] 如果在步骤[4]的预测失败，那么在步骤[6]将建立连接失败，然后Client B将失败结果反馈给Server S。这个时候Server S可以启动重试步骤[4][5][6]或直接判断Client A和Client B无法建立直接的P2P通信了，于是进入Relay(服务器中转)环节。Realy部分在后面会单独介绍。\n\n# 网络拓扑类型四\n\n如下图，Client A和 Client B位于多层NAT后面。\n\n\n\n具体过程如下：\n\n * 1）Client A通过ConnectA1向Server S发送请求，请求连接Client B；\n * 2）Server S发现Client A、B位于同一个NAT后面，于是返回Client A、Client B的公网EndpointGA、EndpointGB和内网EndpointPA、EndpointPB给Client A；\n * 3）Client A收到后，认为Client B和自己位于同一个NAT里面，于是往Client B的内网EndpointPB发送连接请求，当然是连接不上的；\n * 4）在连接失败后，接着Client A尝试向Client B的外网EndpointGB发送连接请求，这个时候NAT C收到数据包后是否转发该数据包要看NAT C是否支持回环转换（hairpin translation），如果不支持那么就无法进行直连P2P通信，需要就需要反馈给Server S开启Relay。\n\n5）在步骤4）失败了，Client A是无法知道是因为NAT C不支持回环转换造成的失败，还是内层NAT的行为造成的失败。于是Client A就假设NAT C是支持回环转换的，这个时候网络拓扑情况就变成网络拓扑类型三了，那么接下来的穿越步骤就和网络拓扑类型三的多种情况一样的了，这里就不重复了。\n\n上图，只是给出了Client A、Client B位于两层NAT后面的一种情况，对于多层NAT的各种组合本文就不介绍了。对于多层NAT的组合，在穿透失败的时候，是比较难判断出到底是哪层NAT的行为造成的。我们只能用上面说过的所有方法进行逐一重试，如果还是失败，那只能启动Relay进行服务器中转了。\n\n\n# NAT穿越技术4：Relay服务器中转技术\n\n由于进行P2P穿透是否成功与NAT的行为和防火墙策略有很大的关系，因此就算是一个P2P友好NAT也很难保证100%穿透成功。举个例子：8.2.2.4 网络拓扑类型四，假设NAT A、NAT B 、NAT C都是Full Cone NAT（完全锥型），但是如果NAT C不支持回环转换（hairpin translation）那么也是无法穿透成功的。那么一个完整的P2P穿透的解决方案必不可少的一个部分就是relay了，relay部分主要TURN协议描述。作为STUN协议的一个补充，TURN协议主要由RFC5766、RFC6062、RFC6156来描述，其中RFC5766主要描述的是UDP协议的relay，RFC6062描述的是TCP协议（IPV4）的relay，而RFC6156描述的是IPV6的relay。下面主要介绍一下RFC5766和RFC6062两个文档中描述的较为重要的交互过程，具体的协议相关属性、报文结构等等，有兴趣的可以细读一下协议文档。\n\nTURN协议简单的来讲，如下图所示：client向turn server发送一个Allocation request请求一个分配（allocation），如果turn server接收请求就会给client分配一个relay地址（IP_RELAYA: PORT_RELAYA），每个allocation都有一个有效期，过了有效期就不能使用了。在有效期内client可以发送refresh request来刷新延长有效期。Client A想给peer A发送数据需要创建权限，这个通过createPermission request请求来创建权限，权限创建成功后，client A就可以发送数据给turn server由turn server中转给peer A，同时peer A发送给turn server数据也会被turn server中转给client A。如图中所示，由于client 没有注册peer B的权限，那么client 发给peer B的数据会被turn server丢弃，同时peer B发给client 的数据也会被turn server丢弃。\n\n\n\n\n\n\n# UDP协议的Relay\n\n首先介绍RFC5766，UDP协议的relay，主要有两种方式：第一种是Send and Data methods，第二种是channels。下面分别介绍这两个方式。\n\n# 方式一、Send and Data methods，具体交互过程如下：\n\n\n\n\n\n\n\n（1）首先client发送Allocate request 给TURN server 请求一个分配。其中携带的主要属性： Transaction-Id=0xA56250D3F17ABE679422DE85 ：事务ID用于标识一个交互过程 SOFTWARE="Example client, version 1.03" ：可有可无的属性 LIFETIME=3600 (1 hour) ：请求分配的有效期，期望有效期 REQUESTED-TRANSPORT=17 (UDP) ：未来数据传输采用的协议 DONT-FRAGMENT ：请求不要将数据进行分割分包转发给PEER。\n\n（2）TURN server回复一个Allocate error response响应，表示请求未通过授权，需要进行用户验证： Transaction-Id=0xA56250D3F17ABE679422DE85 ：事务ID要和（1）的一样 SOFTWARE="Example server, version 1.17" ：可有可无 ERROR-CODE=401 (Unauthorized) ：错误码 REALM="example.com" ：为了让客户端下次请求的时候要带上这个属性 NONCE="adl7W7PeDU4hKE72jdaQvbAMcr6h39sm" ：为了让客户端下次请求的时候要带上这个属性\n\n（3）Client收到响应后，发现是401错误响应，那么需要给TURN server提供用户名和密码进行验证。于是client重新发送Allocate request请求： Transaction-Id=0xC271E932AD7446A32C234492 ：另起一个事务，标识另外一个请求过程 SOFTWARE="Example client 1.03" ：同（1） LIFETIME=3600 (1 hour) ：同（1） REQUESTED-TRANSPORT=17 (UDP) ：同（1） DONT-FRAGMENT ：同（1） USERNAME="George" ：client的用户名 REALM="example.com" :（2）中TURN server响应给client的 NONCE="adl7W7PeDU4hKE72jdaQvbAMcr6h39sm" :（2）中TURN server响应给client的 MESSAGE-INTEGRITY=... ：一些加密信息，用于验证client的\n\n（4）TURN server 验证client通过后给client响应Allocate success response： Transaction-Id=0xC271E932AD7446A32C234492 ：事务ID要和（3）相同 SOFTWARE="Example server, version 1.17" ：同(3) LIFETIME=1200 (20 minutes) ：该分配的有效期，实际有效期 XOR-RELAYED-ADDRESS=192.0.2.15:50000 ：给client分配的relay地址 XOR-MAPPED-ADDRESS=192.0.2.1:7000 ：client的经NAT后的映射地址 MESSAGE-INTEGRITY=... ：一些加密信息\n\n（5）收到TURN server的success响应后，client发送CreatePermission request来创建peer的权限： Transaction-Id=0xE5913A8F460956CA277D3319 ：另起一个事务，标识另外一个请求过程 XOR-PEER-ADDRESS=192.0.2.150:0 ：需要创建权限的peer的IP地址，权限只与IP地址相关，与端口无关 USERNAME="George" REALM="example.com" :（2）中TURN server响应给client的 NONCE="adl7W7PeDU4hKE72jdaQvbAMcr6h39sm" :（2）中TURN server响应给client的 MESSAGE-INTEGRITY=... ：一些加密的信息\n\n（6）TURN server接受创建权限请求，发送CreatePermission success resp 响应给client： Transaction-Id=0xE5913A8F460956CA277D3319 ：事务ID要和（5）相同 MESSAGE-INTEGRITY=... ：一些加密信息\n\n（7）创建权限成功后，client就可以用Send indication来发送数据给TURN server然后由TURN server将数据relay给peer： Transaction-Id=0x1278E9ACA2711637EF7D3328 ：另起一个事务，标识另外一个请求过程 XOR-PEER-ADDRESS=192.0.2.150:32102 ：需要发送数据的peer监听的IP: PORT（注意IP一定要和注册权限的时候的IP一样，否则会被拒绝relay并响应错误） DONT-FRAGMENT ：请求TURN server不要将data数据分片发送 DATA=... ：client需要发给peer的数据内容\n\n（8）TURN server收到Send indication请求后，进行一些权限检查后，提取出协议包中的data属性中的数据内容，然后将数据内容用UDP协议从client的relay地址（源：192.0.2.15:50000）发送给peer（目的：192.0.2.150:32102）： -- UDP dgm -> data=... ： 发给peer的UDP 数据包\n\n（9）peer收到UPD数据包后，如果有响应数据，那么就将响应数据用UDP发给TURN server的192.0.2.15:50000地址： <- UDP dgm – data=... ：响应给TURN server的UDP数据包\n\n（10）TURN server在client的relay地址（192.0.2.15:50000）那收到peer（192.0.2.150:32102）的UDP数据包，这时TURN server需要检测client是否注册了IP192.0.2.150的权限，如果没有就会丢弃该数据包。如果有那么就取出UDP数据包中的data部分，然后将data封装成TURN协议数据包，给client发送Data indication： Transaction-Id=0x8231AE8F9242DA9FF287FEFF ：协议并不要求这个事务ID要和（7）中的一样 XOR-PEER-ADDRESS=192.0.2.150:32102 ：标识数据来自哪个peer DATA=... : peer 发给client的数据内容\n\n以上是Send and Data methods方式的核心交互过程，较为完整交互过程可以查看一下协议文档。这里有个问题需要说明一下，就是每个allocation都有一个有效期，client需要把握好有效期，及时在有效期内发送refresh request来刷新延长有效期。\n\n\n# 9.1.2方式二、channels，具体交互过程如下：\n\n\n\n\n\n\n\n（1）--（6）交互过程和Send and Data methods方式是一样的，这里就不在重复了。\n\n（7）权限创建成功后，client发送ChannelBind request给TURN server请求进行channel bind。 Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID CHANNEL-NUMBER=0x4000 ：client定义的bind channel ID XOR-PEER-ADDRESS=192.0.2.210:49191 ：peer B的IP和PORT USERNAME="George" ：同方式一 REALM="example.com" ：同方式一 NONCE="adl7W7PeDU4hKE72jdaQvbAMcr6h39sm" ：同方式一 MESSAGE-INTEGRITY=... ：同方式一\n\n（8）TURN server接受channelBind请求后，给client发送ChannelBind success response响应 Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID，和（7）相同 MESSAGE-INTEGRITY=... |\n\n（9）client收到ChannelBind success response后就可以通过ChannelData来发送数据了。 Channel-number=0x4000 ：（7）中定义bind channel ID Data=... ：client需要发给peer B的数据内容\n\n（10）TURN server收到ChannelData后首先从TURN协议数据包中提取出Channel-number，接着查找Channel-number是否已经绑定peer，如果没有就返回错误并丢弃数据包；如果查找到有绑定peer，那么就提前出Data属性中的数据内容用UDP协议通过client的relay地址（源：192.0.2.15:50000）发送给peer B（目的：192.0.2.210:49191）。 --- UDP datagram ---------\x3e Data=... 发给peer B的UDP 数据包\n\n（11）peer收到UPD数据包后，如果有响应数据，那么就将响应数据用UDP发给TURN server的192.0.2.15:50000地址 <-- UDP datagram ---------- Data=... :peer 发给client的数据内容\n\n（12）TURN server在client的relay地址（192.0.2.15:50000）那收到peer（192.0.2.210:49191）的UDP数据包，这时TURN server需要检测client是否注册了IP192.0.2.150的权限，如果没有就会丢弃该数据包。如果有注册权限，那就检查client是有channel绑定该peer，如果有那么就通过Channel Data 方式relay数据给client，否则就通过方式一中的Data indication 方式relay数据给client Channel-number=0x4000 ：（7）中定义bind channel ID Data=... ：peer B发给client的数据内容\n\n以上是channels的核心交互过程，较为详细的过程可以查看协议文档。方式二比方式一多了一个channel Bind的步骤，这个步骤是为了告诉TURN server接下来以Channel-number标识的协议数据包是要发给谁的，这样才使得ChannelData中只要携带一个Channel-number头部信息就可以，而不用携带方式一中的Transaction-Id、XOR-PEER-ADDRESS等额外的头部信息，减少数据量。\n\n\n# TCP协议的Relay\n\nTCP协议的relay是在RFC6062中描述，其中主要有两种情况下的relay：1. Client to peer 2. Client to client。下面分别介绍两种情况下relay。\n\n# 情况一、Client to peer，网络拓扑如下：\n\n\n\n在上面的网络拓扑下，有两种方式的relay：1. TURN Client 主动发起的relay 2. TURN Peer主动发起的relay。下面分别介绍这两种方式的交互过程。这里Turn Client表示能够理解TURN协议的主机，而Turn Peer表示普通的一般主机。\n\n9.2.1.1）TURN Client 主动发起的relay：\n\n在这种方式下，TURN server要能够直接连接上TURN Peer监听的端口才行。具体交互过程如下：\n\n\n\n\n\n（1）--（6）交互过程和RFC5766的是基本一样的，这里就不在重复了。所不同的是RFC5766中是UDP协议，而这里是TCP协议，并且（1）--（6）是在一个连接中完成，我们称这个连接为control connection。\n\n（7）client创建权限成功后，通过control connection发送Connect request给TURN server请求TURN server去连接Peer A Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID XOR-PEER-ADDRESS=192.0.2.210:49191 ：Peer A监听的IP和端口\n\n（8）TURN server收到Connect request后， 它会通过client的relay地址（源：192.0.2.15:50000）尝试TCP连接到Peer A的192.0.2.210:49191，如果连接不成功，那么给client响应错误码为447的错误。如果连接成功那么转入（9），我们称这个连接为Peer data connection\n\n（9）TURN server连接Peer A成功后，给client发送Connect success response Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID，同（7） CONNECTION-ID=0x123456787 ：TURN server给client响应的标识，用于将两条TCP连接联系起来用的。\n\n（10）client在control connection上收到Connect success response，那么client需要建立另外一条TCP连接连上TURN server，我们称这条连接为new connection。Client通过new connection给TURN server发送ConnectionBind request，请求将new connection和Peer data connection进行绑定。 Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID CONNECTION-ID=0x123456787 ：（9）中收到的CONNECTION-ID\n\n（11）TURN server 收到ConnectionBind request后，进行一些操作，把new connection和Peer A connection两条TCP连接联系起来。\n\n通过上面11个步骤以后，client和peer A就能分别通过new connection和Peer data connection两条TCP连接来发送数据了。Client通过new connection发送的数据到达TURN server，TURN server就会将数据原封不动通过Peer data connection转发给Peer A，同样对于Peer A也是一样的，TURN server就像进行端口转发一样了。这里有个问题是：Peer A connection这条TCP连接要比new connection这条TCP连接早一些建立起来的，这样在new connection建立起来之前peer A就开始发送数据的话，那么TURN server这个时候是无法将数据转发给client的，所以RFC6062协议要求，只要Peer data connection连接建立好了，那么TURN server就必须做好准备接收peer A的数据，并将接收到的数据buffer住，等new connection建立好后在转发给client。但是，有些开源实现并没有这样做，所以这点要注意一下。\n\n9.2.1.2）TURN Peer主动发起的relay：\n\n在这种方式下，TURN Peer可以位于NAT后面，具体交互如下：\n\n\n\n\n\n（1）--（6）交互过程和方式1的是一样的，这里就不在重复了。\n\n（7）Peer A通过192.0.2.210:49191向client的relay地址192.0.2.15:50000发起TCP连接。TURN server 马上accept这个TCP连接并做好buffer Peer A发送的数据流的准备。然后，TURN server检查 拥有relay地址192.0.2.15:50000的client是否已经注册了Peer A（192.0.2.210）的权限，如果没有，那么TURN server会马上close刚刚accept的连接。如果有，那么转向（8），我们把这个连接称为peer data connection\n\n（8）TURN server 查找到拥有relay地址192.0.2.15:50000的client的control connection，通过control connection给client发送ConnectionAttempt indication。 Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID XOR-PEER-ADDRESS=192.0.2.210:49191 ：（7）中accept那个peer A的IP和端口 CONNECTION-ID=0x789465213545 ：TURN server给client响应的标识，用于将两条TCP连接联系起来用的\n\n（9）client收到ConnectionAttempt indication，如果接收这个peer的话，那么client会新起一个连接连上TURN server，我们称这个连接为new connection，client通过new connection给TURN server发送ConnectionBind request，请求绑定peer data connection。 Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID CONNECTION-ID=0x789465213545 ： （8）中收到的CONNECTION-ID\n\n（10）TURN server收到ConnectionBind request后会通过new connection给client发送ConnectionBind request success response。 通过上面10个步骤以后，client和peer A就能分别通过new connection和Peer data connection两条TCP连接来发送数据了。这个方式同样存在方式1中的数据buffer住问题。在这种情况下，在Peer A看来与之通信的是Endpoint(client的relay地址192.0.2.15:50000)，Peer A不需要知道真实的Client的地址。\n\n# 情况二、Client to client，网络拓扑结构如下：\n\n\n\n这种情况下，RFC6062文档中并没有讲到，估计是因为这种情况是情况一的一个特例而已，我这里展开来讲一下是希望能帮助大家更加深刻理解协议本身。\n\nTURN Client1和TURN Client2（1）-（6）步骤的交互情况基本和上面的一样，并且是比较独立的，所以下面直接给出了。\n\nTURN Client1 的（1）-（6）步骤交互情况如下：\n\n\n\nTURN Client2 的（1）-（6）步骤交互情况如下：\n\n\n\n从上面的交互可以知道TURN Client 1 的relay地址是：192.0.2.15:50000 ，NAT映射后的地址是：192.0.2.1:7000，而TURN Client2的relay地址是：192.0.2.150:40000 ，NAT映射后的地址是：192.0.2.2:7000。下面继续给出TURN Client 1和TURN Client 2的其他交互情况，由于它们和TURN server的交互带有一定的时序性，下面会交错给出它们和TURN server的交互步骤。TURN Client1和TURN Client2是对称，这里不妨假设TURN Client1是数据交互的发起者，具体交互过程如下：\n\n（7）TURN Client1 首先通过control connection1发送Connect request给TURN server，请求连接TURN Client 2的relay地址192.0.2.150:40000。 Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID XOR-PEER-ADDRESS=192.0.2.150:40000 ： TURN Client2的relay地址\n\n（8）TURN server收到Connect request后， 它会通过TURN Client1的relay地址（源：192.0.2.15:50000）尝试TCP连接到192.0.2.150:40000，这个连接一般都会成功，因为这个是TURN server给的relay地址，我们称这个连接为peer data connection1\n\n（9）TURN server连接192.0.2.150:40000成功后，给TURN Client1发送Connect success response Transaction-Id=0x6490D3BC175AFF3D84513212：事务ID CONNECTION-ID=0x123456787 ：TURN server给client响应的标识，用于将两条TCP连接联系起来用的\n\n（10）这个步骤和（9）几乎同时发生的，TURN server发现TURN Client2的relay地址192.0.2.150:40000有个TCP连接上来，那么TURN server马上accept这个连接，我们称这个连接是peer data connection2（其实就是peer data connection1）；经过权限检查后，TURN server通过TURN Client2的control connection2给TURN Client2发送ConnectionAttempt indication Transaction-Id=0x6490D3BC175AFF3D84511111 ：事务ID XOR-PEER-ADDRESS=192.0.2.15:50000 ：TURN Client1的relay地址 CONNECTION-ID=0x789465213545 ：TURN server给client响应的标识，用于将两条TCP连接联系起来用的\n\n（11）TURN Client1 收到Connect success response后，另起一个TCP connection连接上TURN server，我们称这个连接为new connection1。TURN Client1通过new connection1给TURN server 发送ConnectionBind request Transaction-Id=0x6490D3BC175AFF3D84513212 ：事务ID CONNECTION-ID=0x123456787 ： （9）中TURN server响应的CONNECTION-ID\n\n（12）这个步骤几乎和（11）同时发生，TURN Client2 收到ConnectionAttempt indication，表示接受，然后它另起一个TCP connection连接上TURN server我们称这个连接为new connection2。TURN Client2通过new connection2给TURN server发送ConnectionBind request。 Transaction-Id=0x6490D3BC175AFF3D84511111 ：事务ID CONNECTION-ID=0x789465213545 ：（10）中TURN server响应的CONNECTION-ID\n\n（13）和（14）TURN server分别通过new connection1和new connection2给TURN Client 1和TURN Client 2发送ConnectionBind request success response。\n\n通过以上14个步骤，TURN Client 1就能借助new connection1和peer data connection1与TURN Client 2进行数据交互。而TURN Client 2借助new connection2和peer data connection2与TURN Client 1进行数据交互。\n\n到这里，P2P通信穿越NAT的相关原理、技术、方法的进阶分析基本介绍完毕，关于STUN和TURN协议，有个开源实现，有兴趣的同学可以阅读一下源码：https://github.com/coturn/rfc5766-turn-server\n\n另外还有一个ICE协议，这个也有一个文档系列：\n\n * RFC 5245 - ICE\n * RFC 5768 – ICE–SIP\n * RFC 6336 – ICE–IANA Registry\n * RFC 6544 – ICE–TCP\n * RFC 5928 - TURN Resolution Mechanism\n\n这个文档系列较为复杂一些，有兴趣的可以阅读一下。\n\n\n# 参考\n\n * Peer-to-Peer Communication Across Network Address Translators\n * RFC 5780 - NAT Behavior Discovery Using Session Traversal Utilities for NAT (STUN)\n * RFC5780 中文翻译 中文RFC RFC文档 RFC翻译 RFC中文版\n\n\n# 说明\n\n本文转载自 P2P技术详解(三)：P2P中的NAT穿越(打洞)方案详解(进阶分析篇)。',normalizedContent:'# nat 和 napt\n\n网络地址转换（nat，全称 network address translation），早期的nat指的是 basic nat（静态nat），它在技术上比较简单一点，仅支持地址转换，不支持端口映射。这就需要对每一个当前连接都要对应一个ip地址，因此要维护一个公网的地址池。\n\n我们可以看出，basic nat一个比较明显的缺陷就是：同一时刻只能少量位于nat后面的机器能够和外部交互（要看nat有几个外网ip）。\n\n后期的nat基本都指的是**napt(网络地址端口转换)**了，这种方式支持端口的映射并允许多台主机共享一个公用ip地址，这样就可以支持同时多个位于nat后面的机器和外部进行交互了。\n\n支持端口转换的nat又可以分为两类：\n\n * 源地址转换nat（snat）；\n * 目的地址转换nat（dnat）。\n\n下面说的nat都是指napt。\n\n\n# nat带来的问题\n\nnat在缓解ipv4地址资源的紧张的同时，也带来了不少问题：\n\n * nat使ip会话的保持时效变短；\n * nat在实现上将多个内部主机发出的连接复用到一个ip上，这就使依赖ip进行主机跟踪的机制都失效了；\n * nat工作机制依赖于修改ip包头的信息，这会妨碍一些安全协议的工作；\n * nat限制了使用一些高层协议(ftp、quake、sip)的peer两端的p2p通信。\n\n对于问题1：其主要原因是，nat设备建立的内网ip、端口到外网ip、端口的映射的表项是有一个保活期的。如果在一个超时时间内，该映射上没有实际数据的传输，那么nat会过期并回收这个映射表项给其他通信链路用(ip和端口资源有限，通信的链路是无限)。为了避免这种通信链路提前被nat中断的情况，很多应用层协议在设计的时候就考虑了一个连接保活的机制，即在一段时间没有数据需要发送时，主动发送一个nat能感知到而又没有实际数据的保活消息，这么做的主要目的就是重置nat的会话定时器。\n\n对于问题2：其主要原因是，对于nat后面的n多主机，在外部看来都是同一个主机(nat设备)，于是来之同一个ip的数据包一定是来之同一个主机的前提判断就会不准确了，这样一下基于这个前提的机制(例如：tcp的time_wait的回收和重用)都会有问题。\n\n对于问题3：其主要原因是，nat篡改了ip地址、传输层端口号和校验和。\n\n对于问题4：其主要原因是，一般情况下，nat是不允许外部的peer节点主动连接或发送数据包给nat后面的主机的(这里的主动指的是，在一段时间内，首先发送数据包的一方为主动方)。\n\nnat表现出这样的行为，主要基于下面的几点考虑：\n\n * 出于安全考虑，避免来自网络外部的攻击，隐藏并保护网络内部的计算机；\n * 位于nat后面的很多主机，对于主动进来的数据包，nat一般不知道该路由给内部的哪个主机(nat设备上没有相关转发表项)。\n\n由于nat这种特性，那么在nat环境下，实现p2p通信的完整解决方案包括几个部分呢？相关的原理、方法、技术有哪些？\n\n对于一个完整的p2p通信解决方案，其实现包括下面两个步骤：\n\n * 首先在server的协助下，通信两端peer尝试相互连接，如果两端peer在尝试互联不成功后，那么就将失败结果反馈给server转入步骤2）；\n * 这个步骤比较简单粗暴了，就是relay(服务器中转)，简单的来讲就是peer1将要发给peer2的数据发给server，然后由server帮忙转发给peer2，同样对于peer2来说也一样。\n\n对于实现p2p通信，步骤1是大家下功夫最多的，其原因比较简单，就是步骤2需要消耗较多的服务器资源，成本比较高。步骤1实现p2p两个节点间的直接通信，在资源消耗和效率上都是比较好的。\n\n\n# p2p通信穿越nat的技术、方法\n\n目前常见的p2p通信穿越nat的技术、方法主要有：\n\n * 应用层网关；\n * 中间件技术；\n * 打洞技术(hole punching)；\n * relay(服务器中转)技术。\n\n\n# nat穿越技术1：应用层网关\n\n应用层网关(alg)是解决nat对应用层协议无感知的一个最常用方法，已经被nat设备厂商广泛采用，成为nat设备的一个必需功能。\n\n\n# 原理\n\n利用带有alg功能的nat对特定应用层协议的支持和理解，在一个nat网关检测到新的连接请求时，需要判断是否为已知的应用类型，这通常是基于连接的传输层端口信息来识别的。在识别为已知应用时，再调用相应功能对报文的深层内容进行检查，当发现任何形式表达的ip地址和端口时，将会把这些信息同步转换，并且为这个新连接创建一个附加的转换表项。\n\n这样，当报文到达公网侧的目的主机时，应用层协议中携带的信息就是nat网关提供的地址和端口。\n\n例如下图，对于使用主动模式的ftp协议(port方式)，就需要agl的支持了。\n\n\n\n由于ftp协议通信需要两个tcp连接，一个是命令链路，用来在ftp客户端与服务器之间传递命令；另一个是数据链路，用来上传或下载数据。如上图，位于nat后面的ftp client(192.168.1.2)首先发起一个tcp连接(命令链路)连上外网ftp server(8.8.8.1)，然后发送port报文(192.168.1.2，1084)说自己在1084端口接收数据，然后进过alg处理port报文变成(8.8.8.1，12487)，同nat建立其一条(192.168.1.2，1084 <—>8.8.8.1，12487)映射。这样ftp server发往(8.8.8.1，12487)的数据就会被转到(192.168.1.2，1084)，从而实现数据传输(如果没经过alg处理，那么ftp server直接连接192.168.1.2，1084是无法连接上的)。\n\n\n# 限制\n\nalg技术是利用nat本身的支持来进行nat的穿越，这个方案有很大限制，主要的原因是alg都是为特定协议的特定规范版本而开发的，然而不管是协议本身，还是协议的数量都在变化，这就使得alg适应性不强。\n\n\n# nat穿越技术2：中间件技术\n\n这是一种通过开发通用方法解决nat穿越问题的努力。与前者不同之处是，agl技术中nat网关是这一解决方案的唯一参与者，而中间件技术中客户端会参与网关公网映射信息的维护。upnp就是这样一种方法，upnp中文全称为通用即插即用，是一个通用的网络终端与网关的通信协议，具备信息发布和管理控制的能力。\n\n\n# 原理\n\nnat只要理解客户端的请求并按照要求去分配响应的映射转换表，不需要自己去分析客户端的应用层数据。网关映射请求可以为客户动态添加映射表项。\n\n此时，nat不再需要理解应用层携带的信息，只转换ip地址和端口信息。而客户端通过控制消息或信令发到公网侧的信息中，直接携带公网映射的ip地址和端口，接收端可以按照此信息建立数据连接。nat网关在收到数据或连接请求时，按照upnp建立的表项只转换地址和端口信息，不关心内容，再将数据转发到内网。\n\n\n# 限制\n\n这种方案需要网关、内部主机和应用程序都支持upnp技术，且组网允许内部主机和nat网关之间可以直接交换upnp信令才能实施。\n\n\n# nat穿越技术3：打洞技术(hole punching)\n\nhole punching技术是工作在运输层的技术，可以屏蔽上层应用层的差异，并且不需要nat网关特定的支持，因此其通用性比较强，应用性也比较广。\n\n\n# 原理\n\n打洞技术的原理比较简单，就是nat内网的节点需要在nat上建立自己的一条转发映射关系(这就是所谓的在nat上打下一个洞)，然后外网的节点就通过这个”洞”来进行通信。为描述方便，我们将一对ip地址和端口信息的组合称之为一个endpoint。\n\n打洞原理可以简化为下面三个过程：\n\n * 首先位于nat后的peer1节点需要向外发送数据包，以便让nat建立起内网endpoint1(ip1、port1)和外网endpoint2(ip2、port2)的映射关系；\n * 然后通过某种方式将映射后的外网endpoint2通知给对端节点peer2；\n * 最后peer2往收到的外网endpoint2发送数据包，然后该数据包就会被nat转发给内网的peer1。\n\n上面三个过程比较简单，然而细心的同学会有些疑问：\n\n * 步骤[1]中的映射关系的建立有什么规律的么?怎样才能获取到映射关系呢？\n * 通知对端节点peer2的方式一般是怎么样的？\n * 步骤[3]一定可以实现么？也就是peer2往收到的外网endpoint2发送数据包，就一定能够被nat转发给内网的peer1吗？\n\n对于疑问(3)，如果全部会被转发给内网peer1，那会不会太不安全了，只要知道内网peer1的映射后的外网endpoint2，就可以给穿透nat给内网peer1发送数据，这样内网peer1不就很容易遭到攻击了？如果全部都不转发给内网peer1，这样peer1只能向外发数据，而无法收到外面的数据，严重影响peer1的正常通信。\n\n那么，这就比较明了了，我们需要的是一部分可以转发，另外一部分不转发。这就涉及到nat对外来数据包的一个过滤规则了，而疑问(1)提到的映射关系建立的规则，这涉及到nat的endpoint的映射规则。\n\n那么问题来了，有什么方法可以知道nat的endpoint映射规则和对外来数据包的过滤规则呢？\n\n\n# 方法\n\n由上面原理的讨论我们知道，要实现打洞穿越nat，首先需要知道nat的行为规则(nat的endpoint映射规则和对外来数据包的过滤规则)，这样才能更好地实现打洞穿越。\n\n那nat有哪些行为类型？有什么办法来侦测nat的行为呢？\n\n# nat行为类型与侦测方法\n\nnat的行为类型和侦测方法是由stun（首先在rfc3489中定义，英文全称是simple traversal of udp through nats）协议来描述的，stun协议包括了rfc3489、rfc5389、rfc5780、rfc5769几个系列文档。\n\n早期的stun协议是由rfc3489（经典的stun）来描述，其定义的nat行为类型如下：\n\n * full cone nat - 完全锥形nat：\n\n所有从同一个内网ip和端口号endpoint1发送过来的请求都会被映射成同一个外网ip和端口号endpoint2，并且任何一个外网主机都可以通过这个映射的endpoint2向这台内网主机发送包。也就是外网所有发往endpoint2的数据包都会被nat转发给endpoint1。由于对外部请求的来源无任何限制，因此这种方式虽然足够简单，但却不安全。\n\n * restricted cone nat - 限制锥形nat：\n\n它是full cone的受限版本：所有来自同一个内网endpoint1的请求均被nat映射成同一个外网endpoint2，这与full cone相同。但不同的是，只有当内网endpoint1曾经发送过报文给外部主机（假设其ip地址为ip3）后，外部主机ip3发往endpoint2的数据包才会被nat转发给endpoint1。这意味着，nat设备只向内转发那些来自于当前已知的外部主机的数据包，从而保障了外部请求来源的安全性\n\n * port restricted cone nat - 端口限制锥形nat：\n\n它是restricted cone nat的进一步受限版，与限制锥形nat很相似，只不过它包括端口号port。只有当内网endpoint1曾经发送过报文给外部endpoint3(包括ip和端口了)，endpoint3发往endpoint2的数据包才会被nat转发给endpoint1。端口号port这一要求进一步强化了对外部报文请求来源的限制，从而较restrictd cone更具安全性。\n\n * symmetric nat - 对称nat：\n\n上面的1）2）3）所有的cone nat中，映射关系只和内网的源endpoint1相关，只要源endpoint1不变其都会被映射成同一个endpoint2。而对称nat的映射关系不只与源endpoint1相关，还与目的endpoint3相关。也就是源endpoint1发往目的endpoint30的请求被映射为endpoint20，而源endpoint1发往目的endpoint31的请求，则被映射为endpoint21了。此外，只有收到过内网主机发送的数据的外网主机才可以反过来向内网主机发送数据包。\n\n经典 stun 定义的 nat 行为类型是将nat的 mapping behavior （映射规则）和 filtering behavior（过滤规则）统一来归类的，这样对 symmetric nat 类型的归类过于笼统，使得许多 nat 不完全符合由它定义的类型。\n\n于是后来，rfc3489被废弃并由rfc5389来替代，在rfc5389中，将 mapping behavior （映射规则）和 filtering behavior（过滤规则）分开来，定义了3种 mapping behavior （映射规则）和3种 filtering behavior（过滤规则），一共有9种组合。\n\n为什么是3种呢？其实理由很简单，对于一个特定的内网源endpoint1，影响其映射关系的因素不外乎就4种情况：\n\n * 目的ip和目的端口port都无关；\n * 目的ip和目的端口port都相关；\n * 仅仅目的ip相关；\n * 仅仅目的port相关。\n\n对于4仅仅考虑一下port信息有点鸡肋，基本和1差不多，于是把4去掉了。同样，对于过滤规则也一样。\n\n3种mapping behavior （映射规则）和 filtering behavior（过滤规则）如下。\n\nmapping behavior：\n\n * endpoint-independent mapping：对于一个内网的endpointp，其映射的外网endpointg是基本固定的，不会随着通信外部主机的不同而变化。\n\n * address and port-dependent mapping：对于一个内网的endpointp，如果与之通信的外部为endpointgb1，那么endpointp就会被nat映射成endpointg1；如果与之通信的外部为endpointgb2，那么endpointp就会被nat映射成endpointg2。也就是只要之通信的外部为endpointgb发生变化，那么映射的外网endpointg就会变化。\n\n * address-dependent mapping：对于一个内网的endpointp，如果与之通信的外部为endpointgb1，那么endpointp就会被nat映射成endpointg1；如果与之通信的外部为endpointgb2(如果endpointgb2的ip和endpointgb1的相同)，那么endpointp同样会被nat映射成endpointg1，否则就会被nat映射成endpointg2。也就是只要之通信的外部为endpointgb的ip发生变化，那么映射的外网endpointg就会变化。\n\nfiltering behavior：\n\n * endpoint-independent filtering：对于这种过滤类型，nat在在自己的一个外网endpointg1收到数据包，只要找到与之对应的内网endpointp1，nat就会转发这个数据包给相应的内网endpointp1，不管这个数据包的来源是那里。(一般来说，这样过滤规则的nat是比较少的，因为这样的安全系数比较低)\n\n * address and port-dependent filtering：对于这种过滤类型，nat在自己的一个外网endpointg1收到来源是endpointga1数据包，这个时候nat要判断自己是否曾经通过自己的endpointg1给endpointga1发送过数据包，如果曾经发过，那么nat就允许该数据包通过nat并路由给内网与之对于的内网endpointp1；如果没发过，那么nat会不允许该数据包通过nat。\n\n * address-dependent filtering：对于这种过滤类型，nat在自己的一个外网endpointg1收到来源是endpointga1数据包，这个时候nat要判断自己是否曾经通过自己的endpointg1给和endpointga1的ip相同的机器发送过数据包(这里会忽略端口)，如果曾经发过，那么nat就允许该数据包通过nat并路由给内网与之对于的内网endpointp1；如果没发过，那么nat会不允许该数据包通过nat。\n\nrfc5389只是定义了协议的相关属性、机制、报文结构以及一些相关的安全注意点等等，并有没对怎么进行完整的nat类型侦测做介绍。而对完整nat类型侦测过程主要由rfc5780这个文档来描述。完整的nat类型侦测的过程主要在rfc5780文档的4.3和4.4节，主要分为nat映射规则（determining nat mapping behavior）和nat过滤规则（determining nat filtering behavior）。\n\n下面对具体的侦测过程做介绍：\n\n要进行nat类型的侦测，需要一个具有双公网ip的服务器来协助侦测，我们称该服务器为stun server。假设stun server的双ip分别为ip_sa(125.227.152.3)和ip_sb(125.227.152.4) 监听的两个端口分别为port_sa(4777)和port_sb(4888)，客户端a的内网和端口分别为ip_ca(10.70.142.12)和port_ca(1234)。\n\n * 客户端a以ip_ca: port_ca给stun server的ip_sa: port_sa发送一个bind请求，stun server以ip_sa: port_sa给客户端a的ip_ca: port_ca回复响应，响应内容大体为：（nat映射后的ip地址和端口为：ip_mca1: port_mca1，stun server的另外一个ip地址和端口为：ip_sb: port_sb）。这个时候客户端判断，如果ip_ca: port_ca == ip_mca1: port_mca1，那么该客户端是拥有公网ip的，nat类型侦测结束。\n\n * 客户端a以ip_ca: port_ca给stun server的ip_sb: port_sa(相对步骤1 ip改变了)发送一个bind请求，stun server以ip_sb: port_sa给客户端a的ip_ca: port_ca回复响应，响应内容大体为：（nat映射后的ip地址和端口为：ip_mca2: port_mca2）。这个时候客户端判断，如果ip_mca1: port_mca1 == ip_mca2: port_mca2，那么nat是endpoint independent mapping的映射规则，也就是同样的内网地址ip_ca: port_ca经过这种nat映射后的ip_m: port_m是固定不变的；如果ip_mca1: port_mca1 != ip_mca2: port_mca2,那么就要进行下面的第3步测试。\n\n * 客户端a以ip_ca: port_ca给stun server的ip_sb: port_sb(相对步骤1 ip和port改变了)发送一个bind请求，stun server以ip_sb: port_sb给客户端a的ip_ca: port_ca回复响应，响应内容大体为：（nat映射后的ip地址和端口为：ip_mca3: port_mca3）。这个时候客户端判断，如果ip_mca2: port_mca2== ip_mca3: port_mca3，那么nat是address dependent mapping的映射规则，也就是只要是目的ip是相同的，那么同样的内网地址ip_ca: port_ca经过这种nat映射后的ip_m: port_m是固定不变的；如果ip_mca2: port_mca2!= ip_mca3: port_mca3，那么nat是address and port dependent mapping，只要目的ip和port中有一个不一样，那么同样的内网地址ip_ca: port_ca经过这种nat映射后的ip_m: port_m是不一样的。\n\n以上三个步骤是进行mapping behavior的侦测，下面两个步骤是进行filtering behavior侦测：\n\n * 客户端a以ip_ca: port_ca给stun server的ip_sa: port_sa发送一个bind请求（请求中带change-request attribute来要求stun server改变ip和port来响应），stun server以ip_sb: port_sb给客户端a的ip_ca: port_ca回复响应。如果客户端a能收到stun server的响应，那么nat是endpoint-independent filtering的过滤规则，也就是只要给客户端a的ip_ca: port_ca映射后的ip_mca: port_mca地址发送数据都能通过nat到达客户端a的ip_ca: port_ca（这种过滤规则的nat估计很少）。如果不能收到stun server的响应，那么需要进行下面的第五步测试。\n\n * 客户端a以ip_ca: port_ca给stun server的ip_sa: port_sa发送一个bind请求（请求中带change-request attribute来要求stun server改变port来响应），stun server以ip_sa: port_sb给客户端a的ip_ca: port_ca回复响应。如果客户端a能收到stun server的响应，nat是address-dependent filtering的过滤规则，也就是只要之前客户端a以ip_ca: port_ca给ip为ip_d的主机发送过数据，那么在nat映射的有效期内，ip为ip_d的主机以任何端口给客户端a的ip_ca: port_ca映射后的ip_mca: port_mca地址发送数据都能通过nat到达客户端a的ip_ca: port_ca；如果不能收到响应，nat是address and port-dependent filtering的过滤规则，也即是只有之前客户端a以ip_ca: port_ca给目的主机的ip_d: port_d发送过数据，那么在nat映射的有效期内，只有以ip_d: port_d给客户端a的ip_ca: port_ca映射后的ip_mca: port_mca地址发送数据才能通过nat到达客户端a的ip_ca: port_ca。\n\n通过以上5个步骤就能完成完整的nat类型侦测。\n\n将nat映射规则和过滤规则组合起来就形成9中不同的nat行为类型：\n\n * endpoint independent mapping和endpoint-independent filtering组合对应于rfc3489中的full cone nat；\n * endpoint independent mapping和address-dependent filtering组合对应于rfc3489中的restricted cone nat；\n * endpoint independent mapping和address and port-dependent filtering组合对应于rfc3489中的port restricted cone nat；\n * address and port-dependent mapping和address and port-dependent filtering组合是rfc3489中所说的symmetric nat。\n\n可见rfc3489只描述了9种nat组合行为类型中的4种。最后一个文档rfc5769，定义了一些stun协议的测试数据用于测试stun server的正确性。\n\n# nat打洞过程\n\n“打洞”方式穿越nat有两种形式：tcp”打洞”和udp”打洞”。原理上，tcp”打洞”与udp”打洞”是没有本质的区别的。\n\n然而在实现上，tcp”打洞”的成功率远没udp”打洞”的成功率高，其主要原因有三：\n\n * 有些nat防火墙策略对tcp协议不是很友好：有些nat的防火墙策略不允许来路不明的外部向内网机器发起tcp连接。由于tcp是有连接的，nat比较容易分清哪些是nat内网机器主动进行通信的外部节点，这样防火墙策略比较明确。而udp是无连接的，没有连接来标明一个数据流，协议比较简单，这样nat支持的比较多。\n\n * tcp协议本身：由于tcp的time_wait状态引起，同一个nat后面的其他主机发起的连接被误判。具体可以看下面的文章：km.oa.com/group/25569/articles/show/246068 。\n\n * tcp协议的实现api：因为标准的berkeley sockets api是围绕c/s编程而设计的。这个api通过connect()允许一个tcp流套接字初始化一个向外的连接，通过listen()和 accept()监听一个外入的连接，一个套接字不能既用来监听又用来初始化向外的连接。更进一步讲，tcp套接字通常与本地主机上的tcp端口一一对应：一个套接字绑定到本地主机上的某个端口后，另一个套接字就不能再绑定到该端口。然而tcp打洞要成功，需要一个本地的tcp端口既可以监听外入的连接，同时又可以发起多个向外的连接。幸运的是，所有主流的操作系统都支持一个特殊的socket选项so_reuseaddr，它运行应用程序绑定多个设置了该选项的套接字到同一端口。bsd系统引入了so_reuseport选项来控制端口重用，从而把端口重用和地址重用相分离。在这样的系统中，两个选项都需要被设置。尽管如此，要进行tcp打洞需要进行tcp三次握手的同时打开，但是有些tcp/ip的实现，可能不支持这种同时打开的情况，这样也就无法建立tcp连接了。\n\n下面就几种网络拓扑情况下，nat打洞步骤进行逐一介绍。为了方便描述，假设通信的两个节点分别为client a和client b，而辅助nat穿越的stun server为server s。下面的所有方法都要求client a、client b都与server s保持一条长连接，或者周期性连上server s，以便能够接收server s的相关指令，我们称这两个连接分别为connecta1，connectb1.\n\n# 网络拓扑类型一\n\n如下图所示，client a 位于nat内网，而client b是具有公网ip的机器。如果是client a需要连接client b那么client a直接连client b就可以了。如果client b需要连接client a，那么client b直接connect client a一般是连接不上的。但是我们可以反过来让client a主动去连client b不就可以了。下面所说的client a或client b的nat类型指的是对于server s能看到的client的最外层的nat的类型。\n\n\n\n反过来让client a主动去连client b的技术就是所谓的：反向连接技术。\n\n具体的穿越过程如下：\n\n * client b通过connectb1向server s发送请求，请求连接client a；\n * server s按需回复看是否需要启动client b的nat类型侦测。(这要看server s是否已经缓存了client b的相关nat信息)；\n * server s通过[2]可以知道client b具有公网ip，于是，server s通过connecta1发送指令给client a让client a主动连client b并告诉client a目标client b的ipb和监听端口portb；\n * client a收到client b的ipb和监听端口portb，然后发送连接请求连上cient a并附带一下身份信息，于是两者就可以进行通信。\n\n下面为了描述简便，具体的nat侦测步骤就省略了。\n\n# 网络拓扑类型二\n\n如下图，client a和client b位于同一个nat后面，这个时候client a和 client b位于同一个局域网。\n\n\n\n具体的穿越过程如下：\n\n * client a通过connecta1向server s发送请求，请求连接client b；\n * server s发现client a、b位于同一个nat后面，于是返回client a、client b的公网endpointga、endpointgb和内网endpointpa、endpointpb给client a；\n * client a收到后，知道client b和自己位于同一个nat里面，于是直接连上client b的内网endpointpb进行通信。\n\n# 网络拓扑类型三\n\n如下图，client a和client b分别位于不同的nat后面，这个时候client a和 client b位于独立的局域网。\n\n\n\n具体的穿越过程如下：\n\n * client a通过connecta1向server s发送请求，请求连接client b；\n * server s发现client a、b位于独立的nat后面，也是通过connecta1返回给client a、client b的公网endpointga、endpointgb和内网endpointpa、endpointpa给client a。并且通过connectb1返回给client a、client b的公网endpointga、endpointgb和内网endpointpa、endpointpb给client b。\n\n接下来的步骤和client a、client b的nat类型密切相关，下面会分别就相应的组合进行介绍具体的过程步骤。\n\n * client a是任意类型nat，client b 是full cone nat(endpoint independent mapping和endpoint-independent filtering)\n\nfull cone nat一般是比较少的，因为这样的nat安全性很差。\n\n[3] server s通过connecta1发送指令让client a直接connect client b的外网endpointgb，由于client b的nat是full cone，于是nat不管三七二十一就把收到的包转发给client b，于是它们就可以顺利通信了。\n\n * client a是任意类型nat，client b 是restricted cone nat(endpoint independent mapping和address-dependent filtering)\n\n[3] server s通过connectb1发送指令让client b 先bind内网endpointpb然后往client a的外网endpointga发送connect请求(由于client b是endpoint independent mapping，那么endpointpb依旧是映射为endpointgb)，如果连接建立成功，那么它们就可以进行通信了，反之失败的话，client b将失败结果反馈给server s，然后转入[4]；[4] server s收到失败反馈，通过connecta1发送指令让client a往client b的外网endpointgb发送connect请求，由于在步骤[3]，client b已经往client a发送过数据包，根据过滤规则(address-dependent filtering)，client b的nat会允许client a的数据包通过nat并转发给client b。于是，它们就建立其连接进行通信。\n\n * client a的nat类型：映射规则是(endpoint independent mapping)的，过滤规则任意；client b 是port restricted cone nat(endpoint independent mapping和address and port-dependent filtering)\n\n[3] 该步骤和情况(2)中的步骤[3]完全一样。[4] server s收到失败反馈，通过connecta1发送指令让client a 先bind内网endpointpa然后往client b的外网endpointgb发送connect请求(由于client a是endpoint independent mapping，那么endpointpa依旧是映射为endpointga)，由于在步骤[3]，client b已经往client a的endpointga发送过数据包，根据过滤规则(address and port-dependent filtering)，client b的nat会允许client a的endpointga的数据包通过nat并转发给client b。于是，它们就建立其连接进行通信。\n\n * client a的nat类型：映射规则是(非endpoint independent mapping)的，过滤规则任意；client b 是port restricted cone nat(endpoint independent mapping和address and port-dependent filtering)\n\n在这种情况下，在上面的步骤[4]的时候，由于client a是非endpoint independent mapping，那么endpointpa就会映射为是endpointga_b而不是endpointga了。这样根据过滤 规则(address and port-dependent filtering)，client b的nat将不会允许client a的endpointga_b的数据包通过nat。要想数据包能通过client b的nat，需要client b曾经给endpointga_b发送过数据。但是，我们无法通过直接的方法让client b提前知道client a的外网endpointga_b，难道就无能为力了吗？不，还是有些方法的，虽然无法直接知道client a的外网endpointga_b，但是我们可以进行预测。\n\n具体过程如下：\n\n[3] 该步骤和情况(2)中的步骤[3]完全一样。[4] server s收到失败反馈，通过connecta1发送指令让client a 启动端口映射预测过程。端口映射预测可以简单、可以复杂，大体就是让client a往server的不同端口、不同ip发送数据包，以便server收集到client a的端口映射样本，以便能够根据样本的端口映射变化规律预测client a的nat的mapping规则。[5] server s根据[4]的预测情况，通过connectb1发送给client b接下来client a可能的映射端口列表也就是可能的外网endpointga1、endpointga2 ... endpointgan，然后让client b都往这些外网endpointga1、endpointga2 ... endpointgan发送数据包。[6] 然后server s通过connecta1发送指令让client a 先bind内网endpointpa然后往client b的外网endpointgb发送connect请求(这个时候，假设预测算法有效的话，那么client a的内网endpointpa将会映射为endpointgai)，由于在步骤[5]，client b已经往client a的endpointgai发送过数据包，根据过滤规则(address and port-dependent filtering)，client b的nat会允许client a的endpointgai的数据包通过nat并转发给client b。于是，它们就建立其连接进行通信。[7] 如果在步骤[4]的预测失败，那么在步骤[6]将建立连接失败，然后client b将失败结果反馈给server s。这个时候server s可以启动重试步骤[4][5][6]或直接判断client a和client b无法建立直接的p2p通信了，于是进入relay(服务器中转)环节。realy部分在后面会单独介绍。\n\n# 网络拓扑类型四\n\n如下图，client a和 client b位于多层nat后面。\n\n\n\n具体过程如下：\n\n * 1）client a通过connecta1向server s发送请求，请求连接client b；\n * 2）server s发现client a、b位于同一个nat后面，于是返回client a、client b的公网endpointga、endpointgb和内网endpointpa、endpointpb给client a；\n * 3）client a收到后，认为client b和自己位于同一个nat里面，于是往client b的内网endpointpb发送连接请求，当然是连接不上的；\n * 4）在连接失败后，接着client a尝试向client b的外网endpointgb发送连接请求，这个时候nat c收到数据包后是否转发该数据包要看nat c是否支持回环转换（hairpin translation），如果不支持那么就无法进行直连p2p通信，需要就需要反馈给server s开启relay。\n\n5）在步骤4）失败了，client a是无法知道是因为nat c不支持回环转换造成的失败，还是内层nat的行为造成的失败。于是client a就假设nat c是支持回环转换的，这个时候网络拓扑情况就变成网络拓扑类型三了，那么接下来的穿越步骤就和网络拓扑类型三的多种情况一样的了，这里就不重复了。\n\n上图，只是给出了client a、client b位于两层nat后面的一种情况，对于多层nat的各种组合本文就不介绍了。对于多层nat的组合，在穿透失败的时候，是比较难判断出到底是哪层nat的行为造成的。我们只能用上面说过的所有方法进行逐一重试，如果还是失败，那只能启动relay进行服务器中转了。\n\n\n# nat穿越技术4：relay服务器中转技术\n\n由于进行p2p穿透是否成功与nat的行为和防火墙策略有很大的关系，因此就算是一个p2p友好nat也很难保证100%穿透成功。举个例子：8.2.2.4 网络拓扑类型四，假设nat a、nat b 、nat c都是full cone nat（完全锥型），但是如果nat c不支持回环转换（hairpin translation）那么也是无法穿透成功的。那么一个完整的p2p穿透的解决方案必不可少的一个部分就是relay了，relay部分主要turn协议描述。作为stun协议的一个补充，turn协议主要由rfc5766、rfc6062、rfc6156来描述，其中rfc5766主要描述的是udp协议的relay，rfc6062描述的是tcp协议（ipv4）的relay，而rfc6156描述的是ipv6的relay。下面主要介绍一下rfc5766和rfc6062两个文档中描述的较为重要的交互过程，具体的协议相关属性、报文结构等等，有兴趣的可以细读一下协议文档。\n\nturn协议简单的来讲，如下图所示：client向turn server发送一个allocation request请求一个分配（allocation），如果turn server接收请求就会给client分配一个relay地址（ip_relaya: port_relaya），每个allocation都有一个有效期，过了有效期就不能使用了。在有效期内client可以发送refresh request来刷新延长有效期。client a想给peer a发送数据需要创建权限，这个通过createpermission request请求来创建权限，权限创建成功后，client a就可以发送数据给turn server由turn server中转给peer a，同时peer a发送给turn server数据也会被turn server中转给client a。如图中所示，由于client 没有注册peer b的权限，那么client 发给peer b的数据会被turn server丢弃，同时peer b发给client 的数据也会被turn server丢弃。\n\n\n\n\n\n\n# udp协议的relay\n\n首先介绍rfc5766，udp协议的relay，主要有两种方式：第一种是send and data methods，第二种是channels。下面分别介绍这两个方式。\n\n# 方式一、send and data methods，具体交互过程如下：\n\n\n\n\n\n\n\n（1）首先client发送allocate request 给turn server 请求一个分配。其中携带的主要属性： transaction-id=0xa56250d3f17abe679422de85 ：事务id用于标识一个交互过程 software="example client, version 1.03" ：可有可无的属性 lifetime=3600 (1 hour) ：请求分配的有效期，期望有效期 requested-transport=17 (udp) ：未来数据传输采用的协议 dont-fragment ：请求不要将数据进行分割分包转发给peer。\n\n（2）turn server回复一个allocate error response响应，表示请求未通过授权，需要进行用户验证： transaction-id=0xa56250d3f17abe679422de85 ：事务id要和（1）的一样 software="example server, version 1.17" ：可有可无 error-code=401 (unauthorized) ：错误码 realm="example.com" ：为了让客户端下次请求的时候要带上这个属性 nonce="adl7w7pedu4hke72jdaqvbamcr6h39sm" ：为了让客户端下次请求的时候要带上这个属性\n\n（3）client收到响应后，发现是401错误响应，那么需要给turn server提供用户名和密码进行验证。于是client重新发送allocate request请求： transaction-id=0xc271e932ad7446a32c234492 ：另起一个事务，标识另外一个请求过程 software="example client 1.03" ：同（1） lifetime=3600 (1 hour) ：同（1） requested-transport=17 (udp) ：同（1） dont-fragment ：同（1） username="george" ：client的用户名 realm="example.com" :（2）中turn server响应给client的 nonce="adl7w7pedu4hke72jdaqvbamcr6h39sm" :（2）中turn server响应给client的 message-integrity=... ：一些加密信息，用于验证client的\n\n（4）turn server 验证client通过后给client响应allocate success response： transaction-id=0xc271e932ad7446a32c234492 ：事务id要和（3）相同 software="example server, version 1.17" ：同(3) lifetime=1200 (20 minutes) ：该分配的有效期，实际有效期 xor-relayed-address=192.0.2.15:50000 ：给client分配的relay地址 xor-mapped-address=192.0.2.1:7000 ：client的经nat后的映射地址 message-integrity=... ：一些加密信息\n\n（5）收到turn server的success响应后，client发送createpermission request来创建peer的权限： transaction-id=0xe5913a8f460956ca277d3319 ：另起一个事务，标识另外一个请求过程 xor-peer-address=192.0.2.150:0 ：需要创建权限的peer的ip地址，权限只与ip地址相关，与端口无关 username="george" realm="example.com" :（2）中turn server响应给client的 nonce="adl7w7pedu4hke72jdaqvbamcr6h39sm" :（2）中turn server响应给client的 message-integrity=... ：一些加密的信息\n\n（6）turn server接受创建权限请求，发送createpermission success resp 响应给client： transaction-id=0xe5913a8f460956ca277d3319 ：事务id要和（5）相同 message-integrity=... ：一些加密信息\n\n（7）创建权限成功后，client就可以用send indication来发送数据给turn server然后由turn server将数据relay给peer： transaction-id=0x1278e9aca2711637ef7d3328 ：另起一个事务，标识另外一个请求过程 xor-peer-address=192.0.2.150:32102 ：需要发送数据的peer监听的ip: port（注意ip一定要和注册权限的时候的ip一样，否则会被拒绝relay并响应错误） dont-fragment ：请求turn server不要将data数据分片发送 data=... ：client需要发给peer的数据内容\n\n（8）turn server收到send indication请求后，进行一些权限检查后，提取出协议包中的data属性中的数据内容，然后将数据内容用udp协议从client的relay地址（源：192.0.2.15:50000）发送给peer（目的：192.0.2.150:32102）： -- udp dgm -> data=... ： 发给peer的udp 数据包\n\n（9）peer收到upd数据包后，如果有响应数据，那么就将响应数据用udp发给turn server的192.0.2.15:50000地址： <- udp dgm – data=... ：响应给turn server的udp数据包\n\n（10）turn server在client的relay地址（192.0.2.15:50000）那收到peer（192.0.2.150:32102）的udp数据包，这时turn server需要检测client是否注册了ip192.0.2.150的权限，如果没有就会丢弃该数据包。如果有那么就取出udp数据包中的data部分，然后将data封装成turn协议数据包，给client发送data indication： transaction-id=0x8231ae8f9242da9ff287feff ：协议并不要求这个事务id要和（7）中的一样 xor-peer-address=192.0.2.150:32102 ：标识数据来自哪个peer data=... : peer 发给client的数据内容\n\n以上是send and data methods方式的核心交互过程，较为完整交互过程可以查看一下协议文档。这里有个问题需要说明一下，就是每个allocation都有一个有效期，client需要把握好有效期，及时在有效期内发送refresh request来刷新延长有效期。\n\n\n# 9.1.2方式二、channels，具体交互过程如下：\n\n\n\n\n\n\n\n（1）--（6）交互过程和send and data methods方式是一样的，这里就不在重复了。\n\n（7）权限创建成功后，client发送channelbind request给turn server请求进行channel bind。 transaction-id=0x6490d3bc175aff3d84513212 ：事务id channel-number=0x4000 ：client定义的bind channel id xor-peer-address=192.0.2.210:49191 ：peer b的ip和port username="george" ：同方式一 realm="example.com" ：同方式一 nonce="adl7w7pedu4hke72jdaqvbamcr6h39sm" ：同方式一 message-integrity=... ：同方式一\n\n（8）turn server接受channelbind请求后，给client发送channelbind success response响应 transaction-id=0x6490d3bc175aff3d84513212 ：事务id，和（7）相同 message-integrity=... |\n\n（9）client收到channelbind success response后就可以通过channeldata来发送数据了。 channel-number=0x4000 ：（7）中定义bind channel id data=... ：client需要发给peer b的数据内容\n\n（10）turn server收到channeldata后首先从turn协议数据包中提取出channel-number，接着查找channel-number是否已经绑定peer，如果没有就返回错误并丢弃数据包；如果查找到有绑定peer，那么就提前出data属性中的数据内容用udp协议通过client的relay地址（源：192.0.2.15:50000）发送给peer b（目的：192.0.2.210:49191）。 --- udp datagram ---------\x3e data=... 发给peer b的udp 数据包\n\n（11）peer收到upd数据包后，如果有响应数据，那么就将响应数据用udp发给turn server的192.0.2.15:50000地址 <-- udp datagram ---------- data=... :peer 发给client的数据内容\n\n（12）turn server在client的relay地址（192.0.2.15:50000）那收到peer（192.0.2.210:49191）的udp数据包，这时turn server需要检测client是否注册了ip192.0.2.150的权限，如果没有就会丢弃该数据包。如果有注册权限，那就检查client是有channel绑定该peer，如果有那么就通过channel data 方式relay数据给client，否则就通过方式一中的data indication 方式relay数据给client channel-number=0x4000 ：（7）中定义bind channel id data=... ：peer b发给client的数据内容\n\n以上是channels的核心交互过程，较为详细的过程可以查看协议文档。方式二比方式一多了一个channel bind的步骤，这个步骤是为了告诉turn server接下来以channel-number标识的协议数据包是要发给谁的，这样才使得channeldata中只要携带一个channel-number头部信息就可以，而不用携带方式一中的transaction-id、xor-peer-address等额外的头部信息，减少数据量。\n\n\n# tcp协议的relay\n\ntcp协议的relay是在rfc6062中描述，其中主要有两种情况下的relay：1. client to peer 2. client to client。下面分别介绍两种情况下relay。\n\n# 情况一、client to peer，网络拓扑如下：\n\n\n\n在上面的网络拓扑下，有两种方式的relay：1. turn client 主动发起的relay 2. turn peer主动发起的relay。下面分别介绍这两种方式的交互过程。这里turn client表示能够理解turn协议的主机，而turn peer表示普通的一般主机。\n\n9.2.1.1）turn client 主动发起的relay：\n\n在这种方式下，turn server要能够直接连接上turn peer监听的端口才行。具体交互过程如下：\n\n\n\n\n\n（1）--（6）交互过程和rfc5766的是基本一样的，这里就不在重复了。所不同的是rfc5766中是udp协议，而这里是tcp协议，并且（1）--（6）是在一个连接中完成，我们称这个连接为control connection。\n\n（7）client创建权限成功后，通过control connection发送connect request给turn server请求turn server去连接peer a transaction-id=0x6490d3bc175aff3d84513212 ：事务id xor-peer-address=192.0.2.210:49191 ：peer a监听的ip和端口\n\n（8）turn server收到connect request后， 它会通过client的relay地址（源：192.0.2.15:50000）尝试tcp连接到peer a的192.0.2.210:49191，如果连接不成功，那么给client响应错误码为447的错误。如果连接成功那么转入（9），我们称这个连接为peer data connection\n\n（9）turn server连接peer a成功后，给client发送connect success response transaction-id=0x6490d3bc175aff3d84513212 ：事务id，同（7） connection-id=0x123456787 ：turn server给client响应的标识，用于将两条tcp连接联系起来用的。\n\n（10）client在control connection上收到connect success response，那么client需要建立另外一条tcp连接连上turn server，我们称这条连接为new connection。client通过new connection给turn server发送connectionbind request，请求将new connection和peer data connection进行绑定。 transaction-id=0x6490d3bc175aff3d84513212 ：事务id connection-id=0x123456787 ：（9）中收到的connection-id\n\n（11）turn server 收到connectionbind request后，进行一些操作，把new connection和peer a connection两条tcp连接联系起来。\n\n通过上面11个步骤以后，client和peer a就能分别通过new connection和peer data connection两条tcp连接来发送数据了。client通过new connection发送的数据到达turn server，turn server就会将数据原封不动通过peer data connection转发给peer a，同样对于peer a也是一样的，turn server就像进行端口转发一样了。这里有个问题是：peer a connection这条tcp连接要比new connection这条tcp连接早一些建立起来的，这样在new connection建立起来之前peer a就开始发送数据的话，那么turn server这个时候是无法将数据转发给client的，所以rfc6062协议要求，只要peer data connection连接建立好了，那么turn server就必须做好准备接收peer a的数据，并将接收到的数据buffer住，等new connection建立好后在转发给client。但是，有些开源实现并没有这样做，所以这点要注意一下。\n\n9.2.1.2）turn peer主动发起的relay：\n\n在这种方式下，turn peer可以位于nat后面，具体交互如下：\n\n\n\n\n\n（1）--（6）交互过程和方式1的是一样的，这里就不在重复了。\n\n（7）peer a通过192.0.2.210:49191向client的relay地址192.0.2.15:50000发起tcp连接。turn server 马上accept这个tcp连接并做好buffer peer a发送的数据流的准备。然后，turn server检查 拥有relay地址192.0.2.15:50000的client是否已经注册了peer a（192.0.2.210）的权限，如果没有，那么turn server会马上close刚刚accept的连接。如果有，那么转向（8），我们把这个连接称为peer data connection\n\n（8）turn server 查找到拥有relay地址192.0.2.15:50000的client的control connection，通过control connection给client发送connectionattempt indication。 transaction-id=0x6490d3bc175aff3d84513212 ：事务id xor-peer-address=192.0.2.210:49191 ：（7）中accept那个peer a的ip和端口 connection-id=0x789465213545 ：turn server给client响应的标识，用于将两条tcp连接联系起来用的\n\n（9）client收到connectionattempt indication，如果接收这个peer的话，那么client会新起一个连接连上turn server，我们称这个连接为new connection，client通过new connection给turn server发送connectionbind request，请求绑定peer data connection。 transaction-id=0x6490d3bc175aff3d84513212 ：事务id connection-id=0x789465213545 ： （8）中收到的connection-id\n\n（10）turn server收到connectionbind request后会通过new connection给client发送connectionbind request success response。 通过上面10个步骤以后，client和peer a就能分别通过new connection和peer data connection两条tcp连接来发送数据了。这个方式同样存在方式1中的数据buffer住问题。在这种情况下，在peer a看来与之通信的是endpoint(client的relay地址192.0.2.15:50000)，peer a不需要知道真实的client的地址。\n\n# 情况二、client to client，网络拓扑结构如下：\n\n\n\n这种情况下，rfc6062文档中并没有讲到，估计是因为这种情况是情况一的一个特例而已，我这里展开来讲一下是希望能帮助大家更加深刻理解协议本身。\n\nturn client1和turn client2（1）-（6）步骤的交互情况基本和上面的一样，并且是比较独立的，所以下面直接给出了。\n\nturn client1 的（1）-（6）步骤交互情况如下：\n\n\n\nturn client2 的（1）-（6）步骤交互情况如下：\n\n\n\n从上面的交互可以知道turn client 1 的relay地址是：192.0.2.15:50000 ，nat映射后的地址是：192.0.2.1:7000，而turn client2的relay地址是：192.0.2.150:40000 ，nat映射后的地址是：192.0.2.2:7000。下面继续给出turn client 1和turn client 2的其他交互情况，由于它们和turn server的交互带有一定的时序性，下面会交错给出它们和turn server的交互步骤。turn client1和turn client2是对称，这里不妨假设turn client1是数据交互的发起者，具体交互过程如下：\n\n（7）turn client1 首先通过control connection1发送connect request给turn server，请求连接turn client 2的relay地址192.0.2.150:40000。 transaction-id=0x6490d3bc175aff3d84513212 ：事务id xor-peer-address=192.0.2.150:40000 ： turn client2的relay地址\n\n（8）turn server收到connect request后， 它会通过turn client1的relay地址（源：192.0.2.15:50000）尝试tcp连接到192.0.2.150:40000，这个连接一般都会成功，因为这个是turn server给的relay地址，我们称这个连接为peer data connection1\n\n（9）turn server连接192.0.2.150:40000成功后，给turn client1发送connect success response transaction-id=0x6490d3bc175aff3d84513212：事务id connection-id=0x123456787 ：turn server给client响应的标识，用于将两条tcp连接联系起来用的\n\n（10）这个步骤和（9）几乎同时发生的，turn server发现turn client2的relay地址192.0.2.150:40000有个tcp连接上来，那么turn server马上accept这个连接，我们称这个连接是peer data connection2（其实就是peer data connection1）；经过权限检查后，turn server通过turn client2的control connection2给turn client2发送connectionattempt indication transaction-id=0x6490d3bc175aff3d84511111 ：事务id xor-peer-address=192.0.2.15:50000 ：turn client1的relay地址 connection-id=0x789465213545 ：turn server给client响应的标识，用于将两条tcp连接联系起来用的\n\n（11）turn client1 收到connect success response后，另起一个tcp connection连接上turn server，我们称这个连接为new connection1。turn client1通过new connection1给turn server 发送connectionbind request transaction-id=0x6490d3bc175aff3d84513212 ：事务id connection-id=0x123456787 ： （9）中turn server响应的connection-id\n\n（12）这个步骤几乎和（11）同时发生，turn client2 收到connectionattempt indication，表示接受，然后它另起一个tcp connection连接上turn server我们称这个连接为new connection2。turn client2通过new connection2给turn server发送connectionbind request。 transaction-id=0x6490d3bc175aff3d84511111 ：事务id connection-id=0x789465213545 ：（10）中turn server响应的connection-id\n\n（13）和（14）turn server分别通过new connection1和new connection2给turn client 1和turn client 2发送connectionbind request success response。\n\n通过以上14个步骤，turn client 1就能借助new connection1和peer data connection1与turn client 2进行数据交互。而turn client 2借助new connection2和peer data connection2与turn client 1进行数据交互。\n\n到这里，p2p通信穿越nat的相关原理、技术、方法的进阶分析基本介绍完毕，关于stun和turn协议，有个开源实现，有兴趣的同学可以阅读一下源码：https://github.com/coturn/rfc5766-turn-server\n\n另外还有一个ice协议，这个也有一个文档系列：\n\n * rfc 5245 - ice\n * rfc 5768 – ice–sip\n * rfc 6336 – ice–iana registry\n * rfc 6544 – ice–tcp\n * rfc 5928 - turn resolution mechanism\n\n这个文档系列较为复杂一些，有兴趣的可以阅读一下。\n\n\n# 参考\n\n * peer-to-peer communication across network address translators\n * rfc 5780 - nat behavior discovery using session traversal utilities for nat (stun)\n * rfc5780 中文翻译 中文rfc rfc文档 rfc翻译 rfc中文版\n\n\n# 说明\n\n本文转载自 p2p技术详解(三)：p2p中的nat穿越(打洞)方案详解(进阶分析篇)。',charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"STUN、TURN、ICE详解",frontmatter:{title:"STUN、TURN、ICE详解",date:"2022-07-08T11:09:48.000Z",permalink:"/basic/p2p/stun-turn-ice/",categories:["基础","P2P"],tags:["STUN","TURN","ICE"],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/30.STUN%E3%80%81TURN%E3%80%81ICE%E8%AF%A6%E8%A7%A3.html",relativePath:"20.基础/35.P2P/30.STUN、TURN、ICE详解.md",key:"v-6fd09404",path:"/basic/p2p/stun-turn-ice/",headers:[{level:2,title:"内容概述",slug:"内容概述",normalizedTitle:"内容概述",charIndex:2},{level:2,title:"STUN详解",slug:"stun详解",normalizedTitle:"stun详解",charIndex:752},{level:3,title:"RFC3489/STUN",slug:"rfc3489-stun",normalizedTitle:"rfc3489/stun",charIndex:1303},{level:4,title:"报文结构",slug:"报文结构",normalizedTitle:"报文结构",charIndex:1625},{level:4,title:"实现原理",slug:"实现原理",normalizedTitle:"实现原理",charIndex:3568},{level:4,title:"STUN功能举例",slug:"stun功能举例",normalizedTitle:"stun功能举例",charIndex:6264},{level:3,title:"RFC5389/STUN",slug:"rfc5389-stun",normalizedTitle:"rfc5389/stun",charIndex:7287},{level:4,title:"STUN用途",slug:"stun用途",normalizedTitle:"stun用途",charIndex:7585},{level:4,title:"报文结构",slug:"报文结构-2",normalizedTitle:"报文结构",charIndex:1625},{level:3,title:"RFC5389与RFC3489的区别",slug:"rfc5389与rfc3489的区别",normalizedTitle:"rfc5389与rfc3489的区别",charIndex:8799},{level:3,title:"新特性介绍",slug:"新特性介绍",normalizedTitle:"新特性介绍",charIndex:9786},{level:4,title:"指纹机制",slug:"指纹机制",normalizedTitle:"指纹机制",charIndex:9795},{level:4,title:"通过DNS发现服务器机制",slug:"通过dns发现服务器机制",normalizedTitle:"通过dns发现服务器机制",charIndex:10159},{level:4,title:"认证和消息完整性机制",slug:"认证和消息完整性机制",normalizedTitle:"认证和消息完整性机制",charIndex:10569},{level:4,title:"备份服务器机制",slug:"备份服务器机制",normalizedTitle:"备份服务器机制",charIndex:11434},{level:3,title:"RFC5389与RFC3489的兼容",slug:"rfc5389与rfc3489的兼容",normalizedTitle:"rfc5389与rfc3489的兼容",charIndex:11734},{level:4,title:"客户端处理的改变",slug:"客户端处理的改变",normalizedTitle:"客户端处理的改变",charIndex:11972},{level:4,title:"服务器处理的改变",slug:"服务器处理的改变",normalizedTitle:"服务器处理的改变",charIndex:12229},{level:2,title:"TURN详解",slug:"turn详解",normalizedTitle:"turn详解",charIndex:12566},{level:3,title:"RFC5766/TURN",slug:"rfc5766-turn",normalizedTitle:"rfc5766/turn",charIndex:12577},{level:3,title:"操作概述",slug:"操作概述",normalizedTitle:"操作概述",charIndex:13007},{level:3,title:"术语",slug:"术语",normalizedTitle:"术语",charIndex:13453},{level:3,title:"协议交互过程详细举例",slug:"协议交互过程详细举例",normalizedTitle:"协议交互过程详细举例",charIndex:14415},{level:2,title:"ICE简明介绍",slug:"ice简明介绍",normalizedTitle:"ice简明介绍",charIndex:17015},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:17027},{level:3,title:"应用模型",slug:"应用模型",normalizedTitle:"应用模型",charIndex:17200},{level:2,title:"本文总结",slug:"本文总结",normalizedTitle:"本文总结",charIndex:17616}],readingTime:{text:"3 min read",minutes:2.49,time:149400,words:498},headersStr:"内容概述 STUN详解 RFC3489/STUN 报文结构 实现原理 STUN功能举例 RFC5389/STUN STUN用途 报文结构 RFC5389与RFC3489的区别 新特性介绍 指纹机制 通过DNS发现服务器机制 认证和消息完整性机制 备份服务器机制 RFC5389与RFC3489的兼容 客户端处理的改变 服务器处理的改变 TURN详解 RFC5766/TURN 操作概述 术语 协议交互过程详细举例 ICE简明介绍 简介 应用模型 本文总结",content:"# 内容概述\n\n在现实Internet网络环境中，大多数计算机主机都位于防火墙或NAT之后，只有少部分主机能够直接接入Internet。很多时候，我们希望网络中的两台主机能够直接进行通信，即所谓的P2P通信，而不需要其他公共服务器的中转。由于主机可能位于防火墙或NAT之后，在进行P2P通信之前，我们需要进行检测以确认它们之间能否进行P2P通信以及如何通信。这种技术通常称为NAT穿透（NAT Traversal）。最常见的NAT穿透是基于UDP的技术，如RFC3489中定义的STUN协议。\n\nSTUN，首先在RFC3489中定义，作为一个完整的NAT穿透解决方案，英文全称是Simple Traversal of UDP Through NATs，即简单的用UDP穿透NAT。\n\n在新的RFC5389修订中把STUN协议定位于为穿透NAT提供工具，而不是一个完整的解决方案，英文全称是Session Traversal Utilities for NAT，即NAT会话穿透工具集。RFC5389与RFC3489除了名称变化外，最大的区别是支持TCP穿透。\n\nTURN，首先在RFC5766中定义，英文全称是Traversal Using Relays around NAT:Relay Extensions to Session Traversal Utilities for NAT，即使用中继穿透NAT:STUN的扩展。简单的说，TURN与STUN的共同点都是通过修改应用层中的私网地址达到NAT穿透的效果，异同点是TURN是通过两方通讯的“中间人”方式实现穿透。\n\nICE跟STUN和TURN不一样，ICE不是一种协议，而是一个框架（Framework），它整合了STUN和TURN。\n\n\n# STUN详解\n\n了解STUN之前，我们需要了解NAT的种类。\n\nNAT对待UDP的实现方式有4种，分别如下：\n\n * Full Cone NAT：完全锥形NAT，所有从同一个内网IP和端口号发送过来的请求都会被映射成同一个外网IP和端口号，并且任何一个外网主机都可以通过这个映射的外网IP和端口号向这台内网主机发送包。\n * Restricted Cone NAT：限制锥形NAT，它也是所有从同一个内网IP和端口号发送过来的请求都会被映射成同一个外网IP和端口号。与完全锥形不同的是，外网主机只能够向先前已经向它发送过数据包的内网主机发送包。\n * Port Restricted Cone NAT：端口限制锥形NAT，与限制锥形NAT很相似，只不过它包括端口号。也就是说，一台IP地址X和端口P的外网主机想给内网主机发送包，必须是这台内网主机先前已经给这个IP地址X和端口P发送过数据包。\n * Symmetric NAT：对称NAT，所有从同一个内网IP和端口号发送到一个特定的目的IP和端口号的请求，都会被映射到同一个IP和端口号。如果同一台主机使用相同的源地址和端口号发送包，但是发往不同的目的地，NAT将会使用不同的映射。此外，只有收到数据的外网主机才可以反过来向内网主机发送包。\n\n\n# RFC3489/STUN\n\nSTUN（Simple Traversal of User Datagram Protocol Through Network Address Translators），即简单的用UDP穿透NAT，是个轻量级的协议，是基于UDP的完整的穿透NAT的解决方案。它允许应用程序发现它们与公共互联网之间存在的NAT和防火墙及其他类型。它也可以让应用程序确定NAT分配给它们的公网IP地址和端口号。STUN是一种Client/Server的协议，也是一种Request/Response的协议，默认端口号是3478。\n\n参考：\n\n * IETF官方文档RFC3489/STUN点此进入\n * RFC3489 中文翻译\n\n# 报文结构\n\n【消息头】\n\n所有的STUN消息都包含20个字节的消息头，包括16位的消息类型(2 个字节)，16位的消息长度（2 个字节）和128位的事务ID（16 个字节）。\n\n\n\n消息类型许可的值如下：\n\n * 0x0001：捆绑请求；\n * 0x0101：捆绑响应；\n * 0x0111：捆绑错误响应；\n * 0x0002：共享私密请求；\n * 0x0102：共享私密响应；\n * 0x0112：共享私密错误响应。\n\n消息长度，是消息大小的字节数，但不包括20字节的头部。事务ID，128位的标识符，用于随机请求和响应，请求与其相应的所有响应具有相同的标识符。\n\n【消息属性】\n\n消息头之后是0或多个属性，每个属性进行TLV编码，包括16位的属性类型、16位的属性长度和变长属性值。\n\n\n\n属性类型定义如下：\n\n * MAPPED-ADDRESS：MAPPED-ADDRESS属性表示映射过的IP地址和端口。它包括8位的地址族，16位的端口号及长度固定的IP地址。\n * RESPONSE-ADDRESS：RESPONSE-ADDRESS属性表示响应的目的地址。\n * CHANGE-REQUEST：客户使用32位的CHANGE-REQUEST属性来请求服务器使用不同的地址或端口号来发送响应。\n * SOURCE-ADDRESS：SOURCE-ADDRESS属性出现在捆绑响应中，它表示服务器发送响应的源IP地址和端口。\n * CHANGED-ADDRESS：如果捆绑请求的CHANGE-REQUEST属性中的“改变IP”和“改变端口”标志设置了，则CHANGED-ADDRESS属性表示响应发出的IP地址和端口号。\n * USERNAME：USERNAME属性用于消息的完整性检查，用于消息完整性检查中标识共享私密。USERNAME通常出现在共享私密响应中，与PASSWORD一起。当使用消息完整性检查时，可有选择地出现在捆绑请求中。\n * PASSWORD：PASSWORD属性用在共享私密响应中，与USERNAME一起。PASSWORD的值是变长的，用作共享私密，它的长度必须是4字节的倍数，以保证属性与边界对齐。\n * MESSAGE-INTEGRITY：MESSAGE-INTEGRITY属性包含STUN消息的HMAC-SHA1，它可以出现在捆绑请求或捆绑响应中；MESSAGE-INTEGRITY属性必须是任何STUN消息的最后一个属性。它的内容决定了HMAC输入的Key值。\n * ERROR-CODE：ERROR-CODE属性出现在捆绑错误响应或共享私密错误响应中。它的响应号数值范围从100到699。\n * UNKNOWN-ATTRIBUTES：UNKNOWN-ATTRIBUTES属性只存在于其ERROR-CODE属性中的响应号为420的捆绑错误响应或共享私密错误响应中。\n * REFLECTED-FROM：REFLECTED-FROM属性只存在于其对应的捆绑请求包含RESPONSE-ADDRESS属性的捆绑响应中。属性包含请求发出的源IP地址，它的目的是提供跟踪能力，这样STUN就不能被用作DOS攻击的反射器。\n\n具体的ERROR-CODE（响应号），与它们缺省的原因语句一起，目前定义如下：\n\n * 400（错误请求）：请求变形了。客户在修改先前的尝试前不应该重试该请求。\n * 401（未授权）：捆绑请求没有包含MESSAGE-INTEGRITY属性。\n * 420（未知属性）：服务器不认识请求中的强制属性。\n * 430（过期资格）：捆绑请求没有包含MESSAGE-INTEGRITY属性，但它使用过期的共享私密。客户应该获得新的共享私密并再次重试。\n * 431（完整性检查失败）：捆绑请求包含MESSAGE-INTEGRITY属性，但HMAC验证失败。这可能是潜在攻击的表现，或者客户端实现错误\n * 432（丢失用户名）：捆绑请求包含MESSAGE-INTEGRITY属性，但没有USERNAME属性。完整性检查中两项都必须存在。\n * 433（使用TLS）：共享私密请求已经通过TLS（Transport Layer Security，即安全传输层协议）发送，但没有在TLS上收到。\n * 500（服务器错误）：服务器遇到临时错误，客户应该再次尝试。\n * 600（全局失败）：服务器拒绝完成请求，客户不应该重试。\n\n属性空间分为可选部分与强制部分，值超过0x7fff的属性是可选的，即客户或服务器即使不认识该属性也能够处理该消息；值小于或等于0x7fff的属性是强制理解的，即除非理解该属性，否则客户或服务器就不能处理该消息。\n\n# 实现原理\n\n\n\nSTUN协议的完整交互过程如上，下面我们来介绍具体实现步骤。\n\n * 一般情况下，客户会配置STUN服务器提供者的域名，该域名被解析为IP地址和SRV过程的端口号。服务器名是“stun”，使用UDP协议发送捆绑请求，使用TCP协议发送共享私密请求。STUN协议的缺省端口号为3478。\n\n * 若要提供完整性检查，STUN在客户和服务器间使用128位的共享私密，作为在捆绑请求和捆绑响应中的密匙。\n\n * 首先，客户通过发现过程获得它将与之建立TCP连接的IP地址和端口号。客户打开该地址和端口的连接，开始TLS协商，验证服务器的标识。客户发送共享私密请求。该请求没有属性，只有头。服务器生成响应。\n\n * 客户会在该连接上生成多个请求，但在获得用户名和密码后关闭该连接。\n\n * 服务器收到共享私密请求，验证从TLS连接上到达的该请求；如果不是通过TLS收到的请求，则生成共享私密错误响应，并设置ERROR-CODE属性为响应号433；这里区分两种情况：若通过TCP收到请求，则错误响应通过收到请求的相同连接发送；若通过UDP收到请求，则错误响应发送回请求送出的源IP和端口。\n\n * 服务器检查请求中的任何属性，当其中有不理解的小于或等于0x7fff的值，则生成共享私密错误响应，设置ERROR-CODE属性为响应号420,并包括UNKNOWN-ATTRIBUTE属性，列出它不理解的小于或等于0x7fff的属性的值。该错误响应通过TLS连接发送。\n\n * 若请求正确，服务器创建共享私密响应，包含与请求中相同的事务ID，并包含USERNAME和PASSWORD属性。用户名在10分钟内有效。\n\n * 共享私密响应通过与收到请求的相同的TLS连接发送，服务器保持连接打开状态，由客户关闭它。\n\n * 接着，客户发送捆绑请求，携带的属性包括：\n   \n   * 可选属性：RESPONSE-ADDRESS属性和CHANGE-REQUEST属性；\n   * 强制属性：MESSAGE-INTEGRITY属性和USERNAME属性。\n\n * 客户发送捆绑请求，通过客户重传来提供可靠性。客户开始用100ms的间隔重传，每次重传间隔加倍，直至1.6秒。之间间隔1.6秒的重传继续，直到收到响应或总共已经发送了9次。因此，若9500ms后，还未收到响应，客户认为传输已经失败。\n\n * 服务器检查捆绑请求的MESSAGE-INTEGRITY属性，不存在则生成捆绑错误响应，设置ERROR-CODE属性为响应号401；若存在，计算请求的HMAC Key值。\n\n * 服务器检查USERNAME属性，不存在则生成捆绑错误响应，设置ERROR-CODE属性为响应号432；若存在，但不认识该USERNAME的共享私密（例如，它超时了），生成捆绑错误响应，设置ERROR-CODE属性为响应号430。\n\n * 若服务器知道该共享私密，但所计算的 HMAC 与请求的不同，生成捆绑错误响应，设置ERROR-CODE属性为响应号431。\n\n * 假设消息完整性检查通过了，服务器检查请求中的任何属性的值，若遇到不理解的小于或等于0x7fff的值，生成捆绑错误响应，设置ERROR-CODE属性为响应号420，该响应包含UNKNOWN-ATTRIBUTE属性，并列出不理解的小于或等于0x7fff的属性。\n\n * 若请求正确，服务器生成单个捆绑响应，包含与捆绑请求相同的事务ID。服务器在捆绑响应中加入MAPPED-ADDRESS属性，该属性的IP地址和端口号为捆绑请求的源IP地址和端口号。\n\n捆绑响应的源地址和端口号取决于捆绑请求中CHANGE-REQUEST属性的值及捆绑请求收到的地址和端口号相关。总结如下：\n\n\n\n服务器在捆绑响应中加入SOURCE-ADDRESS属性，包含用于发送捆绑响应的源地址和端口号；加入CHANGED-ADDRESS属性，包含源IP地址和端口号。\n\n如果捆绑请求中包含了USERNAME和MESSAGE-INTEGRITY属性，则服务器在捆绑响应中加入MESSAGE-INTEGRITY属性。\n\n如果捆绑请求包含RESPONSE-ADDRESS属性，则服务器在捆绑响应中加入REFLECTED-FROM属性：如果捆绑请求使用从共享私密请求获得的用户名进行认证，则REFLECTED-FROM属性包含共享私密请求到达的源IP地址和端口号；若请求中的用户名不是使用共享私密分配的，则REFLECTED-FROM属性包含获得该用户名的实体的源IP地址和端口号；若请求中没有用户名，且服务器愿意处理该请求，则REFLECTED-FROM属性包含请求发出的源IP地址和端口号。\n\n服务器不会重传响应，可靠性通过客户周期性地重发请求来保障，每个请求都会触发服务器进行响应。\n\n客户端判断响应的类型是捆绑错误响应还是捆绑响应。捆绑错误响应通常在请求发送的源地址和端口收到；捆绑响应通常在请求中的RESPONSE-ADDRESS属性的地址和端口收到，若没有该属性，则捆绑响应将在请求发送的源地址和端口号收到。\n\n * 若是捆绑错误响应，客户检查响应中的ERROR-CODE属性的响应号：400至499之间的未知属性按属性400处理，500至599之间的未知属性按500处理，600至699之间的未知属性按600处理。任何100和399之间的响应都会使请求重传中止，但其他则忽略；若客户收到响应的属性类型大于0x7fff，则忽略该属性，若小于或等于0x7fff，则请求重传停止，并忽略整个响应；\n * 若是捆绑响应，客户检查响应的MESSAGE-INTEGRITY属性：如果不存在，客户在请求中加入MESSAGE-INTEGRITY属性，并放弃该响应；如果存在，客户计算响应的HMAC。如果计算出的HMAC与响应中的不同，则放弃该响应，并警告客户可能受到了攻击；若计算出的HMAC与响应中的匹配，则过程继续；\n * 不论收到捆绑响应还是捆绑错误响应，都将中止该请求的重传。客户在第一次响应后继续监听捆绑请求的响应10秒钟，如果这期间它收到任何消息类型不同的响应或不同的MAPPED-ADDRESS属性，它将警告用户可能受到攻击；并且，如果客户收到的捆绑响应次数超过它发送的捆绑请求数的两倍，它将警告用户可能受到攻击；若捆绑响应经过认证，上述攻击并未导致客户丢弃MAPPED-ADDRESS，则客户可以使用该MAPPED-ADDRESS和SOURCE-ADDRESS属性。\n\n# STUN功能举例\n\n客户通过带外方式获得STUN服务器信息后，就打开对应的地址和端口的连接，并开始与STUN服务器进行TLS协商。一旦打开了连接，客户就通过TCP协议发送共享私密请求，服务器生成共享私密响应。STUN在客户和服务器间使用共享私密，用作捆绑请求和捆绑响应中的密匙。之后，客户使用UDP协议向STUN服务器发送捆绑请求，当捆绑请求消息到达服务器的时候，它可能经过了一个或者多个NAT。结果是STUN服务器收到的捆绑请求消息的源IP地址被映射成最靠近STUN服务器的NAT的IP地址，STUN服务器把这个源IP地址和端口号复制到一个捆绑响应消息中，发送回拥有这个IP地址和端口号的客户端。\n\n当STUN客户端收到捆绑响应消息之后，它会将自己发送捆绑请求时绑定的本地IP地址和端口号同捆绑响应消息中的IP地址和端口号进行比较，如果不匹配，就表示客户端正处于一个或者多个NAT的前面。\n\n在Full-Cone NAT的情况下，在捆绑响应消息中的IP地址和端口是属于公网的，公网上的任何主机都可以使用这个IP地址和端口号向这个应用程序发送数据包，应用程序只需要在刚才发送捆绑请求的IP地址和端口上监听即可。\n\n当然，客户可能并不在一个Full-Cone NAT的前面，实际上，它并不知道自己在一个什么类型的NAT的前面。为了确定NAT的类型，客户端使用附加的捆绑请求。具体过程是很灵活的，但一般都会像下面这样工作：客户端再发送一个捆绑请求，这次发往另一个IP地址，但是使用的是跟上一次同一个源IP地址和源端口号，如果返回的数据包里面的IP地址和端口号和第一次返回的数据包中的不同，客户端就会知道它是在一个对称NAT的前面。客户端为了确认自己是否在一个完全锥形NAT的前面，客户端可以发送一个带有标志的捆绑请求，这个标志告诉服务器使用另一个IP地址和端口发送捆绑响应。换句话说，如果客户端使X/Y的IP地址端口对向A/B的IP地址端口对发送捆绑请求，服务器就会使用源IP地址和源端口号为C/D的地址端口对向X/Y发送捆绑响应。如果客户端收到了这个响应，它就知道它是在一个Full-Cone NAT前面。\n\nSTUN协议允许客户端请求服务器从收到捆绑请求的IP地址往回发捆绑响应，但是要使用不同的端口号。这可以用来检查客户端是否在Port Restricted Cone NAT的前面还是在Restricted Cone NAT的前面。\n\n\n# RFC5389/STUN\n\nSTUN协议在RFC5389中被重新命名为Session Traversal Utilities for NAT，即NAT会话穿透效用。在这里，NAT会话穿透效用被定位为一个用于其他解决NAT穿透问题协议的协议。它可以用于终端设备检查由NAT分配给终端的IP地址和端口号。同时，它也被用来检查两个终端之间的连接性，好比是一种维持NAT绑定表项的保活协议。STUN可以用于多种NAT类型，并不需要它们提供特殊的行为。\n\nSTUN本身不再是一种完整的NAT穿透解决方案，它相当于是一种NAT穿透解决方案中的工具。这是与RFC3489/STUN版本相比最重要的改变。\n\n# STUN用途\n\n目前定义了三种STUN用途：\n\n * Interactive Connectivity Establishment（ICE）[MMUSIC-ICE]，交互式连接建立\n * Client-initiated connections for SIP [SIP-OUTBOUND]，用于SIP的客户端初始化连接\n * NAT Behavior Discovery [BEHAVE-NAT]，NAT行为发现\n\n# 报文结构\n\n【消息头】\n\nSTUN消息头为20字节，后面紧跟0或多个属性。STUN头部包含一STUN消息类型、magic cookie、事务ID和消息长度。\n\n\n\n每个STUN消息的最高位前2位必须为0。当STUN协议为多个协议多路复用时若使用的是同一个端口，这可以用于与其他协议区分STUN数据包。消息类型确定消息的类别（如请求、成功回应、失败回应、标志）。虽然这里有四种消息类型，但可以分为2类事务：请求/响应事务、标志事务。\n\n消息类型字段可进一步划分为下面结构：\n\n\n\n消息类型定义如下：\n\n * 0b00，表示请求\n * 0b01，表示标志\n * 0b10，表示成功响应\n * 0b11，表示错误响应\n\n魔术字域必须包含固定的值0x2112A442。在RFC3489中，该域是事务ID的一部分。配置魔术字允许服务器检测客户是否理解某些在改进的版本中增加的属性。另外，还可用于STUN多路复用时与其他协议的包进行区分。\n\n96位的事务ID用于唯一的识别STUN事务。对于请求/响应事务，事务ID由STUN客户端来选择；对于标志事务，由代理（代理指支持STUN的客户端或服务器）来选择并发送。它主要服务于与请求相关的响应，因此它也扮演着一个帮助阻止确定类型的攻击的角色。服务器使用事务ID来唯一的标识出所有客户端的每一个事务。事务ID本身必须是唯一的，并且随机的从0到2的96-1次方中选择。重新发送相同的请求时，也必须使用新的事务ID。成功或错误响应必须携带与相对应的请求相同的事务ID。\n\n消息长度字段不包括20字节的STUN头部。所有的STUN属性必须填充为4字节的倍数。消息长度字段的最后2位总是为0，这为区分STUN包与其他协议的包提供了另外一种方法。\n\n【消息属性】\n\nSTUN头之后是0或多个属性。每个属性都采用TLV编码，16位的类型、16位的长度及可变长度的值。每个STUN属性必须是4字节边界对齐。\n\n\n\n属性空间被划分为2个范围。属性的类型值在0x0000到0x7fff是强制理解属性，这意味着除非STUN代理能够理解这些属性，否则将不能正常处理包含该属性的消息；属性的类型值在0x8000到0xffff范围是可选理解属性，这意味着如果STUN代理不能理解它们的话这些属性可以被忽略。\n\nSTUN属性类型集由IANA维护，具体定义详见IETF官方文档 RFC5389。\n\n\n# RFC5389与RFC3489的区别\n\nRFC5389与RFC3489的不同点如下：\n\n * 去掉STUN是一种完整的NAT穿透方案的概念，现在是一种用于提供NAT穿透解决方案的工具。因而，协议的名称变为NAT会话穿透效用；\n * 定义了STUN的用途；\n * 去掉了STUN关于NAT类型检测和绑定生命期发现的用法，去掉了RESPONSE-ADDRESS、CHANGED-ADDRESS、CHANGE-REQUEST、SOURCE-ADDRESS和REFLECTED-FROM属性；\n * 增加了一个固定的32位的魔术字字段，事务ID字段减少了32位长度；\n * 增加了XOR-MAPPED-ADDRESS属性，若魔术字在捆绑请求中出现时，该属性包括在捆绑响应中。否则，RFC3489中的行为是保留的（换句话说，捆绑响应中包括MAPPED-ADDRESS）；\n * 介绍了消息类型字段的正式结构，带有一对明确的位来标识Request、Response、Error-Response或Indication消息。因此，消息类型字段被划分为类别和方法两部分；\n * 明确的指出了STUN的最高2位是0b00，当用于ICE时可以简单的与RTP包区分开来；\n * 增加指纹属性来提供一种明确的方法来检测当STUN协议多路复用时，STUN与其他协议之间的差异；\n * 增加支持IPv6，IPv4客户端可以获取一个IPv6映射地址，反之亦然；\n * 增加一个long-term-credential-based认证机制；\n * 增加了SOFTWARE、REALM、NONCE和ALTERNATE-SERVER属性；\n * 去掉了共享密匙方法，因此PASSWORD属性也去掉了；\n * 去掉了使用连续10秒侦听STUN响应来识别一个攻击的做法；\n * 改变事务计时器来增加TCP友好性；\n * 去掉了STUN例子如集中分离控制和媒体面，代替的，在使用STUN协议时提供了更多的信息；\n * 定义了一类填充机制来改变长度属性的说明；\n * REALM、SERVER、原因语句和NONCE限制在127个字符，USERNAME限制在513个字节以内；\n * 为TCP和TLS改变了DNS SRV规程，UDP仍然和以前保持一致。\n\nIETF官文档，详见：RFC5389、RFC3489。\n\n\n# 新特性介绍\n\n# 指纹机制\n\nFINGERPRINT机制是一种可选的用于其他协议多路复用STUN时发送给相同的传输地址时区分STUN数据包的机制，该机制不支持与RFC3489相兼容。\n\n在一些用途中，基于相同的传输地址时多个协议会多路复用STUN消息，例如RTP协议。STUN消息必须首先和应用报文分离开。目前，在STUN报头中有3种固定的字段可以用于该目的。尽管如此，在一些案例中，三种固定字段仍然不能充分的区别开。\n\n当扩展的指纹机制被使用时，STUN代理在发送给其他STUN代理的消息中包括FINGERPRINT属性。当其他STUN代理收到时，除基本的检查之外，还将检查是否包含FINGERPRINT属性及它是否包含正确的值，至此，它将相信这是一个STUN消息。指纹机制帮助STUN代理检查其他协议那些看起来像是STUN消息的消息。\n\n# 通过DNS发现服务器机制\n\nSTUN客户端可以使用DNS来发现STUN服务器的IP地址和端口。客户端必须知道服务器的域名。\n\n当客户端希望找出服务器在公网上的位置就采用捆绑请求/响应事务，SRV（资源记录表）中服务器名称是“stun”。当通过TLS会话采用捆绑请求/响应事务，SRV中服务器名称为“stuns”。STUN用户可以定义额外的DNS资源记录服务名称。\n\nSTUN请求的默认端口是3478，用于TCP和UDP。STUN在TLS上的默认端口是5349。服务器能够在TLS上运行STUN与STUN在TCP上时使用相同的端口，只有服务器软件支持决定初始消息是否是TLS或STUN消息。\n\n如果SRV中没有记录可查，客户端执行A或AAAA记录查找域名。结果将会是1张IP地址表，每一个都可以使用TCP或UDP采用默认端口号连接。通常要求使用TLS，客户端使用STUN在TLS上的默认端口号连接其中一个IP地址。\n\n# 认证和消息完整性机制\n\n短期证书机制：\n\n短期证书机制假设在STUN事务之前，客户端和服务器已经使用了其他协议来交换了证书，以username和password形式。这个证书是有时间限制的。例如，在ICE用途中，两个终端使用带外方式交换信息来对username和password达成一致，并在媒体会话期间使用。这个证书被用来进行消息完整性检查，用于每个请求和多个响应中。与长期证书机制相比，没有挑战和响应方式，因此，这种证书的时间限制特性的优点是可以阻止重播。\n\n长期证书机制：\n\n长期证书机制依赖于一个长期证书，username和password在客户端和服务器中是共用的。这个证书从它提供给用户开始将一直是有效的，直到该用户不再是该系统的用户。这本质上是一个提供给用户username和password的传统的登入方式。\n\n客户端初始发送一个请求，没有提供任何证书和任何完整性检测。服务器拒绝这个请求，并提供给用户一个范围（用于指导用户或代理选择username和password）和一个nonce。这个nonce提供重放保护。它是一个cookie，由服务器选择，以这样一种方式来标示有效时间或客户端身份是有效的。客户端重试这个请求，这次包括它的username和realm和服务器提供的nonce来回应。服务器确认这个nonce和检查这个message integrity。如果它们匹配，请求则通过认证。如果这个nonce不再有效，即过期了，服务器就拒绝该请求，并提供一个新的nonce。\n\n在随后的到同一服务器的请求，客户端重新使用这个nonce、username和realm，和先前使用的password。这样，随后的请求不会被拒绝直到这个nonce变成无效的。需要注意的是，长期证书机制不能用来保护Indications，由于Indications不能被改变，因此，使用Indications时要么使用短期证书，要么就省略认证和消息完整性。因为长期证书机制对离线字典攻击敏感，部署的时候应该使用很难猜测的密码。\n\n# 备份服务器机制\n\n服务器使用增强的重定向功能将一个客户端转向另一个服务器，通过回应一个错误响应号为300（尝试备份）的错误响应。服务器在错误响应中携带一个ALTERNATE-SERVER属性。\n\n客户端收到错误响应号为300的错误响应后，在该响应中查找ALTERNATE-SERVER属性。若找到一个，客户端就会将当前的事务作废，并重新尝试发送请求到该属性中列出的服务器。请求报文若已经通过认证，则必须使用与先前发送给执行重定向操作的服务器同样的证书。如果客户端在最后5分钟里已经重试发送请求时已经重定向到了一个服务器，它必须忽略重定向操作并将当前的事务作废，这是为了防止无限的重定向循环。\n\n\n# RFC5389与RFC3489的兼容\n\n在RFC3489中：\n\n * UDP是唯一支持的传输协议\n * RFC5389中的魔术字字段是RFC3489中事务ID的一部分，事务ID长128位\n * 没有XOR-MAPPED-ADDRESS属性，绑定方法是使用MAPPED-ADDRESS属性代替\n * 有3个需要强制理解的属性，分别是：RESPONSE-ADDRESS、CHANGE-REQUEST、CHANGED-ADDRESS属性，而RFC5389中不再支持这些属性。\n\n# 客户端处理的改变\n\n客户端想要与RFC3489的服务器互操作，应发送一个使用绑定方法的请求消息，不包含任何消息，使用UDP协议发送给服务器。如果成功，将收到服务器发回的包含MAPPED-ADDRESS属性而不是XOR-MAPPED-ADDRESS属性的成功响应。客户端试图与基于RFC3489的应用服务器互操作必须准备好接收任意一个属性。此外，客户端必须忽略任何在响应中出现的保留的强制理解的属性。RFC3489中规定保留属性中的0x0002、0x0004、0x0005和0x000B可能出现在绑定响应中。\n\n# 服务器处理的改变\n\n服务器能够察觉由RFC3489中的客户端发送的携带有不正确的魔术字的捆绑请求消息。当服务器察觉到RFC3489中的客户端，它应该将捆绑请消息中魔术字域中的值拷贝到捆绑响应中的魔术字字段中，并且插入一个MAPPED-ADDRESS属性代替XOR-MAPPED-ADDRESS属性。\n\n客户端在极少的环境下可能包括RESPONSE-ADDRESS或CHANGE-REQUEST属性中的一个。在这些情况下，服务器把这些属性看做是一个不认识的强制理解的属性，并回应一个错误响应。RFC3489版本中的STUN缺少魔术字和指纹属性这两种能够高可靠性的正确标识其他协议多路复用时的STUN消息。因此，STUN执行与RFC3489兼容时不应该被用于多个协议。\n\n\n# TURN详解\n\n\n# RFC5766/TURN\n\nTURN，在RFC5766中定义，英文全称Traversal Using Relays around NAT（TURN）：Relay Extensions to Session Traversal Utilities for NAT（STUN），即使用中继穿透NAT：STUN的中继扩展。简单的说，TURN与STUN的共同点都是通过修改应用层中的私网地址达到NAT穿透的效果，异同点是TURN是通过两方通讯的“中间人”方式实现穿透。\n\n如果一个主机位于NAT的后面，在某些情况下它不能够与其他主机点对点直接连接。在这些情况下，它需要使用中间网点提供的中继连接服务。TURN协议就是用来允许主机控制中继的操作并且使用中继与对端交换数据。TURN与其他中继控制协议不同的是它能够允许一个客户端使用一个中继地址与多个对端连接。\n\nTURN协议被设计为ICE的一部分，用于NAT穿越，虽然如此，它也可以在没有ICE的地方单独使用。\n\n\n# 操作概述\n\n\n\n在一个典型组网中，一个TURN客户端连接在一个私有网络中，通过一个或多个NAT来连接到公网。在公网中有一个TURN服务器。在因特网的别处有一个或多个对端是这个TURN客户端希望通讯的。这些对端也有可能是在一个或多个NAT的后面。该客户端使用服务器作为一个中继来发送数据包 到这些对端去，并且从这些对端接收数据包。\n\n客户端通过一个IP地址和端口的组合来与服务器建立会话。客户端使用TURN命令在服务器上创建和操作一个ALLOCATION。一旦这个allocation创建好了，客户端能够在数据发往哪个对端的指示下发送应用数据到这个服务器，服务器将中继这些数据到合适的对端。客户端发送的应用数据包含在TURN消息中，服务器将数据提取出来，并以UDP数据包方式发送给对端。反向上，对端以UDP数据包方式发送应用数据到这个allocation提供的中继传输地址。因为TURN消息总是包含客户端与哪些对端通讯的指示，客户端能够使用单一的allocation来与多个对端通讯。\n\n\n# 术语\n\n * TURN client：遵循RFC5766的STUN客户端。\n * TURN server：遵循RFC5766的STUN服务器。\n * Peer：TURN客户端希望连接的主机。TURN服务器为TURN客户端和它的对端中继流量，但Peer并不与TURN服务器使用TURN协议进行交互，它接收从TURN服务器发送过来的数据，并向TURN服务器发送数据。\n * Transport Address：IP地址与端口号的组合。\n * Host Transport Address：客户端或对端的传输地址。\n * Server-Reflexive Transport Address：NAT公网侧的传输地址，该地址由NAT分配，相当于一个特定的主机传输地址。\n * Relayed Transport Address：TURN服务器上的传输地址，用于客户端和对端中继数据。\n * TURN Server Transport Address：TURN服务器上的传输地址，用于客户端发送STUN消息给服务器。\n * Peer Transport Address：服务器看到的对端的传输地址，当对端是在NAT后面，则是对端的服务器反射传输地址。\n * Allocation：通过Allocate请求将中继传输地址提供给客户端，除了中继状态外，还有许可和超时定时器等。\n * 5-tuple：五元组，包括客户端IP地址和端口，服务器IP地址和端口和传输协议（包括UDP、TCP、TLS）的组合。\n * Channel：通道号与对端传输地址的关联，一旦一个通道号与一个对端的传输地址绑定，客户端和服务器就能够利用带宽效应更大的通道数据消息来交换数据。\n * Permission：一个对端允许使用它的IP地址和传输协议来发送数据到TURN服务器，服务器只为从对端发来的并且匹配一个已经存在的许可的流量中继到相应的客户端。\n * Realm：服务器内用于描述服务器或内容的一个字符串，这个realm告诉客户端哪些用户名和密码的组合可用于认证请求。\n * Nonce：服务器随机选择的一个字符串，包含在报文摘要中。为了防止中继攻击，服务器应该有规律的改变这个nonce。\n\n具体协议细节，详见IETF官方文档：RFC5766.\n\n\n# 协议交互过程详细举例\n\n以上图为例进行讲解，每个消息中，多个属性包含在消息中并显示它们的值。为了方便阅读，以人们可读的格式来显示。\n\n\n\n客户端使用10.1.1.2:49271作为传输地址向服务器的传输地址发送Allocate请求。客户端随机选择一个96位的事务ID。该Allocate请求消息包括SOFTWARE属性来提供客户端的软件版本信息；包括LIFETIME属性，指明客户端希望该allocation具有1小时的生命期而非缺省的10分钟；包括REQUESTED-TRANSPORT属性来告诉服务器与对端之间采用UDP协议来传输；包括DONT-FRAGMENT属性因为客户端希望在随后的Send indications中使用DON’T-FRAGMENT属性。\n\n服务器需要任何请求必须是经过认证的，因此服务器拒绝了该最初的Allocation请求，并且回应了携带有错误响应号为401（未授权）的Allocate错误响应；该响应包括一个REALM属性，指明认证的域；还包括一个NONCE属性和一个SOFTWARE属性。\n\n客户端收到了错误响应号为401的Allocate错误响应，将重新尝试发送Allocate请求，此时将包括认证属性。客户端在新的请求中重新选择一个新的事务ID。客户端包括一个USERNAME属性，使用从服务器那收到的realm值来帮助它决定使用哪个值；请求还包括REALM和NONCE属性，这两个属性是从收到的错误响应中拷贝出来的。最后，客户端包括一个MESSAGE-INTEGRITY属性。\n\n服务器收到认证的Allocate请求后，检查每个属性是否正确；然后，产生一个allocation，并给客户端回应Allocate成功响应。服务器在该成功响应中携带一个LIFETIME属性，本例中服务器将客户端请求的1小时生命期减小为20分钟，这是因为这个特定的服务器可能不允许超过20分钟的生命期；该响应包括XOR-RELAYED-ADDRESS属性，值为该allocation的中继传输地址；该响应还包括XOR-MAPPED-ADDRESS属性，值为客户端的server-reflexive地址；该响应也包含一个SOFTWARE属性；最后，包括一个MESSAGE-INTEGRITY属性来证明该响应，确保它的完整性。\n\n\n\n接着，客户端为了准备向对端A发送一些应用数据而创建一个permission。这里通过一个CreatePermission请求来做到。该请求携带XOR-PEER-ADDRESS属性包含有确定的请求的IP地址，这里为对端A的地址；需要注意的是，属性中地址的端口号被设置为0在CreatePermission请求中，并且客户端使用的是对端A的server-reflexive地址而不是它的主机地址（私网地址）；客户端在该请求中携带与之前的Allocate请求中一样的username、realm和nonce值，因此该请求被服务器认可。此时在该请求中，客户端没有携带SOFTWARE属性。\n\n服务器收到该CreatePermission请求，产生一个相应的许可，并以CreatePermission成功响应来回应。该响应中只包含了Transaction-ID和MESSAGE-INTEGRITY属性。\n\n\n\n现在客户端使用Send indication来发送应用数据到对端A。对端的server-reflexive传输地址包含在XOR-PEER-ADDRESS属性中，应用数据包含在DATA属性中。客户端已经在应用层上执行了路径MTU发现功能，因此通过DON’T-FRAGMENT属性来告知服务器当通过UDP方式来向对端发送数据时应设置DF位。Indications不能使用长期证书机制来认证，所以该消息中没有MESSAGE-INTEGRITY属性。\n\n服务器收到Send indication后，提取出应用数据封装成UDP格式发给对端A；UDP报文的源传输地址为中继传输地址，并设置DF位。\n\n对端A回应它自己的包含有应用数据的UDP包给服务器。目的地址为服务器的中继传输地址。当服务器收到后，将生成Data indication消息给客户端，携带有XOR-PEER-ADDRESS属性。应用数据包含在DATA属性中。\n\n\n\n客户端现在若要绑定一个通道到对端B，将指定一个空闲的通道号（本例中为0x4000）包含在CHANNEL-NUMBER属性中，对端B的传输地址包含在XOR-PEER-ADDRESS属性中。与以前一样，客户端再次利用上次请求中的username、realm和nonce。\n\n当服务器收到该请求后，服务器绑定这个对端的通道号，为对端B的IP地址安装一个permission，然后给客户端回应一个ChannelBind成功响应消息。\n\n\n\n客户端现在发送一个ChannelData消息给服务器，携带有发送给对端B的数据。这个消息不是一个STUN消息，因此没有事务ID。它之有3个字段：通道号、数据、数据长度；服务器收到后，检查通道号后发现当前已经绑定了，就以UDP方式发送数据给对端B。\n\n接着，对端B发送UDP数据包回应给服务器的中继传输地址。服务器收到后，回应给客户端ChannelData消息，包含UDP数据包中的数据。服务器知道是给哪个客户端发送ChannelData消息，这是因为收到的UDP数据包中的目的地址（即服务器的中继传输地址），并且知道使用的是哪个通道号，这是因为通道已经与相应的传输地址绑定了。\n\n\n\n有时候，20分钟的生命期已经到了，客户端需要刷新allocation。此时通过发送Refresh请求来进行。该请求包含最后一次使用的username、realm和nonce，还包含SOFTWARE属性。当服务器收到这个Refresh请求时，它注意到这个nonce值已经超期了，则给客户端回应一个错误响应号为438（过期Nonce）的Refresh错误响应，并提供一个新的nonce值。可护端将重试该请求，此时携带新的nonce值。若第二次尝试被接受，服务器将回应一个成功响应。需要注意的是，此时客户端在请求中没有携带LIFETIME属性，所以服务器刷新客户端的allocation时采用缺省的10分钟生命期。\n\n\n# ICE简明介绍\n\n\n# 简介\n\nICE的全称Interactive Connectivity Establishment（互动式连接建立），由IETF的 MMUSIC 工作组开发出来的，它所提供的是一种框架，使各种NAT穿透技术可以实现统一。ICE跟STUN和TURN不一样，ICE不是一种协议，而是一个框架（Framework），它整合了STUN和TURN。\n\n\n# 应用模型\n\n\n\n如上图所示，如果A想与B通信，那么其过程如下：\n\n * A收集所有的IP地址，并找出其中可以从STUN服务器和TURN服务器收到流量的地址；\n * A向STUN服务器发送一份地址列表，然后按照排序的地址列表向B发送启动信息，目的是实现节点间的通信；\n * B向启动信息中的每一个地址发送一条STUN请求；\n * A将第一条接收到的STUN请求的回复信息发送给B；\n * B接到STUN回复后，从中找出那些可在A和B之间实现通信的地址；\n * 利用列表中的排序列最高的地址进一步的设备间通信。\n\n由于该技术是建立在多种NAT穿透协议的基础之上，并且提供了一个统一的框架，所以ICE具备了所有这些技术的优点，同时还避免了任何单个协议可能存在的缺陷。因此，ICE可以实现在未知网络拓扑结构中实现的设备互连，而且不需要进行对手配置。另外，由于该技术不需要为VoIP流量手动打开防火墙，所以也不会产生潜在的安全隐患。\n\n\n# 本文总结\n\n在现实Internet网络环境中，大多数计算机主机都位于防火墙或NAT之后，只有少部分主机能够直接接入Internet。很多时候，我们希望网络中的两台主机能够直接进行通信（即所谓的P2P通信），而不需要其它公共服务器的中转。由于主机可能位于防火墙或NAT之后，在进行P2P通信之前，我们需要进行检测以确认它们之间能否进行P2P通信以及如何通信。这种技术通常被称为NAT穿透（NAT Traversal）。\n\nRFC3489中定义的STUN，即简单地用UDP穿过NAT（STUN）是个轻量级的协议。它允许应用发现它们与公共互联网之间存在的NAT和防火墙及其他类型。它还为应用提供判断NAT给它们分配的公共网际协议（IP）地址。STUN可工作在许多现存NAT上，并且不需要它们做任何特别的行为。它允许广泛的各类的应用穿越现存的NAT设施。\n\nRFC5389中对STUN协议进行了修订，将其定位于为穿透NAT提供工具，即NAT会话穿透效用是一个用于其他解决NAT穿透问题协议的协议。它可以用于终端设备检查由NAT分配给终端的IP地址和端口号。同时，它也被用来检查两个终端之间的连接性，好比是一种维持NAT绑定表项的保活协议。STUN本身并不是一种完整的NAT穿透解决方案。它相当于是一种NAT穿透解决方案中的工具。这是与先前的版本相比最重要的改变。之前的RFC3489中定义的STUN是一个完整的穿透NAT解决方案。此外，最大的区别是支持TCP穿透。\n\nRFC5766中对STUN协议再次进行了扩展，即中继穿透NAT：STUN的扩展。TURN与STUN的共同点都是通过修改应用层中的私网地址达到NAT穿透的效用，异同点是TURN采用了两方通讯的“中间人”方式实现穿透，突破了原先STUN协议无法在两台主机不能够点对点直接连接下提供作用的限制。\n\n技术无止境，NAT穿透技术仍在不断更新中，这里只对STUN/TURN协议作了简单的介绍，具体细节请参考RFC3489、5389、5766。",normalizedContent:"# 内容概述\n\n在现实internet网络环境中，大多数计算机主机都位于防火墙或nat之后，只有少部分主机能够直接接入internet。很多时候，我们希望网络中的两台主机能够直接进行通信，即所谓的p2p通信，而不需要其他公共服务器的中转。由于主机可能位于防火墙或nat之后，在进行p2p通信之前，我们需要进行检测以确认它们之间能否进行p2p通信以及如何通信。这种技术通常称为nat穿透（nat traversal）。最常见的nat穿透是基于udp的技术，如rfc3489中定义的stun协议。\n\nstun，首先在rfc3489中定义，作为一个完整的nat穿透解决方案，英文全称是simple traversal of udp through nats，即简单的用udp穿透nat。\n\n在新的rfc5389修订中把stun协议定位于为穿透nat提供工具，而不是一个完整的解决方案，英文全称是session traversal utilities for nat，即nat会话穿透工具集。rfc5389与rfc3489除了名称变化外，最大的区别是支持tcp穿透。\n\nturn，首先在rfc5766中定义，英文全称是traversal using relays around nat:relay extensions to session traversal utilities for nat，即使用中继穿透nat:stun的扩展。简单的说，turn与stun的共同点都是通过修改应用层中的私网地址达到nat穿透的效果，异同点是turn是通过两方通讯的“中间人”方式实现穿透。\n\nice跟stun和turn不一样，ice不是一种协议，而是一个框架（framework），它整合了stun和turn。\n\n\n# stun详解\n\n了解stun之前，我们需要了解nat的种类。\n\nnat对待udp的实现方式有4种，分别如下：\n\n * full cone nat：完全锥形nat，所有从同一个内网ip和端口号发送过来的请求都会被映射成同一个外网ip和端口号，并且任何一个外网主机都可以通过这个映射的外网ip和端口号向这台内网主机发送包。\n * restricted cone nat：限制锥形nat，它也是所有从同一个内网ip和端口号发送过来的请求都会被映射成同一个外网ip和端口号。与完全锥形不同的是，外网主机只能够向先前已经向它发送过数据包的内网主机发送包。\n * port restricted cone nat：端口限制锥形nat，与限制锥形nat很相似，只不过它包括端口号。也就是说，一台ip地址x和端口p的外网主机想给内网主机发送包，必须是这台内网主机先前已经给这个ip地址x和端口p发送过数据包。\n * symmetric nat：对称nat，所有从同一个内网ip和端口号发送到一个特定的目的ip和端口号的请求，都会被映射到同一个ip和端口号。如果同一台主机使用相同的源地址和端口号发送包，但是发往不同的目的地，nat将会使用不同的映射。此外，只有收到数据的外网主机才可以反过来向内网主机发送包。\n\n\n# rfc3489/stun\n\nstun（simple traversal of user datagram protocol through network address translators），即简单的用udp穿透nat，是个轻量级的协议，是基于udp的完整的穿透nat的解决方案。它允许应用程序发现它们与公共互联网之间存在的nat和防火墙及其他类型。它也可以让应用程序确定nat分配给它们的公网ip地址和端口号。stun是一种client/server的协议，也是一种request/response的协议，默认端口号是3478。\n\n参考：\n\n * ietf官方文档rfc3489/stun点此进入\n * rfc3489 中文翻译\n\n# 报文结构\n\n【消息头】\n\n所有的stun消息都包含20个字节的消息头，包括16位的消息类型(2 个字节)，16位的消息长度（2 个字节）和128位的事务id（16 个字节）。\n\n\n\n消息类型许可的值如下：\n\n * 0x0001：捆绑请求；\n * 0x0101：捆绑响应；\n * 0x0111：捆绑错误响应；\n * 0x0002：共享私密请求；\n * 0x0102：共享私密响应；\n * 0x0112：共享私密错误响应。\n\n消息长度，是消息大小的字节数，但不包括20字节的头部。事务id，128位的标识符，用于随机请求和响应，请求与其相应的所有响应具有相同的标识符。\n\n【消息属性】\n\n消息头之后是0或多个属性，每个属性进行tlv编码，包括16位的属性类型、16位的属性长度和变长属性值。\n\n\n\n属性类型定义如下：\n\n * mapped-address：mapped-address属性表示映射过的ip地址和端口。它包括8位的地址族，16位的端口号及长度固定的ip地址。\n * response-address：response-address属性表示响应的目的地址。\n * change-request：客户使用32位的change-request属性来请求服务器使用不同的地址或端口号来发送响应。\n * source-address：source-address属性出现在捆绑响应中，它表示服务器发送响应的源ip地址和端口。\n * changed-address：如果捆绑请求的change-request属性中的“改变ip”和“改变端口”标志设置了，则changed-address属性表示响应发出的ip地址和端口号。\n * username：username属性用于消息的完整性检查，用于消息完整性检查中标识共享私密。username通常出现在共享私密响应中，与password一起。当使用消息完整性检查时，可有选择地出现在捆绑请求中。\n * password：password属性用在共享私密响应中，与username一起。password的值是变长的，用作共享私密，它的长度必须是4字节的倍数，以保证属性与边界对齐。\n * message-integrity：message-integrity属性包含stun消息的hmac-sha1，它可以出现在捆绑请求或捆绑响应中；message-integrity属性必须是任何stun消息的最后一个属性。它的内容决定了hmac输入的key值。\n * error-code：error-code属性出现在捆绑错误响应或共享私密错误响应中。它的响应号数值范围从100到699。\n * unknown-attributes：unknown-attributes属性只存在于其error-code属性中的响应号为420的捆绑错误响应或共享私密错误响应中。\n * reflected-from：reflected-from属性只存在于其对应的捆绑请求包含response-address属性的捆绑响应中。属性包含请求发出的源ip地址，它的目的是提供跟踪能力，这样stun就不能被用作dos攻击的反射器。\n\n具体的error-code（响应号），与它们缺省的原因语句一起，目前定义如下：\n\n * 400（错误请求）：请求变形了。客户在修改先前的尝试前不应该重试该请求。\n * 401（未授权）：捆绑请求没有包含message-integrity属性。\n * 420（未知属性）：服务器不认识请求中的强制属性。\n * 430（过期资格）：捆绑请求没有包含message-integrity属性，但它使用过期的共享私密。客户应该获得新的共享私密并再次重试。\n * 431（完整性检查失败）：捆绑请求包含message-integrity属性，但hmac验证失败。这可能是潜在攻击的表现，或者客户端实现错误\n * 432（丢失用户名）：捆绑请求包含message-integrity属性，但没有username属性。完整性检查中两项都必须存在。\n * 433（使用tls）：共享私密请求已经通过tls（transport layer security，即安全传输层协议）发送，但没有在tls上收到。\n * 500（服务器错误）：服务器遇到临时错误，客户应该再次尝试。\n * 600（全局失败）：服务器拒绝完成请求，客户不应该重试。\n\n属性空间分为可选部分与强制部分，值超过0x7fff的属性是可选的，即客户或服务器即使不认识该属性也能够处理该消息；值小于或等于0x7fff的属性是强制理解的，即除非理解该属性，否则客户或服务器就不能处理该消息。\n\n# 实现原理\n\n\n\nstun协议的完整交互过程如上，下面我们来介绍具体实现步骤。\n\n * 一般情况下，客户会配置stun服务器提供者的域名，该域名被解析为ip地址和srv过程的端口号。服务器名是“stun”，使用udp协议发送捆绑请求，使用tcp协议发送共享私密请求。stun协议的缺省端口号为3478。\n\n * 若要提供完整性检查，stun在客户和服务器间使用128位的共享私密，作为在捆绑请求和捆绑响应中的密匙。\n\n * 首先，客户通过发现过程获得它将与之建立tcp连接的ip地址和端口号。客户打开该地址和端口的连接，开始tls协商，验证服务器的标识。客户发送共享私密请求。该请求没有属性，只有头。服务器生成响应。\n\n * 客户会在该连接上生成多个请求，但在获得用户名和密码后关闭该连接。\n\n * 服务器收到共享私密请求，验证从tls连接上到达的该请求；如果不是通过tls收到的请求，则生成共享私密错误响应，并设置error-code属性为响应号433；这里区分两种情况：若通过tcp收到请求，则错误响应通过收到请求的相同连接发送；若通过udp收到请求，则错误响应发送回请求送出的源ip和端口。\n\n * 服务器检查请求中的任何属性，当其中有不理解的小于或等于0x7fff的值，则生成共享私密错误响应，设置error-code属性为响应号420,并包括unknown-attribute属性，列出它不理解的小于或等于0x7fff的属性的值。该错误响应通过tls连接发送。\n\n * 若请求正确，服务器创建共享私密响应，包含与请求中相同的事务id，并包含username和password属性。用户名在10分钟内有效。\n\n * 共享私密响应通过与收到请求的相同的tls连接发送，服务器保持连接打开状态，由客户关闭它。\n\n * 接着，客户发送捆绑请求，携带的属性包括：\n   \n   * 可选属性：response-address属性和change-request属性；\n   * 强制属性：message-integrity属性和username属性。\n\n * 客户发送捆绑请求，通过客户重传来提供可靠性。客户开始用100ms的间隔重传，每次重传间隔加倍，直至1.6秒。之间间隔1.6秒的重传继续，直到收到响应或总共已经发送了9次。因此，若9500ms后，还未收到响应，客户认为传输已经失败。\n\n * 服务器检查捆绑请求的message-integrity属性，不存在则生成捆绑错误响应，设置error-code属性为响应号401；若存在，计算请求的hmac key值。\n\n * 服务器检查username属性，不存在则生成捆绑错误响应，设置error-code属性为响应号432；若存在，但不认识该username的共享私密（例如，它超时了），生成捆绑错误响应，设置error-code属性为响应号430。\n\n * 若服务器知道该共享私密，但所计算的 hmac 与请求的不同，生成捆绑错误响应，设置error-code属性为响应号431。\n\n * 假设消息完整性检查通过了，服务器检查请求中的任何属性的值，若遇到不理解的小于或等于0x7fff的值，生成捆绑错误响应，设置error-code属性为响应号420，该响应包含unknown-attribute属性，并列出不理解的小于或等于0x7fff的属性。\n\n * 若请求正确，服务器生成单个捆绑响应，包含与捆绑请求相同的事务id。服务器在捆绑响应中加入mapped-address属性，该属性的ip地址和端口号为捆绑请求的源ip地址和端口号。\n\n捆绑响应的源地址和端口号取决于捆绑请求中change-request属性的值及捆绑请求收到的地址和端口号相关。总结如下：\n\n\n\n服务器在捆绑响应中加入source-address属性，包含用于发送捆绑响应的源地址和端口号；加入changed-address属性，包含源ip地址和端口号。\n\n如果捆绑请求中包含了username和message-integrity属性，则服务器在捆绑响应中加入message-integrity属性。\n\n如果捆绑请求包含response-address属性，则服务器在捆绑响应中加入reflected-from属性：如果捆绑请求使用从共享私密请求获得的用户名进行认证，则reflected-from属性包含共享私密请求到达的源ip地址和端口号；若请求中的用户名不是使用共享私密分配的，则reflected-from属性包含获得该用户名的实体的源ip地址和端口号；若请求中没有用户名，且服务器愿意处理该请求，则reflected-from属性包含请求发出的源ip地址和端口号。\n\n服务器不会重传响应，可靠性通过客户周期性地重发请求来保障，每个请求都会触发服务器进行响应。\n\n客户端判断响应的类型是捆绑错误响应还是捆绑响应。捆绑错误响应通常在请求发送的源地址和端口收到；捆绑响应通常在请求中的response-address属性的地址和端口收到，若没有该属性，则捆绑响应将在请求发送的源地址和端口号收到。\n\n * 若是捆绑错误响应，客户检查响应中的error-code属性的响应号：400至499之间的未知属性按属性400处理，500至599之间的未知属性按500处理，600至699之间的未知属性按600处理。任何100和399之间的响应都会使请求重传中止，但其他则忽略；若客户收到响应的属性类型大于0x7fff，则忽略该属性，若小于或等于0x7fff，则请求重传停止，并忽略整个响应；\n * 若是捆绑响应，客户检查响应的message-integrity属性：如果不存在，客户在请求中加入message-integrity属性，并放弃该响应；如果存在，客户计算响应的hmac。如果计算出的hmac与响应中的不同，则放弃该响应，并警告客户可能受到了攻击；若计算出的hmac与响应中的匹配，则过程继续；\n * 不论收到捆绑响应还是捆绑错误响应，都将中止该请求的重传。客户在第一次响应后继续监听捆绑请求的响应10秒钟，如果这期间它收到任何消息类型不同的响应或不同的mapped-address属性，它将警告用户可能受到攻击；并且，如果客户收到的捆绑响应次数超过它发送的捆绑请求数的两倍，它将警告用户可能受到攻击；若捆绑响应经过认证，上述攻击并未导致客户丢弃mapped-address，则客户可以使用该mapped-address和source-address属性。\n\n# stun功能举例\n\n客户通过带外方式获得stun服务器信息后，就打开对应的地址和端口的连接，并开始与stun服务器进行tls协商。一旦打开了连接，客户就通过tcp协议发送共享私密请求，服务器生成共享私密响应。stun在客户和服务器间使用共享私密，用作捆绑请求和捆绑响应中的密匙。之后，客户使用udp协议向stun服务器发送捆绑请求，当捆绑请求消息到达服务器的时候，它可能经过了一个或者多个nat。结果是stun服务器收到的捆绑请求消息的源ip地址被映射成最靠近stun服务器的nat的ip地址，stun服务器把这个源ip地址和端口号复制到一个捆绑响应消息中，发送回拥有这个ip地址和端口号的客户端。\n\n当stun客户端收到捆绑响应消息之后，它会将自己发送捆绑请求时绑定的本地ip地址和端口号同捆绑响应消息中的ip地址和端口号进行比较，如果不匹配，就表示客户端正处于一个或者多个nat的前面。\n\n在full-cone nat的情况下，在捆绑响应消息中的ip地址和端口是属于公网的，公网上的任何主机都可以使用这个ip地址和端口号向这个应用程序发送数据包，应用程序只需要在刚才发送捆绑请求的ip地址和端口上监听即可。\n\n当然，客户可能并不在一个full-cone nat的前面，实际上，它并不知道自己在一个什么类型的nat的前面。为了确定nat的类型，客户端使用附加的捆绑请求。具体过程是很灵活的，但一般都会像下面这样工作：客户端再发送一个捆绑请求，这次发往另一个ip地址，但是使用的是跟上一次同一个源ip地址和源端口号，如果返回的数据包里面的ip地址和端口号和第一次返回的数据包中的不同，客户端就会知道它是在一个对称nat的前面。客户端为了确认自己是否在一个完全锥形nat的前面，客户端可以发送一个带有标志的捆绑请求，这个标志告诉服务器使用另一个ip地址和端口发送捆绑响应。换句话说，如果客户端使x/y的ip地址端口对向a/b的ip地址端口对发送捆绑请求，服务器就会使用源ip地址和源端口号为c/d的地址端口对向x/y发送捆绑响应。如果客户端收到了这个响应，它就知道它是在一个full-cone nat前面。\n\nstun协议允许客户端请求服务器从收到捆绑请求的ip地址往回发捆绑响应，但是要使用不同的端口号。这可以用来检查客户端是否在port restricted cone nat的前面还是在restricted cone nat的前面。\n\n\n# rfc5389/stun\n\nstun协议在rfc5389中被重新命名为session traversal utilities for nat，即nat会话穿透效用。在这里，nat会话穿透效用被定位为一个用于其他解决nat穿透问题协议的协议。它可以用于终端设备检查由nat分配给终端的ip地址和端口号。同时，它也被用来检查两个终端之间的连接性，好比是一种维持nat绑定表项的保活协议。stun可以用于多种nat类型，并不需要它们提供特殊的行为。\n\nstun本身不再是一种完整的nat穿透解决方案，它相当于是一种nat穿透解决方案中的工具。这是与rfc3489/stun版本相比最重要的改变。\n\n# stun用途\n\n目前定义了三种stun用途：\n\n * interactive connectivity establishment（ice）[mmusic-ice]，交互式连接建立\n * client-initiated connections for sip [sip-outbound]，用于sip的客户端初始化连接\n * nat behavior discovery [behave-nat]，nat行为发现\n\n# 报文结构\n\n【消息头】\n\nstun消息头为20字节，后面紧跟0或多个属性。stun头部包含一stun消息类型、magic cookie、事务id和消息长度。\n\n\n\n每个stun消息的最高位前2位必须为0。当stun协议为多个协议多路复用时若使用的是同一个端口，这可以用于与其他协议区分stun数据包。消息类型确定消息的类别（如请求、成功回应、失败回应、标志）。虽然这里有四种消息类型，但可以分为2类事务：请求/响应事务、标志事务。\n\n消息类型字段可进一步划分为下面结构：\n\n\n\n消息类型定义如下：\n\n * 0b00，表示请求\n * 0b01，表示标志\n * 0b10，表示成功响应\n * 0b11，表示错误响应\n\n魔术字域必须包含固定的值0x2112a442。在rfc3489中，该域是事务id的一部分。配置魔术字允许服务器检测客户是否理解某些在改进的版本中增加的属性。另外，还可用于stun多路复用时与其他协议的包进行区分。\n\n96位的事务id用于唯一的识别stun事务。对于请求/响应事务，事务id由stun客户端来选择；对于标志事务，由代理（代理指支持stun的客户端或服务器）来选择并发送。它主要服务于与请求相关的响应，因此它也扮演着一个帮助阻止确定类型的攻击的角色。服务器使用事务id来唯一的标识出所有客户端的每一个事务。事务id本身必须是唯一的，并且随机的从0到2的96-1次方中选择。重新发送相同的请求时，也必须使用新的事务id。成功或错误响应必须携带与相对应的请求相同的事务id。\n\n消息长度字段不包括20字节的stun头部。所有的stun属性必须填充为4字节的倍数。消息长度字段的最后2位总是为0，这为区分stun包与其他协议的包提供了另外一种方法。\n\n【消息属性】\n\nstun头之后是0或多个属性。每个属性都采用tlv编码，16位的类型、16位的长度及可变长度的值。每个stun属性必须是4字节边界对齐。\n\n\n\n属性空间被划分为2个范围。属性的类型值在0x0000到0x7fff是强制理解属性，这意味着除非stun代理能够理解这些属性，否则将不能正常处理包含该属性的消息；属性的类型值在0x8000到0xffff范围是可选理解属性，这意味着如果stun代理不能理解它们的话这些属性可以被忽略。\n\nstun属性类型集由iana维护，具体定义详见ietf官方文档 rfc5389。\n\n\n# rfc5389与rfc3489的区别\n\nrfc5389与rfc3489的不同点如下：\n\n * 去掉stun是一种完整的nat穿透方案的概念，现在是一种用于提供nat穿透解决方案的工具。因而，协议的名称变为nat会话穿透效用；\n * 定义了stun的用途；\n * 去掉了stun关于nat类型检测和绑定生命期发现的用法，去掉了response-address、changed-address、change-request、source-address和reflected-from属性；\n * 增加了一个固定的32位的魔术字字段，事务id字段减少了32位长度；\n * 增加了xor-mapped-address属性，若魔术字在捆绑请求中出现时，该属性包括在捆绑响应中。否则，rfc3489中的行为是保留的（换句话说，捆绑响应中包括mapped-address）；\n * 介绍了消息类型字段的正式结构，带有一对明确的位来标识request、response、error-response或indication消息。因此，消息类型字段被划分为类别和方法两部分；\n * 明确的指出了stun的最高2位是0b00，当用于ice时可以简单的与rtp包区分开来；\n * 增加指纹属性来提供一种明确的方法来检测当stun协议多路复用时，stun与其他协议之间的差异；\n * 增加支持ipv6，ipv4客户端可以获取一个ipv6映射地址，反之亦然；\n * 增加一个long-term-credential-based认证机制；\n * 增加了software、realm、nonce和alternate-server属性；\n * 去掉了共享密匙方法，因此password属性也去掉了；\n * 去掉了使用连续10秒侦听stun响应来识别一个攻击的做法；\n * 改变事务计时器来增加tcp友好性；\n * 去掉了stun例子如集中分离控制和媒体面，代替的，在使用stun协议时提供了更多的信息；\n * 定义了一类填充机制来改变长度属性的说明；\n * realm、server、原因语句和nonce限制在127个字符，username限制在513个字节以内；\n * 为tcp和tls改变了dns srv规程，udp仍然和以前保持一致。\n\nietf官文档，详见：rfc5389、rfc3489。\n\n\n# 新特性介绍\n\n# 指纹机制\n\nfingerprint机制是一种可选的用于其他协议多路复用stun时发送给相同的传输地址时区分stun数据包的机制，该机制不支持与rfc3489相兼容。\n\n在一些用途中，基于相同的传输地址时多个协议会多路复用stun消息，例如rtp协议。stun消息必须首先和应用报文分离开。目前，在stun报头中有3种固定的字段可以用于该目的。尽管如此，在一些案例中，三种固定字段仍然不能充分的区别开。\n\n当扩展的指纹机制被使用时，stun代理在发送给其他stun代理的消息中包括fingerprint属性。当其他stun代理收到时，除基本的检查之外，还将检查是否包含fingerprint属性及它是否包含正确的值，至此，它将相信这是一个stun消息。指纹机制帮助stun代理检查其他协议那些看起来像是stun消息的消息。\n\n# 通过dns发现服务器机制\n\nstun客户端可以使用dns来发现stun服务器的ip地址和端口。客户端必须知道服务器的域名。\n\n当客户端希望找出服务器在公网上的位置就采用捆绑请求/响应事务，srv（资源记录表）中服务器名称是“stun”。当通过tls会话采用捆绑请求/响应事务，srv中服务器名称为“stuns”。stun用户可以定义额外的dns资源记录服务名称。\n\nstun请求的默认端口是3478，用于tcp和udp。stun在tls上的默认端口是5349。服务器能够在tls上运行stun与stun在tcp上时使用相同的端口，只有服务器软件支持决定初始消息是否是tls或stun消息。\n\n如果srv中没有记录可查，客户端执行a或aaaa记录查找域名。结果将会是1张ip地址表，每一个都可以使用tcp或udp采用默认端口号连接。通常要求使用tls，客户端使用stun在tls上的默认端口号连接其中一个ip地址。\n\n# 认证和消息完整性机制\n\n短期证书机制：\n\n短期证书机制假设在stun事务之前，客户端和服务器已经使用了其他协议来交换了证书，以username和password形式。这个证书是有时间限制的。例如，在ice用途中，两个终端使用带外方式交换信息来对username和password达成一致，并在媒体会话期间使用。这个证书被用来进行消息完整性检查，用于每个请求和多个响应中。与长期证书机制相比，没有挑战和响应方式，因此，这种证书的时间限制特性的优点是可以阻止重播。\n\n长期证书机制：\n\n长期证书机制依赖于一个长期证书，username和password在客户端和服务器中是共用的。这个证书从它提供给用户开始将一直是有效的，直到该用户不再是该系统的用户。这本质上是一个提供给用户username和password的传统的登入方式。\n\n客户端初始发送一个请求，没有提供任何证书和任何完整性检测。服务器拒绝这个请求，并提供给用户一个范围（用于指导用户或代理选择username和password）和一个nonce。这个nonce提供重放保护。它是一个cookie，由服务器选择，以这样一种方式来标示有效时间或客户端身份是有效的。客户端重试这个请求，这次包括它的username和realm和服务器提供的nonce来回应。服务器确认这个nonce和检查这个message integrity。如果它们匹配，请求则通过认证。如果这个nonce不再有效，即过期了，服务器就拒绝该请求，并提供一个新的nonce。\n\n在随后的到同一服务器的请求，客户端重新使用这个nonce、username和realm，和先前使用的password。这样，随后的请求不会被拒绝直到这个nonce变成无效的。需要注意的是，长期证书机制不能用来保护indications，由于indications不能被改变，因此，使用indications时要么使用短期证书，要么就省略认证和消息完整性。因为长期证书机制对离线字典攻击敏感，部署的时候应该使用很难猜测的密码。\n\n# 备份服务器机制\n\n服务器使用增强的重定向功能将一个客户端转向另一个服务器，通过回应一个错误响应号为300（尝试备份）的错误响应。服务器在错误响应中携带一个alternate-server属性。\n\n客户端收到错误响应号为300的错误响应后，在该响应中查找alternate-server属性。若找到一个，客户端就会将当前的事务作废，并重新尝试发送请求到该属性中列出的服务器。请求报文若已经通过认证，则必须使用与先前发送给执行重定向操作的服务器同样的证书。如果客户端在最后5分钟里已经重试发送请求时已经重定向到了一个服务器，它必须忽略重定向操作并将当前的事务作废，这是为了防止无限的重定向循环。\n\n\n# rfc5389与rfc3489的兼容\n\n在rfc3489中：\n\n * udp是唯一支持的传输协议\n * rfc5389中的魔术字字段是rfc3489中事务id的一部分，事务id长128位\n * 没有xor-mapped-address属性，绑定方法是使用mapped-address属性代替\n * 有3个需要强制理解的属性，分别是：response-address、change-request、changed-address属性，而rfc5389中不再支持这些属性。\n\n# 客户端处理的改变\n\n客户端想要与rfc3489的服务器互操作，应发送一个使用绑定方法的请求消息，不包含任何消息，使用udp协议发送给服务器。如果成功，将收到服务器发回的包含mapped-address属性而不是xor-mapped-address属性的成功响应。客户端试图与基于rfc3489的应用服务器互操作必须准备好接收任意一个属性。此外，客户端必须忽略任何在响应中出现的保留的强制理解的属性。rfc3489中规定保留属性中的0x0002、0x0004、0x0005和0x000b可能出现在绑定响应中。\n\n# 服务器处理的改变\n\n服务器能够察觉由rfc3489中的客户端发送的携带有不正确的魔术字的捆绑请求消息。当服务器察觉到rfc3489中的客户端，它应该将捆绑请消息中魔术字域中的值拷贝到捆绑响应中的魔术字字段中，并且插入一个mapped-address属性代替xor-mapped-address属性。\n\n客户端在极少的环境下可能包括response-address或change-request属性中的一个。在这些情况下，服务器把这些属性看做是一个不认识的强制理解的属性，并回应一个错误响应。rfc3489版本中的stun缺少魔术字和指纹属性这两种能够高可靠性的正确标识其他协议多路复用时的stun消息。因此，stun执行与rfc3489兼容时不应该被用于多个协议。\n\n\n# turn详解\n\n\n# rfc5766/turn\n\nturn，在rfc5766中定义，英文全称traversal using relays around nat（turn）：relay extensions to session traversal utilities for nat（stun），即使用中继穿透nat：stun的中继扩展。简单的说，turn与stun的共同点都是通过修改应用层中的私网地址达到nat穿透的效果，异同点是turn是通过两方通讯的“中间人”方式实现穿透。\n\n如果一个主机位于nat的后面，在某些情况下它不能够与其他主机点对点直接连接。在这些情况下，它需要使用中间网点提供的中继连接服务。turn协议就是用来允许主机控制中继的操作并且使用中继与对端交换数据。turn与其他中继控制协议不同的是它能够允许一个客户端使用一个中继地址与多个对端连接。\n\nturn协议被设计为ice的一部分，用于nat穿越，虽然如此，它也可以在没有ice的地方单独使用。\n\n\n# 操作概述\n\n\n\n在一个典型组网中，一个turn客户端连接在一个私有网络中，通过一个或多个nat来连接到公网。在公网中有一个turn服务器。在因特网的别处有一个或多个对端是这个turn客户端希望通讯的。这些对端也有可能是在一个或多个nat的后面。该客户端使用服务器作为一个中继来发送数据包 到这些对端去，并且从这些对端接收数据包。\n\n客户端通过一个ip地址和端口的组合来与服务器建立会话。客户端使用turn命令在服务器上创建和操作一个allocation。一旦这个allocation创建好了，客户端能够在数据发往哪个对端的指示下发送应用数据到这个服务器，服务器将中继这些数据到合适的对端。客户端发送的应用数据包含在turn消息中，服务器将数据提取出来，并以udp数据包方式发送给对端。反向上，对端以udp数据包方式发送应用数据到这个allocation提供的中继传输地址。因为turn消息总是包含客户端与哪些对端通讯的指示，客户端能够使用单一的allocation来与多个对端通讯。\n\n\n# 术语\n\n * turn client：遵循rfc5766的stun客户端。\n * turn server：遵循rfc5766的stun服务器。\n * peer：turn客户端希望连接的主机。turn服务器为turn客户端和它的对端中继流量，但peer并不与turn服务器使用turn协议进行交互，它接收从turn服务器发送过来的数据，并向turn服务器发送数据。\n * transport address：ip地址与端口号的组合。\n * host transport address：客户端或对端的传输地址。\n * server-reflexive transport address：nat公网侧的传输地址，该地址由nat分配，相当于一个特定的主机传输地址。\n * relayed transport address：turn服务器上的传输地址，用于客户端和对端中继数据。\n * turn server transport address：turn服务器上的传输地址，用于客户端发送stun消息给服务器。\n * peer transport address：服务器看到的对端的传输地址，当对端是在nat后面，则是对端的服务器反射传输地址。\n * allocation：通过allocate请求将中继传输地址提供给客户端，除了中继状态外，还有许可和超时定时器等。\n * 5-tuple：五元组，包括客户端ip地址和端口，服务器ip地址和端口和传输协议（包括udp、tcp、tls）的组合。\n * channel：通道号与对端传输地址的关联，一旦一个通道号与一个对端的传输地址绑定，客户端和服务器就能够利用带宽效应更大的通道数据消息来交换数据。\n * permission：一个对端允许使用它的ip地址和传输协议来发送数据到turn服务器，服务器只为从对端发来的并且匹配一个已经存在的许可的流量中继到相应的客户端。\n * realm：服务器内用于描述服务器或内容的一个字符串，这个realm告诉客户端哪些用户名和密码的组合可用于认证请求。\n * nonce：服务器随机选择的一个字符串，包含在报文摘要中。为了防止中继攻击，服务器应该有规律的改变这个nonce。\n\n具体协议细节，详见ietf官方文档：rfc5766.\n\n\n# 协议交互过程详细举例\n\n以上图为例进行讲解，每个消息中，多个属性包含在消息中并显示它们的值。为了方便阅读，以人们可读的格式来显示。\n\n\n\n客户端使用10.1.1.2:49271作为传输地址向服务器的传输地址发送allocate请求。客户端随机选择一个96位的事务id。该allocate请求消息包括software属性来提供客户端的软件版本信息；包括lifetime属性，指明客户端希望该allocation具有1小时的生命期而非缺省的10分钟；包括requested-transport属性来告诉服务器与对端之间采用udp协议来传输；包括dont-fragment属性因为客户端希望在随后的send indications中使用don’t-fragment属性。\n\n服务器需要任何请求必须是经过认证的，因此服务器拒绝了该最初的allocation请求，并且回应了携带有错误响应号为401（未授权）的allocate错误响应；该响应包括一个realm属性，指明认证的域；还包括一个nonce属性和一个software属性。\n\n客户端收到了错误响应号为401的allocate错误响应，将重新尝试发送allocate请求，此时将包括认证属性。客户端在新的请求中重新选择一个新的事务id。客户端包括一个username属性，使用从服务器那收到的realm值来帮助它决定使用哪个值；请求还包括realm和nonce属性，这两个属性是从收到的错误响应中拷贝出来的。最后，客户端包括一个message-integrity属性。\n\n服务器收到认证的allocate请求后，检查每个属性是否正确；然后，产生一个allocation，并给客户端回应allocate成功响应。服务器在该成功响应中携带一个lifetime属性，本例中服务器将客户端请求的1小时生命期减小为20分钟，这是因为这个特定的服务器可能不允许超过20分钟的生命期；该响应包括xor-relayed-address属性，值为该allocation的中继传输地址；该响应还包括xor-mapped-address属性，值为客户端的server-reflexive地址；该响应也包含一个software属性；最后，包括一个message-integrity属性来证明该响应，确保它的完整性。\n\n\n\n接着，客户端为了准备向对端a发送一些应用数据而创建一个permission。这里通过一个createpermission请求来做到。该请求携带xor-peer-address属性包含有确定的请求的ip地址，这里为对端a的地址；需要注意的是，属性中地址的端口号被设置为0在createpermission请求中，并且客户端使用的是对端a的server-reflexive地址而不是它的主机地址（私网地址）；客户端在该请求中携带与之前的allocate请求中一样的username、realm和nonce值，因此该请求被服务器认可。此时在该请求中，客户端没有携带software属性。\n\n服务器收到该createpermission请求，产生一个相应的许可，并以createpermission成功响应来回应。该响应中只包含了transaction-id和message-integrity属性。\n\n\n\n现在客户端使用send indication来发送应用数据到对端a。对端的server-reflexive传输地址包含在xor-peer-address属性中，应用数据包含在data属性中。客户端已经在应用层上执行了路径mtu发现功能，因此通过don’t-fragment属性来告知服务器当通过udp方式来向对端发送数据时应设置df位。indications不能使用长期证书机制来认证，所以该消息中没有message-integrity属性。\n\n服务器收到send indication后，提取出应用数据封装成udp格式发给对端a；udp报文的源传输地址为中继传输地址，并设置df位。\n\n对端a回应它自己的包含有应用数据的udp包给服务器。目的地址为服务器的中继传输地址。当服务器收到后，将生成data indication消息给客户端，携带有xor-peer-address属性。应用数据包含在data属性中。\n\n\n\n客户端现在若要绑定一个通道到对端b，将指定一个空闲的通道号（本例中为0x4000）包含在channel-number属性中，对端b的传输地址包含在xor-peer-address属性中。与以前一样，客户端再次利用上次请求中的username、realm和nonce。\n\n当服务器收到该请求后，服务器绑定这个对端的通道号，为对端b的ip地址安装一个permission，然后给客户端回应一个channelbind成功响应消息。\n\n\n\n客户端现在发送一个channeldata消息给服务器，携带有发送给对端b的数据。这个消息不是一个stun消息，因此没有事务id。它之有3个字段：通道号、数据、数据长度；服务器收到后，检查通道号后发现当前已经绑定了，就以udp方式发送数据给对端b。\n\n接着，对端b发送udp数据包回应给服务器的中继传输地址。服务器收到后，回应给客户端channeldata消息，包含udp数据包中的数据。服务器知道是给哪个客户端发送channeldata消息，这是因为收到的udp数据包中的目的地址（即服务器的中继传输地址），并且知道使用的是哪个通道号，这是因为通道已经与相应的传输地址绑定了。\n\n\n\n有时候，20分钟的生命期已经到了，客户端需要刷新allocation。此时通过发送refresh请求来进行。该请求包含最后一次使用的username、realm和nonce，还包含software属性。当服务器收到这个refresh请求时，它注意到这个nonce值已经超期了，则给客户端回应一个错误响应号为438（过期nonce）的refresh错误响应，并提供一个新的nonce值。可护端将重试该请求，此时携带新的nonce值。若第二次尝试被接受，服务器将回应一个成功响应。需要注意的是，此时客户端在请求中没有携带lifetime属性，所以服务器刷新客户端的allocation时采用缺省的10分钟生命期。\n\n\n# ice简明介绍\n\n\n# 简介\n\nice的全称interactive connectivity establishment（互动式连接建立），由ietf的 mmusic 工作组开发出来的，它所提供的是一种框架，使各种nat穿透技术可以实现统一。ice跟stun和turn不一样，ice不是一种协议，而是一个框架（framework），它整合了stun和turn。\n\n\n# 应用模型\n\n\n\n如上图所示，如果a想与b通信，那么其过程如下：\n\n * a收集所有的ip地址，并找出其中可以从stun服务器和turn服务器收到流量的地址；\n * a向stun服务器发送一份地址列表，然后按照排序的地址列表向b发送启动信息，目的是实现节点间的通信；\n * b向启动信息中的每一个地址发送一条stun请求；\n * a将第一条接收到的stun请求的回复信息发送给b；\n * b接到stun回复后，从中找出那些可在a和b之间实现通信的地址；\n * 利用列表中的排序列最高的地址进一步的设备间通信。\n\n由于该技术是建立在多种nat穿透协议的基础之上，并且提供了一个统一的框架，所以ice具备了所有这些技术的优点，同时还避免了任何单个协议可能存在的缺陷。因此，ice可以实现在未知网络拓扑结构中实现的设备互连，而且不需要进行对手配置。另外，由于该技术不需要为voip流量手动打开防火墙，所以也不会产生潜在的安全隐患。\n\n\n# 本文总结\n\n在现实internet网络环境中，大多数计算机主机都位于防火墙或nat之后，只有少部分主机能够直接接入internet。很多时候，我们希望网络中的两台主机能够直接进行通信（即所谓的p2p通信），而不需要其它公共服务器的中转。由于主机可能位于防火墙或nat之后，在进行p2p通信之前，我们需要进行检测以确认它们之间能否进行p2p通信以及如何通信。这种技术通常被称为nat穿透（nat traversal）。\n\nrfc3489中定义的stun，即简单地用udp穿过nat（stun）是个轻量级的协议。它允许应用发现它们与公共互联网之间存在的nat和防火墙及其他类型。它还为应用提供判断nat给它们分配的公共网际协议（ip）地址。stun可工作在许多现存nat上，并且不需要它们做任何特别的行为。它允许广泛的各类的应用穿越现存的nat设施。\n\nrfc5389中对stun协议进行了修订，将其定位于为穿透nat提供工具，即nat会话穿透效用是一个用于其他解决nat穿透问题协议的协议。它可以用于终端设备检查由nat分配给终端的ip地址和端口号。同时，它也被用来检查两个终端之间的连接性，好比是一种维持nat绑定表项的保活协议。stun本身并不是一种完整的nat穿透解决方案。它相当于是一种nat穿透解决方案中的工具。这是与先前的版本相比最重要的改变。之前的rfc3489中定义的stun是一个完整的穿透nat解决方案。此外，最大的区别是支持tcp穿透。\n\nrfc5766中对stun协议再次进行了扩展，即中继穿透nat：stun的扩展。turn与stun的共同点都是通过修改应用层中的私网地址达到nat穿透的效用，异同点是turn采用了两方通讯的“中间人”方式实现穿透，突破了原先stun协议无法在两台主机不能够点对点直接连接下提供作用的限制。\n\n技术无止境，nat穿透技术仍在不断更新中，这里只对stun/turn协议作了简单的介绍，具体细节请参考rfc3489、5389、5766。",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"STUN 详解",frontmatter:{title:"STUN 详解",date:"2022-07-21T16:43:19.000Z",permalink:"/basic/p2p/stun/",categories:["基础","P2P"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/34.STUN%20%E8%AF%A6%E8%A7%A3.html",relativePath:"20.基础/35.P2P/34.STUN 详解.md",key:"v-18401afe",path:"/basic/p2p/stun/",headers:[{level:2,title:"STUN协议介绍",slug:"stun协议介绍",normalizedTitle:"stun协议介绍",charIndex:2},{level:3,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:15}],readingTime:{text:"1 min read",minutes:.06,time:3599.9999999999995,words:12},headersStr:"STUN协议介绍 简介",content:"# STUN协议介绍\n\n\n# 简介",normalizedContent:"# stun协议介绍\n\n\n# 简介",charsets:{cjk:!0},lastUpdated:"2022/09/16, 10:08:25",lastUpdatedTimestamp:1663294105e3},{title:"ICE 详解",frontmatter:{title:"ICE 详解",date:"2022-07-08T17:37:36.000Z",permalink:"/basic/p2p/ice/",categories:["基础","P2P"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/40.ICE%20%E8%AF%A6%E8%A7%A3.html",relativePath:"20.基础/35.P2P/40.ICE 详解.md",key:"v-285dec31",path:"/basic/p2p/ice/",headers:[{level:2,title:"简介",slug:"简介",normalizedTitle:"简介",charIndex:2},{level:3,title:"ICE简介",slug:"ice简介",normalizedTitle:"ice简介",charIndex:9},{level:3,title:"框架图",slug:"框架图",normalizedTitle:"框架图",charIndex:185},{level:3,title:"通讯流程",slug:"通讯流程",normalizedTitle:"通讯流程",charIndex:478},{level:2,title:"基础概念",slug:"基础概念",normalizedTitle:"基础概念",charIndex:918},{level:3,title:"ICE Candidate",slug:"ice-candidate",normalizedTitle:"ice candidate",charIndex:1598},{level:3,title:"ICE具体工作",slug:"ice具体工作",normalizedTitle:"ice具体工作",charIndex:2021},{level:3,title:"Candidate的获取",slug:"candidate的获取",normalizedTitle:"candidate的获取",charIndex:2178},{level:3,title:"SDP格式",slug:"sdp格式",normalizedTitle:"sdp格式",charIndex:2748},{level:3,title:"Candidate Pair",slug:"candidate-pair",normalizedTitle:"candidate pair",charIndex:5445},{level:3,title:"连通性检测",slug:"连通性检测",normalizedTitle:"连通性检测",charIndex:5642},{level:2,title:"原理",slug:"原理",normalizedTitle:"原理",charIndex:5829},{level:3,title:"Offer/Answer模型",slug:"offer-answer模型",normalizedTitle:"offer/answer模型",charIndex:5836},{level:3,title:"ICE工作流程",slug:"ice工作流程",normalizedTitle:"ice工作流程",charIndex:6298},{level:3,title:"连接性检查(Connectivity Checks)",slug:"连接性检查-connectivity-checks",normalizedTitle:"连接性检查(connectivity checks)",charIndex:8793},{level:2,title:"总结",slug:"总结",normalizedTitle:"总结",charIndex:2497},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:5424}],readingTime:{text:"4 min read",minutes:3.02,time:181200,words:604},headersStr:"简介 ICE简介 框架图 通讯流程 基础概念 ICE Candidate ICE具体工作 Candidate的获取 SDP格式 Candidate Pair 连通性检测 原理 Offer/Answer模型 ICE工作流程 连接性检查(Connectivity Checks) 总结 参考",content:'# 简介\n\n\n# ICE简介\n\nICE的全称Interactive Connectivity Establishment（互动式连接建立），由IETF的MMUSIC工作组开发出来的，它所提供的是一种框架，使各种NAT穿透技术可以实现统一。\n\nICE跟STUN和TURN不一样，ICE不是一种协议，而是一个框架（Framework），它整合了STUN和TURN。\n\n\n# 框架图\n\n如下：其中所有的服务Relay Server与STUN Server都可以部署到同一服务器上。\n\n\n\n * 双方通信的Peer 有两台机子A和B ，他们都是在NAT之后，并且这两个终端都会在NAT后面形成一个映射后的公网的IP地址。\n * 有两个NAT，在NAT外面有两个 STUN 服务，这里的STUN服务主要用于Peer终端进行NAT穿越使用的（去判断NAT类型和获取终端在公网中的IP）。STUN 服务可以有两个，也可以是一个或多个。\n * Relay server，即 TURN Server，具有中继的功能，大多数情况下也具有STUN Server的功能。\n\n\n# 通讯流程\n\n那我们就来看看这ICE是如何进行工作并且使这个两个终端最终进行媒体流的通讯的？两侧终端都是有网卡（IP），可以进行通讯。让这个终端去得到所有能够连接到这个终端B的通路。那这个终端都有哪些通路呢？\n\n * 内网直接通信：如果两个对端是在同一个局域网内，那么这俩就直接通过这个本地的IP地址就可以进行通讯。\n * 穿越NAT：终端首先访问STUN服务，通过STUN服务，能获取到NAT映射后的终端的公网地址（IP+端口）。并且终端双方可以通过服务器，获取得到对方的公网地址，就可以进行NAT穿越。那如果穿越成功了，他们也直接就能通过NAT进行通讯了。\n * TURN服务进行中继：就是走中继。那这个终端通过NAT将数据转给TURN中继，中继服务，再向另外一个端去转发数据。\n * ICE框架：ICE的基本的功能就是：收集终端双方所有的通路（因为终端可能包含多个网卡，必定包含多个通路）；对所有通路进行检测，看能不能通，那通了之后，那么ICE的这个工作就算结束了。\n\n\n# 基础概念\n\nICE的全称为Interactive Connectivity Establishment，即交互式连接建立。初学者可能会将其与网络编程的ICE 弄混，其实那是不一样的东西。在网络编程中，如C++的ICE库，都是指Internet Communications Engine，是一种用于分布式程序设计的网络通信中间件。我们这里说的只是交互式连接建立。\n\nICE 是一个用于在offer/answer模式下的NAT传输协议，主要用于UDP下多媒体会话的建立，其使用了STUN协议以及TURN 协议，同时也能被其他实现了offer/answer模型的的其他程序所使用，比如SIP(Session Initiation Protocol).\n\n使用offer/answer模型(RFC3264)的协议通常很难在NAT之间穿透，因为其目的一般是建立多媒体数据流,而且在报文中还携带了数据的源IP和端口信息，这在通过NAT时是有问题的。RFC3264还尝试在客户端之间建立直接的通路，因此中间就缺少了应用层的封装。这样设计是为了减少媒体数据延迟，减少丢包率以及减少程序部署的负担。然而这一切都很难通过NAT而完成。\n\n有很多解决方案可以使得这些协议运行于NAT环境之中，包括应用层网关(ALGs)，Classic STUN以及Realm Specific IP+SDP 协同工作等方法。不幸的是，这些技术适应性很差，在某些网络拓扑下工作很好，而在另一些环境下表现又很差，因此我们需要一个单一的、可自由定制的解决方案。以便能在所有环境中都能较好工作。\n\n\n# ICE Candidate\n\nICE Candidate 是什么？\n\nICE Candidate 是一个地址，包含协议、IP、端口、类型等。其中类型是主机类型（是经过NAT反射后地址还是中继地址，或者其他类型）\n\n获取到这些candidate之后，终端之间要交换这些candidate，那使用什么进行交换呢？通过候选者对（双方各自取一个candidate，组成候选者对）形成通路（是否可以互通，还需要进行连通性检查），使用SDP，SDP 是对于这个媒体信息以及网络信息的一个描述规范。\n\n这个规范，最终是通过信令将这个SDP发送给对方，双方拿到各自的对方的SDP，那么就能识别出对方都有哪些通路，并且同时了解自己有哪些通路。\n\nCandidate类型包含以下种类：\n\n * 主机候选者：主机网卡的IP地址和端口。\n * 反射候选者：NAT反射之后的公网IP地址和端口（不是伪公网）。\n * 中继候选者：TURN服务提供的IP地址和端口。\n\n\n# ICE具体工作\n\nICE 主要有如下工作：\n\n * 收集 Candidate\n * CandidatePair 排序\n * 连通性检查\n\n为什么要进行 CandidatePair 排序？\n\n形成多组候选者对之后，要根据一套算法进行排序，优先级最高的候选者对先做测试，因为有可能是先通的，这样就节省了时间。\n\n\n# Candidate的获取\n\nCandidate 关系图：\n\n\n\n * 本地即为agent实际就相当于一个终端，有本地网卡，网卡有IP，就是host的类型的主机候选者。\n * 经过NAT到TURN服务或者STUN服务。（一般情况下，STUN服务和TURN服务是部署在同一台机子上的，程序同时具有STUN和TURN两者的功能。）因此，通过以上服务就可以拿到主机的映射地址，就是NAT之后映射的公网地址（IP和端口），也就是反射候选者。\n * 通过向TURN服务发送一个allocate请求，如果成功了TURN服务会开通中继地址（IP地址和端口），作为中继候选者。\n\n这三种类型就是通过以上方式获取，通过发送一个请求可以获取这几种的候选者。\n\n总结一下，收集 Candidate 包括如下三种类型：\n\n * 主机候选者（Host Candidate）：获取本机所有IP和指定端口。\n * 反射候选者（Reflexive Candidate）：是通过向STUN/TURN服务发送请求的时候获取到的映射后的NAT转换后的公网IP和端口。\n * 中继候选者（Relay Candidate）：是通过向TURN服务发送一个allocate的请求，为数据的转发开通一个新的IP和端口，就是中继地址。\n\n拿到这些候选者之后，需要通过SDP交换信息。\n\n\n# SDP格式\n\nICE信息的描述格式通常采用标准的SDP,其全称为Session Description Protocol,即会话描述协议。\n\nSDP（Session Description Protocol）是一种信息格式的描述协议，本身不属于传输协议，可以被其他传输协议用来交换必要的信息，如SIP和RTSP等。\n\n一个SDP会话描述包含如下部分:\n\n * 会话名称和会话目的。\n * 会话的激活时间。\n * 构成会话的媒体(media)。\n * 为了接收该媒体所需要的信息(如地址,端口,格式等)。\n\n因为在中途参与会话也许会受限制,所以可能会需要一些额外的信息:\n\n * 会话使用的的带宽信息\n * 会话拥有者的联系信息\n\n一般来说，SDP必须包含充分的信息使得应用程序能够加入会话，并且可以提供任何非参与者使用时需要知道的资源状况，后者在当SDP同时用于多个会话声明协议时尤其有用。\n\nSDP是基于文本的协议，使用ISO 10646字符集和UTF-8编码。SDP字段名称和属性名称只使用UTF-8的一个子集US-ASCII，因此不能存在中文。虽然理论上文本字段和属性字段支持全集，但最好还是不要在其中使用中文。SDP会话描述包含了多行如下类型的文本:\n\n<type>=<value>\n\n\n1\n\n\n其中type是大小写敏感的，其中一些行是必须要有的，有些是可选的，其中可选的元素标记为*，所有元素都必须以固定顺序给出，固定的顺序极大改善了错误检测，同时使得处理端设计更加简单。\n\n一个标准的SDP案例：\n\nv=0\no=jdoe 2890844526 2890842807 IN IP4 10.47.16.5\ns=SDP Seminar\ni=A Seminar on the session description protocol\nu=http://www.example.com/seminars/sdp.pdf\ne=j.doe@example.com (Jane Doe)\nc=IN IP4 224.2.17.12/127\nt=2873397496 2873404696\na=recvonly\nm=audio 49170 RTP/AVP 0\nm=video 51372 RTP/AVP 99\na=rtpmap:99 h263-1998/90000\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * v：version，版本信息，一般都是0;\n * o：owner，表示此SDP归谁所有，比如案例中主机名字jdoe，有多个系列号，最后包含一个IP地址。（注意：这IP地址并不一定是最终要进行传输的IP的地址，在WEBRTC里并不是用这个IP，而是使用candidate中的IP。）\n * c：connection，表示连接这个网络的IPV4。\n * m：media，表示本次交互的媒体信息，如audio也就是音频，它使用的是RTP的协议，\n * a：attribute，表示上条信息所使用的参数（属性），如对于这个音频它有一个参数a=rtpmap，即音频的编码方式是PCMU，采样率是8000。\n\n最重要的是最后两行，它检测到有两种Candidate：\n\n * 第一条是UDP的，IP 是 10.0.1.1端口是 8998，类型是host；\n * 第二种也是UDP的，IP是192.0.2.3端口是45664,类型是穿越NAT的映射地址。\n\n这里没有中继地址，即同一局域网内可以互通，或者就是穿越NAT走P2P。\n\n标准的SDP格式如下：\n\n会话描述:\n     v=  (protocol version，协议版本)\n     o=  (originator and session identifier，发起者和会话标识符)\n     s=  (session name，会话名称)\n     i=* (session information，会话信息)\n     u=* (URI of description，URI 描述)\n     e=* (email address，邮件地址)\n     p=* (phone number，电话号码)\n     c=* (connection information -- not required if included in\n          all media，连接信息)\n     b=* (zero or more bandwidth information lines，带宽信息)\n     One or more time descriptions ("t=" and "r=" lines; see below)\n     z=* (time zone adjustments，时区调整)\n     k=* (encryption key，加密密钥)\n     a=* (zero or more session attribute lines，会话属性)\n     Zero or more media descriptions\n\n时间信息描述:\n     t=  (time the session is active，会话处于活动状态的时间)\n     r=* (zero or more repeat times)\n\n多媒体信息描述(如果有的话):\n     m=  (media name and transport address，媒体名称和传输地址)\n     i=* (media title，媒体标题)\n     c=* (connection information -- optional if included at\n          session level，连接信息)\n     b=* (zero or more bandwidth information lines，带宽信息)\n     k=* (encryption key，加密密钥)\n     a=* (zero or more media attribute lines，媒体属性)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n所有元素的type都为小写，并且不提供拓展。但是我们可以用a(attribute)字段来提供额外的信息。\n\n参考：\n\n * RFC4566。\n\n\n# Candidate Pair\n\n获取得到所有的candidate之后，就要形成候选对，通过检测连通性之后，形成通路。\n\n如何形成 CandidatePair？\n\n * 一方收集到所有 Candidate 之后通过信令传输给对端；\n * 对端收到后开始收集 Candidate；\n * 双方都完成 Candidate 收集之后，将 Candidate 形成 CandidatePair。\n\n\n# 连通性检测\n\n检查 CandidatePair 连通性包括如下三个步骤：\n\n * 对所有 CandidatePair 进行优先级排序；\n * 对排序后的 CandidatePair 进行发送检查，检查是否能成功发送请求；\n * 对排序后的 CandidatePair 进行接受检查，检查是否能成功接收到回应。\n\n\n\n在实际过程中，为了节省时间，发送跟接收是串行的。\n\n\n# 原理\n\n\n# Offer/Answer模型\n\nSDP用来描述多播主干网络的会话信息，但是并没有具体的交互操作细节，因此 RFC3264 定义了一种基于SDP的 offer/answer 模型。在该模型中，会话参与者的其中一方生成一个SDP报文构成offer，其中包含了一组offerer希望使用的多媒体流和编解码方法，以及offerer用来接收改数据的IP地址和端口信息。offer传输到会话的另一端(称为answerer)，由answerer生成一个answer，即用来响应对应offer的SDP报文。answer中包含不同offer对应的多媒体流，并指明该流是否可以接受。\n\nRFC3264只介绍了交换数据过程,而没有定义传递offer/answer报文的方法，后者在RFC3261/SIP 即会话初始化协议中描述。值得一提的是，offer/answer 模型也经常被SIP作为一种基本方法使用。offer/answer 模型在SDP报文的基础上进行了一些定义，工作过程不在此描述，需要了解细节的朋友可以参考RFC3261。\n\n\n# ICE工作流程\n\n一个典型的ICE工作环境如下，有两个端点L和R，都运行在各自的NAT之后(他们自己也许并不知道)，NAT的类型和性质也是未知的。 L和R通过交换SDP信息在彼此之间建立多媒体会话，通常交换通过一个SIP服务器完成:\n\n                 +-----------+\n                 |    SIP    |\n+-------+        |    Srvr   |         +-------+\n| STUN  |        |           |         | STUN  |\n| Srvr  |        +-----------+         | Srvr  |\n|       |        /           \\         |       |\n+-------+       /             \\        +-------+\n               /<- Signaling ->\\\n              /                 \\\n         +--------+          +--------+\n         |  NAT   |          |  NAT   |\n         +--------+          +--------+\n           /                       \\\n          /                         \\\n         /                           \\\n     +-------+                    +-------+\n     | Agent |                    | Agent |\n     |   L   |                    |   R   |\n     |       |                    |       |\n     +-------+                    +-------+\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nICE的基本思路是，每个终端都有一系列传输地址(包括传输协议,IP地址和端口)的候选，可以用来和其他端点进行通信。\n\n其中可能包括:\n\n * 直接和网络接口联系的传输地址(host address)\n * 经过NAT转换的传输地址,即反射地址(server reflective address)\n * TURN服务器分配的中继地址(relay address)\n\n虽然潜在要求任意一个L的候选地址都能用来和R的候选地址进行通信。但是实际中发现有许多组合是无法工作的。举例来说，如果L和R都在NAT之后而且不处于同一内网，他们的直接地址就无法进行通信。ICE的目的就是为了发现哪一对候选地址的组合可以工作，并且通过系统的方法对所有组合进行测试(用一种精心挑选的顺序)。\n\n为了执行ICE，客户端必须要识别出其所有的地址候选，ICE中定义了三种候选类型，有些是从物理地址或者逻辑网络接口继承而来，其他则是从STUN或者TURN服务器发现的。很自然，一个可用的地址为和本地网络接口直接联系的地址，通常是内网地址， 称为HOST CANDIDATE，如果客户端有多个网络接口，比如既连接了WiFi又插着网线，那么就可能有多个内网地址候选。\n\n其次，客户端通过STUN或者TURN来获得更多的候选传输地，即SERVER REFLEXIVE CANDIDATES和RELAYED CANDIDATES， 如果TURN服务器是标准化的，那么两种地址都可以通过TURN服务器获得。当L获得所有的自己的候选地址之后，会将其按优先级排序，然后通过signaling通道发送到R。候选地址被存储在SDP offer报文的属性部分。当R接收到offer之后，就会进行同样的获选地址收集过程，并返回给L。\n\n这一步骤之后，两个对等端都拥有了若干自己和对方的候选地址，并将其配对。组成CANDIDATE PAIRS。为了查看哪对组合可以工作，每个终端都进行一系列的检查。每个检查都是一次STUN request/response传输，将request从候选地址对的本地地址发送到远端地址。连接性检查的基本原则很简单:\n\n * 以一定的优先级将候选地址对进行排序；\n * 以该优先级顺序发送checks请求；\n * 从其他终端接收到checks的确认信息。\n\n两端连接性测试,结果是一个4次握手过程:\n\n L                        R\n -                        -\n STUN request ->             \\  L\'s\n           <- STUN response  /  check\n\n            <- STUN request  \\  R\'s\n STUN response ->            /  check\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n值的一提的是，STUN request的发送和接收地址都是接下来进多媒体传输(如RTP和RTCP)的地址和端口，所以，客户端实际上是将STUN协议与RTP/RTCP协议在数据包中进行复用(而不是在端口上复用)。\n\n由于STUN Binding request用来进行连接性测试，因此STUN Binding response中会包含终端的实际地址，如果这个地址和之前学习的所有地址都不匹配，发送方就会生成一个新的candidate，称为PEER REFLEXIVE CANDIDATE，和其他candidate一样,也要通过ICE的检查测试。\n\n\n# 连接性检查(Connectivity Checks)\n\n所有的ICE实现都要求与STUN(RFC5389)兼容，并且废弃Classic STUN(RFC3489)。ICE的完整实现既生成checks(作为STUN client)，也接收checks(作为STUN server)，而lite实现则只负责接收checks。这里只介绍完整实现情况下的检查过程。\n\n 1. 为中继候选地址生成许可(Permissions)。\n\n 2. 从本地候选往远端候选发送Binding Request。\n\n在Binding请求中通常需要包含一些特殊的属性，以在ICE进行连接性检查的时候提供必要信息。\n\n * PRIORITY 和 USE-CANDIDATE\n\n终端必须在其request中包含PRIORITY属性，指明其优先级，优先级由公式计算而得。如果有需要也可以给出特别指定的候选(即USE-CANDIDATE属性)。\n\n * ICE-CONTROLLED和ICE-CONTROLLING\n\n在每次会话中，每个终端都有一个身份。总共有两种身份，即受控方(controlled role)和主控方(controlling role)。主控方负责选择最终用来通讯的候选地址对，受控方被告知哪个候选地址对用来进行哪次媒体流传输，并且不生成更新过的offer来提示此次告知。发起ICE处理进程(即生成offer)的一方必须是主控方，而另一方则是受控方。如果终端是受控方，那么在request中就必须加上ICE-CONTROLLED属性，同样如果终端是主控方，就需要ICE-CONTROLLING属性。\n\n * 生成Credential\n\n作为连接性检查的Binding Request必须使用STUN的短期身份验证。验证的用户名被格式化为一系列username段的联结，包含了发送请求的所有对等端的用户名，以冒号隔开;密码就是对等端的密码。\n\n 3. 处理Response。\n\n当收到Binding Response时,终端会将其与Binding Request相联系，通常通过事务ID。随后将会将此事务ID与候选地址对进行绑定。\n\n * 失败响应\n\n如果STUN传输返回487(Role Conflict)错误响应，终端首先会检查其是否包含了ICE-CONTROLLED或ICE-CONTROLLING属性。如果有ICE-CONTROLLED，终端必须切换为controlling role;如果请求包含ICE-CONTROLLING属性，则必须切换为controlled role。切换好之后,终端必须使产生487错误的候选地址对进入检查队列中，并将此地址对的状态设置为Waiting。\n\n * 成功响应，一次连接检查在满足下列所有情况时候就被认为成功:\n   \n   * STUN传输产生一个Success Response。\n   * response的源IP和端口等于Binding Request的目的IP和端口。\n   * response的目的IP和端口等于Binding Request的源IP和端口。\n\n终端收到成功响应之后，先检查其mapped address是否与本地记录的地址对有匹配，如果没有则生成一个新的候选地址，即对等端的反射地址。如果有匹配，则终端会构造一个可用候选地址对(valid pair)。通常很可能地址对不存在于任何检查列表中，检索检查列表中没有被服务器反射的本地地址，这些地址把它们的本地候选转换成服务器反射地址的基地址，并把冗余的地址去除掉。\n\n\n# 总结\n\n本文介绍了一种完整的NAT环境通信解决方案ICE，并且对其中涉及到的概念SDP和offer/answer模型也作了简要介绍。ICE是使用STUN/TURN工具性质的最主要协议之一，其中TURN一开始也被设计为ICE协议的一部分。值的一提的是，本文只是对这几种协议作了概述性的说明，而具体工作过程和详细的属性描述都未包含，因此如果需要根据协议来实现具体的应用程序，还需要对RFC的文档进行仔细阅读。\n\n\n# 参考\n\n * P2P通信标准协议(三)之ICE',normalizedContent:'# 简介\n\n\n# ice简介\n\nice的全称interactive connectivity establishment（互动式连接建立），由ietf的mmusic工作组开发出来的，它所提供的是一种框架，使各种nat穿透技术可以实现统一。\n\nice跟stun和turn不一样，ice不是一种协议，而是一个框架（framework），它整合了stun和turn。\n\n\n# 框架图\n\n如下：其中所有的服务relay server与stun server都可以部署到同一服务器上。\n\n\n\n * 双方通信的peer 有两台机子a和b ，他们都是在nat之后，并且这两个终端都会在nat后面形成一个映射后的公网的ip地址。\n * 有两个nat，在nat外面有两个 stun 服务，这里的stun服务主要用于peer终端进行nat穿越使用的（去判断nat类型和获取终端在公网中的ip）。stun 服务可以有两个，也可以是一个或多个。\n * relay server，即 turn server，具有中继的功能，大多数情况下也具有stun server的功能。\n\n\n# 通讯流程\n\n那我们就来看看这ice是如何进行工作并且使这个两个终端最终进行媒体流的通讯的？两侧终端都是有网卡（ip），可以进行通讯。让这个终端去得到所有能够连接到这个终端b的通路。那这个终端都有哪些通路呢？\n\n * 内网直接通信：如果两个对端是在同一个局域网内，那么这俩就直接通过这个本地的ip地址就可以进行通讯。\n * 穿越nat：终端首先访问stun服务，通过stun服务，能获取到nat映射后的终端的公网地址（ip+端口）。并且终端双方可以通过服务器，获取得到对方的公网地址，就可以进行nat穿越。那如果穿越成功了，他们也直接就能通过nat进行通讯了。\n * turn服务进行中继：就是走中继。那这个终端通过nat将数据转给turn中继，中继服务，再向另外一个端去转发数据。\n * ice框架：ice的基本的功能就是：收集终端双方所有的通路（因为终端可能包含多个网卡，必定包含多个通路）；对所有通路进行检测，看能不能通，那通了之后，那么ice的这个工作就算结束了。\n\n\n# 基础概念\n\nice的全称为interactive connectivity establishment，即交互式连接建立。初学者可能会将其与网络编程的ice 弄混，其实那是不一样的东西。在网络编程中，如c++的ice库，都是指internet communications engine，是一种用于分布式程序设计的网络通信中间件。我们这里说的只是交互式连接建立。\n\nice 是一个用于在offer/answer模式下的nat传输协议，主要用于udp下多媒体会话的建立，其使用了stun协议以及turn 协议，同时也能被其他实现了offer/answer模型的的其他程序所使用，比如sip(session initiation protocol).\n\n使用offer/answer模型(rfc3264)的协议通常很难在nat之间穿透，因为其目的一般是建立多媒体数据流,而且在报文中还携带了数据的源ip和端口信息，这在通过nat时是有问题的。rfc3264还尝试在客户端之间建立直接的通路，因此中间就缺少了应用层的封装。这样设计是为了减少媒体数据延迟，减少丢包率以及减少程序部署的负担。然而这一切都很难通过nat而完成。\n\n有很多解决方案可以使得这些协议运行于nat环境之中，包括应用层网关(algs)，classic stun以及realm specific ip+sdp 协同工作等方法。不幸的是，这些技术适应性很差，在某些网络拓扑下工作很好，而在另一些环境下表现又很差，因此我们需要一个单一的、可自由定制的解决方案。以便能在所有环境中都能较好工作。\n\n\n# ice candidate\n\nice candidate 是什么？\n\nice candidate 是一个地址，包含协议、ip、端口、类型等。其中类型是主机类型（是经过nat反射后地址还是中继地址，或者其他类型）\n\n获取到这些candidate之后，终端之间要交换这些candidate，那使用什么进行交换呢？通过候选者对（双方各自取一个candidate，组成候选者对）形成通路（是否可以互通，还需要进行连通性检查），使用sdp，sdp 是对于这个媒体信息以及网络信息的一个描述规范。\n\n这个规范，最终是通过信令将这个sdp发送给对方，双方拿到各自的对方的sdp，那么就能识别出对方都有哪些通路，并且同时了解自己有哪些通路。\n\ncandidate类型包含以下种类：\n\n * 主机候选者：主机网卡的ip地址和端口。\n * 反射候选者：nat反射之后的公网ip地址和端口（不是伪公网）。\n * 中继候选者：turn服务提供的ip地址和端口。\n\n\n# ice具体工作\n\nice 主要有如下工作：\n\n * 收集 candidate\n * candidatepair 排序\n * 连通性检查\n\n为什么要进行 candidatepair 排序？\n\n形成多组候选者对之后，要根据一套算法进行排序，优先级最高的候选者对先做测试，因为有可能是先通的，这样就节省了时间。\n\n\n# candidate的获取\n\ncandidate 关系图：\n\n\n\n * 本地即为agent实际就相当于一个终端，有本地网卡，网卡有ip，就是host的类型的主机候选者。\n * 经过nat到turn服务或者stun服务。（一般情况下，stun服务和turn服务是部署在同一台机子上的，程序同时具有stun和turn两者的功能。）因此，通过以上服务就可以拿到主机的映射地址，就是nat之后映射的公网地址（ip和端口），也就是反射候选者。\n * 通过向turn服务发送一个allocate请求，如果成功了turn服务会开通中继地址（ip地址和端口），作为中继候选者。\n\n这三种类型就是通过以上方式获取，通过发送一个请求可以获取这几种的候选者。\n\n总结一下，收集 candidate 包括如下三种类型：\n\n * 主机候选者（host candidate）：获取本机所有ip和指定端口。\n * 反射候选者（reflexive candidate）：是通过向stun/turn服务发送请求的时候获取到的映射后的nat转换后的公网ip和端口。\n * 中继候选者（relay candidate）：是通过向turn服务发送一个allocate的请求，为数据的转发开通一个新的ip和端口，就是中继地址。\n\n拿到这些候选者之后，需要通过sdp交换信息。\n\n\n# sdp格式\n\nice信息的描述格式通常采用标准的sdp,其全称为session description protocol,即会话描述协议。\n\nsdp（session description protocol）是一种信息格式的描述协议，本身不属于传输协议，可以被其他传输协议用来交换必要的信息，如sip和rtsp等。\n\n一个sdp会话描述包含如下部分:\n\n * 会话名称和会话目的。\n * 会话的激活时间。\n * 构成会话的媒体(media)。\n * 为了接收该媒体所需要的信息(如地址,端口,格式等)。\n\n因为在中途参与会话也许会受限制,所以可能会需要一些额外的信息:\n\n * 会话使用的的带宽信息\n * 会话拥有者的联系信息\n\n一般来说，sdp必须包含充分的信息使得应用程序能够加入会话，并且可以提供任何非参与者使用时需要知道的资源状况，后者在当sdp同时用于多个会话声明协议时尤其有用。\n\nsdp是基于文本的协议，使用iso 10646字符集和utf-8编码。sdp字段名称和属性名称只使用utf-8的一个子集us-ascii，因此不能存在中文。虽然理论上文本字段和属性字段支持全集，但最好还是不要在其中使用中文。sdp会话描述包含了多行如下类型的文本:\n\n<type>=<value>\n\n\n1\n\n\n其中type是大小写敏感的，其中一些行是必须要有的，有些是可选的，其中可选的元素标记为*，所有元素都必须以固定顺序给出，固定的顺序极大改善了错误检测，同时使得处理端设计更加简单。\n\n一个标准的sdp案例：\n\nv=0\no=jdoe 2890844526 2890842807 in ip4 10.47.16.5\ns=sdp seminar\ni=a seminar on the session description protocol\nu=http://www.example.com/seminars/sdp.pdf\ne=j.doe@example.com (jane doe)\nc=in ip4 224.2.17.12/127\nt=2873397496 2873404696\na=recvonly\nm=audio 49170 rtp/avp 0\nm=video 51372 rtp/avp 99\na=rtpmap:99 h263-1998/90000\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n\n * v：version，版本信息，一般都是0;\n * o：owner，表示此sdp归谁所有，比如案例中主机名字jdoe，有多个系列号，最后包含一个ip地址。（注意：这ip地址并不一定是最终要进行传输的ip的地址，在webrtc里并不是用这个ip，而是使用candidate中的ip。）\n * c：connection，表示连接这个网络的ipv4。\n * m：media，表示本次交互的媒体信息，如audio也就是音频，它使用的是rtp的协议，\n * a：attribute，表示上条信息所使用的参数（属性），如对于这个音频它有一个参数a=rtpmap，即音频的编码方式是pcmu，采样率是8000。\n\n最重要的是最后两行，它检测到有两种candidate：\n\n * 第一条是udp的，ip 是 10.0.1.1端口是 8998，类型是host；\n * 第二种也是udp的，ip是192.0.2.3端口是45664,类型是穿越nat的映射地址。\n\n这里没有中继地址，即同一局域网内可以互通，或者就是穿越nat走p2p。\n\n标准的sdp格式如下：\n\n会话描述:\n     v=  (protocol version，协议版本)\n     o=  (originator and session identifier，发起者和会话标识符)\n     s=  (session name，会话名称)\n     i=* (session information，会话信息)\n     u=* (uri of description，uri 描述)\n     e=* (email address，邮件地址)\n     p=* (phone number，电话号码)\n     c=* (connection information -- not required if included in\n          all media，连接信息)\n     b=* (zero or more bandwidth information lines，带宽信息)\n     one or more time descriptions ("t=" and "r=" lines; see below)\n     z=* (time zone adjustments，时区调整)\n     k=* (encryption key，加密密钥)\n     a=* (zero or more session attribute lines，会话属性)\n     zero or more media descriptions\n\n时间信息描述:\n     t=  (time the session is active，会话处于活动状态的时间)\n     r=* (zero or more repeat times)\n\n多媒体信息描述(如果有的话):\n     m=  (media name and transport address，媒体名称和传输地址)\n     i=* (media title，媒体标题)\n     c=* (connection information -- optional if included at\n          session level，连接信息)\n     b=* (zero or more bandwidth information lines，带宽信息)\n     k=* (encryption key，加密密钥)\n     a=* (zero or more media attribute lines，媒体属性)\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n\n\n所有元素的type都为小写，并且不提供拓展。但是我们可以用a(attribute)字段来提供额外的信息。\n\n参考：\n\n * rfc4566。\n\n\n# candidate pair\n\n获取得到所有的candidate之后，就要形成候选对，通过检测连通性之后，形成通路。\n\n如何形成 candidatepair？\n\n * 一方收集到所有 candidate 之后通过信令传输给对端；\n * 对端收到后开始收集 candidate；\n * 双方都完成 candidate 收集之后，将 candidate 形成 candidatepair。\n\n\n# 连通性检测\n\n检查 candidatepair 连通性包括如下三个步骤：\n\n * 对所有 candidatepair 进行优先级排序；\n * 对排序后的 candidatepair 进行发送检查，检查是否能成功发送请求；\n * 对排序后的 candidatepair 进行接受检查，检查是否能成功接收到回应。\n\n\n\n在实际过程中，为了节省时间，发送跟接收是串行的。\n\n\n# 原理\n\n\n# offer/answer模型\n\nsdp用来描述多播主干网络的会话信息，但是并没有具体的交互操作细节，因此 rfc3264 定义了一种基于sdp的 offer/answer 模型。在该模型中，会话参与者的其中一方生成一个sdp报文构成offer，其中包含了一组offerer希望使用的多媒体流和编解码方法，以及offerer用来接收改数据的ip地址和端口信息。offer传输到会话的另一端(称为answerer)，由answerer生成一个answer，即用来响应对应offer的sdp报文。answer中包含不同offer对应的多媒体流，并指明该流是否可以接受。\n\nrfc3264只介绍了交换数据过程,而没有定义传递offer/answer报文的方法，后者在rfc3261/sip 即会话初始化协议中描述。值得一提的是，offer/answer 模型也经常被sip作为一种基本方法使用。offer/answer 模型在sdp报文的基础上进行了一些定义，工作过程不在此描述，需要了解细节的朋友可以参考rfc3261。\n\n\n# ice工作流程\n\n一个典型的ice工作环境如下，有两个端点l和r，都运行在各自的nat之后(他们自己也许并不知道)，nat的类型和性质也是未知的。 l和r通过交换sdp信息在彼此之间建立多媒体会话，通常交换通过一个sip服务器完成:\n\n                 +-----------+\n                 |    sip    |\n+-------+        |    srvr   |         +-------+\n| stun  |        |           |         | stun  |\n| srvr  |        +-----------+         | srvr  |\n|       |        /           \\         |       |\n+-------+       /             \\        +-------+\n               /<- signaling ->\\\n              /                 \\\n         +--------+          +--------+\n         |  nat   |          |  nat   |\n         +--------+          +--------+\n           /                       \\\n          /                         \\\n         /                           \\\n     +-------+                    +-------+\n     | agent |                    | agent |\n     |   l   |                    |   r   |\n     |       |                    |       |\n     +-------+                    +-------+\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\n\nice的基本思路是，每个终端都有一系列传输地址(包括传输协议,ip地址和端口)的候选，可以用来和其他端点进行通信。\n\n其中可能包括:\n\n * 直接和网络接口联系的传输地址(host address)\n * 经过nat转换的传输地址,即反射地址(server reflective address)\n * turn服务器分配的中继地址(relay address)\n\n虽然潜在要求任意一个l的候选地址都能用来和r的候选地址进行通信。但是实际中发现有许多组合是无法工作的。举例来说，如果l和r都在nat之后而且不处于同一内网，他们的直接地址就无法进行通信。ice的目的就是为了发现哪一对候选地址的组合可以工作，并且通过系统的方法对所有组合进行测试(用一种精心挑选的顺序)。\n\n为了执行ice，客户端必须要识别出其所有的地址候选，ice中定义了三种候选类型，有些是从物理地址或者逻辑网络接口继承而来，其他则是从stun或者turn服务器发现的。很自然，一个可用的地址为和本地网络接口直接联系的地址，通常是内网地址， 称为host candidate，如果客户端有多个网络接口，比如既连接了wifi又插着网线，那么就可能有多个内网地址候选。\n\n其次，客户端通过stun或者turn来获得更多的候选传输地，即server reflexive candidates和relayed candidates， 如果turn服务器是标准化的，那么两种地址都可以通过turn服务器获得。当l获得所有的自己的候选地址之后，会将其按优先级排序，然后通过signaling通道发送到r。候选地址被存储在sdp offer报文的属性部分。当r接收到offer之后，就会进行同样的获选地址收集过程，并返回给l。\n\n这一步骤之后，两个对等端都拥有了若干自己和对方的候选地址，并将其配对。组成candidate pairs。为了查看哪对组合可以工作，每个终端都进行一系列的检查。每个检查都是一次stun request/response传输，将request从候选地址对的本地地址发送到远端地址。连接性检查的基本原则很简单:\n\n * 以一定的优先级将候选地址对进行排序；\n * 以该优先级顺序发送checks请求；\n * 从其他终端接收到checks的确认信息。\n\n两端连接性测试,结果是一个4次握手过程:\n\n l                        r\n -                        -\n stun request ->             \\  l\'s\n           <- stun response  /  check\n\n            <- stun request  \\  r\'s\n stun response ->            /  check\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n\n\n值的一提的是，stun request的发送和接收地址都是接下来进多媒体传输(如rtp和rtcp)的地址和端口，所以，客户端实际上是将stun协议与rtp/rtcp协议在数据包中进行复用(而不是在端口上复用)。\n\n由于stun binding request用来进行连接性测试，因此stun binding response中会包含终端的实际地址，如果这个地址和之前学习的所有地址都不匹配，发送方就会生成一个新的candidate，称为peer reflexive candidate，和其他candidate一样,也要通过ice的检查测试。\n\n\n# 连接性检查(connectivity checks)\n\n所有的ice实现都要求与stun(rfc5389)兼容，并且废弃classic stun(rfc3489)。ice的完整实现既生成checks(作为stun client)，也接收checks(作为stun server)，而lite实现则只负责接收checks。这里只介绍完整实现情况下的检查过程。\n\n 1. 为中继候选地址生成许可(permissions)。\n\n 2. 从本地候选往远端候选发送binding request。\n\n在binding请求中通常需要包含一些特殊的属性，以在ice进行连接性检查的时候提供必要信息。\n\n * priority 和 use-candidate\n\n终端必须在其request中包含priority属性，指明其优先级，优先级由公式计算而得。如果有需要也可以给出特别指定的候选(即use-candidate属性)。\n\n * ice-controlled和ice-controlling\n\n在每次会话中，每个终端都有一个身份。总共有两种身份，即受控方(controlled role)和主控方(controlling role)。主控方负责选择最终用来通讯的候选地址对，受控方被告知哪个候选地址对用来进行哪次媒体流传输，并且不生成更新过的offer来提示此次告知。发起ice处理进程(即生成offer)的一方必须是主控方，而另一方则是受控方。如果终端是受控方，那么在request中就必须加上ice-controlled属性，同样如果终端是主控方，就需要ice-controlling属性。\n\n * 生成credential\n\n作为连接性检查的binding request必须使用stun的短期身份验证。验证的用户名被格式化为一系列username段的联结，包含了发送请求的所有对等端的用户名，以冒号隔开;密码就是对等端的密码。\n\n 3. 处理response。\n\n当收到binding response时,终端会将其与binding request相联系，通常通过事务id。随后将会将此事务id与候选地址对进行绑定。\n\n * 失败响应\n\n如果stun传输返回487(role conflict)错误响应，终端首先会检查其是否包含了ice-controlled或ice-controlling属性。如果有ice-controlled，终端必须切换为controlling role;如果请求包含ice-controlling属性，则必须切换为controlled role。切换好之后,终端必须使产生487错误的候选地址对进入检查队列中，并将此地址对的状态设置为waiting。\n\n * 成功响应，一次连接检查在满足下列所有情况时候就被认为成功:\n   \n   * stun传输产生一个success response。\n   * response的源ip和端口等于binding request的目的ip和端口。\n   * response的目的ip和端口等于binding request的源ip和端口。\n\n终端收到成功响应之后，先检查其mapped address是否与本地记录的地址对有匹配，如果没有则生成一个新的候选地址，即对等端的反射地址。如果有匹配，则终端会构造一个可用候选地址对(valid pair)。通常很可能地址对不存在于任何检查列表中，检索检查列表中没有被服务器反射的本地地址，这些地址把它们的本地候选转换成服务器反射地址的基地址，并把冗余的地址去除掉。\n\n\n# 总结\n\n本文介绍了一种完整的nat环境通信解决方案ice，并且对其中涉及到的概念sdp和offer/answer模型也作了简要介绍。ice是使用stun/turn工具性质的最主要协议之一，其中turn一开始也被设计为ice协议的一部分。值的一提的是，本文只是对这几种协议作了概述性的说明，而具体工作过程和详细的属性描述都未包含，因此如果需要根据协议来实现具体的应用程序，还需要对rfc的文档进行仔细阅读。\n\n\n# 参考\n\n * p2p通信标准协议(三)之ice',charsets:{cjk:!0},lastUpdated:"2022/07/21, 16:40:55",lastUpdatedTimestamp:1658392855e3},{title:"NAT基础概念详解",frontmatter:{title:"NAT基础概念详解",date:"2022-07-05T13:57:39.000Z",permalink:"/basic/p2p/nat-basic/",categories:["基础","P2P"],tags:["NAT"],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/35.P2P/9.NAT%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E8%AF%A6%E8%A7%A3.html",relativePath:"20.基础/35.P2P/9.NAT基础概念详解.md",key:"v-1387aaf0",path:"/basic/p2p/nat-basic/",headers:[{level:2,title:"IPv4协议和NAT的由来",slug:"ipv4协议和nat的由来",normalizedTitle:"ipv4协议和nat的由来",charIndex:2},{level:2,title:"NAT的工作模型和特点",slug:"nat的工作模型和特点",normalizedTitle:"nat的工作模型和特点",charIndex:1520},{level:3,title:"NAT的概念模型",slug:"nat的概念模型",normalizedTitle:"nat的概念模型",charIndex:1536},{level:3,title:"一对一的NAT",slug:"一对一的nat",normalizedTitle:"一对一的nat",charIndex:2652},{level:3,title:"一对多的NAT",slug:"一对多的nat",normalizedTitle:"一对多的nat",charIndex:2812},{level:3,title:"按照NAT端口映射方式分类",slug:"按照nat端口映射方式分类",normalizedTitle:"按照nat端口映射方式分类",charIndex:3188},{level:4,title:"全锥形NAT",slug:"全锥形nat",normalizedTitle:"全锥形nat",charIndex:3294},{level:4,title:"限制锥形NAT",slug:"限制锥形nat",normalizedTitle:"限制锥形nat",charIndex:3445},{level:4,title:"端口限制锥形NAT",slug:"端口限制锥形nat",normalizedTitle:"端口限制锥形nat",charIndex:3629},{level:4,title:"对称型NAT",slug:"对称型nat",normalizedTitle:"对称型nat",charIndex:3828},{level:2,title:"NAT的限制与解决方案",slug:"nat的限制与解决方案",normalizedTitle:"nat的限制与解决方案",charIndex:4244},{level:3,title:"IP端到端服务模型",slug:"ip端到端服务模型",normalizedTitle:"ip端到端服务模型",charIndex:4260},{level:3,title:"NAT的弊端",slug:"nat的弊端",normalizedTitle:"nat的弊端",charIndex:4997},{level:3,title:"NAT穿越技术",slug:"nat穿越技术",normalizedTitle:"nat穿越技术",charIndex:6910},{level:4,title:"应用层网关",slug:"应用层网关",normalizedTitle:"应用层网关",charIndex:7028},{level:4,title:"探针技术STUN和TURN",slug:"探针技术stun和turn",normalizedTitle:"探针技术stun和turn",charIndex:7880},{level:4,title:"中间件技术",slug:"中间件技术",normalizedTitle:"中间件技术",charIndex:8505},{level:4,title:"中继代理技术",slug:"中继代理技术",normalizedTitle:"中继代理技术",charIndex:8947},{level:4,title:"特定协议的自穿越技术",slug:"特定协议的自穿越技术",normalizedTitle:"特定协议的自穿越技术",charIndex:9185},{level:2,title:"NAT的应用和实现",slug:"nat的应用和实现",normalizedTitle:"nat的应用和实现",charIndex:9440},{level:3,title:"NAT的应用",slug:"nat的应用",normalizedTitle:"nat的应用",charIndex:9440},{level:4,title:"NAT多实例应用",slug:"nat多实例应用",normalizedTitle:"nat多实例应用",charIndex:9656},{level:4,title:"NAT的高可靠性组网",slug:"nat的高可靠性组网",normalizedTitle:"nat的高可靠性组网",charIndex:9819},{level:4,title:"同时转换源和目的地址的应用",slug:"同时转换源和目的地址的应用",normalizedTitle:"同时转换源和目的地址的应用",charIndex:10031},{level:3,title:"NAT的设备实现",slug:"nat的设备实现",normalizedTitle:"nat的设备实现",charIndex:10286},{level:4,title:"静态一对一地址映射",slug:"静态一对一地址映射",normalizedTitle:"静态一对一地址映射",charIndex:10469},{level:4,title:"静态多对多地址映射",slug:"静态多对多地址映射",normalizedTitle:"静态多对多地址映射",charIndex:10592},{level:4,title:"动态端口映射",slug:"动态端口映射",normalizedTitle:"动态端口映射",charIndex:10662},{level:4,title:"动态地址映射(no-pat)",slug:"动态地址映射-no-pat",normalizedTitle:"动态地址映射(no-pat)",charIndex:10872},{level:4,title:"静态端口映射",slug:"静态端口映射",normalizedTitle:"静态端口映射",charIndex:11139},{level:4,title:"应用层网关(ALG)",slug:"应用层网关-alg",normalizedTitle:"应用层网关(alg)",charIndex:7035},{level:4,title:"NAT转换关联表",slug:"nat转换关联表",normalizedTitle:"nat转换关联表",charIndex:11423},{level:2,title:"后IPv4时代的NAT",slug:"后ipv4时代的nat",normalizedTitle:"后ipv4时代的nat",charIndex:11682},{level:2,title:"说明",slug:"说明",normalizedTitle:"说明",charIndex:12501}],readingTime:{text:"1 min read",minutes:.915,time:54900.00000000001,words:183},headersStr:"IPv4协议和NAT的由来 NAT的工作模型和特点 NAT的概念模型 一对一的NAT 一对多的NAT 按照NAT端口映射方式分类 全锥形NAT 限制锥形NAT 端口限制锥形NAT 对称型NAT NAT的限制与解决方案 IP端到端服务模型 NAT的弊端 NAT穿越技术 应用层网关 探针技术STUN和TURN 中间件技术 中继代理技术 特定协议的自穿越技术 NAT的应用和实现 NAT的应用 NAT多实例应用 NAT的高可靠性组网 同时转换源和目的地址的应用 NAT的设备实现 静态一对一地址映射 静态多对多地址映射 动态端口映射 动态地址映射(no-pat) 静态端口映射 应用层网关(ALG) NAT转换关联表 后IPv4时代的NAT 说明",content:"# IPv4协议和NAT的由来\n\n今天，无数快乐的互联网用户在尽情享受Internet带来的乐趣。他们浏览新闻，搜索资料，下载软件，广交新朋，分享信息，甚至于足不出户获取一切日用所需。企业利用互联网发布信息，传递资料和订单，提供技术支持，完成日常办公。然而，Internet在给亿万用户带来便利的同时，自身却面临一个致命的问题：构建这个无所不能的Internet的基础IPv4协议已经不能再提供新的网络地址了。\n\n2011年2月3日中国农历新年， IANA对外宣布：IPv4地址空间最后5个地址块已经被分配给下属的5个地区委员会。2011年4月15日，亚太区委员会 APNIC 对外宣布，除了个别保留地址外，本区域所有的IPv4地址基本耗尽。一时之间，IPv4地址作为一种濒危资源身价陡增，各大网络公司出巨资收购剩余的空闲地址。其实，IPv4地址不足问题已不是新问题，早在20年以前，IPv4地址即将耗尽的问题就已经摆在Internet先驱们面前。这不禁让我们想去了解，是什么技术使这一危机延缓了尽20年。\n\n要找到问题的答案，让我们先来简略回顾一下IPv4协议。\n\nIPv4即网际网协议第4版——Internet Protocol Version 4的缩写。IPv4定义一个跨越异种网络互连的超级网，它为每个网际网的节点分配全球唯一IP地址。如果我们把Internet比作一个邮政系统，那么IP地址的作用就等同于包含城市、街区、门牌编号在内的完整地址。IPv4使用32bits整数表达一个地址，地址最大范围就是 2^32 约为43亿。以IP创始时期可被联网的设备来看，这样的一个空间已经很大，很难被短时间用完。然而，事实远远超出人们的设想，计算机网络在此后的几十年里迅速壮大，网络终端数量呈爆炸性增长。\n\n更为糟糕的是，为了路由和管理方便，43亿的地址空间被按照不同前缀长度划分为A,B,C,D类地址网络和保留地址。其中，A类网络地址127段，每段包括主机地址约1678万个。B类网络地址16384段，每段包括65536个主机地址。\n\n\n\nIANA向超大型企业/组织分配A类网络地址，一次一段。向中型企业或教育机构分配B类网络地址，一次一段。这样一种分配策略使得IP地址浪费很严重，很多被分配出去的地址没有真实被利用，地址消耗很快。以至于二十世纪90年代初，网络专家们意识到，这样大手大脚下去，IPv4地址很快就要耗光了。于是，人们开始考虑IPv4的替代方案，同时采取一系列的措施来减缓IPv4地址的消耗。正是在这样一个背景之下，本期的主角闪亮登场，它就是网络地址转换——NAT。\n\nNAT是一项神奇的技术，说它神奇在于它的出现几乎使IPv4起死回生。在IPv4已经被认为行将结束历史使命之后近20年时间里，人们几乎忘了IPv4的地址空间即将耗尽这样一个事实——在新技术日新月异的时代，20年可算一段漫长的历史。更不用说，在NAT产生以后，网络终端的数量呈加速上升趋势，对IP地址的需求剧烈增加。此足见NAT技术之成功，影响之深远。\n\n说它神奇，更因为NAT给IP网络模型带来了深远影响，其身影遍布网络每个角落。根据一份最近的研究报告，70%的P2P用户位于NAT网关以内。因为P2P主要运行在终端用户的个人电脑之上，这个数字意味着大多数PC通过NAT网关连接到Internet。如果加上2G和3G方式联网的智能手机等移动终端，在NAT网关之后的用户远远超过这个比例。\n\n然而当我们求本溯源时却发现一个很奇怪的事实：NAT这一意义重大的技术，竟然没有公认的发明者。NAT第一个版本的RFC作者，只是整理归纳了已被广泛采用的技术。\n\n\n# NAT的工作模型和特点\n\n\n# NAT的概念模型\n\nNAT名字很准确，网络地址转换，就是替换IP报文头部的地址信息。NAT通常部署在一个组织的网络出口位置，通过将内部网络IP地址替换为出口的IP地址提供公网可达性和上层协议的连接能力。那么，什么是内部网络IP地址？\n\nRFC1918规定了三个保留地址段落：10.0.0.0-10.255.255.255；172.16.0.0-172.31.255.255；192.168.0.0-192.168.255.255。这三个范围分别处于A,B,C类的地址段，不向特定的用户分配，被IANA作为私有地址保留。这些地址可以在任何组织或企业内部使用，和其他Internet地址的区别就是，仅能在内部使用，不能作为全球路由地址。这就是说，出了组织的管理范围这些地址就不再有意义，无论是作为源地址，还是目的地址。对于一个封闭的组织，如果其网络不连接到Internet，就可以使用这些地址而不用向IANA提出申请，而在内部的路由管理和报文传递方式与其他网络没有差异。\n\n对于有Internet访问需求而内部又使用私有地址的网络，就要在组织的出口位置部署NAT网关，在报文离开私网进入Internet时，将源IP替换为公网地址，通常是出口设备的接口地址。一个对外的访问请求在到达目标以后，表现为由本组织出口设备发起，因此被请求的服务端可将响应由Internet发回出口网关。出口网关再将目的地址替换为私网的源主机地址，发回内部。这样一次由私网主机向公网服务端的请求和响应就在通信两端均无感知的情况下完成了。依据这种模型，数量庞大的内网主机就不再需要公有IP地址了。\n\n\n\n虽然实际过程远比这个复杂，但上面的描述概括了NAT处理报文的几个关键特点：\n\n * 网络被分为私网和公网两个部分，NAT网关设置在私网到公网的路由出口位置，双向流量必须都要经过NAT网关；\n * 网络访问只能先由私网侧发起，公网无法主动访问私网主机；\n * NAT网关在两个访问方向上完成两次地址的转换或翻译，出方向做源信息替换，入方向做目的信息替换；\n * NAT网关的存在对通信双方是保持透明的；\n * NAT网关为了实现双向翻译的功能，需要维护一张关联表，把会话的信息保存下来。\n\n随着后面对NAT的深入描述，读者会发现，这些特点是鲜明的，但又不是绝对的。其中第二个特点打破了IP协议架构中所有节点在通讯中的对等地位，这是NAT最大的弊端，为对等通讯带来了诸多问题，当然相应的克服手段也应运而生。事实上，第四点是NAT致力于达到的目标，但在很多情况下，NAT并没有做到，因为除了IP首部，上层通信协议经常在内部携带IP地址信息。这些我们稍后解释。\n\n\n# 一对一的NAT\n\n如果一个内部主机唯一占用一个公网IP，这种方式被称为一对一模型。此种方式下，转换上层协议就是不必要的，因为一个公网IP就能唯一对应一个内部主机。显然，这种方式对节约公网IP没有太大意义，主要是为了实现一些特殊的组网需求。比如用户希望隐藏内部主机的真实IP，或者实现两个IP地址重叠网络的通信。\n\n\n# 一对多的NAT\n\nNAT最典型的应用场景就是一个组织网络，在出口位置部署NAT网关，所有对公网的访问表现为一台主机。这就是所谓的一对多模型。这种方式下，出口设备只占用一个由Internet服务提供商分配的公网IP地址。面对私网内部数量庞大的主机，如果NAT只进行IP地址的简单替换，就会产生一个问题：当有多个内部主机去访问同一个服务器时，从返回的信息不足以区分响应应该转发到哪个内部主机。此时，需要NAT设备根据传输层信息或其他上层协议去区分不同的会话，并且可能要对上层协议的标识进行转换，比如TCP或UDP端口号。这样NAT网关就可以将不同的内部连接访问映射到同一公网IP的不同传输层端口，通过这种方式实现公网IP的复用和解复用。这种方式也被称为端口转换PAT、NAPT或IP伪装，但更多时候直接被称为NAT，因为它是最典型的一种应用模式。\n\n\n# 按照NAT端口映射方式分类\n\n在一对多模型中，按照端口转换的工作方式不同，又可以进行更进一步的划分。为描述方便，以下将IP和端口标记为(nAddr:nPort)，其中n代表主机或NAT网关的不同角色。\n\n\n\n# 全锥形NAT\n\n其特点为：一旦内部主机端口对(iAddr:iPort)被NAT网关映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；任何一个外部主机发送到(eAddr:ePort)的报文将会被转换后发到(iAddr:iPort)。\n\n# 限制锥形NAT\n\n其特点为：一旦内部主机端口对(iAddr:iPort)被映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；只有 (iAddr:iPort)向特定的外部主机hAddr发送过数据，主机hAddr从任意端口发送到(eAddr:ePort)的报文将会被转发到(iAddr:iPort)。\n\n# 端口限制锥形NAT\n\n其特点为：一旦内部主机端口对(iAddr:iPort)被映射到(eAddr:ePort)，所有后续的(iAddr:iPort)报文都会被转换为(eAddr:ePort)；只有(iAddr:iPort)向特定的外部主机端口对(hAddr:hPort)发送过数据，由 (hAddr:hPort)发送到(eAddr:ePort)的报文将会被转发到(iAddr:iPort)。\n\n# 对称型NAT\n\n其特点为：NAT网关会把内部主机“地址端口对”和外部主机“地址端口对”完全相同的报文看作一个连接，在网关上创建一个公网“地址端口对”映射进行转换，只有收到报文的外部主机从对应的端口对发送回应的报文，才能被转换。即使内部主机使用之前用过的地址端口对去连接不同外部主机(或端口)时，NAT网关也会建立新的映射关系。\n\n事实上，这些术语的引入是很多混淆的起源。现实中的很多NAT设备是将这些转换方式混合在一起工作的，而不单单使用一种，所以这些术语只适合描述一种工作方式，而不是一个设备。比如，很多NAT设备对内部发出的连接使用对称型NAT方式，而同时支持静态的端口映射，后者可以被看作是全锥型NAT方式。而有些情况下，NAT设备的一个公网地址和端口可以同时映射到内部几个服务器上以实现负载分担，比如一个对外提供WEB服务器的站点可能是有成百上千个服务器在提供HTTP服务，但是对外却表现为一个或少数几个IP地址。\n\n\n# NAT的限制与解决方案\n\n\n# IP端到端服务模型\n\nIP协议的一个重要贡献是把世界变得平等。\n\n在理论上，具有IP地址的每个站点在协议层面有相当的获取服务和提供服务的能力，不同的IP地址之间没有差异。人们熟知的服务器和客户机实际是在应用协议层上的角色区分，而在网络层和传输层没有差异。一个具有IP地址的主机既可以是客户机，也可以是服务器，大部分情况下，既是客户机，也是服务器。端到端对等看起来是很平常的事情，而意义并不寻常。但在以往的技术中，很多协议体系下的网络限定了终端的能力。\n\n正是IP的这个开放性，使得TCP/IP协议族可以提供丰富的功能，为应用实现提供了广阔平台。因为所有的IP主机都可以服务器的形式出现，所以通讯设计可以更加灵活。使用UNIX/LINUX的系统充分利用了这个特性，使得任何一个主机都可以建立自己的HTTP、SMTP、POP3、DNS、DHCP等服务。\n\n与此同时，很多应用也是把客户端和服务器的角色组合起来完成功能。例如在VoIP应用中，用户端向注册服务器登录自己的IP地址和端口信息过程中，主机是客户端；而在呼叫到达时，呼叫处理服务器向用户端发送呼叫请求时，用户端实际工作在服务器模式下。在语音媒体流信道建立过程后，通讯双向发送语音数据，发送端是客户模式，接收端是服务器模式。\n\n而在P2P的应用中，一个用户的主机既为下载的客户，同时也向其他客户提供数据，是一种C/S混合的模型。上层应用之所以能这样设计，是因为IP协议栈定义了这样的能力。试想一下，如果IP提供的能力不对等，那么每个通信会话都只能是单方向发起的，这会极大限制通信的能力。\n\n细心的读者会发现，前面介绍NAT的一个特性正是这样一种限制。没错，NAT最大的弊端正在于此——破坏了IP端到端通信的能力。\n\n\n# NAT的弊端\n\nNAT在解决IPv4地址短缺问题上，并非没有副作用，其实存在很多问题。\n\n首先： NAT使IP会话的保持时效变短。因为一个会话建立后会在NAT设备上建立一个关联表，在会话静默的这段时间，NAT网关会进行老化操作。这是任何一个NAT网关必须做的事情，因为IP和端口资源有限，通信的需求无限，所以必须在会话结束后回收资源。通常TCP会话通过协商的方式主动关闭连接，NAT网关可以跟踪这些报文，但总是存在例外的情况，要依赖自己的定时器去回收资源。而基于UDP的通信协议很难确定何时通信结束，所以NAT网关主要依赖超时机制回收外部端口。通过定时器老化回收会带来一个问题，如果应用需要维持连接的时间大于NAT网关的设置，通信就会意外中断。因为网关回收相关转换表资源以后，新的数据到达时就找不到相关的转换信息，必须建立新的连接。当这个新数据是由公网侧向私网侧发送时，就会发生无法触发新连接建立，也不能通知到私网侧的主机去重建连接的情况。这时候通信就会中断，不能自动恢复。即使新数据是从私网侧发向公网侧，因为重建的会话表往往使用不同于之前的公网IP和端口地址，公网侧主机也无法对应到之前的通信上，导致用户可感知的连接中断。NAT网关要把回收空闲连接的时间设置到不发生持续的资源流失，又维持大部分连接不被意外中断，是一件比较有难度的事情。在NAT已经普及化的时代，很多应用协议的设计者已经考虑到了这种情况，所以一般会设置一个连接保活的机制，即在一段时间没有数据需要发送时，主动发送一个NAT能感知到而又没有实际数据的保活消息，这么做的主要目的就是重置NAT的会话定时器。\n\n其次： NAT在实现上将多个内部主机发出的连接复用到一个IP上，这就使依赖IP进行主机跟踪的机制都失效了。如网络管理中需要的基于网络流量分析的应用无法跟踪到终端用户与流量的具体行为的关系。基于用户行为的日志分析也变得困难，因为一个IP被很多用户共享，如果存在恶意的用户行为，很难定位到发起连接的那个主机。即便有一些机制提供了在NAT网关上进行连接跟踪的方法，但是把这种变换关系接续起来也困难重重。基于IP的用户授权不再可靠，因为拥有一个IP的不等于一个用户或主机。一个服务器也不能简单把同一IP的访问视作同一主机发起的，不能进行关联。有些服务器设置有连接限制，同一时刻只接纳来自一个IP的有限访问(有时是仅一个访问)，这会造成不同用户之间的服务抢占和排队。有时服务器端这样做是出于DOS攻击防护的考虑，因为一个用户正常情况下不应该建立大量的连接请求，过度使用服务资源被理解为攻击行为。但是这在NAT存在时不能简单按照连接数判断。总之，因为NAT隐蔽了通信的一端，把简单的事情复杂化了。\n\n我们来深入理解NAT一下对IP端到端模型的破坏力： NAT通过修改IP首部的信息变换通信的地址。但是在这个转换过程中只能基于一个会话单位。当一个应用需要保持多个双向连接时，麻烦就很大。NAT不能理解多个会话之间的关联性，无法保证转换符合应用需要的规则。当NAT网关拥有多个公有IP地址时，一组关联会话可能被分配到不同的公网地址，这通常是服务器端无法接受的。更为严重的是，当公网侧的主机要主动向私网侧发送数据时，NAT网关没有转换这个连接需要的关联表，这个数据包无法到达私网侧的主机。这些反方向发送数据的连接总有应用协议的约定或在初始建立的会话中进行过协商。但是因为NAT工作在网络层和传输层，无法理解应用层协议的行为，对这些信息是无知的。NAT希望自己对通信双方是透明的，但是在这些情况下这是一种奢望。\n\n\n\n此外： NAT工作机制依赖于修改IP包头的信息，这会妨碍一些安全协议的工作。因为NAT篡改了IP地址、传输层端口号和校验和，这会导致认证协议彻底不能工作，因为认证目的就是要保证这些信息在传输过程中没有变化。对于一些隧道协议，NAT的存在也导致了额外的问题，因为隧道协议通常用外层地址标识隧道实体，穿过NAT的隧道会有IP复用关系，在另一端需要小心处理。ICMP是一种网络控制协议，它的工作原理也是在两个主机之间传递差错和控制消息，因为IP的对应关系被重新映射，ICMP也要进行复用和解复用处理，很多情况下因为ICMP报文载荷无法提供足够的信息，解复用会失败。IP分片机制是在信息源端或网络路径上，需要发送的IP报文尺寸大于路径实际能承载最大尺寸时，IP协议层会将一个报文分成多个片断发送，然后在接收端重组这些片断恢复原始报文。IP这样的分片机制会导致传输层的信息只包括在第一个分片中，NAT难以识别后续分片与关联表的对应关系，因此需要特殊处理。\n\n\n# NAT穿越技术\n\n前面解释了NAT的弊端，为了解决IP端到端应用在NAT环境下遇到的问题，网络协议的设计者们创造了各种武器来进行应对。但遗憾的是，这里每一种方法都不完美，还需要在内部主机、应用程序或者NAT网关上增加额外的处理。\n\n# 应用层网关\n\n应用层网关(ALG)是解决NAT对应用层协议无感知的一个最常用方法，已经被NAT设备厂商广泛采用，成为NAT设备的一个必需功能。因为NAT不感知应用协议，所以有必要额外为每个应用协议定制协议分析功能，这样NAT网关就能理解并支持特定的协议。\n\nALG与NAT形成互动关系，在一个NAT网关检测到新的连接请求时，需要判断是否为已知的应用类型，这通常是基于连接的传输层端口信息来识别的。\n\n在识别为已知应用时，再调用相应功能对报文的深层内容进行检查，当发现任何形式表达的IP地址和端口时，将会把这些信息同步转换，并且为这个新连接创建一个附加的转换表项。这样，当报文到达公网侧的目的主机时，应用层协议中携带的信息就是NAT网关提供的地址和端口。一旦公网侧主机开始发送数据或建立连接到此端口，NAT网关就可以根据关联表信息进行转换，再把数据转发到私网侧的主机。\n\n很多应用层协议实现不限于一个初始连接(通常为信令或控制通道)加一个数据连接，可能是一个初始连接对应很多后续的新连接。比较特别的协议，在一次协商中会产生一组相关连接，**比如RTP/RTCP协议规定，一个RTP通道建立后占用连续的两个端口，一个服务于数据，另一个服务于控制消息。**此时，就需要ALG分配连续的端口为应用服务。\n\nALG能成功解决大部分协议的NAT穿越需求，但是这个方法也有很大的限制。因为应用协议的数量非常多而且在不断发展变化之中，添加到设备中的ALG功能都是为特定协议的特定规范版本而开发的，协议的创新和演进要求NAT设备制造商必须跟踪这些协议的最近标准，同时兼容旧标准。\n\n尽管有如Linux这种开放平台允许动态加载新的ALG特性，但是管理成本仍然很高，网络维护人员也不能随时了解用户都需要什么应用。因此为每个应用协议开发ALG代码并跟踪最新标准是不可行的，ALG只能解决用户最常用的需求。\n\n此外，出于安全性需要，有些应用类型报文从源端发出就已经加密，这种报文在网络中间无法进行分析，所以ALG无能为力。\n\n# 探针技术STUN和TURN\n\n所谓探针技术，是通过在所有参与通信的实体上安装探测插件，以检测网络中是否存在NAT网关，并对不同NAT模型实施不同穿越方法的一种技术。\n\nSTUN服务器被部署在公网上，用于接收来自通信实体的探测请求，服务器会记录收到请求的报文地址和端口，并填写到回送的响应报文中。客户端根据接收到的响应消息中记录的地址和端口与本地选择的地址和端口进行比较，就能识别出是否存在NAT网关。如果存在NAT网关，客户端会使用之前的地址和端口向服务器的另外一个IP发起请求，重复前面的探测。然后再比较两次响应返回的结果判断出NAT工作的模式。\n\n由前述的一对多转换模型得知，除对称型NAT以外的模型，NAT网关对内部主机地址端口的映射都是相对固定的，所以比较容易实现NAT穿越。\n\n而对称型NAT为每个连接提供一个映射，使得转换后的公网地址和端口对不可预测。此时TURN可以与STUN绑定提供穿越NAT的服务，即在公网服务器上提供一个“地址端口对”，所有此“地址端口对”接收到的数据会经由探测建立的连接转发到内网主机上。TURN分配的这个映射“地址端口对”会通过STUN响应发给内部主机，后者将此信息放入建立连接的信令中通知通信的对端。\n\n这种探针技术是一种通用方法，不用在NAT设备上为每种应用协议开发功能，相对于ALG方式有一定普遍性。但是TURN中继服务会成为通信瓶颈。而且在客户端中增加探针功能要求每个应用都要增加代码才能支持。\n\n# 中间件技术\n\n这也是一种通过开发通用方法解决NAT穿越问题的努力。\n\n与前者不同之处是，NAT网关是这一解决方案的参与者。\n\n与ALG的不同在于，客户端会参与网关公网映射信息的维护，此时NAT网关只要理解客户端的请求并按照要求去分配转换表，不需要自己去分析客户端的应用层数据。其中UPnP就是这样一种方法。\n\nUPnP中文全称为通用即插即用，是一个通用的网络终端与网关的通信协议，具备信息发布和管理控制的能力。\n\n其中，网关映射请求可以为客户动态添加映射表项。此时，NAT不再需要理解应用层携带的信息，只转换IP地址和端口信息。而客户端通过控制消息或信令发到公网侧的信息中，直接携带公网映射的IP地址和端口，接收端可以按照此信息建立数据连接。NAT网关在收到数据或连接请求时，按照UPnP建立的表项只转换地址和端口信息，不关心内容，再将数据转发到内网。这种方案需要网关、内部主机和应用程序都支持UPnP技术，且组网允许内部主机和NAT网关之间可以直接交换UPnP信令才能实施。\n\n# 中继代理技术\n\n准确说它不是NAT穿越技术，而是NAT旁路技术。简单说，就是在NAT网关所在的位置旁边放置一个应用服务器，这个服务器在内部网络和外部公网分别有自己的网络连接。客户端特定的应用产生网络请求时，将定向发送到应用代理服务器。应用代理服务器根据代理协议解析客户端的请求，再从服务器的公网侧发起一个新的请求，把客户端请求的内容中继到外部网络上，返回的相应反方向中继。这项技术和ALG有很大的相似性，它要求为每个应用类型部署中继代理业务，中间服务器要理解这些请求。\n\n# 特定协议的自穿越技术\n\n在所有方法中最复杂也最可靠的就是自己解决自己的问题。比如IKE和IPsec技术，在设计时就考虑了到如何穿越NAT的问题。因为这个协议是一个自加密的协议并且具有报文防修改的鉴别能力，其他通用方法爱莫能助。因为实际应用的NAT网关基本都是NAPT方式，所有通过传输层协议承载的报文可以顺利通过NAT。IKE和IPsec采用的方案就是用UDP在报文外面再加一层封装，而内部的报文就不再受到影响。IKE中还专门增加了NAT网关是否存在的检查能力以及绕开NAT网关检测IKE协议的方法。\n\n\n# NAT的应用和实现\n\n\n# NAT的应用\n\nNAT在当代Internet中被广泛采用，小至家庭网关，大到企业广域网出口甚至运营商业务网络出口。其实NAT在用户身边随处可见，一般家庭宽带接入的ADSL Modem和SOHO路由器都内置了NAT功能，WindowsXP支持网络连接共享，一个用户连接到公网可能会经过多层NAT而对此一无所知。很多企业也为节约IP费用采用NAT接入Internet，但是相比家庭用户有更复杂的需求。\n\n# NAT多实例应用\n\n在VPN网络中，多实例路由意味着一个物理拓扑上承载多个逻辑拓扑，网络终端被分配到相互隔离的逻辑拓扑中，彼此之间没有路由的通路。但在访问Internet或者一些关键服务器资源时，被隔离的网络之间又存在共享资源的需求。NAT的多实例实现就是跨越这种逻辑拓扑的方法，把一个空间的网络地址映射到另一个空间。\n\n# NAT的高可靠性组网\n\n提高网络可靠性是一个广泛的需求，NAT作为私网到公网的关键路径自然也需要高可靠性。当一个设备提供多个公网接口时，在多接口上部署NAT可以提供更高带宽和多ISP就近访问的能力。但是，当部署多个出口时，访问的流量可能会从不匹配的接口返回，这就要求NAT方案有良好的路由规划和部署合适的策略保证这种流量能够正确处理。在多个物理设备承担NAT功能时，不同设备之间的信息备份和流量分担也是一个组网难题。\n\n# 同时转换源和目的地址的应用\n\n前面我们介绍的所有NAT应用中，由内网向外网访问过程中，都是将源地址进行转换而目的地址保持不变，报文反方向进入时则处理目的地址。\n\n但有一些特殊应用需要在由内向外的IP通路上，替换目的IP地址。通常，这种应用会同时替换源地址和目的地址，在经过NAT网关以后完成两次地址转换。当两个均规划使用私属IP地址范围的网络进行合并时，终端用户都不想调整自己的IP地址方案，又希望开放一些网络资源给彼此访问。这时就可以通过NAT的两次地址转换来解决路由和地址规划无法解决的问题。\n\n\n\n\n# NAT的设备实现\n\nNAT作为一个IP层业务特性，在产品实现中与防火墙、会话管理等特性有紧密联系，这是因为NAT判断一个进入设备的报文是否需要NAT处理，判断报文是否为一个新的连接，都需要通过匹配访问控制列表规则和查询会话关联表进行判断。为了满足不同应用场景的NAT需求， NAT的管理界面可提供用户多种配置策略。按照NAT的具体工作方式，又可以做如下分类。\n\n# 静态一对一地址映射\n\n这种工作方式下，NAT把一个私网地址和一个公网地址做静态关联，在从内而外的方向，将源IP匹配的私网IP替换为公网IP，反方向则将目的IP匹配公网IP的报文替换为私网IP。网络层以上的部分不进行替换处理，只修正校验和。\n\n# 静态多对多地址映射\n\n这种方式与上一种类似，只是把一段私网地址映射到一段公网地址。工作机制与前述的方式没有差别，只是简化配置工作量。\n\n# 动态端口映射\n\n这是最基本的工作方式，即前面多次介绍的将一段内网地址动态翻译为一个或多个公网IP，同时对传输层端口或其他上层协议信息进行转换，以实现IP复用。对由内而外的报文，替换源地址和端口，反向报文替换目的地址和端口。仅以连接公网的接口IP作为NAT转换的公网地址时，这种配置最简化，又被称为EasyIP。当以一段公网IP地址作为NAT转换地址时，需要配置一个地址池，NAT会自动在地址池中选择使用公网IP。\n\n# 动态地址映射(no-pat)\n\n这是介于静态多对多地址映射和动态端口映射方式之间的一种工作机制。当有一个私网向公网侧访问到达NAT网关时，NAT网关会检查这个私网IP是否已经有关联的公网IP映射。如果已经存在，则按照转换表直接替换IP，不修改上层协议。如果不存在关联表项，则在空闲的公网IP池中占用一个IP，并写入关联表中，以后按照这个关联关系进行地址转换。当这个私网主机发起的所有对外访问均关闭或超时后，回收公网IP。这种方式可以理解为一组内网主机抢占式地共享一个公网IP地址池。当公网IP地址池用完以后，新连接将无法建立。\n\n# 静态端口映射\n\n通过静态配置，把一个固定的私网IP地址和端口关联到一个公网地址和端口上。这种方式等同于前面介绍过的全锥模式，但是不需要内网主机首先发出报文。这种方式适用于在NAT网关上把一个知名服务（如HTTP）映射到一个内部主机上，也称为port forwarding。\n\n# 应用层网关(ALG)\n\n在所有NAT产品实现中，ALG是一个必需的功能组件。但在不同实现中，有些产品可以动态加载不同的ALG模块，有些产品可以提供ALG开关控制，有些则不提供任何用户接口。ALG解析上层应用协议的内容，并且根据需要修改IP和端口相关信息，创建和维护附加的关联表项。\n\n# NAT转换关联表\n\n无论哪一种NAT工作方式，都要用到地址转换关联表，在不同产品的实现中，这个关联表的存储结构和在IP转发中调用的方式有很大不同。\n\n关联表中会记录源IP、目的IP、连接协议类型、传输层源端口、目的端口，以及转换后的源IP、源端口，目的IP、目的端口信息，这里的源和目的都是对应于从内网到外网的访问方向。\n\n依据NAT具体工作方式，这些信息可能全部填充，也可能部分填充。例如只按照IP做静态映射的方式，就不需要填入任何端口相关信息；对于静态端口映射，则只填入源相关的内容，而目的端的信息为空。\n\n\n# 后IPv4时代的NAT\n\nNAT是为延缓IPv4地址耗尽而推出的技术。毫无疑问，它已经出色完成了自己的历史使命，IPv4比预期走得更远。作为继任者的IPv6吸取了IPv4的教训，被赋予充足地址空间的同时在各个方面做了优化——安全、高效、简洁。但是IPv6无法平滑地取代IPv4，导致IP升级步伐缓慢。尽管网络协议的分层设计很清晰，大量应用层协议和互联网软件中仍内嵌了IPv4地址的处理，要Internet全网升级到IPv6，必须先完成应用的改造。因为NAT和它的穿越技术结合能够满足大部分用户的需求，所以IPv6时代被不断推迟。\n\n随着IPv4地址的濒临耗尽，再经济的模式也无以为继，IPv4必须退出历史舞台。人们自然会认为，NAT作为IPv4的超级补丁技术使命已经完结。实际情况是，IPv4向IPv6过渡的阶段，NAT仍然是一项必不可少的技术手段。因为Internet无法在一日之内完成全网升级，必然是局部升级，逐渐替换。在两套协议并存的时期，用户和服务资源分布在不同网络之间，跨网访问的需求必须得到满足。这正是NAT所擅长的领域，地址替换，因此NAT-PT应运而生。由于IPv4和IPv6之间的差异，NAT要做的事比以往更复杂，有更多的限制和细节。\n\n此外，IETF也在制定纯IPv6网络使用的NAT规范。虽然人们还看不到这种应用的强烈需求，但是NAT仍有其独特的作用，比如隐藏内部网络的地址，实现重叠地址网络的合并等。\n\n毫不夸张地说，正是有了NAT，以IPv4为基础的Internet才能容纳数十亿的用户终端，成就今日之辉煌。IPv4已至日暮西山，IPv6的黎明尚未来临，Internet比任何时刻都更依赖NAT这项过渡技术。NAT的历史再次证明，翻天覆地的划时代进步不一定有市场，抱残守缺的修修补补未必不会成功。在世代更替之时让我们走近NAT，领略IP领域更多细微但不高深的知识，理解NAT就是理解变换万千的应用世界。\n\n\n# 说明\n\n本文转载自P2P技术详解(一)：NAT详解——详细原理、P2P简介。",normalizedContent:"# ipv4协议和nat的由来\n\n今天，无数快乐的互联网用户在尽情享受internet带来的乐趣。他们浏览新闻，搜索资料，下载软件，广交新朋，分享信息，甚至于足不出户获取一切日用所需。企业利用互联网发布信息，传递资料和订单，提供技术支持，完成日常办公。然而，internet在给亿万用户带来便利的同时，自身却面临一个致命的问题：构建这个无所不能的internet的基础ipv4协议已经不能再提供新的网络地址了。\n\n2011年2月3日中国农历新年， iana对外宣布：ipv4地址空间最后5个地址块已经被分配给下属的5个地区委员会。2011年4月15日，亚太区委员会 apnic 对外宣布，除了个别保留地址外，本区域所有的ipv4地址基本耗尽。一时之间，ipv4地址作为一种濒危资源身价陡增，各大网络公司出巨资收购剩余的空闲地址。其实，ipv4地址不足问题已不是新问题，早在20年以前，ipv4地址即将耗尽的问题就已经摆在internet先驱们面前。这不禁让我们想去了解，是什么技术使这一危机延缓了尽20年。\n\n要找到问题的答案，让我们先来简略回顾一下ipv4协议。\n\nipv4即网际网协议第4版——internet protocol version 4的缩写。ipv4定义一个跨越异种网络互连的超级网，它为每个网际网的节点分配全球唯一ip地址。如果我们把internet比作一个邮政系统，那么ip地址的作用就等同于包含城市、街区、门牌编号在内的完整地址。ipv4使用32bits整数表达一个地址，地址最大范围就是 2^32 约为43亿。以ip创始时期可被联网的设备来看，这样的一个空间已经很大，很难被短时间用完。然而，事实远远超出人们的设想，计算机网络在此后的几十年里迅速壮大，网络终端数量呈爆炸性增长。\n\n更为糟糕的是，为了路由和管理方便，43亿的地址空间被按照不同前缀长度划分为a,b,c,d类地址网络和保留地址。其中，a类网络地址127段，每段包括主机地址约1678万个。b类网络地址16384段，每段包括65536个主机地址。\n\n\n\niana向超大型企业/组织分配a类网络地址，一次一段。向中型企业或教育机构分配b类网络地址，一次一段。这样一种分配策略使得ip地址浪费很严重，很多被分配出去的地址没有真实被利用，地址消耗很快。以至于二十世纪90年代初，网络专家们意识到，这样大手大脚下去，ipv4地址很快就要耗光了。于是，人们开始考虑ipv4的替代方案，同时采取一系列的措施来减缓ipv4地址的消耗。正是在这样一个背景之下，本期的主角闪亮登场，它就是网络地址转换——nat。\n\nnat是一项神奇的技术，说它神奇在于它的出现几乎使ipv4起死回生。在ipv4已经被认为行将结束历史使命之后近20年时间里，人们几乎忘了ipv4的地址空间即将耗尽这样一个事实——在新技术日新月异的时代，20年可算一段漫长的历史。更不用说，在nat产生以后，网络终端的数量呈加速上升趋势，对ip地址的需求剧烈增加。此足见nat技术之成功，影响之深远。\n\n说它神奇，更因为nat给ip网络模型带来了深远影响，其身影遍布网络每个角落。根据一份最近的研究报告，70%的p2p用户位于nat网关以内。因为p2p主要运行在终端用户的个人电脑之上，这个数字意味着大多数pc通过nat网关连接到internet。如果加上2g和3g方式联网的智能手机等移动终端，在nat网关之后的用户远远超过这个比例。\n\n然而当我们求本溯源时却发现一个很奇怪的事实：nat这一意义重大的技术，竟然没有公认的发明者。nat第一个版本的rfc作者，只是整理归纳了已被广泛采用的技术。\n\n\n# nat的工作模型和特点\n\n\n# nat的概念模型\n\nnat名字很准确，网络地址转换，就是替换ip报文头部的地址信息。nat通常部署在一个组织的网络出口位置，通过将内部网络ip地址替换为出口的ip地址提供公网可达性和上层协议的连接能力。那么，什么是内部网络ip地址？\n\nrfc1918规定了三个保留地址段落：10.0.0.0-10.255.255.255；172.16.0.0-172.31.255.255；192.168.0.0-192.168.255.255。这三个范围分别处于a,b,c类的地址段，不向特定的用户分配，被iana作为私有地址保留。这些地址可以在任何组织或企业内部使用，和其他internet地址的区别就是，仅能在内部使用，不能作为全球路由地址。这就是说，出了组织的管理范围这些地址就不再有意义，无论是作为源地址，还是目的地址。对于一个封闭的组织，如果其网络不连接到internet，就可以使用这些地址而不用向iana提出申请，而在内部的路由管理和报文传递方式与其他网络没有差异。\n\n对于有internet访问需求而内部又使用私有地址的网络，就要在组织的出口位置部署nat网关，在报文离开私网进入internet时，将源ip替换为公网地址，通常是出口设备的接口地址。一个对外的访问请求在到达目标以后，表现为由本组织出口设备发起，因此被请求的服务端可将响应由internet发回出口网关。出口网关再将目的地址替换为私网的源主机地址，发回内部。这样一次由私网主机向公网服务端的请求和响应就在通信两端均无感知的情况下完成了。依据这种模型，数量庞大的内网主机就不再需要公有ip地址了。\n\n\n\n虽然实际过程远比这个复杂，但上面的描述概括了nat处理报文的几个关键特点：\n\n * 网络被分为私网和公网两个部分，nat网关设置在私网到公网的路由出口位置，双向流量必须都要经过nat网关；\n * 网络访问只能先由私网侧发起，公网无法主动访问私网主机；\n * nat网关在两个访问方向上完成两次地址的转换或翻译，出方向做源信息替换，入方向做目的信息替换；\n * nat网关的存在对通信双方是保持透明的；\n * nat网关为了实现双向翻译的功能，需要维护一张关联表，把会话的信息保存下来。\n\n随着后面对nat的深入描述，读者会发现，这些特点是鲜明的，但又不是绝对的。其中第二个特点打破了ip协议架构中所有节点在通讯中的对等地位，这是nat最大的弊端，为对等通讯带来了诸多问题，当然相应的克服手段也应运而生。事实上，第四点是nat致力于达到的目标，但在很多情况下，nat并没有做到，因为除了ip首部，上层通信协议经常在内部携带ip地址信息。这些我们稍后解释。\n\n\n# 一对一的nat\n\n如果一个内部主机唯一占用一个公网ip，这种方式被称为一对一模型。此种方式下，转换上层协议就是不必要的，因为一个公网ip就能唯一对应一个内部主机。显然，这种方式对节约公网ip没有太大意义，主要是为了实现一些特殊的组网需求。比如用户希望隐藏内部主机的真实ip，或者实现两个ip地址重叠网络的通信。\n\n\n# 一对多的nat\n\nnat最典型的应用场景就是一个组织网络，在出口位置部署nat网关，所有对公网的访问表现为一台主机。这就是所谓的一对多模型。这种方式下，出口设备只占用一个由internet服务提供商分配的公网ip地址。面对私网内部数量庞大的主机，如果nat只进行ip地址的简单替换，就会产生一个问题：当有多个内部主机去访问同一个服务器时，从返回的信息不足以区分响应应该转发到哪个内部主机。此时，需要nat设备根据传输层信息或其他上层协议去区分不同的会话，并且可能要对上层协议的标识进行转换，比如tcp或udp端口号。这样nat网关就可以将不同的内部连接访问映射到同一公网ip的不同传输层端口，通过这种方式实现公网ip的复用和解复用。这种方式也被称为端口转换pat、napt或ip伪装，但更多时候直接被称为nat，因为它是最典型的一种应用模式。\n\n\n# 按照nat端口映射方式分类\n\n在一对多模型中，按照端口转换的工作方式不同，又可以进行更进一步的划分。为描述方便，以下将ip和端口标记为(naddr:nport)，其中n代表主机或nat网关的不同角色。\n\n\n\n# 全锥形nat\n\n其特点为：一旦内部主机端口对(iaddr:iport)被nat网关映射到(eaddr:eport)，所有后续的(iaddr:iport)报文都会被转换为(eaddr:eport)；任何一个外部主机发送到(eaddr:eport)的报文将会被转换后发到(iaddr:iport)。\n\n# 限制锥形nat\n\n其特点为：一旦内部主机端口对(iaddr:iport)被映射到(eaddr:eport)，所有后续的(iaddr:iport)报文都会被转换为(eaddr:eport)；只有 (iaddr:iport)向特定的外部主机haddr发送过数据，主机haddr从任意端口发送到(eaddr:eport)的报文将会被转发到(iaddr:iport)。\n\n# 端口限制锥形nat\n\n其特点为：一旦内部主机端口对(iaddr:iport)被映射到(eaddr:eport)，所有后续的(iaddr:iport)报文都会被转换为(eaddr:eport)；只有(iaddr:iport)向特定的外部主机端口对(haddr:hport)发送过数据，由 (haddr:hport)发送到(eaddr:eport)的报文将会被转发到(iaddr:iport)。\n\n# 对称型nat\n\n其特点为：nat网关会把内部主机“地址端口对”和外部主机“地址端口对”完全相同的报文看作一个连接，在网关上创建一个公网“地址端口对”映射进行转换，只有收到报文的外部主机从对应的端口对发送回应的报文，才能被转换。即使内部主机使用之前用过的地址端口对去连接不同外部主机(或端口)时，nat网关也会建立新的映射关系。\n\n事实上，这些术语的引入是很多混淆的起源。现实中的很多nat设备是将这些转换方式混合在一起工作的，而不单单使用一种，所以这些术语只适合描述一种工作方式，而不是一个设备。比如，很多nat设备对内部发出的连接使用对称型nat方式，而同时支持静态的端口映射，后者可以被看作是全锥型nat方式。而有些情况下，nat设备的一个公网地址和端口可以同时映射到内部几个服务器上以实现负载分担，比如一个对外提供web服务器的站点可能是有成百上千个服务器在提供http服务，但是对外却表现为一个或少数几个ip地址。\n\n\n# nat的限制与解决方案\n\n\n# ip端到端服务模型\n\nip协议的一个重要贡献是把世界变得平等。\n\n在理论上，具有ip地址的每个站点在协议层面有相当的获取服务和提供服务的能力，不同的ip地址之间没有差异。人们熟知的服务器和客户机实际是在应用协议层上的角色区分，而在网络层和传输层没有差异。一个具有ip地址的主机既可以是客户机，也可以是服务器，大部分情况下，既是客户机，也是服务器。端到端对等看起来是很平常的事情，而意义并不寻常。但在以往的技术中，很多协议体系下的网络限定了终端的能力。\n\n正是ip的这个开放性，使得tcp/ip协议族可以提供丰富的功能，为应用实现提供了广阔平台。因为所有的ip主机都可以服务器的形式出现，所以通讯设计可以更加灵活。使用unix/linux的系统充分利用了这个特性，使得任何一个主机都可以建立自己的http、smtp、pop3、dns、dhcp等服务。\n\n与此同时，很多应用也是把客户端和服务器的角色组合起来完成功能。例如在voip应用中，用户端向注册服务器登录自己的ip地址和端口信息过程中，主机是客户端；而在呼叫到达时，呼叫处理服务器向用户端发送呼叫请求时，用户端实际工作在服务器模式下。在语音媒体流信道建立过程后，通讯双向发送语音数据，发送端是客户模式，接收端是服务器模式。\n\n而在p2p的应用中，一个用户的主机既为下载的客户，同时也向其他客户提供数据，是一种c/s混合的模型。上层应用之所以能这样设计，是因为ip协议栈定义了这样的能力。试想一下，如果ip提供的能力不对等，那么每个通信会话都只能是单方向发起的，这会极大限制通信的能力。\n\n细心的读者会发现，前面介绍nat的一个特性正是这样一种限制。没错，nat最大的弊端正在于此——破坏了ip端到端通信的能力。\n\n\n# nat的弊端\n\nnat在解决ipv4地址短缺问题上，并非没有副作用，其实存在很多问题。\n\n首先： nat使ip会话的保持时效变短。因为一个会话建立后会在nat设备上建立一个关联表，在会话静默的这段时间，nat网关会进行老化操作。这是任何一个nat网关必须做的事情，因为ip和端口资源有限，通信的需求无限，所以必须在会话结束后回收资源。通常tcp会话通过协商的方式主动关闭连接，nat网关可以跟踪这些报文，但总是存在例外的情况，要依赖自己的定时器去回收资源。而基于udp的通信协议很难确定何时通信结束，所以nat网关主要依赖超时机制回收外部端口。通过定时器老化回收会带来一个问题，如果应用需要维持连接的时间大于nat网关的设置，通信就会意外中断。因为网关回收相关转换表资源以后，新的数据到达时就找不到相关的转换信息，必须建立新的连接。当这个新数据是由公网侧向私网侧发送时，就会发生无法触发新连接建立，也不能通知到私网侧的主机去重建连接的情况。这时候通信就会中断，不能自动恢复。即使新数据是从私网侧发向公网侧，因为重建的会话表往往使用不同于之前的公网ip和端口地址，公网侧主机也无法对应到之前的通信上，导致用户可感知的连接中断。nat网关要把回收空闲连接的时间设置到不发生持续的资源流失，又维持大部分连接不被意外中断，是一件比较有难度的事情。在nat已经普及化的时代，很多应用协议的设计者已经考虑到了这种情况，所以一般会设置一个连接保活的机制，即在一段时间没有数据需要发送时，主动发送一个nat能感知到而又没有实际数据的保活消息，这么做的主要目的就是重置nat的会话定时器。\n\n其次： nat在实现上将多个内部主机发出的连接复用到一个ip上，这就使依赖ip进行主机跟踪的机制都失效了。如网络管理中需要的基于网络流量分析的应用无法跟踪到终端用户与流量的具体行为的关系。基于用户行为的日志分析也变得困难，因为一个ip被很多用户共享，如果存在恶意的用户行为，很难定位到发起连接的那个主机。即便有一些机制提供了在nat网关上进行连接跟踪的方法，但是把这种变换关系接续起来也困难重重。基于ip的用户授权不再可靠，因为拥有一个ip的不等于一个用户或主机。一个服务器也不能简单把同一ip的访问视作同一主机发起的，不能进行关联。有些服务器设置有连接限制，同一时刻只接纳来自一个ip的有限访问(有时是仅一个访问)，这会造成不同用户之间的服务抢占和排队。有时服务器端这样做是出于dos攻击防护的考虑，因为一个用户正常情况下不应该建立大量的连接请求，过度使用服务资源被理解为攻击行为。但是这在nat存在时不能简单按照连接数判断。总之，因为nat隐蔽了通信的一端，把简单的事情复杂化了。\n\n我们来深入理解nat一下对ip端到端模型的破坏力： nat通过修改ip首部的信息变换通信的地址。但是在这个转换过程中只能基于一个会话单位。当一个应用需要保持多个双向连接时，麻烦就很大。nat不能理解多个会话之间的关联性，无法保证转换符合应用需要的规则。当nat网关拥有多个公有ip地址时，一组关联会话可能被分配到不同的公网地址，这通常是服务器端无法接受的。更为严重的是，当公网侧的主机要主动向私网侧发送数据时，nat网关没有转换这个连接需要的关联表，这个数据包无法到达私网侧的主机。这些反方向发送数据的连接总有应用协议的约定或在初始建立的会话中进行过协商。但是因为nat工作在网络层和传输层，无法理解应用层协议的行为，对这些信息是无知的。nat希望自己对通信双方是透明的，但是在这些情况下这是一种奢望。\n\n\n\n此外： nat工作机制依赖于修改ip包头的信息，这会妨碍一些安全协议的工作。因为nat篡改了ip地址、传输层端口号和校验和，这会导致认证协议彻底不能工作，因为认证目的就是要保证这些信息在传输过程中没有变化。对于一些隧道协议，nat的存在也导致了额外的问题，因为隧道协议通常用外层地址标识隧道实体，穿过nat的隧道会有ip复用关系，在另一端需要小心处理。icmp是一种网络控制协议，它的工作原理也是在两个主机之间传递差错和控制消息，因为ip的对应关系被重新映射，icmp也要进行复用和解复用处理，很多情况下因为icmp报文载荷无法提供足够的信息，解复用会失败。ip分片机制是在信息源端或网络路径上，需要发送的ip报文尺寸大于路径实际能承载最大尺寸时，ip协议层会将一个报文分成多个片断发送，然后在接收端重组这些片断恢复原始报文。ip这样的分片机制会导致传输层的信息只包括在第一个分片中，nat难以识别后续分片与关联表的对应关系，因此需要特殊处理。\n\n\n# nat穿越技术\n\n前面解释了nat的弊端，为了解决ip端到端应用在nat环境下遇到的问题，网络协议的设计者们创造了各种武器来进行应对。但遗憾的是，这里每一种方法都不完美，还需要在内部主机、应用程序或者nat网关上增加额外的处理。\n\n# 应用层网关\n\n应用层网关(alg)是解决nat对应用层协议无感知的一个最常用方法，已经被nat设备厂商广泛采用，成为nat设备的一个必需功能。因为nat不感知应用协议，所以有必要额外为每个应用协议定制协议分析功能，这样nat网关就能理解并支持特定的协议。\n\nalg与nat形成互动关系，在一个nat网关检测到新的连接请求时，需要判断是否为已知的应用类型，这通常是基于连接的传输层端口信息来识别的。\n\n在识别为已知应用时，再调用相应功能对报文的深层内容进行检查，当发现任何形式表达的ip地址和端口时，将会把这些信息同步转换，并且为这个新连接创建一个附加的转换表项。这样，当报文到达公网侧的目的主机时，应用层协议中携带的信息就是nat网关提供的地址和端口。一旦公网侧主机开始发送数据或建立连接到此端口，nat网关就可以根据关联表信息进行转换，再把数据转发到私网侧的主机。\n\n很多应用层协议实现不限于一个初始连接(通常为信令或控制通道)加一个数据连接，可能是一个初始连接对应很多后续的新连接。比较特别的协议，在一次协商中会产生一组相关连接，**比如rtp/rtcp协议规定，一个rtp通道建立后占用连续的两个端口，一个服务于数据，另一个服务于控制消息。**此时，就需要alg分配连续的端口为应用服务。\n\nalg能成功解决大部分协议的nat穿越需求，但是这个方法也有很大的限制。因为应用协议的数量非常多而且在不断发展变化之中，添加到设备中的alg功能都是为特定协议的特定规范版本而开发的，协议的创新和演进要求nat设备制造商必须跟踪这些协议的最近标准，同时兼容旧标准。\n\n尽管有如linux这种开放平台允许动态加载新的alg特性，但是管理成本仍然很高，网络维护人员也不能随时了解用户都需要什么应用。因此为每个应用协议开发alg代码并跟踪最新标准是不可行的，alg只能解决用户最常用的需求。\n\n此外，出于安全性需要，有些应用类型报文从源端发出就已经加密，这种报文在网络中间无法进行分析，所以alg无能为力。\n\n# 探针技术stun和turn\n\n所谓探针技术，是通过在所有参与通信的实体上安装探测插件，以检测网络中是否存在nat网关，并对不同nat模型实施不同穿越方法的一种技术。\n\nstun服务器被部署在公网上，用于接收来自通信实体的探测请求，服务器会记录收到请求的报文地址和端口，并填写到回送的响应报文中。客户端根据接收到的响应消息中记录的地址和端口与本地选择的地址和端口进行比较，就能识别出是否存在nat网关。如果存在nat网关，客户端会使用之前的地址和端口向服务器的另外一个ip发起请求，重复前面的探测。然后再比较两次响应返回的结果判断出nat工作的模式。\n\n由前述的一对多转换模型得知，除对称型nat以外的模型，nat网关对内部主机地址端口的映射都是相对固定的，所以比较容易实现nat穿越。\n\n而对称型nat为每个连接提供一个映射，使得转换后的公网地址和端口对不可预测。此时turn可以与stun绑定提供穿越nat的服务，即在公网服务器上提供一个“地址端口对”，所有此“地址端口对”接收到的数据会经由探测建立的连接转发到内网主机上。turn分配的这个映射“地址端口对”会通过stun响应发给内部主机，后者将此信息放入建立连接的信令中通知通信的对端。\n\n这种探针技术是一种通用方法，不用在nat设备上为每种应用协议开发功能，相对于alg方式有一定普遍性。但是turn中继服务会成为通信瓶颈。而且在客户端中增加探针功能要求每个应用都要增加代码才能支持。\n\n# 中间件技术\n\n这也是一种通过开发通用方法解决nat穿越问题的努力。\n\n与前者不同之处是，nat网关是这一解决方案的参与者。\n\n与alg的不同在于，客户端会参与网关公网映射信息的维护，此时nat网关只要理解客户端的请求并按照要求去分配转换表，不需要自己去分析客户端的应用层数据。其中upnp就是这样一种方法。\n\nupnp中文全称为通用即插即用，是一个通用的网络终端与网关的通信协议，具备信息发布和管理控制的能力。\n\n其中，网关映射请求可以为客户动态添加映射表项。此时，nat不再需要理解应用层携带的信息，只转换ip地址和端口信息。而客户端通过控制消息或信令发到公网侧的信息中，直接携带公网映射的ip地址和端口，接收端可以按照此信息建立数据连接。nat网关在收到数据或连接请求时，按照upnp建立的表项只转换地址和端口信息，不关心内容，再将数据转发到内网。这种方案需要网关、内部主机和应用程序都支持upnp技术，且组网允许内部主机和nat网关之间可以直接交换upnp信令才能实施。\n\n# 中继代理技术\n\n准确说它不是nat穿越技术，而是nat旁路技术。简单说，就是在nat网关所在的位置旁边放置一个应用服务器，这个服务器在内部网络和外部公网分别有自己的网络连接。客户端特定的应用产生网络请求时，将定向发送到应用代理服务器。应用代理服务器根据代理协议解析客户端的请求，再从服务器的公网侧发起一个新的请求，把客户端请求的内容中继到外部网络上，返回的相应反方向中继。这项技术和alg有很大的相似性，它要求为每个应用类型部署中继代理业务，中间服务器要理解这些请求。\n\n# 特定协议的自穿越技术\n\n在所有方法中最复杂也最可靠的就是自己解决自己的问题。比如ike和ipsec技术，在设计时就考虑了到如何穿越nat的问题。因为这个协议是一个自加密的协议并且具有报文防修改的鉴别能力，其他通用方法爱莫能助。因为实际应用的nat网关基本都是napt方式，所有通过传输层协议承载的报文可以顺利通过nat。ike和ipsec采用的方案就是用udp在报文外面再加一层封装，而内部的报文就不再受到影响。ike中还专门增加了nat网关是否存在的检查能力以及绕开nat网关检测ike协议的方法。\n\n\n# nat的应用和实现\n\n\n# nat的应用\n\nnat在当代internet中被广泛采用，小至家庭网关，大到企业广域网出口甚至运营商业务网络出口。其实nat在用户身边随处可见，一般家庭宽带接入的adsl modem和soho路由器都内置了nat功能，windowsxp支持网络连接共享，一个用户连接到公网可能会经过多层nat而对此一无所知。很多企业也为节约ip费用采用nat接入internet，但是相比家庭用户有更复杂的需求。\n\n# nat多实例应用\n\n在vpn网络中，多实例路由意味着一个物理拓扑上承载多个逻辑拓扑，网络终端被分配到相互隔离的逻辑拓扑中，彼此之间没有路由的通路。但在访问internet或者一些关键服务器资源时，被隔离的网络之间又存在共享资源的需求。nat的多实例实现就是跨越这种逻辑拓扑的方法，把一个空间的网络地址映射到另一个空间。\n\n# nat的高可靠性组网\n\n提高网络可靠性是一个广泛的需求，nat作为私网到公网的关键路径自然也需要高可靠性。当一个设备提供多个公网接口时，在多接口上部署nat可以提供更高带宽和多isp就近访问的能力。但是，当部署多个出口时，访问的流量可能会从不匹配的接口返回，这就要求nat方案有良好的路由规划和部署合适的策略保证这种流量能够正确处理。在多个物理设备承担nat功能时，不同设备之间的信息备份和流量分担也是一个组网难题。\n\n# 同时转换源和目的地址的应用\n\n前面我们介绍的所有nat应用中，由内网向外网访问过程中，都是将源地址进行转换而目的地址保持不变，报文反方向进入时则处理目的地址。\n\n但有一些特殊应用需要在由内向外的ip通路上，替换目的ip地址。通常，这种应用会同时替换源地址和目的地址，在经过nat网关以后完成两次地址转换。当两个均规划使用私属ip地址范围的网络进行合并时，终端用户都不想调整自己的ip地址方案，又希望开放一些网络资源给彼此访问。这时就可以通过nat的两次地址转换来解决路由和地址规划无法解决的问题。\n\n\n\n\n# nat的设备实现\n\nnat作为一个ip层业务特性，在产品实现中与防火墙、会话管理等特性有紧密联系，这是因为nat判断一个进入设备的报文是否需要nat处理，判断报文是否为一个新的连接，都需要通过匹配访问控制列表规则和查询会话关联表进行判断。为了满足不同应用场景的nat需求， nat的管理界面可提供用户多种配置策略。按照nat的具体工作方式，又可以做如下分类。\n\n# 静态一对一地址映射\n\n这种工作方式下，nat把一个私网地址和一个公网地址做静态关联，在从内而外的方向，将源ip匹配的私网ip替换为公网ip，反方向则将目的ip匹配公网ip的报文替换为私网ip。网络层以上的部分不进行替换处理，只修正校验和。\n\n# 静态多对多地址映射\n\n这种方式与上一种类似，只是把一段私网地址映射到一段公网地址。工作机制与前述的方式没有差别，只是简化配置工作量。\n\n# 动态端口映射\n\n这是最基本的工作方式，即前面多次介绍的将一段内网地址动态翻译为一个或多个公网ip，同时对传输层端口或其他上层协议信息进行转换，以实现ip复用。对由内而外的报文，替换源地址和端口，反向报文替换目的地址和端口。仅以连接公网的接口ip作为nat转换的公网地址时，这种配置最简化，又被称为easyip。当以一段公网ip地址作为nat转换地址时，需要配置一个地址池，nat会自动在地址池中选择使用公网ip。\n\n# 动态地址映射(no-pat)\n\n这是介于静态多对多地址映射和动态端口映射方式之间的一种工作机制。当有一个私网向公网侧访问到达nat网关时，nat网关会检查这个私网ip是否已经有关联的公网ip映射。如果已经存在，则按照转换表直接替换ip，不修改上层协议。如果不存在关联表项，则在空闲的公网ip池中占用一个ip，并写入关联表中，以后按照这个关联关系进行地址转换。当这个私网主机发起的所有对外访问均关闭或超时后，回收公网ip。这种方式可以理解为一组内网主机抢占式地共享一个公网ip地址池。当公网ip地址池用完以后，新连接将无法建立。\n\n# 静态端口映射\n\n通过静态配置，把一个固定的私网ip地址和端口关联到一个公网地址和端口上。这种方式等同于前面介绍过的全锥模式，但是不需要内网主机首先发出报文。这种方式适用于在nat网关上把一个知名服务（如http）映射到一个内部主机上，也称为port forwarding。\n\n# 应用层网关(alg)\n\n在所有nat产品实现中，alg是一个必需的功能组件。但在不同实现中，有些产品可以动态加载不同的alg模块，有些产品可以提供alg开关控制，有些则不提供任何用户接口。alg解析上层应用协议的内容，并且根据需要修改ip和端口相关信息，创建和维护附加的关联表项。\n\n# nat转换关联表\n\n无论哪一种nat工作方式，都要用到地址转换关联表，在不同产品的实现中，这个关联表的存储结构和在ip转发中调用的方式有很大不同。\n\n关联表中会记录源ip、目的ip、连接协议类型、传输层源端口、目的端口，以及转换后的源ip、源端口，目的ip、目的端口信息，这里的源和目的都是对应于从内网到外网的访问方向。\n\n依据nat具体工作方式，这些信息可能全部填充，也可能部分填充。例如只按照ip做静态映射的方式，就不需要填入任何端口相关信息；对于静态端口映射，则只填入源相关的内容，而目的端的信息为空。\n\n\n# 后ipv4时代的nat\n\nnat是为延缓ipv4地址耗尽而推出的技术。毫无疑问，它已经出色完成了自己的历史使命，ipv4比预期走得更远。作为继任者的ipv6吸取了ipv4的教训，被赋予充足地址空间的同时在各个方面做了优化——安全、高效、简洁。但是ipv6无法平滑地取代ipv4，导致ip升级步伐缓慢。尽管网络协议的分层设计很清晰，大量应用层协议和互联网软件中仍内嵌了ipv4地址的处理，要internet全网升级到ipv6，必须先完成应用的改造。因为nat和它的穿越技术结合能够满足大部分用户的需求，所以ipv6时代被不断推迟。\n\n随着ipv4地址的濒临耗尽，再经济的模式也无以为继，ipv4必须退出历史舞台。人们自然会认为，nat作为ipv4的超级补丁技术使命已经完结。实际情况是，ipv4向ipv6过渡的阶段，nat仍然是一项必不可少的技术手段。因为internet无法在一日之内完成全网升级，必然是局部升级，逐渐替换。在两套协议并存的时期，用户和服务资源分布在不同网络之间，跨网访问的需求必须得到满足。这正是nat所擅长的领域，地址替换，因此nat-pt应运而生。由于ipv4和ipv6之间的差异，nat要做的事比以往更复杂，有更多的限制和细节。\n\n此外，ietf也在制定纯ipv6网络使用的nat规范。虽然人们还看不到这种应用的强烈需求，但是nat仍有其独特的作用，比如隐藏内部网络的地址，实现重叠地址网络的合并等。\n\n毫不夸张地说，正是有了nat，以ipv4为基础的internet才能容纳数十亿的用户终端，成就今日之辉煌。ipv4已至日暮西山，ipv6的黎明尚未来临，internet比任何时刻都更依赖nat这项过渡技术。nat的历史再次证明，翻天覆地的划时代进步不一定有市场，抱残守缺的修修补补未必不会成功。在世代更替之时让我们走近nat，领略ip领域更多细微但不高深的知识，理解nat就是理解变换万千的应用世界。\n\n\n# 说明\n\n本文转载自p2p技术详解(一)：nat详解——详细原理、p2p简介。",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"WebRTC1.0浏览器间实时通讯",frontmatter:{title:"WebRTC1.0浏览器间实时通讯",date:"2022-06-29T08:31:48.000Z",permalink:"/basic/webrtc-1.0/",categories:["基础"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/4.rec-webrtc-chinese.html",relativePath:"20.基础/4.rec-webrtc-chinese.md",key:"v-5be1efc9",path:"/basic/webrtc-1.0/",headers:[{level:2,title:"介绍",slug:"介绍",normalizedTitle:"介绍",charIndex:2},{level:2,title:"本篇文档适合谁看？",slug:"本篇文档适合谁看",normalizedTitle:"本篇文档适合谁看？",charIndex:343},{level:2,title:"目录",slug:"目录",normalizedTitle:"目录",charIndex:536},{level:2,title:"文档",slug:"文档",normalizedTitle:"文档",charIndex:8},{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:552}],readingTime:{text:"1 min read",minutes:.31,time:18600,words:62},headersStr:"介绍 本篇文档适合谁看？ 目录 文档 参考",content:"# 介绍\n\n以下文档为 W3C 《WebRTC 1.0: Real-Time Communication Between Browsers》文档的中文翻译。\n\n本文是WebRTC工作组最新一次会议后的候选推荐标准，基于WebIDL定义了一组ECMAScript API，允许在实现了相关实时协议的浏览器或设备之间发送和接收媒体内容。同时也是对WebRTC的一个全面介绍，包括WebRTC中的各个术语，独有的概念，API的使用规范，详细的算法流程和一些注意点，并且对涉及的数据结构及其属性进行了剖析。在特定的使用场景下，草案的作者们还附上了示例代码。\n\n英文文档：\n\n * WebRTC 1.0: Real-Time Communication Between Browsers\n\n\n# 本篇文档适合谁看？\n\n * 对于WebRTC初学者，本文档可以作为学习教程，帮助你快速对WebRTC有全面且详细的了解，学习相关API的使用，其附带的示例代码也是很好的学习资料；\n * 对于WebRTC资深开发者，本文档可以作为开发中的使用手册，根据所提供的函数调用链或是算法流程进行开发或bug定位；\n * 对于高阶玩家，也可通过阅读本文档对WebRTC工作组反馈改进意见。\n\n\n# 目录\n\n\n\n\n# 文档\n\n\n# 参考\n\n感谢网易云信对W3C推荐标准WebRTC 1.0: Real-time Communication Between Browsers 的翻译工作，并提供《WebRTC1.0: 浏览器间实时通讯》中文版免费下载，特此鸣谢！\n\n * WebRTC开发者必备 | 《WebRTC1.0: 浏览器间实时通讯》中文版免费下载 - 知乎\n * WebRTC 1.0: Real-Time Communication Between Browsers",normalizedContent:"# 介绍\n\n以下文档为 w3c 《webrtc 1.0: real-time communication between browsers》文档的中文翻译。\n\n本文是webrtc工作组最新一次会议后的候选推荐标准，基于webidl定义了一组ecmascript api，允许在实现了相关实时协议的浏览器或设备之间发送和接收媒体内容。同时也是对webrtc的一个全面介绍，包括webrtc中的各个术语，独有的概念，api的使用规范，详细的算法流程和一些注意点，并且对涉及的数据结构及其属性进行了剖析。在特定的使用场景下，草案的作者们还附上了示例代码。\n\n英文文档：\n\n * webrtc 1.0: real-time communication between browsers\n\n\n# 本篇文档适合谁看？\n\n * 对于webrtc初学者，本文档可以作为学习教程，帮助你快速对webrtc有全面且详细的了解，学习相关api的使用，其附带的示例代码也是很好的学习资料；\n * 对于webrtc资深开发者，本文档可以作为开发中的使用手册，根据所提供的函数调用链或是算法流程进行开发或bug定位；\n * 对于高阶玩家，也可通过阅读本文档对webrtc工作组反馈改进意见。\n\n\n# 目录\n\n\n\n\n# 文档\n\n\n# 参考\n\n感谢网易云信对w3c推荐标准webrtc 1.0: real-time communication between browsers 的翻译工作，并提供《webrtc1.0: 浏览器间实时通讯》中文版免费下载，特此鸣谢！\n\n * webrtc开发者必备 | 《webrtc1.0: 浏览器间实时通讯》中文版免费下载 - 知乎\n * webrtc 1.0: real-time communication between browsers",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"index",frontmatter:{title:"index",date:"2022-07-08T15:34:25.000Z",permalink:"/pages/e76933/",categories:["基础","协议"],tags:[null],readingShow:"top"},regularPath:"/20.%E5%9F%BA%E7%A1%80/70.%E5%8D%8F%E8%AE%AE/0.index.html",relativePath:"20.基础/70.协议/0.index.md",key:"v-847cbade",path:"/pages/e76933/",headers:[{level:2,title:"RFC 3489: STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs)",slug:"rfc-3489-stun-simple-traversal-of-user-datagram-protocol-udp-through-network-address-translators-nats",normalizedTitle:"rfc 3489: stun - simple traversal of user datagram protocol (udp) through network address translators (nats)",charIndex:2}],readingTime:{text:"1 min read",minutes:.12,time:7199.999999999999,words:24},headersStr:"RFC 3489: STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs)",content:"# RFC 3489: STUN - Simple Traversal of User Datagram Protocol (UDP) Through Network Address Translators (NATs)\n\n * RFC3489 中文翻译 中文RFC RFC文档 RFC翻译 RFC中文版",normalizedContent:"# rfc 3489: stun - simple traversal of user datagram protocol (udp) through network address translators (nats)\n\n * rfc3489 中文翻译 中文rfc rfc文档 rfc翻译 rfc中文版",charsets:{cjk:!0},lastUpdated:"2022/07/11, 09:43:09",lastUpdatedTimestamp:1657503789e3},{title:"开始上手",frontmatter:{title:"开始上手",date:"2022-04-16T16:43:23.000Z",permalink:"/advance/index/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/30.%E8%BF%9B%E9%98%B6/0.index.html",relativePath:"30.进阶/0.index.md",key:"v-1dbd7f22",path:"/advance/index/",readingTime:{text:"0 min read",minutes:0,time:0,words:0},headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"Plan 计划",frontmatter:{title:"Plan 计划",date:"2022-04-16T16:44:07.000Z",permalink:"/advance/plan/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/30.%E8%BF%9B%E9%98%B6/1.plan.html",relativePath:"30.进阶/1.plan.md",key:"v-4f79ce95",path:"/advance/plan/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"Roadmap 路线",frontmatter:{title:"Roadmap 路线",date:"2022-04-16T16:44:46.000Z",permalink:"/advance/roadmap/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/30.%E8%BF%9B%E9%98%B6/3.roadmap.html",relativePath:"30.进阶/3.roadmap.md",key:"v-18ce054f",path:"/advance/roadmap/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"开始上手",frontmatter:{title:"开始上手",date:"2022-04-16T16:43:23.000Z",permalink:"/topic/index/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/40.%E4%B8%BB%E9%A2%98/0.index.html",relativePath:"40.主题/0.index.md",key:"v-74bdca4e",path:"/topic/index/",readingTime:{text:"0 min read",minutes:0,time:0,words:0},headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"Plan 计划",frontmatter:{title:"Plan 计划",date:"2022-04-16T16:44:07.000Z",permalink:"/topic/plan/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/40.%E4%B8%BB%E9%A2%98/1.plan.html",relativePath:"40.主题/1.plan.md",key:"v-7f9f06de",path:"/topic/plan/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"Peer.js 解析",frontmatter:{title:"Peer.js 解析",date:"2022-06-27T10:17:40.000Z",permalink:"/topic/peerjs/",categories:["主题","peerjs"],tags:[null],readingShow:"top"},regularPath:"/40.%E4%B8%BB%E9%A2%98/10.simpleWebRTC/0.index.html",relativePath:"40.主题/10.simpleWebRTC/0.index.md",key:"v-71f1c60e",path:"/topic/peerjs/",headers:[{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:2}],readingTime:{text:"1 min read",minutes:.075,time:4500,words:15},headersStr:"参考",content:"# 参考\n\n * peers/peerjs: Simple peer-to-peer with WebRTC\n * altanai/webrtcdevelopment: web real time communication platform",normalizedContent:"# 参考\n\n * peers/peerjs: simple peer-to-peer with webrtc\n * altanai/webrtcdevelopment: web real time communication platform",charsets:{cjk:!0},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"SimpleWebRTC 解析",frontmatter:{title:"SimpleWebRTC 解析",date:"2022-06-27T10:17:40.000Z",permalink:"/topic/simpleWebRTC/",categories:["主题","simpleWebRTC"],tags:[null],readingShow:"top"},regularPath:"/40.%E4%B8%BB%E9%A2%98/20.peerjs/0.index.html",relativePath:"40.主题/20.peerjs/0.index.md",key:"v-2e5c424e",path:"/topic/simpleWebRTC/",headers:[{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:2}],readingTime:{text:"1 min read",minutes:.035,time:2100,words:7},headersStr:"参考",content:"# 参考\n\n * simplewebrtc/SimpleWebRTC: Simplest WebRTC ever",normalizedContent:"# 参考\n\n * simplewebrtc/simplewebrtc: simplest webrtc ever",charsets:{cjk:!0},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"Roadmap 路线",frontmatter:{title:"Roadmap 路线",date:"2022-04-16T16:44:46.000Z",permalink:"/topic/roadmap/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/40.%E4%B8%BB%E9%A2%98/3.roadmap.html",relativePath:"40.主题/3.roadmap.md",key:"v-29cccf0e",path:"/topic/roadmap/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"WebRTC-Experiment",frontmatter:{title:"WebRTC-Experiment",date:"2022-06-27T10:33:50.000Z",permalink:"/topic/experiment/",categories:["主题","WebRTC-Experiment"],tags:[null],readingShow:"top"},regularPath:"/40.%E4%B8%BB%E9%A2%98/30.WebRTC-Experiment/0.index.html",relativePath:"40.主题/30.WebRTC-Experiment/0.index.md",key:"v-bff1260a",path:"/topic/experiment/",headers:[{level:2,title:"参考",slug:"参考",normalizedTitle:"参考",charIndex:2}],readingTime:{text:"1 min read",minutes:.07,time:4200,words:14},headersStr:"参考",content:"# 参考\n\n * muaz-khan/WebRTC-Experiment: WebRTC, WebRTC and WebRTC. Everything here is all about WebRTC!!",normalizedContent:"# 参考\n\n * muaz-khan/webrtc-experiment: webrtc, webrtc and webrtc. everything here is all about webrtc!!",charsets:{cjk:!0},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"归档",frontmatter:{archivesPage:!0,title:"归档",permalink:"/archives/",article:!1,readingShow:"top"},regularPath:"/@pages/archivesPage.html",relativePath:"@pages/archivesPage.md",key:"v-585d7925",path:"/archives/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 18:09:43",lastUpdatedTimestamp:1656065383e3},{title:"分类",frontmatter:{categoriesPage:!0,title:"分类",permalink:"/categories/",article:!1,readingShow:"top"},regularPath:"/@pages/categoriesPage.html",relativePath:"@pages/categoriesPage.md",key:"v-0cfcb6f6",path:"/categories/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 18:09:43",lastUpdatedTimestamp:1656065383e3},{title:"标签",frontmatter:{tagsPage:!0,title:"标签",permalink:"/tags/",article:!1,readingShow:"top"},regularPath:"/@pages/tagsPage.html",relativePath:"@pages/tagsPage.md",key:"v-10da7ea5",path:"/tags/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 18:09:43",lastUpdatedTimestamp:1656065383e3},{title:"关于",frontmatter:{title:"关于",date:"2022-01-11T14:03:46.000Z",permalink:"/about/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/about.html",relativePath:"about.md",key:"v-399216a5",path:"/about/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 18:09:43",lastUpdatedTimestamp:1656065383e3},{title:"Home",frontmatter:{home:!0,heroText:"Fancy WebRTC",tagline:"Web，另一种沟通的方式",actionText:"开始上手 →",actionLink:"/example/index/",bannerBg:"auto",features:null,readingShow:"top"},regularPath:"/",relativePath:"index.md",key:"v-4753273e",path:"/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 19:02:23",lastUpdatedTimestamp:1656068543e3},{title:"Awesome WebRTC",frontmatter:{title:"Awesome WebRTC",date:"2022-01-11T14:03:46.000Z",permalink:"/resource/",readingShow:"top"},regularPath:"/resource.html",relativePath:"resource.md",key:"v-a0941456",path:"/resource/",headers:[{level:2,title:"Overview",slug:"overview",normalizedTitle:"overview",charIndex:2},{level:2,title:"Tutorials",slug:"tutorials",normalizedTitle:"tutorials",charIndex:183},{level:2,title:"Demos and samples",slug:"demos-and-samples",normalizedTitle:"demos and samples",charIndex:568},{level:2,title:"Books",slug:"books",normalizedTitle:"books",charIndex:1191},{level:2,title:"Developer tools and resources",slug:"developer-tools-and-resources",normalizedTitle:"developer tools and resources",charIndex:1286},{level:2,title:"Standards and protocols",slug:"standards-and-protocols",normalizedTitle:"standards and protocols",charIndex:1530},{level:2,title:"Native APIs",slug:"native-apis",normalizedTitle:"native apis",charIndex:1768},{level:2,title:"Discussion, blogs and articles",slug:"discussion-blogs-and-articles",normalizedTitle:"discussion, blogs and articles",charIndex:2005},{level:2,title:"Browser support",slug:"browser-support",normalizedTitle:"browser support",charIndex:2162},{level:2,title:"JavaScript apps and frameworks",slug:"javascript-apps-and-frameworks",normalizedTitle:"javascript apps and frameworks",charIndex:2203},{level:3,title:"Video chat",slug:"video-chat",normalizedTitle:"video chat",charIndex:2263},{level:3,title:"Peer-to-peer data",slug:"peer-to-peer-data",normalizedTitle:"peer-to-peer data",charIndex:2332},{level:3,title:"VoIP/PSTN",slug:"voip-pstn",normalizedTitle:"voip/pstn",charIndex:2558},{level:3,title:"Face/head tracking",slug:"face-head-tracking",normalizedTitle:"face/head tracking",charIndex:2791},{level:3,title:"Node",slug:"node",normalizedTitle:"node",charIndex:2856},{level:2,title:"Services",slug:"services",normalizedTitle:"services",charIndex:2889},{level:2,title:"Applications",slug:"applications",normalizedTitle:"applications",charIndex:2998},{level:3,title:"getUserMedia",slug:"getusermedia",normalizedTitle:"getusermedia",charIndex:770},{level:3,title:"Screen capture",slug:"screen-capture",normalizedTitle:"screen capture",charIndex:978},{level:3,title:"Web Audio integration",slug:"web-audio-integration",normalizedTitle:"web audio integration",charIndex:3331},{level:3,title:"Recording",slug:"recording",normalizedTitle:"recording",charIndex:3538},{level:3,title:"Chat",slug:"chat",normalizedTitle:"chat",charIndex:3683},{level:3,title:"Games",slug:"games",normalizedTitle:"games",charIndex:3902},{level:3,title:"Telehealth",slug:"telehealth",normalizedTitle:"telehealth",charIndex:4069},{level:3,title:"Phone",slug:"phone",normalizedTitle:"phone",charIndex:4138},{level:3,title:"File sharing and P2P",slug:"file-sharing-and-p2p",normalizedTitle:"file sharing and p2p",charIndex:4195},{level:3,title:"Others",slug:"others",normalizedTitle:"others",charIndex:4401},{level:3,title:"Alternatives for IE and Safari",slug:"alternatives-for-ie-and-safari",normalizedTitle:"alternatives for ie and safari",charIndex:4478},{level:2,title:"Web Audio",slug:"web-audio",normalizedTitle:"web audio",charIndex:3331},{level:3,title:"Demos and samples",slug:"demos-and-samples-2",normalizedTitle:"demos and samples",charIndex:568},{level:3,title:"Tutorials",slug:"tutorials-2",normalizedTitle:"tutorials",charIndex:183},{level:3,title:"Newsletters",slug:"newsletters",normalizedTitle:"newsletters",charIndex:4743},{level:3,title:"Reference",slug:"reference",normalizedTitle:"reference",charIndex:4780}],readingTime:{text:"4 min read",minutes:3.99,time:239400,words:798},headersStr:"Overview Tutorials Demos and samples Books Developer tools and resources Standards and protocols Native APIs Discussion, blogs and articles Browser support JavaScript apps and frameworks Video chat Peer-to-peer data VoIP/PSTN Face/head tracking Node Services Applications getUserMedia Screen capture Web Audio integration Recording Chat Games Telehealth Phone File sharing and P2P Others Alternatives for IE and Safari Web Audio Demos and samples Tutorials Newsletters Reference",content:"# Overview\n\n * WebRTC official site\n * 2013 Google I/O presentation: video, slide - If you've never worked with WebRTC, we recommend you start with it. Get an overview of WebRTC.\n\n\n# Tutorials\n\n * Getting Started With WebRTC\n * WebRTC in the real world: STUN, TURN and signaling\n * A practical guide to WebRTC - presentation slides from vLine\n * Capturing audio and video in HTML5\n * Excellent series of articles by Louis Stowasser and Robert Nyman\n * Justin Uberti at Google I/O 2012\n * Cullen Jennings video: HTML5 WebRTC\n * WebRTC Fundamentals - online course.\n\n\n# Demos and samples\n\n * WebRTC JavaScript code samples\n * Live demos of the samples\n * List of WebRTC demos and apps - incomplete and slightly out of date.\n * WebRTC video chat: appr.tc, source\n * Simple getUserMedia demo\n * RTCPeerConnection demo - RTCPeerConnection ‘on one page’, i.e. without signaling.\n * Simple RTCDataChannel example\n * Data channel file transfer\n * RTCPeerConnection signaling example\n * Screen capture\n * WebRTC Experiments - Muaz Khan maintains a mighty assortment of experiments.\n * Walkthrough and code for setting up a server and client for video chat\n * Google I/O 2014 file sharing codelab\n\n\n# Books\n\n * WebRTCBook\n * Getting Started with WebRTC\n * Real-Time Communication with WebRTC\n\n\n# Developer tools and resources\n\n * adapter.js - shim maintained by Google to cope with API changes and platform differences.\n * WebRTC Troubleshooter: web, source\n * getUserMedia.js - polyfill from Addy Osmani\n * Chrome-Firefox\n * File bugs\n\n\n# Standards and protocols\n\n * Web Real-Time Communications Working Group\n * W3C Working Draft: WebRTC 1.0: Real-time Communication Between Browsers\n * Media Capture and Streams W3C Working Draft\n * IETF RTCWEB - protocol specifications\n\n\n# Native APIs\n\n * Getting started with WebRTC on iOS\n * Introduction to WebRTC on Android\n * Build scripts from pristineio - repo with links to how-to guides for Android and iOS\n * Native API documentation\n * WebRTC shim for WKWebView\n\n\n# Discussion, blogs and articles\n\n * discuss-webrtc\n * @webrtc\n * +webrtc\n * WebRTC on Stack Overflow\n * Tsahi Levent-Levi\n * WebRTC Weekly\n * WebRTCHacks\n\n\n# Browser support\n\n * iswebrtcreadyyet\n\n\n# JavaScript apps and frameworks\n\n * webrtcHacks articles\n\n\n# Video chat\n\n * appear.in\n * SimpleWebRTC\n * EasyRTC\n * LyteSpark\n\n\n# Peer-to-peer data\n\n * PeerJS - data channel abstraction.\n * Sharefest - share files via data channels.\n * Peer5 Downloader - P2P file download.\n * ShareDrop: web, source - file sharing between devices on the same network.\n\n\n# VoIP/PSTN\n\n * Phono - Open source JavaScript phone API\n * sipML5 - Open source JavaScript SIP client\n * JsSIP - Open source JavaScript SIP library\n * Kamailio - Open source SIP proxy with WebSocket and SRTP support\n * FreeSWITCH\n\n\n# Face/head tracking\n\n * clmtrackr\n * headtrackr: demo, source\n\n\n# Node\n\n * rtc.io\n * appear.in\n\n\n# Services\n\n * OpenTok - acquired by Telefonica Digital\n * vLine\n * WebRTC Developer Tool Vendor Directory\n\n\n# Applications\n\n\n# getUserMedia\n\n * ASCII camera - getUserMedia + Canvas + ASCII conversion\n * Xylophone\n * Webcam Toy Photobooth app - Photobooth with filters, getUserMedia + WebGL\n * SVG filters\n * Face masking with WebGL\n * Face deformation with WebGL\n * Augmented Reality Photobooth\n\n\n# Screen capture\n\n * Screen recording app\n\n\n# Web Audio integration\n\n * Music production\n * Chris Wilson's input demos\n * Paul Lewis's gUM/WebGL demo\n * RTCPeerConnection integration\n * Theremin: getUserMedia + tracking + Web Audio\n * cabbibo holly\n\n\n# Recording\n\n * Record audio and video with the MediaRecorder API\n * Voice Memos app\n * Record and download without MediaRecorder\n * RecordRTC\n\n\n# Chat\n\n * talky.io\n * appear.in\n * tawk\n * hu.tt\n * Twelephone - chat with Twitter contacts.\n * browsermeeting\n * codassium - job interview tool with live coding.\n * vmux.co\n * vidtok\n * voxeet - high quality audio.\n\n\n# Games\n\n * Who Am I? - second ever WebRTC game, no longer online\n * Cube Slam - WebRTC + Web Audio + WebGL\n * Face tracking\n * BananaBread - RTCDataChannel + WebGL\n\n\n# Telehealth\n\n * Regional Cystic Fibrosis Program\n * consultdirect\n\n\n# Phone\n\n * Zingaya\n * Tethr - Disaster communications\n\n\n# File sharing and P2P\n\n * Sharefest - share file by uploading and sharing link.\n * peerCDN - P2P CDN.\n * WebTorrent - BitTorrent over WebRTC.\n * webp2p\n * peer5 - add P2P file download to your web page.\n\n\n# Others\n\n * Internet-less WebRTC\n * Video call between Qt app and web app\n\n\n# Alternatives for IE and Safari\n\n * Temasys Plugin\n\n\n# Web Audio\n\n\n# Demos and samples\n\n * simple webaudio demo\n * webaudio samples\n\n\n# Tutorials\n\n * Getting started with the Web Audio API\n * Audio input - with links to good, simple demos.\n * webaudio api guide\n\n\n# Newsletters\n\n * Web Audio Weekly\n\n\n# Reference\n\n * webaudio api\n * w3c webaudio\n * rtckit/awesome-rtc: A curated list of awesome Real Time Communications resources",normalizedContent:"# overview\n\n * webrtc official site\n * 2013 google i/o presentation: video, slide - if you've never worked with webrtc, we recommend you start with it. get an overview of webrtc.\n\n\n# tutorials\n\n * getting started with webrtc\n * webrtc in the real world: stun, turn and signaling\n * a practical guide to webrtc - presentation slides from vline\n * capturing audio and video in html5\n * excellent series of articles by louis stowasser and robert nyman\n * justin uberti at google i/o 2012\n * cullen jennings video: html5 webrtc\n * webrtc fundamentals - online course.\n\n\n# demos and samples\n\n * webrtc javascript code samples\n * live demos of the samples\n * list of webrtc demos and apps - incomplete and slightly out of date.\n * webrtc video chat: appr.tc, source\n * simple getusermedia demo\n * rtcpeerconnection demo - rtcpeerconnection ‘on one page’, i.e. without signaling.\n * simple rtcdatachannel example\n * data channel file transfer\n * rtcpeerconnection signaling example\n * screen capture\n * webrtc experiments - muaz khan maintains a mighty assortment of experiments.\n * walkthrough and code for setting up a server and client for video chat\n * google i/o 2014 file sharing codelab\n\n\n# books\n\n * webrtcbook\n * getting started with webrtc\n * real-time communication with webrtc\n\n\n# developer tools and resources\n\n * adapter.js - shim maintained by google to cope with api changes and platform differences.\n * webrtc troubleshooter: web, source\n * getusermedia.js - polyfill from addy osmani\n * chrome-firefox\n * file bugs\n\n\n# standards and protocols\n\n * web real-time communications working group\n * w3c working draft: webrtc 1.0: real-time communication between browsers\n * media capture and streams w3c working draft\n * ietf rtcweb - protocol specifications\n\n\n# native apis\n\n * getting started with webrtc on ios\n * introduction to webrtc on android\n * build scripts from pristineio - repo with links to how-to guides for android and ios\n * native api documentation\n * webrtc shim for wkwebview\n\n\n# discussion, blogs and articles\n\n * discuss-webrtc\n * @webrtc\n * +webrtc\n * webrtc on stack overflow\n * tsahi levent-levi\n * webrtc weekly\n * webrtchacks\n\n\n# browser support\n\n * iswebrtcreadyyet\n\n\n# javascript apps and frameworks\n\n * webrtchacks articles\n\n\n# video chat\n\n * appear.in\n * simplewebrtc\n * easyrtc\n * lytespark\n\n\n# peer-to-peer data\n\n * peerjs - data channel abstraction.\n * sharefest - share files via data channels.\n * peer5 downloader - p2p file download.\n * sharedrop: web, source - file sharing between devices on the same network.\n\n\n# voip/pstn\n\n * phono - open source javascript phone api\n * sipml5 - open source javascript sip client\n * jssip - open source javascript sip library\n * kamailio - open source sip proxy with websocket and srtp support\n * freeswitch\n\n\n# face/head tracking\n\n * clmtrackr\n * headtrackr: demo, source\n\n\n# node\n\n * rtc.io\n * appear.in\n\n\n# services\n\n * opentok - acquired by telefonica digital\n * vline\n * webrtc developer tool vendor directory\n\n\n# applications\n\n\n# getusermedia\n\n * ascii camera - getusermedia + canvas + ascii conversion\n * xylophone\n * webcam toy photobooth app - photobooth with filters, getusermedia + webgl\n * svg filters\n * face masking with webgl\n * face deformation with webgl\n * augmented reality photobooth\n\n\n# screen capture\n\n * screen recording app\n\n\n# web audio integration\n\n * music production\n * chris wilson's input demos\n * paul lewis's gum/webgl demo\n * rtcpeerconnection integration\n * theremin: getusermedia + tracking + web audio\n * cabbibo holly\n\n\n# recording\n\n * record audio and video with the mediarecorder api\n * voice memos app\n * record and download without mediarecorder\n * recordrtc\n\n\n# chat\n\n * talky.io\n * appear.in\n * tawk\n * hu.tt\n * twelephone - chat with twitter contacts.\n * browsermeeting\n * codassium - job interview tool with live coding.\n * vmux.co\n * vidtok\n * voxeet - high quality audio.\n\n\n# games\n\n * who am i? - second ever webrtc game, no longer online\n * cube slam - webrtc + web audio + webgl\n * face tracking\n * bananabread - rtcdatachannel + webgl\n\n\n# telehealth\n\n * regional cystic fibrosis program\n * consultdirect\n\n\n# phone\n\n * zingaya\n * tethr - disaster communications\n\n\n# file sharing and p2p\n\n * sharefest - share file by uploading and sharing link.\n * peercdn - p2p cdn.\n * webtorrent - bittorrent over webrtc.\n * webp2p\n * peer5 - add p2p file download to your web page.\n\n\n# others\n\n * internet-less webrtc\n * video call between qt app and web app\n\n\n# alternatives for ie and safari\n\n * temasys plugin\n\n\n# web audio\n\n\n# demos and samples\n\n * simple webaudio demo\n * webaudio samples\n\n\n# tutorials\n\n * getting started with the web audio api\n * audio input - with links to good, simple demos.\n * webaudio api guide\n\n\n# newsletters\n\n * web audio weekly\n\n\n# reference\n\n * webaudio api\n * w3c webaudio\n * rtckit/awesome-rtc: a curated list of awesome real time communications resources",charsets:{},lastUpdated:"2022/06/24, 19:02:23",lastUpdatedTimestamp:1656068543e3},{title:"示例",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"20.基础",imgUrl:"/img/logo.png",description:"基础的数理、编程知识，关于数学、Python..."}},title:"示例",date:"2020-03-11T21:50:53.000Z",permalink:"/basic",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/%E7%9B%AE%E5%BD%95/10.basic.html",relativePath:"目录/10.basic.md",key:"v-73804bfb",path:"/basic/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"示例",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"30.进阶",imgUrl:"/img/logo.png",description:"基础的数理、编程知识，关于数学、Python..."}},title:"示例",date:"2020-03-11T21:50:53.000Z",permalink:"/advance",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/%E7%9B%AE%E5%BD%95/20.advance.html",relativePath:"目录/20.advance.md",key:"v-0998f6db",path:"/advance/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"示例",frontmatter:{pageComponent:{name:"Catalogue",data:{key:"40.主题",imgUrl:"/img/logo.png",description:"基础的数理、编程知识，关于数学、Python..."}},title:"示例",date:"2020-03-11T21:50:53.000Z",permalink:"/topic",sidebar:!1,article:!1,comment:!1,editLink:!1,readingShow:"top"},regularPath:"/%E7%9B%AE%E5%BD%95/30.topic.html",relativePath:"目录/30.topic.md",key:"v-3386f7db",path:"/topic/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/29, 08:18:38",lastUpdatedTimestamp:1656461918e3},{title:"开始上手",frontmatter:{title:"开始上手",date:"2022-04-16T16:43:23.000Z",permalink:"/example/index/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/%E7%A4%BA%E4%BE%8B/0.index.html",relativePath:"示例/0.index.md",key:"v-3b65677e",path:"/example/index/",headers:[{level:2,title:"视频播放",slug:"视频播放",normalizedTitle:"视频播放",charIndex:2},{level:2,title:"复制文本",slug:"复制文本",normalizedTitle:"复制文本",charIndex:11},{level:2,title:"动画",slug:"动画",normalizedTitle:"动画",charIndex:489}],readingTime:{text:"1 min read",minutes:.415,time:24900,words:83},headersStr:"视频播放 复制文本 动画",content:"# 视频播放\n\n\n# 复制文本\n\nAsperiores reprehenderit pariatur cum harum id optio aliquam dolore qui. Amet odit quia omnis excepturi nesciunt cum tenetur. Quibusdam voluptatem dicta est. Qui possimus laborum aut.\n\nEa et optio neque. Et culpa doloremque. A sunt voluptas explicabo ex nihil enim sit magnam quo. Et voluptatum eaque qui et dolores.\n\nOfficiis autem fugit ut voluptatibus. Error voluptatem maiores labore quia a quia recusandae. Quia repudiandae rerum illum inventore dicta veritatis.\n\n\n# 动画",normalizedContent:"# 视频播放\n\n\n# 复制文本\n\nasperiores reprehenderit pariatur cum harum id optio aliquam dolore qui. amet odit quia omnis excepturi nesciunt cum tenetur. quibusdam voluptatem dicta est. qui possimus laborum aut.\n\nea et optio neque. et culpa doloremque. a sunt voluptas explicabo ex nihil enim sit magnam quo. et voluptatum eaque qui et dolores.\n\nofficiis autem fugit ut voluptatibus. error voluptatem maiores labore quia a quia recusandae. quia repudiandae rerum illum inventore dicta veritatis.\n\n\n# 动画",charsets:{cjk:!0},lastUpdated:"2022/06/24, 19:02:23",lastUpdatedTimestamp:1656068543e3},{title:"Plan 计划",frontmatter:{title:"Plan 计划",date:"2022-04-16T16:44:07.000Z",permalink:"/example/plan/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/%E7%A4%BA%E4%BE%8B/1.plan.html",relativePath:"示例/1.plan.md",key:"v-a7b61c28",path:"/example/plan/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 19:02:23",lastUpdatedTimestamp:1656068543e3},{title:"Roadmap 路线",frontmatter:{title:"Roadmap 路线",date:"2022-04-16T16:44:46.000Z",permalink:"/example/roadmap/",categories:[null],tags:[null],readingShow:"top"},regularPath:"/%E7%A4%BA%E4%BE%8B/3.roadmap.html",relativePath:"示例/3.roadmap.md",key:"v-7a2b45a4",path:"/example/roadmap/",headersStr:null,content:"",normalizedContent:"",charsets:{},lastUpdated:"2022/06/24, 19:02:23",lastUpdatedTimestamp:1656068543e3}],themeConfig:{nav:[{text:"基础",link:"/basic/"},{text:"进阶",link:"/advance/"},{text:"话题",link:"/topic/",items:[{text:"实例",link:"https://github.com/jonsam-ng/fancy-webrtc-demos",target:"_blank"}]},{text:"源码",link:"/source/index/"},{text:"索引",link:"/archives/",items:[{text:"分类",link:"/categories/"},{text:"标签",link:"/tags/"},{text:"归档",link:"/archives/"}]},{text:"更多",items:[{text:"书籍资料",link:"https://ox.jonsam.site/tags/?tag=WebRTC"},{text:"关于",link:"/about/"},{text:"幻灯片",link:"/slides/#/1"}]},{text:"博客",link:"https://www.jonsam.site"}],sidebarDepth:1,logo:"/img/logo.png",repo:"jonsam-ng/fancy-webrtc",searchMaxSuggestions:10,lastUpdated:"上次更新",docsDir:"docs",editLinks:!0,editLinkText:"编辑",category:!0,tag:!0,archive:!0,categoryText:"随笔",titleBadge:!0,contentBgStyle:6,updateBar:{showToArticle:!0,moreArticle:"/archives"},rightMenuBar:!0,sidebarOpen:!0,pageButton:!0,sidebar:{"/10.源码/":[["0.index.md","开始上手","/source/index/"],["1.plan.md","Plan 计划","/source/plan/"],["3.roadmap.md","Roadmap 路线","/source/roadmap/"],["4.目录结构.md","目录结构","/source/category/"],{title:"API",collapsable:!0,children:[["10.API/0.index.md","本章导读","/source/api/index/"]]}],catalogue:{basic:"/basic",advance:"/advance",topic:"/topic"},"/20.基础/":[["0.index.md","开始上手","/basic/index/"],["1.plan.md","Plan 计划","/basic/plan/"],["3.roadmap.md","Roadmap 路线","/basic/roadmap/"],["4.rec-webrtc-chinese.md","WebRTC1.0浏览器间实时通讯","/basic/webrtc-1.0/"],{title:"MDN: WebRTC API",collapsable:!0,children:[["10.MDN: WebRTC API/0.index.md","本章导读","/basic/webrtc_api/index/"],["10.MDN: WebRTC API/10.basic.md","WebRTC API","/basic/webrtc_api/basic/"],["10.MDN: WebRTC API/20.guide.md","WebRTC 指南","/basic/webrtc_api/guide/"]]},{title:"概要",collapsable:!0,children:[["20.概要/0.index.md","本章导读","/basic/intro/index/"],["20.概要/10.intro.md","WebRTC 概要介绍","/basic/intro/introduce/"],["20.概要/20.stats.md","读懂 WebRTC's Statistics API","/basic/intro/stats/"],["20.概要/30.session.md","WebRTC 中的三角形和梯形会话","/basic/intro/session/"],["20.概要/40.Webrtc Statistics Dictionary.md","Webrtc Statistics Dictionary","/basic/intro/dict/"]]},{title:"应用",collapsable:!0,children:[["30.应用/0.index.md","本章导读","/basic/app/index/"],["30.应用/10.getUserMedia.md","getUserMedia","/basic/app/get-user-media/"],["30.应用/20.devices.md","devices","/basic/app/devices/"],["30.应用/30.streamCapture.md","streamCapture","/basic/app/streamCapture/"]]},{title:"P2P",collapsable:!0,children:[["35.P2P/0.index.md","本章导读","/basic/p2p/index/"],["35.P2P/9.NAT基础概念详解.md","NAT基础概念详解","/basic/p2p/nat-basic/"],["35.P2P/10.NAT 类型探测和 NAT 穿越.md","NAT 类型探测和 NAT 穿越","/basic/p2p/nat/"],["35.P2P/20.NAT穿越方案进阶.md","NAT穿越方案进阶","/basic/p2p/nat-advance/"],["35.P2P/30.STUN、TURN、ICE详解.md","STUN、TURN、ICE详解","/basic/p2p/stun-turn-ice/"],["35.P2P/34.STUN 详解.md","STUN 详解","/basic/p2p/stun/"],["35.P2P/40.ICE 详解.md","ICE 详解","/basic/p2p/ice/"]]},{title:"协议",collapsable:!0,children:[["70.协议/0.index.md","index","/pages/e76933/"]]}],"/30.进阶/":[["0.index.md","开始上手","/advance/index/"],["1.plan.md","Plan 计划","/advance/plan/"],["3.roadmap.md","Roadmap 路线","/advance/roadmap/"]],"/40.主题/":[["0.index.md","开始上手","/topic/index/"],["1.plan.md","Plan 计划","/topic/plan/"],["3.roadmap.md","Roadmap 路线","/topic/roadmap/"],{title:"simpleWebRTC",collapsable:!0,children:[["10.simpleWebRTC/0.index.md","Peer.js 解析","/topic/peerjs/"]]},{title:"peerjs",collapsable:!0,children:[["20.peerjs/0.index.md","SimpleWebRTC 解析","/topic/simpleWebRTC/"]]},{title:"WebRTC-Experiment",collapsable:!0,children:[["30.WebRTC-Experiment/0.index.md","WebRTC-Experiment","/topic/experiment/"]]}],"/目录/":[["10.basic.md","示例","/basic"],["20.advance.md","示例","/advance"],["30.topic.md","示例","/topic"]],"/示例/":[["0.index.md","开始上手","/example/index/"],["1.plan.md","Plan 计划","/example/plan/"],["3.roadmap.md","Roadmap 路线","/example/roadmap/"]]},author:{name:"jonsam",link:"https://github.com/jonsam-ng"},blogger:{avatar:"https://cdn.staticaly.com/gh/jonsam-ng/image-hosting@master/oxygen-space/image.5a0lthv367k0.png",name:"Jonsam NG",slogan:"让有意义的事变得有意思，让有意思的事变得有意义"},social:{icons:[{iconClass:"icon-youjian",title:"发邮件",link:"mailto:jonsam.ng@foxmail.com"},{iconClass:"icon-github",title:"GitHub",link:"https://github.com/jonsam-ng"},{iconClass:"icon-mao",title:"博客",link:"https://www.jonsam.site"},{iconClass:"icon-shuben",title:"文档",link:"https://docs.jonsam.site"},{iconClass:"icon-code",title:"源码",link:"https://source.jonsam.site"}]},footer:{createYear:2022,copyrightInfo:'Fancy WebRTC | Template by <a href="https://jonsam-ng.github.io/fancy-note-starter/">Fancy Note Starter</a> | Made by <a href=https://www.jonsam.site target="_blank">jonsam</a> with ❤'},htmlModules:{}},locales:{"/":{lang:"zh-CN",title:"Fancy WebRTC",description:"WebRTC notes and learning map all you want.",path:"/"}}},ut=t(165),pt=t(252),ft=!1,mt={data:function(){return{qr:null}},updated:function(){var n=this;if(ft&&this.qr){var e=document.querySelector(".nav-links"),t=document.querySelector(".qrcodeBtn");null!=e&&null==t&&this.$nextTick((function(){var t=document.createElement("DIV");t.className+="nav-item",t.appendChild(n.qr.$el),e.appendChild(t)}))}},mounted:function(){if(!this.qr&&!ft){ft=!0;var n=new(a.default.extend(pt.default));n.$mount(),this.qr=n}}},ht=(t(59),!1),vt={mounted:function(){ht||(window.addEventListener("unload",this.saveLastReading),ht=!0)},methods:{saveLastReading:function(){localStorage.setItem("lastReading",JSON.stringify({path:this.$route.path,scrollTop:document.documentElement.scrollTop,timestamp:(new Date).getTime()}))}}},gt=!1,bt={mounted:function(){gt||(t.e(79).then(t.t.bind(null,541,7)).then((function(n){a.default.use(n.default,{lang:"zh-CN"})})),gt=!0)}},Tt=(t(240),t(74),t(253)),yt=t(254),Ct=(t(415),t(177),t(57));var wt={computed:{$filterPosts:function(){return this.$site.pages.filter((function(n){var e=n.frontmatter,t=e.pageComponent,r=e.article,a=e.home;return!(t||!1===r||!0===a)}))},$sortPosts:function(){return(n=this.$filterPosts).sort((function(n,e){var t=n.frontmatter.sticky,r=e.frontmatter.sticky;return t&&r?t==r?Object(Ct.a)(n,e):t-r:t&&!r?-1:!t&&r?1:Object(Ct.a)(n,e)})),n;var n},$sortPostsByDate:function(){return(n=this.$filterPosts).sort((function(n,e){return Object(Ct.a)(n,e)})),n;var n},$groupPosts:function(){return function(n){for(var e={},t={},r=function(r,a){var i=n[r].frontmatter,o=i.categories,s=i.tags;"array"===Object(Ct.n)(o)&&o.forEach((function(t){t&&(e[t]||(e[t]=[]),e[t].push(n[r]))})),"array"===Object(Ct.n)(s)&&s.forEach((function(e){e&&(t[e]||(t[e]=[]),t[e].push(n[r]))}))},a=0,i=n.length;a<i;a++)r(a);return{categories:e,tags:t}}(this.$sortPosts)},$categoriesAndTags:function(){return function(n){var e=[],t=[];for(var r in n.categories)e.push({key:r,length:n.categories[r].length});for(var a in n.tags)t.push({key:a,length:n.tags[a].length});return{categories:e,tags:t}}(this.$groupPosts)}}};a.default.component(Tt.default),a.default.component(yt.default);function St(n){return n.toString().padStart(2,"0")}t(419);a.default.component("Badges",(function(){return Promise.all([t.e(0),t.e(16)]).then(t.bind(null,563))})),a.default.component("BlockToggle",(function(){return Promise.all([t.e(0),t.e(13)]).then(t.bind(null,564))})),a.default.component("Card",(function(){return Promise.all([t.e(0),t.e(17)]).then(t.bind(null,565))})),a.default.component("ClipboardComponent",(function(){return t.e(23).then(t.bind(null,566))})),a.default.component("FontResizer",(function(){return Promise.all([t.e(0),t.e(14)]).then(t.bind(null,567))})),a.default.component("GlobalTip",(function(){return Promise.all([t.e(0),t.e(15)]).then(t.bind(null,568))})),a.default.component("LastReadingPopup",(function(){return Promise.resolve().then(t.bind(null,165))})),a.default.component("Pdf",(function(){return Promise.all([t.e(0),t.e(12),t.e(18)]).then(t.bind(null,569))})),a.default.component("QrCode",(function(){return Promise.resolve().then(t.bind(null,252))})),a.default.component("TimeToRead",(function(){return Promise.all([t.e(0),t.e(19)]).then(t.bind(null,570))})),a.default.component("VideoPlayer",(function(){return t.e(24).then(t.bind(null,571))})),a.default.component("Badge",(function(){return Promise.all([t.e(0),t.e(21)]).then(t.bind(null,622))})),a.default.component("CodeBlock",(function(){return Promise.resolve().then(t.bind(null,253))})),a.default.component("CodeGroup",(function(){return Promise.resolve().then(t.bind(null,254))}));t(420);var At,Rt,Pt=t(17),xt=(t(423),t(163),t(251)),It=t.n(xt),kt=t(125);"valine"===(Rt="gitalk")?t.e(78).then(t.t.bind(null,542,7)).then((function(n){return n.default})):"gitalk"===Rt&&Promise.all([t.e(0),t.e(76)]).then(t.t.bind(null,543,7)).then((function(){return t.e(75).then(t.t.bind(null,544,7))})).then((function(n){return At=n.default}));function Nt(n,e){var t={};return Reflect.ownKeys(n).forEach((function(r){if("string"==typeof n[r])try{t[r]=It.a.render(n[r],e)}catch(e){console.warn('Comment config option error at key named "'.concat(r,'"')),console.warn("More info: ".concat(e.message)),t[r]=n[r]}else t[r]=n[r]})),t}console.log('How to use "'.concat("gitalk",'" in ').concat(kt.name,"@v").concat(kt.version,":"),kt.homepage);var _t={render:function(n,e){var t=document.createElement("div");t.id=e,document.querySelector("main.page").appendChild(t),new At(Nt({clientID:"9f6676a82c6134301680",clientSecret:"4bbf7178807c1a1d2c7b91080e0bd25bcb72a089",repo:"fancy-machine-learnning",owner:"jonsam-ng",admin:["jonsam-ng"],pagerDirection:"last",id:"<%- (frontmatter.permalink || frontmatter.to.path).slice(-16) %>",title:"「评论」<%- frontmatter.title %>",labels:["Gitalk","Comment"],body:"页面：<%- window.location.origin + (frontmatter.to.path || window.location.pathname) %>"},{frontmatter:n})).render(e)},clear:function(n){var e=document.querySelector("#".concat(n));return e&&e.remove(),!0}},Et=null;function Dt(n){return _t.clear("vuepress-plugin-comment")}function Ot(n){return!1!==n.comment&&!1!==n.comments}function Ut(n){if(clearTimeout(Et),document.querySelector("main.page"))return _t.render(n,"vuepress-plugin-comment");Et=setTimeout((function(){return Ut(n)}),200)}var jt={mounted:function(){var n=this;Et=setTimeout((function(){var e=Object(Pt.a)({to:{},from:{}},n.$frontmatter);Dt()&&Ot(e)&&Ut(e)}),1e3),this.$router.afterEach((function(e,t){if(!e||!t||e.path!==t.path){var r=Object(Pt.a)({to:e,from:t},n.$frontmatter);Dt()&&Ot(r)&&Ut(r)}}))}},Mt=Object(st.a)(jt,(function(){var n=this.$createElement;return(this._self._c||n)("div")}),[],!1,null,null,null).exports,Bt=(t(428),t(429),function(){function n(e){Pe(this,n),Object.defineProperty(this,"registration",{value:e,configurable:!0,writable:!0})}return Ie(n,[{key:"update",value:function(){return this.registration.update()}},{key:"skipWaiting",value:function(){var n=this.registration.waiting;return n?(console.log("[vuepress:sw] Doing worker.skipWaiting()."),new Promise((function(e,t){var r=new MessageChannel;r.port1.onmessage=function(n){console.log("[vuepress:sw] Done worker.skipWaiting()."),n.data.error?t(n.data.error):e(n.data)},n.postMessage({type:"skip-waiting"},[r.port2])}))):Promise.resolve()}}]),n}()),Lt=t(69);a.default.component("SWUpdatePopup",(function(){return Promise.all([t.e(0),t.e(20)]).then(t.bind(null,561))}));var zt=function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var r,a,i;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(r=e.router,e.isServer){n.next=7;break}return n.next=4,t.e(77).then(t.bind(null,545));case 4:a=n.sent,i=a.register,r.onReady((function(){i("".concat("/","service-worker.js"),{registrationOptions:{},ready:function(){console.log("[vuepress:sw] Service worker is active."),Lt.a.$emit("sw-ready")},cached:function(n){console.log("[vuepress:sw] Content has been cached for offline use."),Lt.a.$emit("sw-cached",new Bt(n))},updated:function(n){console.log("[vuepress:sw] Content updated."),Lt.a.$emit("sw-updated",new Bt(n))},offline:function(){console.log("[vuepress:sw] No internet connection found. App is running in offline mode."),Lt.a.$emit("sw-offline")},error:function(n){console.error("[vuepress:sw] Error during service worker registration:",n),Lt.a.$emit("sw-error",n),GA_ID&&ga("send","exception",{exDescription:n.message,exFatal:!1})}})}));case 7:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}(),Ft=t(164),Wt=(t(98),!0),qt="lazy",$t="200px",Gt=a.default.extend({props:{bvid:{type:String,default:{page:1,danmaku:!0,allowfullscreen:"allowfullscreen",sandbox:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",width:"100%",height:[.5625,70]}.bvid,required:!0},danmaku:{type:Boolean,default:!0,required:!1},page:{type:Number,default:1,required:!1},sandbox:{type:String,default:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",required:!1},allowfullscreen:{type:[String,Boolean],default:"allowfullscreen",required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,70]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("iframe",{ref:"sbplayer",style:"width: ".concat(this.width),attrs:{src:"//player.bilibili.com/player.html?bvid=".concat(this.bvid,"&page=").concat(this.page,"&danmaku=").concat(this.danmaku),allowfullscreen:(this.allowfullscreen,!0),scrolling:"no",frameborder:"0",sandbox:this.sandbox}})])},mounted:function(){var n=this;this.$nextTick((function(){var e=n.$refs.sbplayer;e.style.height="".concat(e.scrollWidth*n.height[0]+n.height[1],"px")}))}}),Vt=a.default.extend({props:{xid:{type:String,default:null,required:!0},id:{type:String,default:null,required:!1},autoplay:{type:Boolean,default:!1,required:!1},startTime:{type:Number,default:0,required:!1},sandbox:{type:String,default:"allow-top-navigation allow-same-origin allow-forms allow-scripts allow-popups",required:!1},allowfullscreen:{type:[String,Boolean],default:"allowfullscreen",required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,0]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("iframe",{ref:"sbplayer",style:"width: ".concat(this.width),attrs:{src:"//www.ixigua.com/iframe/".concat(this.xid,"?").concat(this.id?"id="+this.id+"&":"","autoplay=").concat(this.autoplay?1:0,"&startTime=").concat(this.startTime),allowfullscreen:(this.allowfullscreen,!0),scrolling:"no",frameborder:"0",sandbox:this.sandbox}})])},mounted:function(){var n=this;this.$nextTick((function(){var e=n.$refs.sbplayer;e.style.height="".concat(e.scrollWidth*n.height[0]+n.height[1],"px")}))}}),Ht=t(23),Yt=(t(120),function(){function n(e){Pe(this,n),Object(Ht.a)(this,"src",void 0),Object(Ht.a)(this,"player",void 0),e&&(this.src=e)}var e;return Ie(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,t.e(6).then(t.t.bind(null,546,7)).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a,i,o,s,c,l,d,u,p,f,m,h,v,g,b,T,y,C,w,S,A,R,P,x,I,k,N,_,E,D,O;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(f=r.default,m=!1,h=!1,v=!1,g=!1,b=!1,e.src.video.customType=(null===(a=e.src)||void 0===a||null===(i=a.video)||void 0===i?void 0:i.customType)||{},null!==(o=e.src)&&void 0!==o&&null!==(s=o.video)&&void 0!==s&&s.type||(null!==(T=e.src)&&void 0!==T&&null!==(y=T.video)&&void 0!==y&&y.url.toLowerCase().endsWith(".m3u8")?e.src.video.type="hls":null!==(C=e.src)&&void 0!==C&&null!==(w=C.video)&&void 0!==w&&w.url.toLowerCase().endsWith(".flv")?e.src.video.type="flv":null!==(S=e.src)&&void 0!==S&&null!==(A=S.video)&&void 0!==A&&A.url.toLowerCase().endsWith(".mpd")&&(e.src.video.type="shakaDash")),null===(c=e.src)||void 0===c||null===(l=c.video)||void 0===l||!l.type||"string"!=typeof e.src.video.type){n.next=27;break}n.t0=e.src.video.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?12:"flv"===n.t0?15:"dash"===n.t0?18:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?21:"webtorrent"===n.t0?24:27;break;case 12:return e.src.video.type="smplayerDplayerHls",m=!0,n.abrupt("break",27);case 15:return e.src.video.type="smplayerDplayerFlv",h=!0,n.abrupt("break",27);case 18:return e.src.video.type="smplayerDplayerDash",v=!0,n.abrupt("break",27);case 21:return e.src.video.type="smplayerDplayerShakaDash",g=!0,n.abrupt("break",27);case 24:return e.src.video.type="smplayerDplayerWebtorrent",b=!0,n.abrupt("break",27);case 27:if(null!=(null===(d=e.src)||void 0===d||null===(u=d.video)||void 0===u?void 0:u.quality)&&e.src.video.quality.length>0&&e.src.video.quality.forEach((function(n){if(null==n.type&&(n.url.toLowerCase().endsWith(".m3u8")?n.type="m3u8":n.url.toLowerCase().endsWith(".flv")?n.type="flv":n.url.toLowerCase().endsWith(".mpd")&&(n.type="shakaDash")),null!=n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerDplayerHls",m=!0;break;case"flv":n.type="smplayerDplayerFlv",h=!0;break;case"dash":n.type="smplayerDplayerDash",v=!0;break;case"shakadash":case"shaka":case"shaka-dash":n.type="smplayerDplayerShakaDash",g=!0;break;case"webtorrent":n.type="smplayerDplayerWebtorrent",b=!0}})),m&&Object.assign(null===(R=e.src)||void 0===R||null===(P=R.video)||void 0===P?void 0:P.customType,{smplayerDplayerHls:function(n,e){t.e(7).then(t.t.bind(null,547,7)).then((function(t){var r=t.default,a=n.src,i=new r;i.attachMedia(n),i.on(r.Events.MEDIA_ATTACHED,(function(){i.loadSource(a)})),e.on("destroy",(function(){i.destroy()}))}))}}),h&&Object.assign(null===(x=e.src)||void 0===x||null===(I=x.video)||void 0===I?void 0:I.customType,{smplayerDplayerFlv:function(n,e){t.e(8).then(t.t.bind(null,548,7)).then((function(t){var r=t.default.createPlayer({type:"flv",url:n.src});r.attachMediaElement(n),r.load(),e.on("destroy",(function(){r.destroy()}))}))}}),v&&Object.assign(null===(k=e.src)||void 0===k||null===(N=k.video)||void 0===N?void 0:N.customType,{smplayerDplayerDash:function(n,e){t.e(5).then(t.t.bind(null,549,7)).then((function(t){var r=t.default.MediaPlayer().create();r.initialize(n,n.src,!1),e.on("destroy",(function(){r.reset()}))}))}}),g&&Object.assign(null===(_=e.src)||void 0===_||null===(E=_.video)||void 0===E?void 0:E.customType,{smplayerDplayerShakaDash:function(n,e){t.e(9).then(t.t.bind(null,550,7)).then((function(t){var r=new t.default.Player(n);r.load(n.src).then((function(){e.on("destroy",(function(){r.destroy()}))}))}))}}),b&&Object.assign(null===(D=e.src)||void 0===D||null===(O=D.video)||void 0===O?void 0:O.customType,{smplayerDplayerWebtorrent:function(n,e){t.e(10).then(t.t.bind(null,551,7)).then((function(t){var r=new(0,t.default);r.add(n.src,(function(t){t.files.find((function(n){return n.name.endsWith(".mp4")})).renderTo(n),e.on("destroy",(function(){r.destroy()}))}))}))}}),null===(p=e.src)||void 0===p||!p.customInit){n.next=39;break}return n.next=36,e.src.customInit(f,e.src).then((function(n){return e.player=n,e.player}));case 36:n.t1=n.sent,n.next=40;break;case 39:n.t1=new f(e.src);case 40:return e.player=n.t1,n.abrupt("return",e.player);case 42:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}()),Xt=t(32),Zt=t.n(Xt),Jt=a.default.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return{src:{container:null},width:"100%",on:{}}.height},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=Zt()({},n.on),r=Object(Pt.a)(Object(Pt.a)({},Zt()({container:null},n.src)),{},{container:n.$refs.sbplayer}),n.player=new Yt(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t);case 6:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),Kt=(t(121),function(){function n(e){Pe(this,n),Object(Ht.a)(this,"src",void 0),Object(Ht.a)(this,"player",void 0),e&&(this.src=e)}var e;return Ie(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,Promise.all([Promise.all([t.e(0),t.e(3)]).then(t.t.bind(null,552,7)),Promise.all([t.e(0),t.e(3)]).then(t.t.bind(null,553,7))]).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a,i,o,s,c,l,d,u;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(c=Object(Qn.a)(r,1),l=c[0].default,e.src.customAudioType=(null===(a=e.src)||void 0===a?void 0:a.customAudioType)||{},d=!1,null===(i=e.src)||void 0===i||null===(o=i.audio)||void 0===o||o.forEach((function(n){if(n.type||n.url.toLowerCase().endsWith(".m3u8")&&(n.type="hls"),n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerAplayerHls",d=!0}})),d&&Object.assign(null===(u=e.src)||void 0===u?void 0:u.customAudioType,{smplayerAplayerHls:function(n,e,r){t.e(7).then(t.t.bind(null,547,7)).then((function(t){var a=t.default,i=!1===r.audio.paused;if(n.canPlayType("application/x-mpegURL")||n.canPlayType("application/vnd.apple.mpegURL"))n.src=e.url;else if(a.isSupported()){var o=new a;o.attachMedia(n),o.on(a.Events.MEDIA_ATTACHED,(function(){o.loadSource(e.url)})),r.on("destroy",(function(){o.destroy()}))}else r.notice("Error: HLS is not supported.");i&&r.play()}))}}),null===(s=e.src)||void 0===s||!s.customInit){n.next=11;break}return n.next=8,e.src.customInit(l,e.src).then((function(n){return e.player=n,e.player}));case 8:n.t0=n.sent,n.next=12;break;case 11:n.t0=new l(e.src);case 12:return e.player=n.t0,n.abrupt("return",e.player);case 14:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;!this.player||null!==(n=this.src)&&void 0!==n&&n.fixed||this.player.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}()),Qt=a.default.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer"})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=Zt()({},n.on),r=Object(Pt.a)(Object(Pt.a)({},Zt()({lrcType:3},n.src)),{},{container:n.$refs.sbplayer}),n.player=new Kt(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t),n.$nextTick((function(){if(n.src.fixed){var e=document.querySelector("#app");null==e||e.append(n.$el)}}));case 7:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),nr=function(){function n(e){Pe(this,n),Object(Ht.a)(this,"src",void 0),Object(Ht.a)(this,"player",void 0),e&&(this.src=e)}var e;return Ie(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=4;break}return n.next=3,t.e(4).then(t.t.bind(null,554,7)).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a,i,o,s,c,l,d,u,p,f,m,h,v,g,b,T,y,C,w,S,A,R;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(l=r.default,d=!1,u=!1,p=!1,f=!1,m=!1,e.src.customType=(null===(a=e.src)||void 0===a?void 0:a.customType)||{},null!==(i=e.src)&&void 0!==i&&i.type||(null!==(h=e.src)&&void 0!==h&&null!==(v=h.url)&&void 0!==v&&v.toLowerCase().endsWith(".m3u8")?e.src.type="hls":null!==(g=e.src)&&void 0!==g&&null!==(b=g.url)&&void 0!==b&&b.toLowerCase().endsWith(".flv")?e.src.type="flv":null!==(T=e.src)&&void 0!==T&&null!==(y=T.url)&&void 0!==y&&y.toLowerCase().endsWith(".mpd")&&(e.src.type="shakaDash")),null===(o=e.src)||void 0===o||!o.type||"string"!=typeof e.src.type){n.next=27;break}n.t0=e.src.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?12:"flv"===n.t0?15:"dash"===n.t0?18:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?21:"webtorrent"===n.t0?24:27;break;case 12:return e.src.type="smplayerArtplayerHls",d=!0,n.abrupt("break",27);case 15:return e.src.type="smplayerArtplayerFlv",u=!0,n.abrupt("break",27);case 18:return e.src.type="smplayerArtplayerDash",p=!0,n.abrupt("break",27);case 21:return e.src.type="smplayerArtplayerShakaDash",f=!0,n.abrupt("break",27);case 24:return e.src.type="smplayerArtplayerWebtorrent",m=!0,n.abrupt("break",27);case 27:if(null!=(null===(s=e.src)||void 0===s?void 0:s.quality)&&e.src.quality.length>0&&e.src.quality.forEach((function(n){if(null==n.type&&(n.url.toLowerCase().endsWith(".m3u8")?n.type="m3u8":n.url.toLowerCase().endsWith(".flv")?n.type="flv":n.url.toLowerCase().endsWith(".mpd")&&(n.type="shakaDash")),null!=n.type&&"string"==typeof n.type)switch(n.type.toLowerCase()){case"hls":case"m3u8":n.type="smplayerArtplayerHls",d=!0;break;case"flv":n.type="smplayerArtplayerFlv",u=!0;break;case"dash":n.type="smplayerArtplayerDash",p=!0;break;case"shakadash":case"shaka":case"shaka-dash":n.type="smplayerArtplayerShakaDash",f=!0;break;case"webtorrent":n.type="smplayerArtplayerWebtorrent",m=!0}})),d&&Object.assign(null===(C=e.src)||void 0===C?void 0:C.customType,{smplayerArtplayerHls:function(n,e,r){t.e(7).then(t.t.bind(null,547,7)).then((function(t){var a=t.default,i=new a;i.attachMedia(n),i.on(a.Events.MEDIA_ATTACHED,(function(){i.loadSource(e)})),r.on("destroy",(function(){i.destroy()}))}))}}),u&&Object.assign(null===(w=e.src)||void 0===w?void 0:w.customType,{smplayerArtplayerFlv:function(n,e,r){t.e(8).then(t.t.bind(null,548,7)).then((function(t){var a=t.default.createPlayer({type:"flv",url:e});a.attachMediaElement(n),a.load(),r.on("destroy",(function(){a.destroy()}))}))}}),p&&Object.assign(null===(S=e.src)||void 0===S?void 0:S.customType,{smplayerArtplayerDash:function(n,e,r){t.e(5).then(t.t.bind(null,549,7)).then((function(t){var a=t.default.MediaPlayer().create();a.initialize(n,e,!1),r.on("destroy",(function(){a.reset()}))}))}}),f&&Object.assign(null===(A=e.src)||void 0===A?void 0:A.customType,{smplayerArtplayerShakaDash:function(n,e,r){t.e(9).then(t.t.bind(null,550,7)).then((function(t){var a=new t.default.Player(n);a.load(e).then((function(){r.on("destroy",(function(){a.destroy()}))}))}))}}),m&&Object.assign(null===(R=e.src)||void 0===R?void 0:R.customType,{smplayerArtplayerWebtorrent:function(n,e,r){t.e(10).then(t.t.bind(null,551,7)).then((function(t){var a=new(0,t.default);a.add(e,(function(e){e.files.find((function(n){return n.name.endsWith(".mp4")})).renderTo(n),r.on("destroy",(function(){a.destroy()}))}))}))}}),null===(c=e.src)||void 0===c||!c.customInit){n.next=39;break}return n.next=36,e.src.customInit(l,e.src).then((function(n){return e.player=n,e.player}));case 36:n.t1=n.sent,n.next=40;break;case 39:n.t1=new l(e.src);case 40:return e.player=n.t1,n.abrupt("return",e.player);case 42:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 3:return n.abrupt("return",n.sent);case 4:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}(),er=a.default.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return[.5625,0]},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r,a;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.$refs.sbplayer,r=Zt()({},n.on),a=Object(Pt.a)(Object(Pt.a)({},Zt()({url:"",fullscreen:!0,autoSize:!0,setting:!0},n.src)),{},{container:t}),n.player=new nr(a),e.next=6,n.player.InitPlayer();case 6:n.player.AddOnEvent(r),t.style.height=t.scrollWidth*n.height[0]+n.height[1]+"px";case 8:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}});t(214),t(244);function tr(n,e){return(tr=Object.setPrototypeOf||function(n,e){return n.__proto__=e,n})(n,e)}function rr(n,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");n.prototype=Object.create(e&&e.prototype,{constructor:{value:n,writable:!0,configurable:!0}}),Object.defineProperty(n,"prototype",{writable:!1}),e&&tr(n,e)}t(245);function ar(n){return(ar=Object.setPrototypeOf?Object.getPrototypeOf:function(n){return n.__proto__||Object.getPrototypeOf(n)})(n)}var ir=t(122);function or(n,e){if(e&&("object"===Object(ir.a)(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return function(n){if(void 0===n)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return n}(n)}function sr(n){var e=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(n){return!1}}();return function(){var t,r=ar(n);if(e){var a=ar(this).constructor;t=Reflect.construct(r,arguments,a)}else t=r.apply(this,arguments);return or(this,t)}}t(265),t(266);var cr=function(n){rr(a,n);var e,t=sr(a);function a(){return Pe(this,a),t.call(this)}return Ie(a,[{key:"InitMeting",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e,t,a,i,o,s,c=this,l=arguments;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return e=l.length>0&&void 0!==l[0]?l[0]:{},t=l.length>1?l[1]:void 0,a=[],i=e.audio||[],o=e.list||[],(e.id||e.auto)&&(o=[{id:e.id,server:e.server,type:e.type,auth:e.auth,auto:e.auto}].concat(o.map((function(n){return{id:n.id,server:n.server,type:n.type,auth:n.auth,auto:n.auto}})))),o&&o.length>0&&o.map((function(n){if(n.id||n.auto){var t=c.ParseMeting({id:n.id,server:n.server,type:n.type,auth:n.auth,auto:n.auto},e.api);t&&a.push(t)}})),s=a.map(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return n.next=2,fetch(e);case 2:return n.abrupt("return",n.sent.json());case 3:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}()),n.next=10,Promise.all(s).then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(r){var a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return r.map((function(n){i=i.concat(n.map((function(n){return{name:(null==n?void 0:n.name)||(null==n?void 0:n.title)||"Audio name",artist:(null==n?void 0:n.artist)||(null==n?void 0:n.author)||"Audio artist",url:null==n?void 0:n.url,cover:(null==n?void 0:n.cover)||(null==n?void 0:n.pic),lrc:(null==n?void 0:n.lrc)||(null==n?void 0:n.lyric)||"",type:(null==n?void 0:n.type)||"auto"}})))})),a={container:t,audio:i,fixed:e.fixed,mini:e.mini,autoplay:e.autoplay,loop:e.loop,order:e.order,preload:e.preload,volume:e.volume,mutex:e.mutex,lrcType:e.lrcType,listFolded:e.listFolded,listMaxHeight:e.listMaxHeight,storageName:e.storageName},c.src=a,n.abrupt("return",c.InitPlayer());case 4:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 10:return n.abrupt("return",n.sent);case 11:case"end":return n.stop()}}),n)}))),function(){return e.apply(this,arguments)})},{key:"ParseMeting",value:function(n,e){return n&&n.auto&&(n=this.ParseLink(n.auto)),n&&n.server&&n.type&&n.id?e.replace(":server",n.server).replace(":type",n.type).replace(":id",n.id).replace(":auth",n.auth).replace(":r",Math.random().toString()):""}},{key:"ParseLink",value:function(n){for(var e=0,t=[["music.163.com.*song.*id=(\\d+)","netease","song"],["music.163.com.*album.*id=(\\d+)","netease","album"],["music.163.com.*artist.*id=(\\d+)","netease","artist"],["music.163.com.*playlist.*id=(\\d+)","netease","playlist"],["music.163.com.*discover/toplist.*id=(\\d+)","netease","playlist"],["y.qq.com.*song/(\\w+).html","tencent","song"],["y.qq.com.*songDetail/(\\w+)","tencent","song"],["y.qq.com.*album/(\\w+).html","tencent","album"],["y.qq.com.*singer/(\\w+).html","tencent","artist"],["y.qq.com.*playsquare/(\\w+).html","tencent","playlist"],["y.qq.com.*playlist/(\\w+).html","tencent","playlist"],["xiami.com.*song/(\\w+)","xiami","song"],["xiami.com.*album/(\\w+)","xiami","album"],["xiami.com.*artist/(\\w+)","xiami","artist"],["xiami.com.*collect/(\\w+)","xiami","playlist"]];e<t.length;e++){var r=t[e],a=new RegExp(r[0]).exec(n);if(a)return{server:r[1],type:r[2],id:a[1]}}return console.error("无法解析的链接: ".concat(n,"，请检查链接是否书写正确")),{}}}]),a}(Kt),lr=a.default.extend({props:{id:{required:!1,type:String,default:""},server:{required:!1,type:String,default:"tencent"},type:{required:!1,type:String,default:"song"},auto:{required:!1,type:String,default:""},fixed:{required:!1,type:Boolean,default:!1},mini:{required:!1,type:Boolean,default:!1},autoplay:{required:!1,type:Boolean,default:!1},theme:{required:!1,type:String,default:"#2980b9"},loop:{required:!1,type:String,default:"all"},order:{required:!1,type:String,default:"list"},preload:{required:!1,type:String,default:"auto"},volume:{required:!1,type:Number,default:.7},mutex:{required:!1,type:Boolean,default:!0},lrcType:{required:!1,type:Number,default:3},listFolded:{required:!1,type:Boolean,default:!1},listMaxHeight:{required:!1,type:String,default:"340px"},storageName:{required:!1,type:String,default:"vuepress-plugin-smplayer"},api:{required:!1,type:String,default:"https://api.i-meto.com/meting/api?server=:server&type=:type&id=:id&r=:r"},audio:{required:!1,type:Array},list:{required:!1,type:Array}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer"})])},data:function(){return{meting:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=n.$props,n.meting=new cr,e.next=4,n.meting.InitMeting(t,n.$refs.sbplayer);case 4:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.meting)||void 0===n||n.DestroyPlayer()}}),dr=function(){function n(e){Pe(this,n),Object(Ht.a)(this,"src",void 0),Object(Ht.a)(this,"player",void 0),e&&(this.src=e)}var e;return Ie(n,[{key:"InitPlayer",value:(e=Object(r.a)(regeneratorRuntime.mark((function n(){var e,a,i,o,s,c=this;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(!this.src){n.next=24;break}if(null!==(e=this.src)&&void 0!==e&&e.type||"string"!=typeof(null===(a=this.src)||void 0===a?void 0:a.url)||(this.src.url.toLowerCase().endsWith(".m3u8")?this.src.type="hls":this.src.url.toLowerCase().endsWith(".flv")?this.src.type="flv":this.src.url.toLowerCase().endsWith(".mpd")&&(this.src.type="shaka")),s=t.e(1).then(t.t.bind(null,436,7)),null===(i=this.src)||void 0===i||!i.type||"string"!=typeof this.src.type){n.next=20;break}n.t0=this.src.type.toLowerCase(),n.next="hls"===n.t0||"m3u8"===n.t0?7:"flv"===n.t0?9:"dash"===n.t0?11:"shakadash"===n.t0||"shaka"===n.t0||"shaka-dash"===n.t0?13:"music"===n.t0?15:17;break;case 7:return o=Promise.all([Promise.all([t.e(1),t.e(82)]).then(t.t.bind(null,555,7)),s]),n.abrupt("break",18);case 9:return o=Promise.all([Promise.all([t.e(1),t.e(81)]).then(t.t.bind(null,556,7)),s]),n.abrupt("break",18);case 11:return o=Promise.all([Promise.all([t.e(1),t.e(80)]).then(t.t.bind(null,557,7)),s]),n.abrupt("break",18);case 13:return o=Promise.all([Promise.all([t.e(1),t.e(84)]).then(t.t.bind(null,558,7)),s]),n.abrupt("break",18);case 15:return o=Promise.all([Promise.all([t.e(1),t.e(83)]).then(t.t.bind(null,559,7)),s]),n.abrupt("break",18);case 17:o=t.e(1).then(t.t.bind(null,436,7));case 18:n.next=21;break;case 20:o=Promise.all([s]);case 21:return n.next=23,o.then(function(){var n=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,a;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:if(r=Object(Qn.a)(e,1),a=r[0].default,null===(t=c.src)||void 0===t||!t.customInit){n.next=7;break}return n.next=4,c.src.customInit(a,c.src).then((function(n){return n}));case 4:n.t0=n.sent,n.next=8;break;case 7:n.t0=new a(c.src);case 8:return c.player=n.t0,n.abrupt("return",c.player);case 10:case"end":return n.stop()}}),n)})));return function(e){return n.apply(this,arguments)}}());case 23:return n.abrupt("return",n.sent);case 24:case"end":return n.stop()}}),n,this)}))),function(){return e.apply(this,arguments)})},{key:"DestroyPlayer",value:function(){var n;null===(n=this.player)||void 0===n||n.destroy()}},{key:"AddOnEvent",value:function(n){var e=this;n&&this.player&&Object.keys(n).forEach((function(t){e.player.on(t,(function(){return n[t](e.player,e.src)}))}))}}]),n}(),ur=a.default.extend({props:{src:{type:Object,required:!0},on:{type:Object,default:function(){return{}},required:!1},width:{type:String,default:"100%",required:!1},height:{type:Array,default:function(){return{src:{url:"",fluid:!0,fitVideoSize:"auto"},width:"100%",on:{}}.height},required:!1}},render:function(){var n=arguments[0];return n("div",{class:"smplayer"},[n("div",{ref:"sbplayer",style:"width: ".concat(this.width)})])},data:function(){return{player:{}}},mounted:function(){var n=this;return Object(r.a)(regeneratorRuntime.mark((function e(){var t,r;return regeneratorRuntime.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return t=Zt()({},n.on),r=Object(Pt.a)(Object(Pt.a)({},Zt()({url:"",fluid:!0,fitVideoSize:"auto"},n.src)),{},{el:n.$refs.sbplayer}),n.player=new dr(r),e.next=5,n.player.InitPlayer();case 5:n.player.AddOnEvent(t);case 6:case"end":return e.stop()}}),e)})))()},beforeDestroy:function(){var n;null===(n=this.player)||void 0===n||n.DestroyPlayer()}}),pr=function(n){var e=n.Vue;e.component("Bilibili",Gt),e.component("Xigua",Vt),e.component("DPlayer",Jt),e.component("APlayer",Qt),e.component("Artplayer",er),e.component("Meting",lr),e.component("metingJs",lr),e.component("Xgplayer",ur)},fr={name:"ReadingProgress",data:function(){return{readingTop:0,readingHeight:1,progressStyle:null,transform:void 0,running:!1}},watch:{$readingShow:function(){this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)}},mounted:function(){this.transform=this.getTransform(),this.progressStyle=this.getProgressStyle(),this.$readingShow&&window.addEventListener("scroll",this.base)},beforeDestroy:function(){this.$readingShow&&window.removeEventListener("scroll",this.base)},methods:{base:function(){this.running||(this.running=!0,requestAnimationFrame(this.getReadingBase))},getReadingBase:function(){this.readingHeight=this.getReadingHeight()-this.getScreenHeight(),this.readingTop=this.getReadingTop(),this.progressStyle=this.getProgressStyle(),this.running=!1},getReadingHeight:function(){return Math.max(document.body.scrollHeight,document.body.offsetHeight,0)},getScreenHeight:function(){return Math.max(window.innerHeight,document.documentElement.clientHeight,0)},getReadingTop:function(){return Math.max(window.pageYOffset,document.documentElement.scrollTop,0)},getTransform:function(){var n=document.createElement("div");return["transform","-webkit-transform","-moz-transform","-o-transform","-ms-transform"].find((function(e){return e in n.style}))||void 0},getProgressStyle:function(){var n=this.readingTop/this.readingHeight;switch(this.$readingShow){case"top":case"bottom":return this.transform?"".concat(this.transform,": scaleX(").concat(n,")"):"width: ".concat(100*n,"%");case"left":case"right":return this.transform?"".concat(this.transform,": scaleY(").concat(n,")"):"height: ".concat(100*n,"%");default:return null}}}},mr=(t(430),Object(st.a)(fr,(function(){var n=this.$createElement,e=this._self._c||n;return e("ClientOnly",[this.$readingShow?e("div",{staticClass:"reading-progress",class:this.$readingShow},[e("div",{staticClass:"progress",style:this.progressStyle})]):this._e()])}),[],!1,null,"4610f95e",null).exports),hr=[function(n){var e=n.Vue,t=(n.options,n.router);n.siteData,n.isServer,t.options;e.component(ut.default.name,ut.default),e.mixin(vt),e.mixin(mt),e.mixin(bt)},function(n){var e=n.Vue,t=(n.options,n.router,n.siteData);t.pages.map((function(n){var e=n.frontmatter,r=e.date,a=e.author;"string"==typeof r&&"Z"===r.charAt(r.length-1)&&(n.frontmatter.date=function(n){n instanceof Date||(n=new Date(n));return"".concat(n.getUTCFullYear(),"-").concat(St(n.getUTCMonth()+1),"-").concat(St(n.getUTCDate())," ").concat(St(n.getUTCHours()),":").concat(St(n.getUTCMinutes()),":").concat(St(n.getUTCSeconds()))}(r)),a?n.author=a:t.themeConfig.author&&(n.author=t.themeConfig.author)})),e.mixin(wt)},{},function(n){n.Vue.mixin({computed:{$dataBlock:function(){return this.$options.__data__block__}}})},{},{},function(n){n.router;"undefined"!=typeof window&&function(){var n=document.createElement("script"),e=window.location.protocol.split(":")[0];n.src="https"===e?"https://zz.bdstatic.com/linksubmit/push.js":"http://push.zhanzhang.baidu.com/push.js";var t=document.getElementsByTagName("script")[0];t.parentNode.insertBefore(n,t)}()},function(n){var e=n.router;"undefined"!=typeof window&&(window._hmt=window._hmt||[],function(){var n=document.createElement("script");n.src="https://hm.baidu.com/hm.js?7063d9cab573593f52f061c7858ce6bd";var e=document.getElementsByTagName("script")[0];e.parentNode.insertBefore(n,e)}(),e.afterEach((function(n){_hmt.push(["_trackPageview",n.fullPath])})))},function(n){n.Vue.component("Comment",Mt)},{},zt,function(){setTimeout((function(){try{document&&function(){function n(n){var e="";n.preventDefault();var t=Ft.copyrightEnable,r=(e=window.getSelection(0).toString()).length>100,a="".concat(window.location.href),i="".concat("作者：").concat("jonsam","\n").concat("原文：").concat(a,"\n").concat("著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。");r&&(void 0===t||t)&&(e="".concat(e).concat("\n").concat(i));var o=n.clipboardData||window.clipboardData;r?n.preventDefault():o.setData("text",e)}document.addEventListener("cut",(function(e){n(e)})),document.addEventListener("copy",(function(e){n(e)}))}()}catch(n){}}),500)},function(n){n.Vue.mixin({data:function(){return{$io:void 0}},mounted:function(){var n=this,e=document.querySelectorAll("img."+qt);Wt&&"loading"in HTMLImageElement.prototype?e.forEach((function(n){!n.getAttribute("src")&&n.setAttribute("src",n.getAttribute("data-src"))})):(this.setObserver(),e.forEach((function(e){n.$io.observe(e)})))},methods:{setObserver:function(){var n=this;this.$io=new IntersectionObserver((function(e){e.forEach((function(e){if(e.isIntersecting){var t=n.getSrc(e.target);t&&(e.target.src=t),n.$io.unobserve(e.target)}}))}),{rootMargin:$t})},getSrc:function(n){if(n.dataset)return n.dataset.src;var e=n.attributes.find((function(n){return"data-src"===n.nodeName}));return e&&e.nodeValue}}})},pr,function(n){var e=n.Vue;e.component(mr.name,mr),e.mixin({computed:{$readingShow:function(){return this.$page.frontmatter.readingShow}}})}],vr=["Comment","SWUpdatePopup","ReadingProgress","LastReadingPopup","GlobalTip","BlockToggle"];t(90),t(112);var gr=function(n){rr(t,n);var e=sr(t);function t(){return Pe(this,t),e.apply(this,arguments)}return Ie(t)}(function(){function n(){Pe(this,n),this.store=new a.default({data:{state:{}}})}return Ie(n,[{key:"$get",value:function(n){return this.store.state[n]}},{key:"$set",value:function(n,e){a.default.set(this.store.state,n,e)}},{key:"$emit",value:function(){var n;(n=this.store).$emit.apply(n,arguments)}},{key:"$on",value:function(){var n;(n=this.store).$on.apply(n,arguments)}}]),n}());Object.assign(gr.prototype,{getPageAsyncComponent:Jn.d,getLayoutAsyncComponent:Jn.c,getAsyncComponent:Jn.b,getVueComponent:Jn.e});var br={install:function(n){var e=new gr;n.$vuepress=e,n.prototype.$vuepress=e}};t(126);function Tr(n){n.beforeEach((function(e,t,r){if(yr(n,e.path))r();else if(/(\/|\.html)$/.test(e.path))if(/\/$/.test(e.path)){var a=e.path.replace(/\/$/,"")+".html";yr(n,a)?r(a):r()}else r();else{var i=e.path+"/",o=e.path+".html";yr(n,o)?r(o):yr(n,i)?r(i):r()}}))}function yr(n,e){var t=e.toLowerCase();return n.options.routes.some((function(n){return n.path.toLowerCase()===t}))}var Cr={props:{pageKey:String,slotKey:{type:String,default:"default"}},render:function(n){var e=this.pageKey||this.$parent.$page.key;return Object(Jn.h)("pageKey",e),a.default.component(e)||a.default.component(e,Object(Jn.d)(e)),a.default.component(e)?n(e):n("")}},wr={functional:!0,props:{slotKey:String,required:!0},render:function(n,e){var t=e.props,r=e.slots;return n("div",{class:["content__".concat(t.slotKey)]},r()[t.slotKey])}},Sr={computed:{openInNewWindowTitle:function(){return this.$themeLocaleConfig.openNewWindowText||"(opens new window)"}}},Ar=(t(431),t(432),Object(st.a)(Sr,(function(){var n=this.$createElement,e=this._self._c||n;return e("span",[e("svg",{staticClass:"icon outbound",attrs:{xmlns:"http://www.w3.org/2000/svg","aria-hidden":"true",focusable:"false",x:"0px",y:"0px",viewBox:"0 0 100 100",width:"15",height:"15"}},[e("path",{attrs:{fill:"currentColor",d:"M18.8,85.1h56l0,0c2.2,0,4-1.8,4-4v-32h-8v28h-48v-48h28v-8h-32l0,0c-2.2,0-4,1.8-4,4v56C14.8,83.3,16.6,85.1,18.8,85.1z"}}),this._v(" "),e("polygon",{attrs:{fill:"currentColor",points:"45.7,48.7 51.3,54.3 77.2,28.5 77.2,37.2 85.2,37.2 85.2,14.9 62.8,14.9 62.8,22.9 71.5,22.9"}})]),this._v(" "),e("span",{staticClass:"sr-only"},[this._v(this._s(this.openInNewWindowTitle))])])}),[],!1,null,null,null).exports);function Rr(){return(Rr=Object(r.a)(regeneratorRuntime.mark((function n(e){var t,r,i,o;return regeneratorRuntime.wrap((function(n){for(;;)switch(n.prev=n.next){case 0:return t="undefined"!=typeof window&&window.__VUEPRESS_ROUTER_BASE__?window.__VUEPRESS_ROUTER_BASE__:dt.routerBase||dt.base,Tr(r=new Xn({base:t,mode:"history",fallback:!1,routes:lt,scrollBehavior:function(n,e,t){return t||(n.hash?!a.default.$vuepress.$get("disableScrollBehavior")&&{selector:decodeURIComponent(n.hash)}:{x:0,y:0})}})),i={},n.prev=4,n.next=7,Promise.all(hr.filter((function(n){return"function"==typeof n})).map((function(n){return n({Vue:a.default,options:i,router:r,siteData:dt,isServer:e})})));case 7:n.next=12;break;case 9:n.prev=9,n.t0=n.catch(4),console.error(n.t0);case 12:return o=new a.default(Object.assign(i,{router:r,render:function(n){return n("div",{attrs:{id:"app"}},[n("RouterView",{ref:"layout"}),n("div",{class:"global-ui"},vr.map((function(e){return n(e)})))])}})),n.abrupt("return",{app:o,router:r});case 14:case"end":return n.stop()}}),n,null,[[4,9]])})))).apply(this,arguments)}a.default.config.productionTip=!1,a.default.use(Xn),a.default.use(br),a.default.mixin(function(n,e){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a.default;Zn(e),t.$vuepress.$set("siteData",e);var r=n(t.$vuepress.$get("siteData")),i=new r,o=Object.getOwnPropertyDescriptors(Object.getPrototypeOf(i)),s={};return Object.keys(o).reduce((function(n,e){return e.startsWith("$")&&(n[e]=o[e].get),n}),s),{computed:s}}((function(n){return function(){function e(){Pe(this,e)}return Ie(e,[{key:"setPage",value:function(n){this.__page=n}},{key:"$site",get:function(){return n}},{key:"$themeConfig",get:function(){return this.$site.themeConfig}},{key:"$frontmatter",get:function(){return this.$page.frontmatter}},{key:"$localeConfig",get:function(){var n,e,t=this.$site.locales,r=void 0===t?{}:t;for(var a in r)"/"===a?e=r[a]:0===this.$page.path.indexOf(a)&&(n=r[a]);return n||e||{}}},{key:"$siteTitle",get:function(){return this.$localeConfig.title||this.$site.title||""}},{key:"$canonicalUrl",get:function(){var n=this.$page.frontmatter.canonicalUrl;return"string"==typeof n&&n}},{key:"$title",get:function(){var n=this.$page,e=this.$page.frontmatter.metaTitle;if("string"==typeof e)return e;var t=this.$siteTitle,r=n.frontmatter.home?null:n.frontmatter.title||n.title;return t?r?r+" | "+t:t:r||"VuePress"}},{key:"$description",get:function(){var n=function(n){if(n){var e=n.filter((function(n){return"description"===n.name}))[0];if(e)return e.content}}(this.$page.frontmatter.meta);return n||(this.$page.frontmatter.description||this.$localeConfig.description||this.$site.description||"")}},{key:"$lang",get:function(){return this.$page.frontmatter.lang||this.$localeConfig.lang||"en-US"}},{key:"$localePath",get:function(){return this.$localeConfig.path||"/"}},{key:"$themeLocaleConfig",get:function(){return(this.$site.themeConfig.locales||{})[this.$localePath]||{}}},{key:"$page",get:function(){return this.__page?this.__page:function(n,e){for(var t=0;t<n.length;t++){var r=n[t];if(r.path.toLowerCase()===e.toLowerCase())return r}return{path:"",frontmatter:{}}}(this.$site.pages,this.$route.path)}}]),e}()}),dt)),a.default.component("Content",Cr),a.default.component("ContentSlotsDistributor",wr),a.default.component("OutboundLink",Ar),a.default.component("ClientOnly",{functional:!0,render:function(n,e){var t=e.parent,r=e.children;if(t._isMounted)return r;t.$once("hook:mounted",(function(){t.$forceUpdate()}))}}),a.default.component("Layout",Object(Jn.c)("Layout")),a.default.component("NotFound",Object(Jn.c)("NotFound")),a.default.prototype.$withBase=function(n){var e=this.$site.base;return"/"===n.charAt(0)?e+n.slice(1):n},window.__VUEPRESS__={version:"1.9.7",hash:"a7c8283"},function(n){return Rr.apply(this,arguments)}(!1).then((function(n){var e=n.app;n.router.onReady((function(){e.$mount("#app")}))}))}]);